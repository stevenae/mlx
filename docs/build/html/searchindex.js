Search.setIndex({"docnames": ["cpp/ops", "dev/extensions", "dev/metal_debugger", "examples/linear_regression", "examples/llama-inference", "examples/mlp", "index", "install", "python/_autosummary/mlx.core.Device", "python/_autosummary/mlx.core.Dtype", "python/_autosummary/mlx.core.DtypeCategory", "python/_autosummary/mlx.core.abs", "python/_autosummary/mlx.core.add", "python/_autosummary/mlx.core.addmm", "python/_autosummary/mlx.core.all", "python/_autosummary/mlx.core.allclose", "python/_autosummary/mlx.core.any", "python/_autosummary/mlx.core.arange", "python/_autosummary/mlx.core.arccos", "python/_autosummary/mlx.core.arccosh", "python/_autosummary/mlx.core.arcsin", "python/_autosummary/mlx.core.arcsinh", "python/_autosummary/mlx.core.arctan", "python/_autosummary/mlx.core.arctan2", "python/_autosummary/mlx.core.arctanh", "python/_autosummary/mlx.core.argmax", "python/_autosummary/mlx.core.argmin", "python/_autosummary/mlx.core.argpartition", "python/_autosummary/mlx.core.argsort", "python/_autosummary/mlx.core.array", "python/_autosummary/mlx.core.array.T", "python/_autosummary/mlx.core.array.abs", "python/_autosummary/mlx.core.array.all", "python/_autosummary/mlx.core.array.any", "python/_autosummary/mlx.core.array.argmax", "python/_autosummary/mlx.core.array.argmin", "python/_autosummary/mlx.core.array.astype", "python/_autosummary/mlx.core.array.at", "python/_autosummary/mlx.core.array.cos", "python/_autosummary/mlx.core.array.cummax", "python/_autosummary/mlx.core.array.cummin", "python/_autosummary/mlx.core.array.cumprod", "python/_autosummary/mlx.core.array.cumsum", "python/_autosummary/mlx.core.array.diag", "python/_autosummary/mlx.core.array.diagonal", "python/_autosummary/mlx.core.array.dtype", "python/_autosummary/mlx.core.array.exp", "python/_autosummary/mlx.core.array.flatten", "python/_autosummary/mlx.core.array.item", "python/_autosummary/mlx.core.array.itemsize", "python/_autosummary/mlx.core.array.log", "python/_autosummary/mlx.core.array.log10", "python/_autosummary/mlx.core.array.log1p", "python/_autosummary/mlx.core.array.log2", "python/_autosummary/mlx.core.array.logsumexp", "python/_autosummary/mlx.core.array.max", "python/_autosummary/mlx.core.array.mean", "python/_autosummary/mlx.core.array.min", "python/_autosummary/mlx.core.array.moveaxis", "python/_autosummary/mlx.core.array.nbytes", "python/_autosummary/mlx.core.array.ndim", "python/_autosummary/mlx.core.array.prod", "python/_autosummary/mlx.core.array.reciprocal", "python/_autosummary/mlx.core.array.reshape", "python/_autosummary/mlx.core.array.round", "python/_autosummary/mlx.core.array.rsqrt", "python/_autosummary/mlx.core.array.shape", "python/_autosummary/mlx.core.array.sin", "python/_autosummary/mlx.core.array.size", "python/_autosummary/mlx.core.array.split", "python/_autosummary/mlx.core.array.sqrt", "python/_autosummary/mlx.core.array.square", "python/_autosummary/mlx.core.array.squeeze", "python/_autosummary/mlx.core.array.sum", "python/_autosummary/mlx.core.array.swapaxes", "python/_autosummary/mlx.core.array.tolist", "python/_autosummary/mlx.core.array.transpose", "python/_autosummary/mlx.core.array.var", "python/_autosummary/mlx.core.array_equal", "python/_autosummary/mlx.core.as_strided", "python/_autosummary/mlx.core.atleast_1d", "python/_autosummary/mlx.core.atleast_2d", "python/_autosummary/mlx.core.atleast_3d", "python/_autosummary/mlx.core.bitwise_and", "python/_autosummary/mlx.core.bitwise_or", "python/_autosummary/mlx.core.bitwise_xor", "python/_autosummary/mlx.core.block_masked_mm", "python/_autosummary/mlx.core.block_sparse_mm", "python/_autosummary/mlx.core.broadcast_to", "python/_autosummary/mlx.core.ceil", "python/_autosummary/mlx.core.clip", "python/_autosummary/mlx.core.compile", "python/_autosummary/mlx.core.concatenate", "python/_autosummary/mlx.core.conj", "python/_autosummary/mlx.core.conjugate", "python/_autosummary/mlx.core.conv1d", "python/_autosummary/mlx.core.conv2d", "python/_autosummary/mlx.core.conv_general", "python/_autosummary/mlx.core.convolve", "python/_autosummary/mlx.core.cos", "python/_autosummary/mlx.core.cosh", "python/_autosummary/mlx.core.cummax", "python/_autosummary/mlx.core.cummin", "python/_autosummary/mlx.core.cumprod", "python/_autosummary/mlx.core.cumsum", "python/_autosummary/mlx.core.default_device", "python/_autosummary/mlx.core.default_stream", "python/_autosummary/mlx.core.degrees", "python/_autosummary/mlx.core.dequantize", "python/_autosummary/mlx.core.diag", "python/_autosummary/mlx.core.diagonal", "python/_autosummary/mlx.core.disable_compile", "python/_autosummary/mlx.core.divide", "python/_autosummary/mlx.core.divmod", "python/_autosummary/mlx.core.enable_compile", "python/_autosummary/mlx.core.equal", "python/_autosummary/mlx.core.erf", "python/_autosummary/mlx.core.erfinv", "python/_autosummary/mlx.core.eval", "python/_autosummary/mlx.core.exp", "python/_autosummary/mlx.core.expand_dims", "python/_autosummary/mlx.core.expm1", "python/_autosummary/mlx.core.eye", "python/_autosummary/mlx.core.fast.layer_norm", "python/_autosummary/mlx.core.fast.rms_norm", "python/_autosummary/mlx.core.fast.rope", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention", "python/_autosummary/mlx.core.fft.fft", "python/_autosummary/mlx.core.fft.fft2", "python/_autosummary/mlx.core.fft.fftn", "python/_autosummary/mlx.core.fft.ifft", "python/_autosummary/mlx.core.fft.ifft2", "python/_autosummary/mlx.core.fft.ifftn", "python/_autosummary/mlx.core.fft.irfft", "python/_autosummary/mlx.core.fft.irfft2", "python/_autosummary/mlx.core.fft.irfftn", "python/_autosummary/mlx.core.fft.rfft", "python/_autosummary/mlx.core.fft.rfft2", "python/_autosummary/mlx.core.fft.rfftn", "python/_autosummary/mlx.core.flatten", "python/_autosummary/mlx.core.floor", "python/_autosummary/mlx.core.floor_divide", "python/_autosummary/mlx.core.full", "python/_autosummary/mlx.core.grad", "python/_autosummary/mlx.core.greater", "python/_autosummary/mlx.core.greater_equal", "python/_autosummary/mlx.core.identity", "python/_autosummary/mlx.core.inner", "python/_autosummary/mlx.core.isclose", "python/_autosummary/mlx.core.isinf", "python/_autosummary/mlx.core.isnan", "python/_autosummary/mlx.core.isneginf", "python/_autosummary/mlx.core.isposinf", "python/_autosummary/mlx.core.issubdtype", "python/_autosummary/mlx.core.jvp", "python/_autosummary/mlx.core.left_shift", "python/_autosummary/mlx.core.less", "python/_autosummary/mlx.core.less_equal", "python/_autosummary/mlx.core.linalg.cholesky", "python/_autosummary/mlx.core.linalg.inv", "python/_autosummary/mlx.core.linalg.norm", "python/_autosummary/mlx.core.linalg.qr", "python/_autosummary/mlx.core.linalg.svd", "python/_autosummary/mlx.core.linspace", "python/_autosummary/mlx.core.load", "python/_autosummary/mlx.core.log", "python/_autosummary/mlx.core.log10", "python/_autosummary/mlx.core.log1p", "python/_autosummary/mlx.core.log2", "python/_autosummary/mlx.core.logaddexp", "python/_autosummary/mlx.core.logical_and", "python/_autosummary/mlx.core.logical_not", "python/_autosummary/mlx.core.logical_or", "python/_autosummary/mlx.core.logsumexp", "python/_autosummary/mlx.core.matmul", "python/_autosummary/mlx.core.max", "python/_autosummary/mlx.core.maximum", "python/_autosummary/mlx.core.mean", "python/_autosummary/mlx.core.meshgrid", "python/_autosummary/mlx.core.metal.clear_cache", "python/_autosummary/mlx.core.metal.device_info", "python/_autosummary/mlx.core.metal.get_active_memory", "python/_autosummary/mlx.core.metal.get_cache_memory", "python/_autosummary/mlx.core.metal.get_peak_memory", "python/_autosummary/mlx.core.metal.is_available", "python/_autosummary/mlx.core.metal.reset_peak_memory", "python/_autosummary/mlx.core.metal.set_cache_limit", "python/_autosummary/mlx.core.metal.set_memory_limit", "python/_autosummary/mlx.core.metal.start_capture", "python/_autosummary/mlx.core.metal.stop_capture", "python/_autosummary/mlx.core.min", "python/_autosummary/mlx.core.minimum", "python/_autosummary/mlx.core.moveaxis", "python/_autosummary/mlx.core.multiply", "python/_autosummary/mlx.core.negative", "python/_autosummary/mlx.core.new_stream", "python/_autosummary/mlx.core.not_equal", "python/_autosummary/mlx.core.ones", "python/_autosummary/mlx.core.ones_like", "python/_autosummary/mlx.core.outer", "python/_autosummary/mlx.core.pad", "python/_autosummary/mlx.core.partition", "python/_autosummary/mlx.core.power", "python/_autosummary/mlx.core.prod", "python/_autosummary/mlx.core.quantize", "python/_autosummary/mlx.core.quantized_matmul", "python/_autosummary/mlx.core.radians", "python/_autosummary/mlx.core.random.bernoulli", "python/_autosummary/mlx.core.random.categorical", "python/_autosummary/mlx.core.random.gumbel", "python/_autosummary/mlx.core.random.key", "python/_autosummary/mlx.core.random.multivariate_normal", "python/_autosummary/mlx.core.random.normal", "python/_autosummary/mlx.core.random.randint", "python/_autosummary/mlx.core.random.seed", "python/_autosummary/mlx.core.random.split", "python/_autosummary/mlx.core.random.truncated_normal", "python/_autosummary/mlx.core.random.uniform", "python/_autosummary/mlx.core.reciprocal", "python/_autosummary/mlx.core.remainder", "python/_autosummary/mlx.core.repeat", "python/_autosummary/mlx.core.reshape", "python/_autosummary/mlx.core.right_shift", "python/_autosummary/mlx.core.round", "python/_autosummary/mlx.core.rsqrt", "python/_autosummary/mlx.core.save", "python/_autosummary/mlx.core.save_gguf", "python/_autosummary/mlx.core.save_safetensors", "python/_autosummary/mlx.core.savez", "python/_autosummary/mlx.core.savez_compressed", "python/_autosummary/mlx.core.set_default_device", "python/_autosummary/mlx.core.set_default_stream", "python/_autosummary/mlx.core.sigmoid", "python/_autosummary/mlx.core.sign", "python/_autosummary/mlx.core.sin", "python/_autosummary/mlx.core.sinh", "python/_autosummary/mlx.core.softmax", "python/_autosummary/mlx.core.sort", "python/_autosummary/mlx.core.split", "python/_autosummary/mlx.core.sqrt", "python/_autosummary/mlx.core.square", "python/_autosummary/mlx.core.squeeze", "python/_autosummary/mlx.core.stack", "python/_autosummary/mlx.core.std", "python/_autosummary/mlx.core.stop_gradient", "python/_autosummary/mlx.core.stream", "python/_autosummary/mlx.core.subtract", "python/_autosummary/mlx.core.sum", "python/_autosummary/mlx.core.swapaxes", "python/_autosummary/mlx.core.synchronize", "python/_autosummary/mlx.core.take", "python/_autosummary/mlx.core.take_along_axis", "python/_autosummary/mlx.core.tan", "python/_autosummary/mlx.core.tanh", "python/_autosummary/mlx.core.tensordot", "python/_autosummary/mlx.core.tile", "python/_autosummary/mlx.core.topk", "python/_autosummary/mlx.core.transpose", "python/_autosummary/mlx.core.tri", "python/_autosummary/mlx.core.tril", "python/_autosummary/mlx.core.triu", "python/_autosummary/mlx.core.value_and_grad", "python/_autosummary/mlx.core.var", "python/_autosummary/mlx.core.vjp", "python/_autosummary/mlx.core.vmap", "python/_autosummary/mlx.core.where", "python/_autosummary/mlx.core.zeros", "python/_autosummary/mlx.core.zeros_like", "python/_autosummary/mlx.nn.quantize", "python/_autosummary/mlx.nn.value_and_grad", "python/_autosummary/mlx.optimizers.clip_grad_norm", "python/_autosummary/mlx.utils.tree_flatten", "python/_autosummary/mlx.utils.tree_map", "python/_autosummary/mlx.utils.tree_map_with_path", "python/_autosummary/mlx.utils.tree_reduce", "python/_autosummary/mlx.utils.tree_unflatten", "python/_autosummary/stream_class", "python/array", "python/data_types", "python/devices_and_streams", "python/fast", "python/fft", "python/linalg", "python/metal", "python/nn", "python/nn/_autosummary/mlx.nn.ALiBi", "python/nn/_autosummary/mlx.nn.AvgPool1d", "python/nn/_autosummary/mlx.nn.AvgPool2d", "python/nn/_autosummary/mlx.nn.BatchNorm", "python/nn/_autosummary/mlx.nn.Conv1d", "python/nn/_autosummary/mlx.nn.Conv2d", "python/nn/_autosummary/mlx.nn.Conv3d", "python/nn/_autosummary/mlx.nn.Dropout", "python/nn/_autosummary/mlx.nn.Dropout2d", "python/nn/_autosummary/mlx.nn.Dropout3d", "python/nn/_autosummary/mlx.nn.Embedding", "python/nn/_autosummary/mlx.nn.GELU", "python/nn/_autosummary/mlx.nn.GRU", "python/nn/_autosummary/mlx.nn.GroupNorm", "python/nn/_autosummary/mlx.nn.InstanceNorm", "python/nn/_autosummary/mlx.nn.LSTM", "python/nn/_autosummary/mlx.nn.LayerNorm", "python/nn/_autosummary/mlx.nn.Linear", "python/nn/_autosummary/mlx.nn.MaxPool1d", "python/nn/_autosummary/mlx.nn.MaxPool2d", "python/nn/_autosummary/mlx.nn.Mish", "python/nn/_autosummary/mlx.nn.Module.apply", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules", "python/nn/_autosummary/mlx.nn.Module.children", "python/nn/_autosummary/mlx.nn.Module.eval", "python/nn/_autosummary/mlx.nn.Module.filter_and_map", "python/nn/_autosummary/mlx.nn.Module.freeze", "python/nn/_autosummary/mlx.nn.Module.leaf_modules", "python/nn/_autosummary/mlx.nn.Module.load_weights", "python/nn/_autosummary/mlx.nn.Module.modules", "python/nn/_autosummary/mlx.nn.Module.named_modules", "python/nn/_autosummary/mlx.nn.Module.parameters", "python/nn/_autosummary/mlx.nn.Module.save_weights", "python/nn/_autosummary/mlx.nn.Module.set_dtype", "python/nn/_autosummary/mlx.nn.Module.state", "python/nn/_autosummary/mlx.nn.Module.train", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters", "python/nn/_autosummary/mlx.nn.Module.training", "python/nn/_autosummary/mlx.nn.Module.unfreeze", "python/nn/_autosummary/mlx.nn.Module.update", "python/nn/_autosummary/mlx.nn.Module.update_modules", "python/nn/_autosummary/mlx.nn.MultiHeadAttention", "python/nn/_autosummary/mlx.nn.PReLU", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding", "python/nn/_autosummary/mlx.nn.QuantizedLinear", "python/nn/_autosummary/mlx.nn.RMSNorm", "python/nn/_autosummary/mlx.nn.RNN", "python/nn/_autosummary/mlx.nn.ReLU", "python/nn/_autosummary/mlx.nn.RoPE", "python/nn/_autosummary/mlx.nn.SELU", "python/nn/_autosummary/mlx.nn.Sequential", "python/nn/_autosummary/mlx.nn.SiLU", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding", "python/nn/_autosummary/mlx.nn.Softshrink", "python/nn/_autosummary/mlx.nn.Step", "python/nn/_autosummary/mlx.nn.Transformer", "python/nn/_autosummary/mlx.nn.Upsample", "python/nn/_autosummary/mlx.nn.init.constant", "python/nn/_autosummary/mlx.nn.init.glorot_normal", "python/nn/_autosummary/mlx.nn.init.glorot_uniform", "python/nn/_autosummary/mlx.nn.init.he_normal", "python/nn/_autosummary/mlx.nn.init.he_uniform", "python/nn/_autosummary/mlx.nn.init.identity", "python/nn/_autosummary/mlx.nn.init.normal", "python/nn/_autosummary/mlx.nn.init.uniform", "python/nn/_autosummary_functions/mlx.nn.elu", "python/nn/_autosummary_functions/mlx.nn.gelu", "python/nn/_autosummary_functions/mlx.nn.gelu_approx", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx", "python/nn/_autosummary_functions/mlx.nn.glu", "python/nn/_autosummary_functions/mlx.nn.hardswish", "python/nn/_autosummary_functions/mlx.nn.leaky_relu", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid", "python/nn/_autosummary_functions/mlx.nn.log_softmax", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss", "python/nn/_autosummary_functions/mlx.nn.mish", "python/nn/_autosummary_functions/mlx.nn.prelu", "python/nn/_autosummary_functions/mlx.nn.relu", "python/nn/_autosummary_functions/mlx.nn.relu6", "python/nn/_autosummary_functions/mlx.nn.selu", "python/nn/_autosummary_functions/mlx.nn.sigmoid", "python/nn/_autosummary_functions/mlx.nn.silu", "python/nn/_autosummary_functions/mlx.nn.softmax", "python/nn/_autosummary_functions/mlx.nn.softplus", "python/nn/_autosummary_functions/mlx.nn.softshrink", "python/nn/_autosummary_functions/mlx.nn.step", "python/nn/_autosummary_functions/mlx.nn.tanh", "python/nn/functions", "python/nn/init", "python/nn/layers", "python/nn/losses", "python/nn/module", "python/ops", "python/optimizers", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta", "python/optimizers/_autosummary/mlx.optimizers.Adafactor", "python/optimizers/_autosummary/mlx.optimizers.Adagrad", "python/optimizers/_autosummary/mlx.optimizers.Adam", "python/optimizers/_autosummary/mlx.optimizers.AdamW", "python/optimizers/_autosummary/mlx.optimizers.Adamax", "python/optimizers/_autosummary/mlx.optimizers.Lion", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update", "python/optimizers/_autosummary/mlx.optimizers.RMSprop", "python/optimizers/_autosummary/mlx.optimizers.SGD", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay", "python/optimizers/_autosummary/mlx.optimizers.join_schedules", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule", "python/optimizers/_autosummary/mlx.optimizers.step_decay", "python/optimizers/common_optimizers", "python/optimizers/optimizer", "python/optimizers/schedulers", "python/random", "python/transforms", "python/tree_utils", "usage/compile", "usage/function_transforms", "usage/indexing", "usage/lazy_evaluation", "usage/numpy", "usage/quick_start", "usage/saving_and_loading", "usage/unified_memory", "usage/using_streams"], "filenames": ["cpp/ops.rst", "dev/extensions.rst", "dev/metal_debugger.rst", "examples/linear_regression.rst", "examples/llama-inference.rst", "examples/mlp.rst", "index.rst", "install.rst", "python/_autosummary/mlx.core.Device.rst", "python/_autosummary/mlx.core.Dtype.rst", "python/_autosummary/mlx.core.DtypeCategory.rst", "python/_autosummary/mlx.core.abs.rst", "python/_autosummary/mlx.core.add.rst", "python/_autosummary/mlx.core.addmm.rst", "python/_autosummary/mlx.core.all.rst", "python/_autosummary/mlx.core.allclose.rst", "python/_autosummary/mlx.core.any.rst", "python/_autosummary/mlx.core.arange.rst", "python/_autosummary/mlx.core.arccos.rst", "python/_autosummary/mlx.core.arccosh.rst", "python/_autosummary/mlx.core.arcsin.rst", "python/_autosummary/mlx.core.arcsinh.rst", "python/_autosummary/mlx.core.arctan.rst", "python/_autosummary/mlx.core.arctan2.rst", "python/_autosummary/mlx.core.arctanh.rst", "python/_autosummary/mlx.core.argmax.rst", "python/_autosummary/mlx.core.argmin.rst", "python/_autosummary/mlx.core.argpartition.rst", "python/_autosummary/mlx.core.argsort.rst", "python/_autosummary/mlx.core.array.rst", "python/_autosummary/mlx.core.array.T.rst", "python/_autosummary/mlx.core.array.abs.rst", "python/_autosummary/mlx.core.array.all.rst", "python/_autosummary/mlx.core.array.any.rst", "python/_autosummary/mlx.core.array.argmax.rst", "python/_autosummary/mlx.core.array.argmin.rst", "python/_autosummary/mlx.core.array.astype.rst", "python/_autosummary/mlx.core.array.at.rst", "python/_autosummary/mlx.core.array.cos.rst", "python/_autosummary/mlx.core.array.cummax.rst", "python/_autosummary/mlx.core.array.cummin.rst", "python/_autosummary/mlx.core.array.cumprod.rst", "python/_autosummary/mlx.core.array.cumsum.rst", "python/_autosummary/mlx.core.array.diag.rst", "python/_autosummary/mlx.core.array.diagonal.rst", "python/_autosummary/mlx.core.array.dtype.rst", "python/_autosummary/mlx.core.array.exp.rst", "python/_autosummary/mlx.core.array.flatten.rst", "python/_autosummary/mlx.core.array.item.rst", "python/_autosummary/mlx.core.array.itemsize.rst", "python/_autosummary/mlx.core.array.log.rst", "python/_autosummary/mlx.core.array.log10.rst", "python/_autosummary/mlx.core.array.log1p.rst", "python/_autosummary/mlx.core.array.log2.rst", "python/_autosummary/mlx.core.array.logsumexp.rst", "python/_autosummary/mlx.core.array.max.rst", "python/_autosummary/mlx.core.array.mean.rst", "python/_autosummary/mlx.core.array.min.rst", "python/_autosummary/mlx.core.array.moveaxis.rst", "python/_autosummary/mlx.core.array.nbytes.rst", "python/_autosummary/mlx.core.array.ndim.rst", "python/_autosummary/mlx.core.array.prod.rst", "python/_autosummary/mlx.core.array.reciprocal.rst", "python/_autosummary/mlx.core.array.reshape.rst", "python/_autosummary/mlx.core.array.round.rst", "python/_autosummary/mlx.core.array.rsqrt.rst", "python/_autosummary/mlx.core.array.shape.rst", "python/_autosummary/mlx.core.array.sin.rst", "python/_autosummary/mlx.core.array.size.rst", "python/_autosummary/mlx.core.array.split.rst", "python/_autosummary/mlx.core.array.sqrt.rst", "python/_autosummary/mlx.core.array.square.rst", "python/_autosummary/mlx.core.array.squeeze.rst", "python/_autosummary/mlx.core.array.sum.rst", "python/_autosummary/mlx.core.array.swapaxes.rst", "python/_autosummary/mlx.core.array.tolist.rst", "python/_autosummary/mlx.core.array.transpose.rst", "python/_autosummary/mlx.core.array.var.rst", "python/_autosummary/mlx.core.array_equal.rst", "python/_autosummary/mlx.core.as_strided.rst", "python/_autosummary/mlx.core.atleast_1d.rst", "python/_autosummary/mlx.core.atleast_2d.rst", "python/_autosummary/mlx.core.atleast_3d.rst", "python/_autosummary/mlx.core.bitwise_and.rst", "python/_autosummary/mlx.core.bitwise_or.rst", "python/_autosummary/mlx.core.bitwise_xor.rst", "python/_autosummary/mlx.core.block_masked_mm.rst", "python/_autosummary/mlx.core.block_sparse_mm.rst", "python/_autosummary/mlx.core.broadcast_to.rst", "python/_autosummary/mlx.core.ceil.rst", "python/_autosummary/mlx.core.clip.rst", "python/_autosummary/mlx.core.compile.rst", "python/_autosummary/mlx.core.concatenate.rst", "python/_autosummary/mlx.core.conj.rst", "python/_autosummary/mlx.core.conjugate.rst", "python/_autosummary/mlx.core.conv1d.rst", "python/_autosummary/mlx.core.conv2d.rst", "python/_autosummary/mlx.core.conv_general.rst", "python/_autosummary/mlx.core.convolve.rst", "python/_autosummary/mlx.core.cos.rst", "python/_autosummary/mlx.core.cosh.rst", "python/_autosummary/mlx.core.cummax.rst", "python/_autosummary/mlx.core.cummin.rst", "python/_autosummary/mlx.core.cumprod.rst", "python/_autosummary/mlx.core.cumsum.rst", "python/_autosummary/mlx.core.default_device.rst", "python/_autosummary/mlx.core.default_stream.rst", "python/_autosummary/mlx.core.degrees.rst", "python/_autosummary/mlx.core.dequantize.rst", "python/_autosummary/mlx.core.diag.rst", "python/_autosummary/mlx.core.diagonal.rst", "python/_autosummary/mlx.core.disable_compile.rst", "python/_autosummary/mlx.core.divide.rst", "python/_autosummary/mlx.core.divmod.rst", "python/_autosummary/mlx.core.enable_compile.rst", "python/_autosummary/mlx.core.equal.rst", "python/_autosummary/mlx.core.erf.rst", "python/_autosummary/mlx.core.erfinv.rst", "python/_autosummary/mlx.core.eval.rst", "python/_autosummary/mlx.core.exp.rst", "python/_autosummary/mlx.core.expand_dims.rst", "python/_autosummary/mlx.core.expm1.rst", "python/_autosummary/mlx.core.eye.rst", "python/_autosummary/mlx.core.fast.layer_norm.rst", "python/_autosummary/mlx.core.fast.rms_norm.rst", "python/_autosummary/mlx.core.fast.rope.rst", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention.rst", "python/_autosummary/mlx.core.fft.fft.rst", "python/_autosummary/mlx.core.fft.fft2.rst", "python/_autosummary/mlx.core.fft.fftn.rst", "python/_autosummary/mlx.core.fft.ifft.rst", "python/_autosummary/mlx.core.fft.ifft2.rst", "python/_autosummary/mlx.core.fft.ifftn.rst", "python/_autosummary/mlx.core.fft.irfft.rst", "python/_autosummary/mlx.core.fft.irfft2.rst", "python/_autosummary/mlx.core.fft.irfftn.rst", "python/_autosummary/mlx.core.fft.rfft.rst", "python/_autosummary/mlx.core.fft.rfft2.rst", "python/_autosummary/mlx.core.fft.rfftn.rst", "python/_autosummary/mlx.core.flatten.rst", "python/_autosummary/mlx.core.floor.rst", "python/_autosummary/mlx.core.floor_divide.rst", "python/_autosummary/mlx.core.full.rst", "python/_autosummary/mlx.core.grad.rst", "python/_autosummary/mlx.core.greater.rst", "python/_autosummary/mlx.core.greater_equal.rst", "python/_autosummary/mlx.core.identity.rst", "python/_autosummary/mlx.core.inner.rst", "python/_autosummary/mlx.core.isclose.rst", "python/_autosummary/mlx.core.isinf.rst", "python/_autosummary/mlx.core.isnan.rst", "python/_autosummary/mlx.core.isneginf.rst", "python/_autosummary/mlx.core.isposinf.rst", "python/_autosummary/mlx.core.issubdtype.rst", "python/_autosummary/mlx.core.jvp.rst", "python/_autosummary/mlx.core.left_shift.rst", "python/_autosummary/mlx.core.less.rst", "python/_autosummary/mlx.core.less_equal.rst", "python/_autosummary/mlx.core.linalg.cholesky.rst", "python/_autosummary/mlx.core.linalg.inv.rst", "python/_autosummary/mlx.core.linalg.norm.rst", "python/_autosummary/mlx.core.linalg.qr.rst", "python/_autosummary/mlx.core.linalg.svd.rst", "python/_autosummary/mlx.core.linspace.rst", "python/_autosummary/mlx.core.load.rst", "python/_autosummary/mlx.core.log.rst", "python/_autosummary/mlx.core.log10.rst", "python/_autosummary/mlx.core.log1p.rst", "python/_autosummary/mlx.core.log2.rst", "python/_autosummary/mlx.core.logaddexp.rst", "python/_autosummary/mlx.core.logical_and.rst", "python/_autosummary/mlx.core.logical_not.rst", "python/_autosummary/mlx.core.logical_or.rst", "python/_autosummary/mlx.core.logsumexp.rst", "python/_autosummary/mlx.core.matmul.rst", "python/_autosummary/mlx.core.max.rst", "python/_autosummary/mlx.core.maximum.rst", "python/_autosummary/mlx.core.mean.rst", "python/_autosummary/mlx.core.meshgrid.rst", "python/_autosummary/mlx.core.metal.clear_cache.rst", "python/_autosummary/mlx.core.metal.device_info.rst", "python/_autosummary/mlx.core.metal.get_active_memory.rst", "python/_autosummary/mlx.core.metal.get_cache_memory.rst", "python/_autosummary/mlx.core.metal.get_peak_memory.rst", "python/_autosummary/mlx.core.metal.is_available.rst", "python/_autosummary/mlx.core.metal.reset_peak_memory.rst", "python/_autosummary/mlx.core.metal.set_cache_limit.rst", "python/_autosummary/mlx.core.metal.set_memory_limit.rst", "python/_autosummary/mlx.core.metal.start_capture.rst", "python/_autosummary/mlx.core.metal.stop_capture.rst", "python/_autosummary/mlx.core.min.rst", "python/_autosummary/mlx.core.minimum.rst", "python/_autosummary/mlx.core.moveaxis.rst", "python/_autosummary/mlx.core.multiply.rst", "python/_autosummary/mlx.core.negative.rst", "python/_autosummary/mlx.core.new_stream.rst", "python/_autosummary/mlx.core.not_equal.rst", "python/_autosummary/mlx.core.ones.rst", "python/_autosummary/mlx.core.ones_like.rst", "python/_autosummary/mlx.core.outer.rst", "python/_autosummary/mlx.core.pad.rst", "python/_autosummary/mlx.core.partition.rst", "python/_autosummary/mlx.core.power.rst", "python/_autosummary/mlx.core.prod.rst", "python/_autosummary/mlx.core.quantize.rst", "python/_autosummary/mlx.core.quantized_matmul.rst", "python/_autosummary/mlx.core.radians.rst", "python/_autosummary/mlx.core.random.bernoulli.rst", "python/_autosummary/mlx.core.random.categorical.rst", "python/_autosummary/mlx.core.random.gumbel.rst", "python/_autosummary/mlx.core.random.key.rst", "python/_autosummary/mlx.core.random.multivariate_normal.rst", "python/_autosummary/mlx.core.random.normal.rst", "python/_autosummary/mlx.core.random.randint.rst", "python/_autosummary/mlx.core.random.seed.rst", "python/_autosummary/mlx.core.random.split.rst", "python/_autosummary/mlx.core.random.truncated_normal.rst", "python/_autosummary/mlx.core.random.uniform.rst", "python/_autosummary/mlx.core.reciprocal.rst", "python/_autosummary/mlx.core.remainder.rst", "python/_autosummary/mlx.core.repeat.rst", "python/_autosummary/mlx.core.reshape.rst", "python/_autosummary/mlx.core.right_shift.rst", "python/_autosummary/mlx.core.round.rst", "python/_autosummary/mlx.core.rsqrt.rst", "python/_autosummary/mlx.core.save.rst", "python/_autosummary/mlx.core.save_gguf.rst", "python/_autosummary/mlx.core.save_safetensors.rst", "python/_autosummary/mlx.core.savez.rst", "python/_autosummary/mlx.core.savez_compressed.rst", "python/_autosummary/mlx.core.set_default_device.rst", "python/_autosummary/mlx.core.set_default_stream.rst", "python/_autosummary/mlx.core.sigmoid.rst", "python/_autosummary/mlx.core.sign.rst", "python/_autosummary/mlx.core.sin.rst", "python/_autosummary/mlx.core.sinh.rst", "python/_autosummary/mlx.core.softmax.rst", "python/_autosummary/mlx.core.sort.rst", "python/_autosummary/mlx.core.split.rst", "python/_autosummary/mlx.core.sqrt.rst", "python/_autosummary/mlx.core.square.rst", "python/_autosummary/mlx.core.squeeze.rst", "python/_autosummary/mlx.core.stack.rst", "python/_autosummary/mlx.core.std.rst", "python/_autosummary/mlx.core.stop_gradient.rst", "python/_autosummary/mlx.core.stream.rst", "python/_autosummary/mlx.core.subtract.rst", "python/_autosummary/mlx.core.sum.rst", "python/_autosummary/mlx.core.swapaxes.rst", "python/_autosummary/mlx.core.synchronize.rst", "python/_autosummary/mlx.core.take.rst", "python/_autosummary/mlx.core.take_along_axis.rst", "python/_autosummary/mlx.core.tan.rst", "python/_autosummary/mlx.core.tanh.rst", "python/_autosummary/mlx.core.tensordot.rst", "python/_autosummary/mlx.core.tile.rst", "python/_autosummary/mlx.core.topk.rst", "python/_autosummary/mlx.core.transpose.rst", "python/_autosummary/mlx.core.tri.rst", "python/_autosummary/mlx.core.tril.rst", "python/_autosummary/mlx.core.triu.rst", "python/_autosummary/mlx.core.value_and_grad.rst", "python/_autosummary/mlx.core.var.rst", "python/_autosummary/mlx.core.vjp.rst", "python/_autosummary/mlx.core.vmap.rst", "python/_autosummary/mlx.core.where.rst", "python/_autosummary/mlx.core.zeros.rst", "python/_autosummary/mlx.core.zeros_like.rst", "python/_autosummary/mlx.nn.quantize.rst", "python/_autosummary/mlx.nn.value_and_grad.rst", "python/_autosummary/mlx.optimizers.clip_grad_norm.rst", "python/_autosummary/mlx.utils.tree_flatten.rst", "python/_autosummary/mlx.utils.tree_map.rst", "python/_autosummary/mlx.utils.tree_map_with_path.rst", "python/_autosummary/mlx.utils.tree_reduce.rst", "python/_autosummary/mlx.utils.tree_unflatten.rst", "python/_autosummary/stream_class.rst", "python/array.rst", "python/data_types.rst", "python/devices_and_streams.rst", "python/fast.rst", "python/fft.rst", "python/linalg.rst", "python/metal.rst", "python/nn.rst", "python/nn/_autosummary/mlx.nn.ALiBi.rst", "python/nn/_autosummary/mlx.nn.AvgPool1d.rst", "python/nn/_autosummary/mlx.nn.AvgPool2d.rst", "python/nn/_autosummary/mlx.nn.BatchNorm.rst", "python/nn/_autosummary/mlx.nn.Conv1d.rst", "python/nn/_autosummary/mlx.nn.Conv2d.rst", "python/nn/_autosummary/mlx.nn.Conv3d.rst", "python/nn/_autosummary/mlx.nn.Dropout.rst", "python/nn/_autosummary/mlx.nn.Dropout2d.rst", "python/nn/_autosummary/mlx.nn.Dropout3d.rst", "python/nn/_autosummary/mlx.nn.Embedding.rst", "python/nn/_autosummary/mlx.nn.GELU.rst", "python/nn/_autosummary/mlx.nn.GRU.rst", "python/nn/_autosummary/mlx.nn.GroupNorm.rst", "python/nn/_autosummary/mlx.nn.InstanceNorm.rst", "python/nn/_autosummary/mlx.nn.LSTM.rst", "python/nn/_autosummary/mlx.nn.LayerNorm.rst", "python/nn/_autosummary/mlx.nn.Linear.rst", "python/nn/_autosummary/mlx.nn.MaxPool1d.rst", "python/nn/_autosummary/mlx.nn.MaxPool2d.rst", "python/nn/_autosummary/mlx.nn.Mish.rst", "python/nn/_autosummary/mlx.nn.Module.apply.rst", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules.rst", "python/nn/_autosummary/mlx.nn.Module.children.rst", "python/nn/_autosummary/mlx.nn.Module.eval.rst", "python/nn/_autosummary/mlx.nn.Module.filter_and_map.rst", "python/nn/_autosummary/mlx.nn.Module.freeze.rst", "python/nn/_autosummary/mlx.nn.Module.leaf_modules.rst", "python/nn/_autosummary/mlx.nn.Module.load_weights.rst", "python/nn/_autosummary/mlx.nn.Module.modules.rst", "python/nn/_autosummary/mlx.nn.Module.named_modules.rst", "python/nn/_autosummary/mlx.nn.Module.parameters.rst", "python/nn/_autosummary/mlx.nn.Module.save_weights.rst", "python/nn/_autosummary/mlx.nn.Module.set_dtype.rst", "python/nn/_autosummary/mlx.nn.Module.state.rst", "python/nn/_autosummary/mlx.nn.Module.train.rst", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters.rst", "python/nn/_autosummary/mlx.nn.Module.training.rst", "python/nn/_autosummary/mlx.nn.Module.unfreeze.rst", "python/nn/_autosummary/mlx.nn.Module.update.rst", "python/nn/_autosummary/mlx.nn.Module.update_modules.rst", "python/nn/_autosummary/mlx.nn.MultiHeadAttention.rst", "python/nn/_autosummary/mlx.nn.PReLU.rst", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding.rst", "python/nn/_autosummary/mlx.nn.QuantizedLinear.rst", "python/nn/_autosummary/mlx.nn.RMSNorm.rst", "python/nn/_autosummary/mlx.nn.RNN.rst", "python/nn/_autosummary/mlx.nn.ReLU.rst", "python/nn/_autosummary/mlx.nn.RoPE.rst", "python/nn/_autosummary/mlx.nn.SELU.rst", "python/nn/_autosummary/mlx.nn.Sequential.rst", "python/nn/_autosummary/mlx.nn.SiLU.rst", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding.rst", "python/nn/_autosummary/mlx.nn.Softshrink.rst", "python/nn/_autosummary/mlx.nn.Step.rst", "python/nn/_autosummary/mlx.nn.Transformer.rst", "python/nn/_autosummary/mlx.nn.Upsample.rst", "python/nn/_autosummary/mlx.nn.init.constant.rst", "python/nn/_autosummary/mlx.nn.init.glorot_normal.rst", "python/nn/_autosummary/mlx.nn.init.glorot_uniform.rst", "python/nn/_autosummary/mlx.nn.init.he_normal.rst", "python/nn/_autosummary/mlx.nn.init.he_uniform.rst", "python/nn/_autosummary/mlx.nn.init.identity.rst", "python/nn/_autosummary/mlx.nn.init.normal.rst", "python/nn/_autosummary/mlx.nn.init.uniform.rst", "python/nn/_autosummary_functions/mlx.nn.elu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_approx.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx.rst", "python/nn/_autosummary_functions/mlx.nn.glu.rst", "python/nn/_autosummary_functions/mlx.nn.hardswish.rst", "python/nn/_autosummary_functions/mlx.nn.leaky_relu.rst", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.log_softmax.rst", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss.rst", "python/nn/_autosummary_functions/mlx.nn.mish.rst", "python/nn/_autosummary_functions/mlx.nn.prelu.rst", "python/nn/_autosummary_functions/mlx.nn.relu.rst", "python/nn/_autosummary_functions/mlx.nn.relu6.rst", "python/nn/_autosummary_functions/mlx.nn.selu.rst", "python/nn/_autosummary_functions/mlx.nn.sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.silu.rst", "python/nn/_autosummary_functions/mlx.nn.softmax.rst", "python/nn/_autosummary_functions/mlx.nn.softplus.rst", "python/nn/_autosummary_functions/mlx.nn.softshrink.rst", "python/nn/_autosummary_functions/mlx.nn.step.rst", "python/nn/_autosummary_functions/mlx.nn.tanh.rst", "python/nn/functions.rst", "python/nn/init.rst", "python/nn/layers.rst", "python/nn/losses.rst", "python/nn/module.rst", "python/ops.rst", "python/optimizers.rst", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta.rst", "python/optimizers/_autosummary/mlx.optimizers.Adafactor.rst", "python/optimizers/_autosummary/mlx.optimizers.Adagrad.rst", "python/optimizers/_autosummary/mlx.optimizers.Adam.rst", "python/optimizers/_autosummary/mlx.optimizers.AdamW.rst", "python/optimizers/_autosummary/mlx.optimizers.Adamax.rst", "python/optimizers/_autosummary/mlx.optimizers.Lion.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update.rst", "python/optimizers/_autosummary/mlx.optimizers.RMSprop.rst", "python/optimizers/_autosummary/mlx.optimizers.SGD.rst", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.join_schedules.rst", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule.rst", "python/optimizers/_autosummary/mlx.optimizers.step_decay.rst", "python/optimizers/common_optimizers.rst", "python/optimizers/optimizer.rst", "python/optimizers/schedulers.rst", "python/random.rst", "python/transforms.rst", "python/tree_utils.rst", "usage/compile.rst", "usage/function_transforms.rst", "usage/indexing.rst", "usage/lazy_evaluation.rst", "usage/numpy.rst", "usage/quick_start.rst", "usage/saving_and_loading.rst", "usage/unified_memory.rst", "usage/using_streams.rst"], "titles": ["Operations", "Custom Extensions in MLX", "Metal Debugger", "Linear Regression", "LLM inference", "Multi-Layer Perceptron", "MLX", "Build and Install", "mlx.core.Device", "mlx.core.Dtype", "mlx.core.DtypeCategory", "mlx.core.abs", "mlx.core.add", "mlx.core.addmm", "mlx.core.all", "mlx.core.allclose", "mlx.core.any", "mlx.core.arange", "mlx.core.arccos", "mlx.core.arccosh", "mlx.core.arcsin", "mlx.core.arcsinh", "mlx.core.arctan", "mlx.core.arctan2", "mlx.core.arctanh", "mlx.core.argmax", "mlx.core.argmin", "mlx.core.argpartition", "mlx.core.argsort", "mlx.core.array", "mlx.core.array.T", "mlx.core.array.abs", "mlx.core.array.all", "mlx.core.array.any", "mlx.core.array.argmax", "mlx.core.array.argmin", "mlx.core.array.astype", "mlx.core.array.at", "mlx.core.array.cos", "mlx.core.array.cummax", "mlx.core.array.cummin", "mlx.core.array.cumprod", "mlx.core.array.cumsum", "mlx.core.array.diag", "mlx.core.array.diagonal", "mlx.core.array.dtype", "mlx.core.array.exp", "mlx.core.array.flatten", "mlx.core.array.item", "mlx.core.array.itemsize", "mlx.core.array.log", "mlx.core.array.log10", "mlx.core.array.log1p", "mlx.core.array.log2", "mlx.core.array.logsumexp", "mlx.core.array.max", "mlx.core.array.mean", "mlx.core.array.min", "mlx.core.array.moveaxis", "mlx.core.array.nbytes", "mlx.core.array.ndim", "mlx.core.array.prod", "mlx.core.array.reciprocal", "mlx.core.array.reshape", "mlx.core.array.round", "mlx.core.array.rsqrt", "mlx.core.array.shape", "mlx.core.array.sin", "mlx.core.array.size", "mlx.core.array.split", "mlx.core.array.sqrt", "mlx.core.array.square", "mlx.core.array.squeeze", "mlx.core.array.sum", "mlx.core.array.swapaxes", "mlx.core.array.tolist", "mlx.core.array.transpose", "mlx.core.array.var", "mlx.core.array_equal", "mlx.core.as_strided", "mlx.core.atleast_1d", "mlx.core.atleast_2d", "mlx.core.atleast_3d", "mlx.core.bitwise_and", "mlx.core.bitwise_or", "mlx.core.bitwise_xor", "mlx.core.block_masked_mm", "mlx.core.block_sparse_mm", "mlx.core.broadcast_to", "mlx.core.ceil", "mlx.core.clip", "mlx.core.compile", "mlx.core.concatenate", "mlx.core.conj", "mlx.core.conjugate", "mlx.core.conv1d", "mlx.core.conv2d", "mlx.core.conv_general", "mlx.core.convolve", "mlx.core.cos", "mlx.core.cosh", "mlx.core.cummax", "mlx.core.cummin", "mlx.core.cumprod", "mlx.core.cumsum", "mlx.core.default_device", "mlx.core.default_stream", "mlx.core.degrees", "mlx.core.dequantize", "mlx.core.diag", "mlx.core.diagonal", "mlx.core.disable_compile", "mlx.core.divide", "mlx.core.divmod", "mlx.core.enable_compile", "mlx.core.equal", "mlx.core.erf", "mlx.core.erfinv", "mlx.core.eval", "mlx.core.exp", "mlx.core.expand_dims", "mlx.core.expm1", "mlx.core.eye", "mlx.core.fast.layer_norm", "mlx.core.fast.rms_norm", "mlx.core.fast.rope", "mlx.core.fast.scaled_dot_product_attention", "mlx.core.fft.fft", "mlx.core.fft.fft2", "mlx.core.fft.fftn", "mlx.core.fft.ifft", "mlx.core.fft.ifft2", "mlx.core.fft.ifftn", "mlx.core.fft.irfft", "mlx.core.fft.irfft2", "mlx.core.fft.irfftn", "mlx.core.fft.rfft", "mlx.core.fft.rfft2", "mlx.core.fft.rfftn", "mlx.core.flatten", "mlx.core.floor", "mlx.core.floor_divide", "mlx.core.full", "mlx.core.grad", "mlx.core.greater", "mlx.core.greater_equal", "mlx.core.identity", "mlx.core.inner", "mlx.core.isclose", "mlx.core.isinf", "mlx.core.isnan", "mlx.core.isneginf", "mlx.core.isposinf", "mlx.core.issubdtype", "mlx.core.jvp", "mlx.core.left_shift", "mlx.core.less", "mlx.core.less_equal", "mlx.core.linalg.cholesky", "mlx.core.linalg.inv", "mlx.core.linalg.norm", "mlx.core.linalg.qr", "mlx.core.linalg.svd", "mlx.core.linspace", "mlx.core.load", "mlx.core.log", "mlx.core.log10", "mlx.core.log1p", "mlx.core.log2", "mlx.core.logaddexp", "mlx.core.logical_and", "mlx.core.logical_not", "mlx.core.logical_or", "mlx.core.logsumexp", "mlx.core.matmul", "mlx.core.max", "mlx.core.maximum", "mlx.core.mean", "mlx.core.meshgrid", "mlx.core.metal.clear_cache", "mlx.core.metal.device_info", "mlx.core.metal.get_active_memory", "mlx.core.metal.get_cache_memory", "mlx.core.metal.get_peak_memory", "mlx.core.metal.is_available", "mlx.core.metal.reset_peak_memory", "mlx.core.metal.set_cache_limit", "mlx.core.metal.set_memory_limit", "mlx.core.metal.start_capture", "mlx.core.metal.stop_capture", "mlx.core.min", "mlx.core.minimum", "mlx.core.moveaxis", "mlx.core.multiply", "mlx.core.negative", "mlx.core.new_stream", "mlx.core.not_equal", "mlx.core.ones", "mlx.core.ones_like", "mlx.core.outer", "mlx.core.pad", "mlx.core.partition", "mlx.core.power", "mlx.core.prod", "mlx.core.quantize", "mlx.core.quantized_matmul", "mlx.core.radians", "mlx.core.random.bernoulli", "mlx.core.random.categorical", "mlx.core.random.gumbel", "mlx.core.random.key", "mlx.core.random.multivariate_normal", "mlx.core.random.normal", "mlx.core.random.randint", "mlx.core.random.seed", "mlx.core.random.split", "mlx.core.random.truncated_normal", "mlx.core.random.uniform", "mlx.core.reciprocal", "mlx.core.remainder", "mlx.core.repeat", "mlx.core.reshape", "mlx.core.right_shift", "mlx.core.round", "mlx.core.rsqrt", "mlx.core.save", "mlx.core.save_gguf", "mlx.core.save_safetensors", "mlx.core.savez", "mlx.core.savez_compressed", "mlx.core.set_default_device", "mlx.core.set_default_stream", "mlx.core.sigmoid", "mlx.core.sign", "mlx.core.sin", "mlx.core.sinh", "mlx.core.softmax", "mlx.core.sort", "mlx.core.split", "mlx.core.sqrt", "mlx.core.square", "mlx.core.squeeze", "mlx.core.stack", "mlx.core.std", "mlx.core.stop_gradient", "mlx.core.stream", "mlx.core.subtract", "mlx.core.sum", "mlx.core.swapaxes", "mlx.core.synchronize", "mlx.core.take", "mlx.core.take_along_axis", "mlx.core.tan", "mlx.core.tanh", "mlx.core.tensordot", "mlx.core.tile", "mlx.core.topk", "mlx.core.transpose", "mlx.core.tri", "mlx.core.tril", "mlx.core.triu", "mlx.core.value_and_grad", "mlx.core.var", "mlx.core.vjp", "mlx.core.vmap", "mlx.core.where", "mlx.core.zeros", "mlx.core.zeros_like", "mlx.nn.quantize", "mlx.nn.value_and_grad", "mlx.optimizers.clip_grad_norm", "mlx.utils.tree_flatten", "mlx.utils.tree_map", "mlx.utils.tree_map_with_path", "mlx.utils.tree_reduce", "mlx.utils.tree_unflatten", "mlx.core.Stream", "Array", "Data Types", "Devices and Streams", "Fast", "FFT", "Linear Algebra", "Metal", "Neural Networks", "mlx.nn.ALiBi", "mlx.nn.AvgPool1d", "mlx.nn.AvgPool2d", "mlx.nn.BatchNorm", "mlx.nn.Conv1d", "mlx.nn.Conv2d", "mlx.nn.Conv3d", "mlx.nn.Dropout", "mlx.nn.Dropout2d", "mlx.nn.Dropout3d", "mlx.nn.Embedding", "mlx.nn.GELU", "mlx.nn.GRU", "mlx.nn.GroupNorm", "mlx.nn.InstanceNorm", "mlx.nn.LSTM", "mlx.nn.LayerNorm", "mlx.nn.Linear", "mlx.nn.MaxPool1d", "mlx.nn.MaxPool2d", "mlx.nn.Mish", "mlx.nn.Module.apply", "mlx.nn.Module.apply_to_modules", "mlx.nn.Module.children", "mlx.nn.Module.eval", "mlx.nn.Module.filter_and_map", "mlx.nn.Module.freeze", "mlx.nn.Module.leaf_modules", "mlx.nn.Module.load_weights", "mlx.nn.Module.modules", "mlx.nn.Module.named_modules", "mlx.nn.Module.parameters", "mlx.nn.Module.save_weights", "mlx.nn.Module.set_dtype", "mlx.nn.Module.state", "mlx.nn.Module.train", "mlx.nn.Module.trainable_parameters", "mlx.nn.Module.training", "mlx.nn.Module.unfreeze", "mlx.nn.Module.update", "mlx.nn.Module.update_modules", "mlx.nn.MultiHeadAttention", "mlx.nn.PReLU", "mlx.nn.QuantizedEmbedding", "mlx.nn.QuantizedLinear", "mlx.nn.RMSNorm", "mlx.nn.RNN", "mlx.nn.ReLU", "mlx.nn.RoPE", "mlx.nn.SELU", "mlx.nn.Sequential", "mlx.nn.SiLU", "mlx.nn.SinusoidalPositionalEncoding", "mlx.nn.Softshrink", "mlx.nn.Step", "mlx.nn.Transformer", "mlx.nn.Upsample", "mlx.nn.init.constant", "mlx.nn.init.glorot_normal", "mlx.nn.init.glorot_uniform", "mlx.nn.init.he_normal", "mlx.nn.init.he_uniform", "mlx.nn.init.identity", "mlx.nn.init.normal", "mlx.nn.init.uniform", "mlx.nn.elu", "mlx.nn.gelu", "mlx.nn.gelu_approx", "mlx.nn.gelu_fast_approx", "mlx.nn.glu", "mlx.nn.hardswish", "mlx.nn.leaky_relu", "mlx.nn.log_sigmoid", "mlx.nn.log_softmax", "mlx.nn.losses.binary_cross_entropy", "mlx.nn.losses.cosine_similarity_loss", "mlx.nn.losses.cross_entropy", "mlx.nn.losses.gaussian_nll_loss", "mlx.nn.losses.hinge_loss", "mlx.nn.losses.huber_loss", "mlx.nn.losses.kl_div_loss", "mlx.nn.losses.l1_loss", "mlx.nn.losses.log_cosh_loss", "mlx.nn.losses.margin_ranking_loss", "mlx.nn.losses.mse_loss", "mlx.nn.losses.nll_loss", "mlx.nn.losses.smooth_l1_loss", "mlx.nn.losses.triplet_loss", "mlx.nn.mish", "mlx.nn.prelu", "mlx.nn.relu", "mlx.nn.relu6", "mlx.nn.selu", "mlx.nn.sigmoid", "mlx.nn.silu", "mlx.nn.softmax", "mlx.nn.softplus", "mlx.nn.softshrink", "mlx.nn.step", "mlx.nn.tanh", "Functions", "Initializers", "Layers", "Loss Functions", "Module", "Operations", "Optimizers", "mlx.optimizers.AdaDelta", "mlx.optimizers.Adafactor", "mlx.optimizers.Adagrad", "mlx.optimizers.Adam", "mlx.optimizers.AdamW", "mlx.optimizers.Adamax", "mlx.optimizers.Lion", "mlx.optimizers.Optimizer.apply_gradients", "mlx.optimizers.Optimizer.init", "mlx.optimizers.Optimizer.state", "mlx.optimizers.Optimizer.update", "mlx.optimizers.RMSprop", "mlx.optimizers.SGD", "mlx.optimizers.cosine_decay", "mlx.optimizers.exponential_decay", "mlx.optimizers.join_schedules", "mlx.optimizers.linear_schedule", "mlx.optimizers.step_decay", "Common Optimizers", "Optimizer", "Schedulers", "Random", "Transforms", "Tree Utils", "Compilation", "Function Transforms", "Indexing Arrays", "Lazy Evaluation", "Conversion to NumPy and Other Frameworks", "Quick Start Guide", "Saving and Loading Arrays", "Unified Memory", "Using Streams"], "terms": {"arrai": [0, 1, 4, 5, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 284, 288, 300, 306, 313, 316, 321, 327, 341, 342, 343, 344, 345, 346, 347, 348, 349, 354, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 383, 386, 389, 392, 393, 394, 395, 396, 397, 398, 403, 404, 405, 406, 407, 408, 409, 416, 417, 419, 420, 421, 423], "arang": [0, 160, 278, 341, 418, 420], "doubl": [0, 4], "start": [0, 1, 3, 4, 6, 7, 17, 125, 163, 188, 238, 274, 416, 418, 423], "stop": [0, 1, 4, 17, 163, 189, 244, 417, 418], "step": [0, 2, 4, 5, 17, 284, 297, 300, 331, 393, 400, 405, 407, 408, 409, 416], "dtype": [0, 1, 4, 10, 17, 29, 36, 37, 75, 122, 139, 142, 146, 153, 160, 161, 163, 197, 209, 211, 212, 213, 216, 217, 258, 266, 278, 318, 341, 342, 343, 344, 345, 346, 347, 348, 349, 359, 361, 368, 405, 406, 407, 408, 409, 416, 417, 418, 420, 421, 422], "streamordevic": [0, 1], "": [0, 1, 3, 4, 5, 45, 49, 60, 91, 106, 108, 128, 129, 131, 132, 134, 135, 137, 138, 143, 160, 162, 164, 177, 199, 204, 208, 223, 226, 227, 243, 245, 261, 262, 264, 269, 284, 287, 297, 300, 304, 310, 311, 313, 317, 318, 319, 323, 331, 391, 400, 401, 413, 416, 417, 419, 420, 421, 422, 423], "A": [0, 1, 4, 6, 7, 8, 66, 78, 91, 123, 124, 126, 143, 154, 160, 161, 162, 164, 173, 174, 175, 180, 190, 204, 207, 208, 209, 211, 212, 213, 216, 217, 238, 242, 245, 261, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 284, 288, 293, 297, 298, 299, 301, 310, 314, 315, 318, 324, 325, 330, 335, 337, 340, 343, 344, 346, 353, 372, 373, 389, 391, 395, 397, 399, 400, 402, 407, 416, 417, 419, 420], "1d": [0, 95, 97, 98, 226, 251], "number": [0, 1, 10, 17, 59, 68, 91, 96, 97, 108, 122, 143, 146, 154, 163, 200, 204, 205, 208, 212, 215, 217, 220, 223, 254, 255, 258, 261, 263, 264, 268, 284, 288, 289, 290, 291, 293, 294, 298, 299, 326, 327, 340, 341, 343, 344, 345, 346, 405, 407, 408, 413, 416, 417, 424], "option": [0, 2, 4, 13, 14, 16, 17, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 86, 87, 91, 92, 95, 96, 97, 98, 101, 102, 103, 104, 108, 109, 110, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 146, 151, 152, 158, 159, 160, 161, 162, 163, 164, 173, 175, 177, 178, 187, 190, 197, 200, 201, 203, 204, 205, 207, 208, 209, 211, 212, 213, 215, 216, 217, 220, 221, 236, 237, 238, 241, 242, 243, 247, 249, 250, 254, 256, 257, 258, 259, 260, 261, 262, 264, 266, 268, 271, 272, 273, 274, 286, 287, 288, 289, 290, 291, 297, 300, 302, 303, 304, 306, 310, 311, 313, 318, 323, 326, 328, 329, 331, 333, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 392, 393, 394, 395, 396, 397, 398, 400, 403, 404, 405, 413, 416, 422, 424], "int": [0, 1, 4, 5, 8, 14, 16, 17, 25, 26, 27, 28, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 47, 54, 55, 56, 57, 58, 61, 64, 66, 69, 72, 73, 74, 75, 77, 79, 86, 88, 92, 95, 96, 97, 101, 102, 103, 104, 108, 109, 110, 120, 122, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 146, 153, 160, 163, 173, 175, 177, 180, 181, 182, 183, 186, 187, 190, 192, 197, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 223, 236, 237, 238, 241, 242, 243, 247, 248, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 268, 276, 284, 286, 287, 288, 289, 290, 291, 295, 297, 298, 299, 300, 301, 302, 303, 304, 326, 328, 329, 330, 331, 333, 337, 340, 354, 360, 361, 365, 370, 372, 389, 405, 407, 408, 409], "linspac": 0, "num": [0, 4, 163, 215], "50": [0, 163], "float32": [0, 1, 10, 17, 122, 126, 146, 153, 160, 161, 163, 197, 209, 211, 212, 216, 217, 258, 266, 278, 341, 342, 343, 344, 345, 346, 347, 348, 349, 359, 361, 368, 405, 406, 407, 408, 409, 416, 417, 418, 419, 420, 421, 422], "evenli": [0, 163], "space": [0, 1, 163, 370], "rang": [0, 1, 2, 3, 4, 5, 7, 17, 87, 139, 163, 344, 346, 352, 353, 391, 405, 406, 407, 408, 409, 413, 416, 417, 419, 423], "astyp": [0, 1, 4, 306, 420], "convert": [0, 1, 75, 80, 81, 82, 107, 139, 206, 328, 329, 419, 420, 421], "an": [0, 1, 2, 4, 5, 7, 9, 14, 16, 29, 80, 81, 82, 88, 95, 96, 97, 118, 122, 123, 126, 139, 142, 146, 158, 160, 164, 187, 192, 197, 198, 200, 203, 204, 205, 220, 221, 223, 238, 241, 248, 250, 251, 254, 255, 258, 264, 266, 267, 271, 272, 273, 274, 284, 286, 287, 292, 298, 300, 301, 302, 303, 304, 306, 326, 327, 329, 331, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 374, 386, 392, 402, 406, 411, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "given": [0, 1, 14, 16, 27, 37, 79, 87, 88, 90, 92, 101, 102, 103, 104, 108, 110, 118, 120, 127, 128, 129, 130, 131, 132, 136, 137, 138, 142, 160, 173, 175, 177, 186, 190, 195, 203, 211, 213, 223, 231, 236, 238, 243, 247, 249, 255, 256, 258, 259, 260, 262, 276, 286, 287, 292, 303, 304, 310, 326, 360, 362, 368], "data": [0, 1, 5, 6, 9, 17, 122, 136, 137, 142, 146, 163, 197, 216, 258, 266, 294, 342, 343, 344, 345, 346, 347, 348, 349, 416, 418, 420], "type": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 66, 75, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 107, 108, 109, 110, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 186, 187, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 274, 284, 318, 340, 342, 343, 344, 345, 346, 347, 348, 349, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 416, 418], "as_strid": 0, "std": [0, 1, 348], "vector": [0, 1, 3, 6, 147, 154, 160, 250, 263, 264, 295, 361, 421], "shape": [0, 1, 2, 4, 5, 63, 78, 79, 86, 87, 88, 91, 95, 96, 97, 110, 126, 127, 130, 133, 136, 137, 138, 142, 154, 159, 174, 197, 198, 207, 208, 209, 211, 212, 213, 216, 217, 221, 251, 263, 265, 266, 267, 284, 286, 287, 288, 289, 290, 291, 293, 294, 297, 299, 300, 302, 303, 304, 313, 331, 342, 343, 344, 345, 346, 347, 348, 349, 361, 372, 391, 416, 417, 418, 421, 423], "size_t": [0, 1], "stride": [0, 1, 79, 95, 96, 97, 286, 287, 289, 290, 291, 303, 304, 333, 418], "offset": [0, 1, 4, 44, 79, 110, 123, 125], "creat": [0, 1, 4, 7, 79, 122, 146, 245, 284, 389, 391, 407, 416, 418, 420], "view": [0, 2, 79, 420], "copi": [0, 1, 4, 6, 201, 237, 420], "anoth": [0, 90, 153, 174, 246, 265, 278, 284, 306, 416, 417, 418, 423], "full": [0, 1, 5, 63, 76, 98, 236, 324, 325, 362, 416, 419], "val": [0, 29, 142], "fill": [0, 1, 142, 198, 258, 267, 342, 343, 344, 345, 346, 348, 349], "valu": [0, 3, 4, 11, 15, 17, 25, 26, 48, 75, 78, 90, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 148, 160, 162, 163, 180, 200, 207, 208, 209, 211, 212, 213, 216, 217, 226, 250, 251, 261, 264, 269, 271, 272, 273, 274, 278, 287, 292, 293, 294, 299, 302, 304, 310, 326, 327, 338, 339, 340, 342, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 383, 389, 393, 396, 405, 406, 408, 409, 417], "templat": [0, 1], "typenam": [0, 1], "t": [0, 1, 4, 7, 116, 126, 158, 205, 261, 284, 286, 297, 300, 303, 331, 392, 393, 394, 395, 396, 397, 398, 403, 404, 416, 417, 423], "zero": [0, 122, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 178, 185, 258, 259, 260, 267, 284, 286, 287, 292, 293, 294, 313, 342, 343, 344, 345, 346, 347, 348, 349, 386, 393, 418], "const": [0, 1, 362], "inlin": 0, "zeros_lik": 0, "ones": [0, 1, 4, 198, 228, 258, 324, 325, 418], "ones_lik": 0, "ey": [0, 4, 159], "n": [0, 1, 4, 29, 86, 95, 96, 97, 122, 127, 129, 130, 132, 133, 136, 138, 146, 211, 243, 258, 262, 286, 287, 288, 289, 290, 291, 293, 294, 297, 300, 303, 304, 331, 341, 367, 372], "m": [0, 1, 4, 7, 86, 87, 122, 160, 258, 286, 287, 303, 304, 392, 416], "k": [0, 4, 43, 86, 87, 109, 122, 126, 256, 258, 259, 260, 286, 302, 303, 311], "specifi": [0, 1, 17, 36, 96, 97, 110, 134, 135, 142, 143, 160, 163, 192, 197, 208, 220, 248, 250, 251, 254, 257, 261, 264, 266, 288, 339, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 383, 417, 423], "diagon": [0, 43, 109, 122, 258, 259, 260], "everywher": 0, "els": [0, 1, 4, 284, 311, 419], "ident": [0, 122, 244, 284, 320], "squar": [0, 3, 4, 124, 146, 159, 224, 239, 261, 272, 284, 330, 369, 371, 392, 393, 395, 396, 397, 417, 420], "matrix": [0, 3, 13, 43, 86, 87, 108, 109, 122, 146, 158, 159, 160, 161, 162, 174, 178, 204, 205, 211, 328, 329, 347, 386], "major": [0, 1], "tri": 0, "tril": 0, "x": [0, 1, 3, 4, 5, 37, 86, 116, 121, 123, 124, 146, 160, 205, 209, 223, 228, 232, 259, 260, 265, 272, 274, 284, 286, 287, 288, 296, 298, 299, 301, 302, 303, 304, 305, 306, 327, 330, 332, 337, 339, 341, 350, 351, 352, 353, 354, 355, 356, 357, 358, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 389, 391, 398, 416, 417, 418, 419, 420, 421, 423], "0": [0, 1, 3, 4, 5, 7, 8, 13, 17, 37, 43, 44, 47, 64, 69, 77, 79, 87, 92, 95, 96, 97, 109, 110, 122, 126, 139, 143, 159, 160, 161, 179, 186, 200, 207, 212, 217, 220, 223, 238, 242, 243, 258, 259, 260, 261, 262, 264, 270, 271, 273, 274, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 303, 304, 327, 332, 333, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 355, 356, 359, 361, 363, 364, 368, 371, 372, 374, 375, 376, 377, 382, 383, 386, 389, 392, 393, 395, 396, 397, 398, 400, 403, 404, 405, 406, 407, 408, 409, 413, 416, 417, 418, 419, 420, 421, 422], "triu": 0, "reshap": [0, 4, 160, 341, 418], "flatten": [0, 27, 28, 101, 102, 103, 104, 160, 199, 201, 220, 237, 250, 251, 256, 271], "start_axi": [0, 47, 139], "end_axi": [0, 47, 139], "1": [0, 1, 2, 4, 5, 13, 17, 27, 28, 37, 44, 47, 95, 96, 97, 109, 110, 121, 126, 127, 128, 130, 131, 133, 134, 135, 136, 137, 138, 139, 147, 153, 160, 161, 174, 178, 187, 199, 201, 204, 208, 211, 212, 217, 232, 237, 250, 256, 261, 270, 273, 274, 278, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 327, 330, 331, 333, 337, 339, 341, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 370, 371, 372, 377, 378, 380, 381, 383, 386, 389, 391, 392, 393, 394, 395, 396, 397, 398, 400, 403, 404, 405, 406, 407, 408, 409, 416, 417, 418, 420, 421, 422, 423], "dimens": [0, 1, 4, 14, 16, 25, 26, 60, 66, 75, 80, 81, 82, 87, 91, 96, 97, 110, 120, 125, 134, 135, 137, 138, 139, 147, 158, 159, 160, 161, 162, 173, 174, 175, 177, 190, 203, 204, 208, 215, 243, 247, 251, 254, 257, 262, 288, 289, 290, 291, 293, 294, 297, 298, 299, 300, 301, 326, 330, 331, 333, 340, 341, 354, 361, 416, 417], "squeez": [0, 341, 416], "ax": [0, 1, 14, 16, 25, 26, 76, 120, 128, 129, 131, 132, 134, 135, 137, 138, 139, 147, 160, 173, 175, 177, 190, 200, 203, 236, 241, 243, 247, 248, 254, 257, 262, 417], "remov": [0, 110, 174, 208, 241, 361], "singleton": [0, 14, 16, 25, 26, 173, 174, 175, 177, 190, 203, 243, 247, 262], "axi": [0, 1, 4, 5, 14, 16, 25, 26, 27, 28, 32, 33, 34, 35, 39, 40, 41, 42, 54, 55, 56, 57, 61, 69, 72, 73, 77, 92, 101, 102, 103, 104, 110, 120, 123, 124, 127, 130, 133, 134, 135, 136, 137, 138, 139, 160, 173, 175, 177, 190, 192, 200, 201, 203, 208, 220, 236, 237, 238, 241, 242, 243, 247, 248, 250, 251, 255, 256, 257, 262, 264, 286, 287, 303, 304, 331, 354, 358, 360, 361, 365, 370, 372, 380, 418], "all": [0, 1, 2, 5, 7, 15, 27, 37, 80, 81, 82, 87, 91, 96, 97, 122, 129, 132, 135, 138, 162, 174, 200, 201, 241, 268, 284, 306, 307, 311, 314, 315, 316, 321, 323, 326, 337, 340, 341, 386, 389, 411, 413, 416, 418, 419, 421, 424], "expand_dim": 0, "add": [0, 1, 2, 4, 13, 37, 120, 169, 200, 204, 289, 290, 291, 417, 423], "slice": [0, 418], "each": [0, 1, 66, 108, 118, 125, 153, 158, 159, 162, 174, 178, 200, 204, 205, 208, 220, 228, 229, 238, 255, 257, 264, 265, 293, 294, 295, 297, 298, 300, 331, 333, 340, 359, 361, 413, 416, 419], "slice_upd": 0, "src": 0, "updat": [0, 1, 3, 4, 5, 37, 91, 268, 272, 274, 288, 306, 307, 313, 318, 319, 320, 325, 391, 393, 396, 398, 399, 400, 404, 405, 406, 407, 408, 409, 416, 419], "from": [0, 1, 4, 5, 6, 79, 87, 107, 108, 110, 134, 135, 137, 138, 142, 160, 164, 174, 178, 183, 186, 198, 204, 206, 207, 208, 209, 210, 213, 216, 228, 241, 244, 246, 250, 251, 256, 265, 267, 271, 272, 273, 274, 275, 284, 302, 311, 313, 326, 343, 344, 345, 346, 348, 349, 362, 371, 386, 415, 416, 417, 419, 420, 421, 422, 423], "sourc": [0, 1, 2, 58, 192, 257], "split": [0, 298, 354], "num_split": 0, "sub": [0, 5, 110, 215, 268], "along": [0, 1, 25, 26, 87, 91, 92, 101, 102, 103, 104, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 160, 220, 236, 238, 242, 250, 251, 254, 255, 256, 284, 331, 354], "indic": [0, 1, 15, 25, 26, 27, 28, 37, 87, 143, 148, 149, 150, 151, 152, 162, 238, 250, 251, 261, 320, 322, 361, 368, 407, 418], "meshgrid": 0, "bool": [0, 1, 14, 15, 16, 25, 26, 32, 33, 34, 35, 39, 40, 41, 42, 54, 55, 56, 57, 61, 73, 75, 77, 78, 91, 97, 101, 102, 103, 104, 125, 148, 153, 158, 160, 164, 173, 175, 177, 178, 184, 187, 190, 203, 205, 243, 247, 262, 288, 289, 290, 291, 297, 298, 299, 300, 301, 302, 306, 310, 311, 313, 318, 320, 323, 326, 329, 331, 333, 337, 340, 341, 359, 362, 393, 404], "spars": [0, 178], "fals": [0, 1, 4, 14, 15, 16, 25, 26, 32, 33, 34, 35, 39, 40, 41, 42, 54, 55, 56, 57, 61, 73, 77, 78, 91, 97, 101, 102, 103, 104, 148, 153, 158, 160, 164, 173, 175, 177, 178, 187, 190, 203, 243, 247, 262, 265, 268, 271, 272, 273, 274, 278, 298, 299, 301, 302, 311, 313, 323, 326, 329, 333, 337, 340, 341, 359, 362, 393, 404, 420], "string": [0, 1, 180, 420, 422], "index": [0, 1, 6, 8, 27, 37, 120, 122, 143, 178, 201, 250, 251, 261, 276], "xy": [0, 178], "coordin": [0, 178], "clip": [0, 270, 393], "a_min": [0, 90], "nullopt": 0, "a_max": [0, 90], "limit": [0, 1, 90, 186, 187, 418], "concaten": [0, 4], "stack": [0, 416], "new": [0, 1, 5, 88, 110, 192, 195, 221, 242, 257, 272, 273, 318, 326, 389, 391, 402, 407, 416, 418, 419, 420], "repeat": [0, 255], "arr": [0, 225, 418], "tile": [0, 126], "rep": [0, 255], "transpos": [0, 4, 30, 205], "permut": [0, 5], "accord": [0, 209, 265, 268, 326, 343, 344, 345, 346], "initializer_list": 0, "swapax": 0, "axis1": [0, 44, 74, 110, 248], "axis2": [0, 44, 74, 110, 248], "swap": [0, 98, 187, 248, 325], "two": [0, 1, 12, 13, 15, 23, 78, 81, 83, 84, 85, 86, 87, 110, 112, 115, 128, 131, 137, 144, 145, 148, 156, 157, 158, 159, 161, 162, 169, 174, 176, 191, 193, 196, 199, 248, 274, 287, 300, 304, 354, 360, 416, 417, 418, 423], "moveaxi": 0, "destin": [0, 1, 58, 192], "move": [0, 1, 192, 423], "pad": [0, 95, 96, 97, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 286, 287, 289, 290, 291, 303, 304], "low_pad_s": 0, "high_pad_s": 0, "pad_valu": 0, "constant": [0, 1, 4, 7, 123, 124, 200, 284, 288, 298, 301, 330, 362, 372, 403, 405, 416, 420], "pair": [0, 1, 200, 313, 333], "pad_width": [0, 200], "revers": [0, 1, 39, 40, 41, 42, 79, 101, 102, 103, 104, 257, 337], "order": [0, 27, 79, 97, 160, 201, 204, 256, 284, 298, 324, 335, 400, 416, 417], "broadcast_to": 0, "broadcast": [0, 1, 12, 15, 83, 84, 85, 88, 90, 112, 113, 115, 142, 144, 145, 148, 155, 156, 157, 169, 174, 176, 191, 193, 196, 202, 207, 208, 211, 216, 217, 219, 222, 246, 251, 265, 326], "broadcast_arrai": [0, 1], "input": [0, 1, 3, 4, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 109, 110, 112, 113, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 215, 218, 219, 220, 221, 222, 223, 224, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 267, 286, 287, 288, 289, 290, 291, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 326, 329, 330, 331, 333, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 354, 359, 360, 362, 363, 364, 365, 367, 368, 370, 372, 383, 386, 416, 417, 418, 421, 422], "against": 0, "one": [0, 1, 4, 7, 37, 75, 80, 90, 96, 97, 120, 122, 123, 124, 160, 167, 174, 205, 208, 241, 246, 278, 323, 341, 361, 423], "equal": [0, 15, 27, 78, 122, 145, 148, 157, 196, 201, 213, 238, 299, 302], "b": [0, 1, 2, 4, 12, 13, 15, 23, 78, 83, 84, 85, 86, 87, 112, 113, 115, 141, 144, 145, 147, 148, 155, 156, 157, 160, 169, 170, 172, 174, 176, 191, 193, 196, 199, 202, 204, 219, 222, 246, 254, 261, 273, 274, 302, 331, 341, 354, 417, 418, 419, 420, 421, 422, 423], "return": [0, 1, 3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 48, 66, 75, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 186, 187, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 284, 297, 300, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 320, 321, 323, 324, 325, 331, 342, 343, 344, 345, 346, 347, 348, 349, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 386, 389, 399, 415, 416, 417, 418, 419, 420, 422, 423], "element": [0, 1, 11, 12, 18, 19, 20, 21, 22, 23, 24, 27, 68, 79, 83, 84, 85, 89, 99, 100, 101, 102, 103, 104, 108, 112, 113, 115, 116, 117, 119, 121, 122, 140, 141, 144, 145, 148, 149, 150, 151, 152, 155, 156, 157, 165, 166, 167, 168, 169, 170, 171, 172, 176, 178, 191, 193, 194, 196, 201, 202, 204, 205, 218, 219, 220, 222, 224, 232, 233, 234, 235, 239, 240, 246, 250, 252, 253, 256, 261, 265, 292, 293, 294, 297, 300, 305, 327, 331, 333, 355, 357, 358, 373, 374, 376, 379, 380, 381, 416, 417], "wise": [0, 1, 11, 12, 18, 19, 20, 21, 22, 23, 24, 83, 84, 85, 89, 99, 100, 112, 113, 115, 116, 117, 119, 121, 140, 141, 144, 145, 148, 155, 156, 157, 165, 166, 167, 168, 169, 170, 171, 172, 176, 191, 193, 194, 196, 202, 218, 219, 222, 224, 232, 233, 234, 235, 239, 240, 246, 252, 253, 293, 294, 305, 327, 355, 357, 358, 373, 374, 376, 379, 380, 381, 416], "not_equ": 0, "greater": [0, 4, 27, 121, 145, 201, 270, 339, 383], "greater_equ": 0, "less": [0, 4, 27, 157, 201, 333, 371], "less_equ": 0, "array_equ": [0, 15, 148], "equal_nan": [0, 15, 78, 148], "true": [0, 1, 3, 4, 15, 39, 40, 41, 42, 78, 91, 101, 102, 103, 104, 125, 148, 153, 158, 160, 164, 178, 187, 205, 236, 265, 268, 271, 272, 273, 274, 278, 284, 288, 289, 290, 291, 297, 298, 299, 300, 301, 302, 310, 311, 313, 320, 323, 329, 331, 333, 337, 340, 341, 359, 367, 393], "have": [0, 1, 4, 7, 15, 78, 80, 81, 82, 86, 134, 135, 137, 138, 148, 174, 188, 208, 271, 300, 326, 335, 398, 400, 415, 416, 418, 419, 423], "same": [0, 1, 4, 7, 15, 37, 78, 88, 91, 96, 97, 98, 123, 124, 133, 136, 137, 138, 143, 148, 154, 200, 208, 223, 263, 265, 273, 284, 287, 288, 292, 298, 299, 304, 328, 342, 343, 344, 345, 346, 347, 348, 349, 361, 372, 389, 399, 413, 416, 418, 423], "isnan": 0, "isinf": 0, "isposinf": 0, "isneginf": 0, "where": [0, 5, 122, 148, 204, 261, 264, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 310, 327, 330, 331, 339, 345, 346, 350, 351, 353, 362, 368, 374, 377, 379, 383, 400, 417, 418], "condit": [0, 1, 265, 423], "y": [0, 1, 3, 4, 5, 37, 265, 284, 288, 293, 298, 299, 301, 302, 330, 363, 368, 371, 391, 394, 416, 417, 419, 420], "select": [0, 2, 7, 256, 265, 306, 310, 318], "depend": [0, 1, 2, 3, 75, 160, 297, 300, 331, 418, 422, 423], "keepdim": [0, 14, 16, 25, 26, 32, 33, 34, 35, 54, 55, 56, 57, 61, 73, 77, 160, 173, 175, 177, 190, 203, 236, 243, 247, 262], "ar": [0, 1, 3, 4, 5, 6, 7, 15, 17, 78, 86, 88, 90, 91, 97, 98, 110, 118, 122, 128, 129, 131, 132, 134, 135, 137, 138, 139, 143, 148, 149, 150, 151, 152, 153, 154, 160, 161, 164, 174, 187, 199, 200, 201, 204, 205, 207, 208, 209, 213, 216, 217, 228, 229, 241, 242, 250, 261, 263, 264, 268, 271, 272, 278, 288, 289, 290, 291, 292, 293, 294, 298, 299, 301, 302, 313, 326, 329, 341, 359, 361, 362, 385, 389, 398, 400, 415, 416, 417, 418, 419, 420, 421, 422, 423], "non": [0, 1, 7, 178, 321, 331, 373, 389], "allclos": 0, "rtol": [0, 15, 148], "1e": [0, 3, 5, 15, 148, 288, 298, 299, 301, 330, 360, 362, 372, 392, 393, 394, 395, 396, 397, 400, 403, 405, 406, 407, 408, 409], "5": [0, 1, 3, 4, 7, 160, 187, 207, 274, 286, 288, 292, 293, 294, 296, 299, 303, 338, 341, 342, 345, 346, 352, 371, 382, 386, 403, 405, 406, 416, 417, 418], "atol": [0, 15, 148], "8": [0, 1, 4, 7, 160, 204, 278, 287, 299, 304, 340, 360, 392, 393, 394, 395, 396, 397, 403, 416, 418, 421, 423], "within": [0, 2, 27, 148], "toler": [0, 15, 148], "isclos": 0, "boolean": [0, 15, 78, 86, 148, 149, 150, 151, 152, 170, 171, 172, 278, 322, 418], "reduc": [0, 14, 16, 25, 26, 173, 175, 177, 190, 203, 243, 247, 262, 274, 288, 340, 367], "output": [0, 1, 4, 7, 14, 15, 16, 17, 27, 79, 86, 88, 91, 101, 102, 103, 104, 122, 123, 124, 125, 126, 133, 136, 137, 138, 142, 143, 146, 148, 160, 163, 173, 175, 177, 178, 190, 197, 198, 201, 203, 207, 208, 209, 211, 212, 213, 216, 217, 228, 229, 236, 241, 243, 247, 251, 258, 261, 262, 263, 264, 265, 266, 267, 286, 287, 288, 289, 290, 291, 299, 302, 303, 304, 326, 329, 339, 340, 341, 343, 344, 345, 346, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 383, 386, 416, 417, 418, 419, 420, 421, 422, 423], "i": [0, 1, 2, 4, 5, 6, 7, 15, 17, 27, 36, 75, 79, 87, 90, 95, 96, 97, 98, 101, 102, 103, 104, 109, 110, 113, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 148, 153, 154, 158, 159, 160, 161, 162, 164, 169, 173, 174, 178, 184, 187, 200, 201, 204, 205, 207, 208, 211, 212, 215, 216, 217, 221, 225, 226, 227, 232, 236, 238, 243, 244, 249, 250, 251, 254, 257, 261, 262, 263, 264, 265, 268, 270, 271, 272, 273, 274, 278, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 310, 311, 317, 319, 320, 322, 323, 325, 326, 327, 329, 330, 331, 333, 337, 339, 340, 341, 345, 346, 351, 353, 359, 360, 362, 367, 368, 371, 372, 374, 379, 383, 389, 393, 396, 398, 399, 400, 405, 407, 408, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424], "correspond": [0, 1, 14, 16, 75, 90, 108, 110, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 173, 175, 190, 203, 247, 254, 264, 272, 417], "ani": [0, 1, 4, 6, 17, 91, 271, 272, 273, 274, 275, 284, 296, 306, 307, 310, 319, 329, 340, 341, 386, 408, 415, 416, 417, 419, 421, 422, 423], "sum": [0, 1, 3, 12, 104, 147, 160, 173, 236, 254, 284, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 418, 420], "mean": [0, 3, 4, 5, 124, 211, 212, 261, 284, 288, 298, 311, 330, 348, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 416, 417, 420], "comput": [0, 1, 3, 4, 5, 6, 7, 101, 102, 103, 104, 108, 121, 125, 143, 154, 158, 159, 160, 169, 177, 199, 204, 219, 236, 243, 244, 254, 261, 262, 263, 269, 284, 288, 297, 298, 299, 300, 301, 311, 324, 329, 330, 333, 340, 343, 344, 345, 346, 352, 353, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 391, 392, 393, 395, 396, 397, 398, 402, 416, 417, 421, 423], "var": [0, 288, 298, 299, 301, 362], "ddof": [0, 77, 243, 262], "varianc": [0, 243, 262, 288, 298, 362], "standard": [0, 5, 48, 75, 174, 209, 212, 243, 340, 343, 345, 348, 421], "deviat": [0, 212, 243, 343, 345, 348], "deviatoin": 0, "prod": 0, "The": [0, 1, 2, 4, 5, 6, 7, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 45, 49, 59, 60, 66, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 183, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 226, 227, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 311, 313, 317, 318, 319, 320, 323, 324, 325, 326, 328, 329, 330, 331, 333, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 354, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 383, 386, 389, 391, 392, 393, 394, 395, 396, 397, 398, 401, 403, 404, 405, 408, 411, 416, 417, 418, 419, 420, 421, 422, 423, 424], "product": [0, 1, 13, 79, 103, 147, 154, 174, 199, 203, 254, 263, 326, 421], "max": [0, 1, 160, 176, 303, 304, 327, 355, 360, 362, 363, 368, 372, 374, 376, 393, 397, 416, 417, 423], "maximum": [0, 5, 25, 37, 90, 101, 183, 187, 270, 284, 332, 337, 352, 353, 356, 375, 389, 419], "min": [0, 1, 160, 191, 327, 355, 374, 376], "minimum": [0, 26, 37, 90, 102, 337, 360], "argmin": 0, "argmax": [0, 5], "sort": [0, 27, 28, 201, 256], "argsort": 0, "partit": [0, 27], "kth": [0, 27, 201], "smaller": [0, 7, 201, 398, 416], "first": [0, 1, 2, 3, 4, 5, 7, 110, 139, 143, 155, 162, 170, 172, 174, 201, 215, 222, 248, 254, 261, 271, 273, 274, 284, 287, 298, 304, 341, 360, 368, 393, 395, 396, 397, 400, 416, 417, 420, 423], "argpartit": 0, "topk": 0, "logsumexp": 0, "ab": [0, 15, 148, 160, 261, 298, 299, 301, 305, 330, 353, 373, 416], "absolut": [0, 11, 15, 148, 352, 353, 371], "neg": [0, 110, 139, 151, 303, 304, 326, 362, 370, 372, 418], "negat": [0, 194], "sign": [0, 15, 148, 278, 398], "logical_not": 0, "logic": [0, 1, 170, 171, 172], "logical_and": 0, "logical_or": 0, "reciproc": [0, 224], "subtract": [0, 37], "multipli": [0, 1, 37, 204, 205, 292, 337, 341], "divid": [0, 1, 37, 141, 204, 219], "divmod": 0, "quotient": [0, 112, 113, 141], "remaind": [0, 113], "floor_divid": 0, "integ": [0, 10, 87, 141, 153, 160, 180, 200, 204, 205, 207, 213, 238, 254, 264, 278, 295, 318, 407, 418], "divis": [0, 112, 141, 204, 219], "equival": [0, 1, 30, 63, 76, 113, 141, 250, 296, 325, 327, 329, 332, 334, 336, 338], "do": [0, 1, 4, 7, 284, 312, 323, 386, 389, 396, 416, 417, 419], "floor": [0, 141], "between": [0, 1, 6, 90, 139, 340, 360, 363, 364, 367, 407, 419, 423], "ceil": 0, "exp": [0, 121, 169, 173, 209, 236, 350, 365, 377, 378, 381, 416, 423], "exponenti": [0, 119, 121, 334, 350, 377, 406], "sin": [0, 337, 417, 421], "sine": [0, 20, 21, 234, 235, 417], "co": [0, 1, 337, 417], "cosin": [0, 18, 19, 99, 100, 360, 405, 407, 417], "tan": 0, "tangent": [0, 1, 22, 23, 24, 154, 252, 253, 384], "arcsin": 0, "arc": 0, "arcco": 0, "arctan": 0, "arctan2": 0, "invers": [0, 18, 19, 20, 21, 22, 23, 24, 117, 130, 131, 132, 133, 134, 135, 159], "ratio": [0, 23], "sinh": 0, "hyperbol": [0, 19, 21, 24, 100, 235, 253, 384], "cosh": [0, 367], "tanh": [0, 284, 296, 297, 300, 305, 331, 352, 373], "arcsinh": 0, "arccosh": 0, "arctanh": 0, "degre": [0, 206, 372], "radian": [0, 107], "log": [0, 167, 169, 173, 357, 358, 362, 365, 367, 370, 381], "natur": [0, 165, 167, 419], "logarithm": [0, 165, 166, 167, 168], "log2": 0, "base": [0, 1, 125, 160, 166, 168, 202, 333, 340, 389, 391, 397, 411, 413, 416, 418], "2": [0, 1, 3, 4, 5, 37, 96, 109, 110, 116, 128, 131, 133, 134, 135, 136, 137, 138, 139, 153, 158, 159, 160, 161, 162, 168, 174, 204, 211, 215, 254, 258, 259, 260, 270, 274, 278, 284, 286, 287, 290, 296, 303, 304, 330, 337, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 361, 362, 364, 371, 372, 386, 389, 392, 394, 395, 396, 400, 403, 416, 417, 418, 419, 420, 421, 422, 423], "log10": 0, "10": [0, 2, 4, 5, 166, 223, 228, 272, 284, 313, 386, 407, 409, 416, 418], "log1p": 0, "plu": [0, 167], "logaddexp": 0, "sigmoid": [0, 4, 284, 336, 353, 357, 379], "logist": [0, 3, 232, 353, 379], "erf": [0, 117, 416], "error": [0, 1, 7, 116, 117, 187, 238, 296, 351, 352, 353, 367, 369, 417, 420], "function": [0, 1, 2, 3, 4, 5, 6, 15, 79, 91, 113, 116, 117, 143, 148, 154, 158, 159, 160, 161, 162, 174, 232, 261, 263, 264, 269, 270, 272, 273, 274, 284, 296, 305, 307, 311, 318, 323, 327, 331, 332, 334, 335, 336, 338, 339, 340, 351, 352, 353, 354, 355, 357, 358, 373, 378, 380, 381, 382, 383, 384, 386, 391, 400, 413, 415, 418, 419, 420, 422], "erfinv": 0, "expm1": 0, "stop_gradi": [0, 417], "flow": [0, 244, 419], "gradient": [0, 3, 5, 143, 244, 261, 269, 270, 284, 311, 324, 329, 340, 367, 389, 391, 392, 393, 395, 396, 397, 398, 399, 402, 404, 416, 417, 418, 419, 420, 421], "round": [0, 204], "decim": [0, 64, 223], "float": [0, 1, 10, 13, 15, 17, 75, 123, 124, 125, 126, 141, 142, 148, 153, 160, 205, 207, 212, 270, 278, 288, 292, 293, 294, 298, 299, 301, 306, 318, 330, 333, 337, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 360, 361, 362, 364, 368, 371, 372, 382, 383, 392, 393, 394, 395, 396, 397, 398, 403, 404, 405, 406, 408, 409], "point": [0, 1, 3, 4, 7, 79, 141, 205, 278], "matmul": [0, 87, 423], "multipl": [0, 7, 13, 86, 87, 123, 124, 174, 193, 204, 205, 326, 337, 406, 407, 409, 416, 419, 422], "gather": [0, 87], "slice_s": 0, "entri": [0, 293, 294], "take": [0, 1, 4, 5, 83, 84, 85, 87, 91, 143, 154, 176, 191, 198, 205, 251, 261, 263, 264, 267, 273, 274, 326, 413, 417, 418, 422, 423, 424], "treat": [0, 1, 134, 135, 137, 138, 250, 341, 416], "take_along_axi": [0, 418], "scatter": 0, "linear": [0, 1, 4, 5, 6, 268, 272, 284, 296, 313, 329, 331, 332, 334, 336, 341, 350, 351, 352, 353, 354, 356, 375, 376, 377, 379, 386, 389, 400, 408, 416], "scatter_add": 0, "scatter_prod": 0, "scatter_max": 0, "scatter_min": 0, "sqrt": [0, 4, 116, 126, 288, 296, 298, 299, 301, 302, 330, 337, 343, 344, 345, 346, 352, 392, 394, 395, 396, 403, 416], "root": [0, 4, 124, 224, 239, 330], "rsqrt": 0, "softmax": [0, 4, 126, 284, 358, 361], "precis": [0, 1, 4, 121, 126, 284, 296, 330, 399, 416], "power": [0, 417, 420], "rais": [0, 4, 160, 187, 202, 238, 313], "cumsum": 0, "inclus": [0, 39, 40, 41, 42, 101, 102, 103, 104, 139], "cumul": [0, 79, 101, 102, 103, 104], "cumprod": 0, "cummax": 0, "cummin": 0, "conv_gener": 0, "weight": [0, 3, 95, 96, 97, 123, 124, 272, 284, 313, 317, 328, 329, 359, 361, 389, 393, 396, 398, 400, 404, 417, 419], "padding_lo": 0, "padding_hi": 0, "kernel_dil": [0, 97], "input_dil": [0, 97], "group": [0, 95, 96, 97, 108, 126, 204, 205, 268, 298, 328, 329], "flip": [0, 97, 98], "gener": [0, 1, 2, 3, 10, 17, 97, 122, 134, 135, 163, 178, 207, 211, 212, 213, 216, 217, 340, 413, 416, 418, 419, 424], "convolut": [0, 95, 96, 97, 98, 289, 290, 291, 293, 294], "filter": [0, 98, 289, 290, 291, 306, 310], "conv1d": [0, 284], "dilat": [0, 95, 96, 97, 289, 290], "conv2d": [0, 284], "2d": [0, 96, 97, 110, 204, 288, 293], "conv3d": [0, 284], "tupl": [0, 29, 63, 66, 76, 92, 96, 97, 113, 118, 120, 154, 160, 161, 162, 200, 204, 221, 241, 261, 263, 271, 272, 273, 274, 275, 286, 287, 290, 291, 303, 304, 313, 315, 335, 341, 393, 395, 396, 397, 398, 415, 417], "3d": [0, 1, 288, 294, 341], "quantized_matmul": 0, "w": [0, 3, 96, 108, 204, 205, 261, 273, 287, 288, 290, 291, 293, 294, 302, 304, 404, 417], "scale": [0, 1, 4, 13, 108, 123, 124, 125, 126, 204, 205, 212, 270, 293, 294, 301, 326, 333, 334, 337, 341, 377, 393], "bias": [0, 108, 204, 205, 297, 300, 311, 323, 326], "group_siz": [0, 108, 204, 205, 268, 328, 329], "64": [0, 86, 108, 204, 205, 268, 278, 328, 329], "bit": [0, 108, 155, 204, 205, 222, 268, 278, 306, 328, 329, 330], "4": [0, 1, 4, 108, 139, 160, 204, 205, 228, 268, 274, 278, 286, 287, 288, 299, 303, 304, 328, 329, 340, 341, 343, 344, 345, 359, 416, 418, 421, 423], "quantiz": [0, 108, 164, 205, 328, 329], "its": [0, 1, 7, 174, 201, 215, 258, 269, 275, 284, 329, 395, 396, 397, 420, 423], "last": [0, 4, 28, 75, 87, 123, 124, 129, 132, 134, 135, 137, 138, 139, 147, 158, 159, 161, 162, 174, 183, 208, 237, 254, 289, 290, 291, 293, 294, 298, 341, 420], "dequant": [0, 204], "produc": [0, 1, 7, 91, 326, 386], "block_sparse_qmm": 0, "lhs_indic": [0, 87], "rhs_indic": [0, 87], "level": [0, 87, 345, 346], "tensordot": 0, "contract": 0, "over": [0, 1, 4, 5, 14, 16, 25, 26, 27, 28, 95, 96, 97, 101, 102, 103, 104, 129, 132, 135, 138, 147, 160, 162, 163, 173, 175, 177, 190, 201, 203, 224, 236, 237, 243, 247, 254, 256, 262, 288, 289, 290, 291, 298, 301, 330, 361, 405, 408, 417], "axes_a": 0, "axes_b": 0, "outer": [0, 416, 419], "inner": [0, 416], "addmm": 0, "c": [0, 1, 4, 13, 160, 286, 287, 288, 289, 290, 291, 293, 294, 299, 300, 303, 304, 420, 421, 423], "alpha": [0, 1, 13, 204, 350, 372, 374, 377, 396, 403], "f": [0, 1, 3, 5, 160, 284, 300, 396, 416, 420], "beta": [0, 1, 13, 108, 204, 288, 298, 299, 301, 371, 395, 396, 397, 398], "d": [0, 1, 4, 109, 110, 147, 160, 174, 178, 199, 250, 258, 259, 260, 275, 291, 294, 297, 300, 331, 392, 395, 397, 423], "block_masked_mm": 0, "block_siz": [0, 86], "mask_out": [0, 86], "mask_lh": [0, 86], "mask_rh": [0, 86], "block": [0, 1, 4, 86, 340], "mask": [0, 4, 86, 126, 320, 326, 418], "block_sparse_mm": 0, "extract": [0, 4, 43, 109, 110, 284, 310, 389], "construct": [0, 1, 5, 43, 109, 142, 197, 255, 266], "diag": [0, 162], "implement": [0, 3, 5, 125, 126, 160, 295, 310, 326, 333, 335, 337, 339, 340, 341, 383, 392, 393, 394, 395, 397, 398, 399, 411, 416, 417, 420], "allow": [0, 1, 153, 270, 284, 325, 389, 411, 418, 421], "inject": 0, "other": [0, 1, 4, 6, 153, 160, 284, 312, 389, 398, 416, 418, 419, 421], "thi": [0, 1, 4, 5, 7, 14, 15, 16, 17, 25, 26, 27, 28, 79, 87, 114, 148, 154, 158, 159, 160, 161, 162, 169, 173, 174, 175, 177, 179, 181, 190, 201, 203, 208, 231, 236, 237, 238, 243, 247, 250, 256, 262, 270, 273, 274, 284, 292, 293, 294, 297, 300, 307, 308, 310, 311, 314, 315, 316, 321, 323, 324, 325, 326, 329, 331, 339, 343, 344, 345, 346, 352, 353, 354, 367, 383, 389, 400, 415, 416, 417, 419, 420, 422], "ensur": [0, 1, 7, 270, 367], "been": [0, 1, 4, 182, 419], "when": [0, 1, 4, 6, 7, 91, 97, 158, 159, 160, 162, 164, 289, 290, 291, 341, 345, 346, 365, 371, 389, 407, 413, 416, 423], "atleast_1d": 0, "atleast": 0, "ndim": [0, 1, 139, 160, 162, 341], "atleast_2d": 0, "atleast_3d": 0, "number_of_el": 0, "invert": 0, "int32": [0, 10, 17, 37, 139, 153, 160, 213, 278, 341, 418, 421], "some": [0, 1, 3, 4, 5, 311, 323, 400, 416, 417, 419], "scalar": [0, 1, 12, 13, 15, 29, 48, 75, 78, 83, 84, 85, 86, 88, 90, 112, 113, 115, 141, 142, 143, 144, 145, 148, 155, 156, 157, 160, 163, 169, 170, 171, 172, 174, 176, 191, 193, 196, 200, 202, 207, 213, 216, 217, 219, 222, 226, 246, 261, 265, 269, 372, 417, 419, 421], "us": [0, 2, 3, 4, 5, 6, 7, 17, 37, 79, 108, 111, 113, 125, 139, 155, 158, 159, 160, 161, 162, 174, 181, 182, 183, 186, 204, 205, 220, 221, 222, 249, 271, 274, 278, 284, 287, 293, 295, 296, 297, 300, 302, 304, 306, 310, 317, 324, 326, 328, 329, 331, 333, 337, 340, 341, 345, 346, 352, 353, 360, 386, 389, 391, 392, 393, 395, 396, 397, 398, 399, 400, 413, 415, 416, 417, 418, 421, 423], "shapeless": [0, 91], "compil": [0, 2, 6, 7, 111, 114, 417, 419], "pun": 0, "intend": [0, 416], "conjug": [0, 93], "bitwise_and": 0, "bitwis": [0, 83, 84, 85, 155, 222], "bitwise_or": 0, "bitwise_xor": 0, "exclus": [0, 79, 85], "left_shift": 0, "shift": [0, 155, 222, 288], "left": [0, 4, 125, 155, 160, 204, 286, 287, 296, 303, 304, 333, 341, 352, 353, 362, 364, 372], "right_shift": 0, "right": [0, 1, 7, 204, 222, 286, 287, 296, 303, 304, 341, 352, 353, 362, 364, 372], "you": [1, 2, 4, 5, 6, 7, 284, 337, 340, 386, 413, 416, 417, 418, 420, 422, 423], "can": [1, 2, 4, 6, 7, 12, 17, 63, 76, 79, 83, 84, 85, 91, 110, 111, 112, 113, 115, 118, 144, 145, 155, 156, 157, 160, 169, 176, 191, 193, 196, 202, 207, 208, 213, 216, 217, 219, 222, 226, 246, 261, 274, 284, 287, 295, 304, 310, 323, 328, 335, 341, 361, 386, 389, 391, 399, 400, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "extend": [1, 200], "guid": [1, 6], "explain": 1, "how": [1, 4, 5, 284, 286, 287, 289, 290, 291, 295, 303, 304, 328, 341, 399, 416, 418, 423], "simpl": [1, 4, 5, 284, 295, 385, 416, 417, 419], "let": [1, 3, 4, 416, 417, 419, 420], "sai": [1, 4, 386, 419], "would": [1, 4, 341, 418, 419, 420, 423], "like": [1, 4, 6, 153, 198, 267, 294, 367, 400, 402, 416, 417, 419, 420, 421, 423], "them": [1, 4, 284, 311, 323, 423], "both": [1, 12, 83, 84, 85, 112, 113, 115, 144, 145, 153, 155, 156, 157, 160, 169, 176, 191, 193, 196, 202, 208, 219, 222, 246, 268, 286, 287, 299, 300, 303, 304, 391, 416, 417, 421, 423], "coeffici": [1, 392, 393, 395, 396, 397, 398], "respect": [1, 3, 5, 87, 123, 124, 143, 204, 261, 272, 284, 288, 296, 298, 299, 301, 389, 417, 421], "togeth": [1, 5, 204, 272, 273], "get": [1, 3, 5, 7, 96, 97, 105, 106, 180, 181, 182, 183, 210, 284, 416, 417, 419, 423], "z": [1, 297, 416, 419], "directli": [1, 4, 79], "import": [1, 2, 3, 4, 5, 7, 160, 228, 261, 271, 272, 273, 274, 275, 284, 286, 287, 288, 299, 303, 304, 313, 341, 359, 361, 368, 386, 389, 416, 417, 418, 419, 420, 421], "core": [1, 2, 3, 4, 5, 268, 284, 286, 287, 288, 299, 303, 304, 313, 316, 318, 321, 341, 342, 343, 344, 345, 346, 347, 348, 349, 359, 361, 368, 386, 389, 391, 416, 420, 421], "mx": [1, 2, 3, 4, 5, 37, 93, 94, 139, 153, 160, 161, 164, 228, 261, 270, 284, 286, 287, 288, 299, 303, 304, 306, 313, 317, 332, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 361, 365, 368, 375, 384, 386, 389, 391, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424], "def": [1, 3, 4, 5, 261, 284, 389, 416, 417, 418, 419, 420, 423], "simple_axpbi": 1, "perform": [1, 2, 4, 6, 13, 86, 87, 97, 101, 102, 103, 104, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 174, 205, 223, 236, 250, 284, 298, 340, 345, 346, 416, 418, 419, 423], "while": [1, 2, 4, 7, 221, 333, 419, 420], "leav": [1, 118, 272, 273, 274], "howev": [1, 284, 296, 298, 400, 413, 416, 419, 420], "mai": [1, 160, 268, 293, 417, 418], "need": [1, 4, 5, 6, 7, 78, 204, 284, 324, 325, 337, 340, 413, 417, 419, 420, 421, 423], "underli": 1, "perhap": [1, 4], "make": [1, 2, 4, 5, 7, 174, 195, 231, 284, 405, 406, 408, 409, 416, 419, 421, 423], "faster": [1, 113, 351, 416, 417], "differenti": [1, 6], "In": [1, 4, 5, 37, 174, 204, 272, 284, 293, 298, 389, 392, 394, 395, 397, 398, 399, 415, 416, 417, 419, 422, 423], "tutori": 1, "we": [1, 3, 4, 5, 108, 204, 205, 284, 295, 328, 335, 396, 398, 413, 415, 416, 417, 419, 423], "go": [1, 4, 417], "through": [1, 244, 340, 398, 416, 417, 420], "ad": [1, 3, 7, 123, 299, 389, 392, 393, 394, 395, 396, 397, 403, 419, 422], "It": [1, 4, 7, 143, 231, 261, 270, 274, 284, 325, 329, 399, 411, 420, 422], "cover": 1, "structur": [1, 399, 417], "librari": [1, 7, 284], "redirect": 1, "acceler": [1, 288], "appropri": [1, 416], "metal": [1, 6], "vjp": [1, 421], "jvp": [1, 421], "graph": [1, 4, 5, 6, 417], "provid": [1, 4, 79, 108, 143, 254, 261, 272, 274, 284, 306, 311, 313, 323, 324, 325, 328, 329, 340, 341, 385, 389, 422, 424], "rule": 1, "evalu": [1, 4, 5, 6, 118, 154, 263, 284, 309, 320, 389, 391, 416, 421], "discuss": 1, "more": [1, 2, 5, 9, 75, 87, 110, 158, 159, 162, 174, 186, 187, 226, 227, 278, 284, 288, 293, 333, 337, 340, 341, 343, 344, 345, 346, 413, 416, 417, 418, 421, 423], "detail": [1, 9, 186, 284, 293, 333, 337, 341, 343, 344, 345, 346, 392, 394, 395, 397, 398, 418, 421], "front": 1, "thei": [1, 3, 4, 15, 98, 148, 335, 363, 389, 398, 415, 416, 419, 421, 422, 423], "defin": [1, 3, 4, 5, 7, 160, 205, 268, 271, 420], "api": [1, 417], "axpbi": 1, "follow": [1, 4, 5, 6, 7, 17, 87, 98, 108, 160, 204, 273, 284, 352, 353, 365, 392, 393, 394, 395, 396, 397, 398, 404, 413, 416, 417, 423], "numpi": [1, 4, 5, 6, 12, 15, 17, 83, 84, 85, 88, 112, 113, 115, 144, 145, 148, 155, 156, 157, 169, 174, 176, 191, 193, 196, 202, 219, 222, 246, 419, 421, 422], "style": [1, 12, 15, 83, 84, 85, 112, 113, 115, 144, 145, 148, 155, 156, 157, 169, 174, 176, 191, 193, 196, 202, 219, 222, 246], "upcast": 1, "factor": [1, 13, 158, 161, 341, 361, 406, 409], "stream": [1, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 265, 266, 267, 423], "which": [1, 4, 5, 6, 7, 17, 36, 79, 91, 97, 110, 118, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 149, 150, 151, 152, 154, 158, 159, 160, 161, 162, 164, 178, 188, 204, 208, 209, 220, 221, 225, 226, 227, 228, 229, 241, 242, 250, 261, 263, 264, 268, 287, 293, 294, 296, 304, 306, 310, 333, 361, 364, 368, 371, 386, 399, 400, 413, 416, 417, 418, 419, 423, 424], "schedul": [1, 187, 391, 405, 406, 407, 408, 409, 411, 423], "simplest": [1, 284], "wai": [1, 4, 7, 284, 341, 416, 417, 418], "term": [1, 362, 392, 393, 394, 395, 396, 397, 403], "exist": [1, 2, 4, 311, 323], "auto": [1, 7], "themselv": [1, 416], "contain": [1, 4, 27, 28, 66, 87, 91, 110, 133, 134, 135, 160, 170, 171, 172, 204, 238, 265, 270, 284, 310, 312, 313, 319, 340, 368, 386, 389, 416, 417], "act": [1, 367], "nor": [1, 143, 261], "rather": [1, 417, 423], "easi": [1, 284], "interfac": 1, "part": [1, 417, 418], "further": [1, 7, 417], "ha": [1, 2, 4, 5, 6, 7, 75, 91, 110, 133, 134, 136, 137, 138, 143, 158, 159, 162, 178, 182, 208, 288, 297, 300, 302, 331, 389, 391, 416, 418, 419, 421, 423], "method": [1, 4, 8, 9, 10, 29, 268, 276, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 317, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 389, 392, 393, 394, 395, 396, 397, 398, 400, 403, 404, 411], "run": [1, 2, 4, 5, 6, 7, 8, 199, 276, 288, 306, 392, 393, 395, 396, 397, 416, 419, 423, 424], "our": [1, 4, 5, 335, 392, 393, 394, 395, 397, 398], "concret": [1, 297, 300, 302, 331, 419, 423], "class": [1, 4, 5, 8, 9, 10, 29, 276, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 389, 392, 393, 394, 395, 396, 397, 398, 403, 404, 411], "public": [1, 284], "explicit": [1, 400, 413, 420], "alpha_": 1, "beta_": 1, "must": [1, 2, 7, 86, 90, 142, 160, 207, 208, 211, 213, 216, 217, 265, 341, 420], "know": [1, 4], "itself": [1, 268, 400], "popul": 1, "To": [1, 2, 3, 4, 5, 7, 186, 284, 386, 416, 417, 421], "avoid": [1, 318, 416], "unnecessari": [1, 4], "alloc": [1, 182, 186, 187, 389], "respons": 1, "void": 1, "eval_cpu": 1, "overrid": [1, 114], "eval_gpu": 1, "jacobian": [1, 154, 263, 421], "primal": [1, 154, 263], "argnum": [1, 143, 261, 417], "cotan": 1, "across": [1, 298], "repres": [1, 4, 368, 372, 420], "virtual": 1, "vmap": [1, 417, 419, 421], "print": [1, 3, 4, 5, 7, 270, 271, 272, 273, 275, 284, 413, 416, 417, 418, 419, 420, 421], "ostream": 1, "o": [1, 7, 126, 300], "check": [1, 7, 78, 153, 184, 313, 417, 418], "is_equival": 1, "privat": 1, "fall": 1, "eval": [1, 2, 3, 4, 5, 284, 389, 391, 416, 417, 419, 421], "out": [1, 7, 86, 286, 287, 293, 294, 303, 304, 320, 416, 417, 418], "deriv": [1, 417, 419], "paramet": [1, 3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 310, 311, 313, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 354, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 383, 385, 386, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 416, 417, 419], "also": [1, 4, 5, 6, 7, 10, 12, 83, 84, 85, 111, 112, 113, 115, 129, 132, 135, 138, 144, 145, 155, 156, 157, 169, 176, 191, 193, 196, 202, 204, 219, 222, 246, 268, 269, 284, 310, 324, 326, 328, 329, 336, 351, 377, 379, 385, 391, 416, 417, 418, 419, 420, 421, 424], "pass": [1, 4, 5, 63, 76, 199, 200, 261, 269, 271, 272, 273, 284, 311, 323, 324, 325, 335, 416, 419], "reimplement": 1, "now": [1, 4, 7, 329, 416, 420], "promot": 1, "promoted_dtyp": 1, "promote_typ": 1, "out_dtyp": 1, "is_floating_point": 1, "cast": [1, 36, 136, 137, 138, 164, 306, 318, 420], "up": [1, 4, 416], "determin": [1, 110, 211, 274, 278, 317, 422], "x_cast": 1, "y_cast": 1, "broadcasted_input": 1, "out_shap": 1, "unique_ptr": 1, "make_shar": 1, "to_stream": 1, "handl": [1, 284, 416], "resolv": 1, "No": [1, 4], "happen": [1, 4, 123, 340, 391, 416, 419], "call": [1, 2, 4, 5, 30, 141, 179, 183, 284, 295, 311, 323, 328, 335, 389, 391, 400, 416, 417, 419], "alon": [1, 420], "onli": [1, 4, 6, 7, 78, 86, 95, 96, 97, 160, 204, 211, 284, 310, 311, 313, 318, 320, 323, 324, 325, 389, 416, 417, 422, 423], "execut": [1, 7, 80, 81, 82, 183, 420, 423], "devic": [1, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 265, 266, 267, 276, 423, 424], "user": [1, 4, 284], "memori": [1, 6, 79, 179, 181, 182, 183, 185, 186, 187, 340, 389, 393, 416, 419, 420], "naiv": [1, 417], "version": [1, 7, 108, 169, 173, 204, 236, 264, 413, 417, 418], "declar": 1, "member": [1, 284, 316, 321], "earlier": 1, "find": [1, 3, 7], "captur": [1, 2, 91, 188, 189, 284, 416], "axpby_impl": 1, "readi": 1, "malloc_or_wait": 1, "synchron": [1, 416], "avail": [1, 3, 4, 5, 7, 9, 184, 423], "There": [1, 284, 341, 416], "wait": [1, 4, 187], "here": [1, 4, 416, 417, 419, 422, 423], "request": 1, "under": [1, 160], "pressur": 1, "set_data": 1, "nbyte": 1, "collect": [1, 272, 273, 415], "pointer": 1, "x_ptr": 1, "y_ptr": 1, "out_ptr": 1, "relev": 1, "static_cast": 1, "out_idx": 1, "size": [1, 4, 5, 49, 66, 86, 96, 108, 120, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 146, 153, 160, 182, 187, 204, 205, 208, 221, 238, 241, 268, 284, 286, 287, 289, 290, 291, 295, 299, 303, 304, 328, 329, 341, 393, 419, 420], "map": [1, 5, 37, 164, 272, 295, 306], "x_offset": 1, "elem_to_loc": 1, "y_offset": 1, "contigu": [1, 79], "regularli": 1, "default": [1, 7, 13, 14, 15, 16, 17, 25, 26, 27, 28, 78, 79, 86, 87, 91, 92, 95, 96, 97, 105, 106, 108, 109, 110, 122, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 146, 148, 158, 159, 160, 161, 162, 163, 164, 173, 175, 177, 178, 186, 187, 190, 197, 201, 203, 204, 205, 207, 208, 209, 211, 212, 213, 215, 216, 217, 220, 221, 223, 230, 231, 237, 238, 241, 242, 243, 245, 247, 249, 254, 256, 257, 258, 259, 260, 261, 262, 264, 266, 268, 278, 286, 287, 288, 289, 290, 291, 297, 299, 300, 302, 303, 304, 306, 311, 313, 318, 320, 323, 326, 327, 328, 329, 331, 333, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 354, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 389, 392, 393, 394, 395, 396, 397, 398, 403, 404, 405, 413, 415, 416, 417, 420, 422, 424], "row": [1, 79, 122, 146, 204, 258], "henc": [1, 204, 416], "doesn": [1, 284], "addit": [1, 4, 7, 12, 13, 123, 124, 126, 164, 288, 298, 301, 326, 330, 389, 417], "should": [1, 3, 4, 5, 7, 79, 110, 123, 124, 126, 154, 179, 188, 204, 251, 261, 263, 268, 271, 284, 289, 290, 291, 293, 294, 320, 326, 335, 361, 363, 368, 389, 415, 416, 417, 419, 420, 424], "work": [1, 2, 4, 7, 187, 416, 417, 418, 419], "incom": 1, "accordingli": 1, "dispatch": 1, "float16": [1, 10, 164, 278, 306, 419, 420], "bfloat16": [1, 10, 278, 420], "complex64": [1, 278], "throw": [1, 91], "encount": [1, 417], "unexpect": [1, 17], "correct": [1, 7, 395, 396, 397, 418, 419], "float16_t": 1, "bfloat16_t": 1, "complex64_t": 1, "runtime_error": 1, "support": [1, 4, 6, 7, 15, 86, 95, 96, 97, 126, 139, 148, 158, 159, 161, 162, 164, 174, 204, 211, 417, 418, 420, 422], "good": [1, 7, 416, 423], "fallback": 1, "routin": 1, "framework": [1, 6], "certain": [1, 320, 416], "case": [1, 4, 129, 132, 133, 135, 136, 137, 138, 139, 158, 159, 161, 162, 174, 221, 241, 287, 293, 304, 339, 371, 377, 382, 383, 399, 400, 416, 417, 421, 422, 423, 424], "doe": [1, 2, 4, 7, 181, 270, 284, 416, 418, 419, 420], "half": [1, 17, 213, 217, 333, 419], "assum": [1, 4, 86, 161, 272, 284, 286, 287, 298, 303, 304], "fix": [1, 4, 7, 419], "direct": [1, 4, 308, 398, 423], "column": [1, 122, 146, 204], "place": [1, 4, 37, 223, 268, 419, 420], "expect": [1, 4, 289, 290, 291, 292, 293, 294, 337, 340, 362, 416, 418], "write": [1, 4, 284, 420], "catlas_saxpbi": 1, "axpby_impl_acceler": 1, "special": 1, "copy_inplac": 1, "copytyp": 1, "inplac": 1, "incx": 1, "inci": 1, "For": [1, 4, 7, 37, 87, 126, 153, 160, 204, 275, 284, 288, 293, 306, 311, 320, 323, 329, 333, 337, 341, 343, 344, 345, 346, 386, 413, 416, 417, 418, 419, 420, 421, 422, 423], "fit": [1, 204, 423], "criteria": 1, "With": 1, "mind": [1, 4], "finish": 1, "assert": 1, "singl": [1, 5, 118, 154, 164, 178, 200, 263, 287, 304, 416, 418, 422], "flag": [1, 7, 416, 420], "row_contigu": 1, "col_contigu": 1, "common": [1, 391, 416, 419], "just": [1, 5, 301, 416, 418], "much": [1, 4, 286, 287, 303, 304, 416, 419], "enough": [1, 419], "If": [1, 4, 7, 14, 15, 16, 17, 25, 26, 27, 28, 75, 78, 79, 90, 92, 98, 101, 102, 103, 104, 109, 110, 118, 123, 125, 136, 137, 138, 141, 142, 143, 148, 158, 160, 164, 173, 174, 175, 177, 178, 186, 187, 190, 197, 200, 201, 203, 208, 211, 220, 236, 237, 238, 243, 247, 249, 250, 251, 254, 256, 261, 262, 264, 266, 268, 272, 274, 288, 289, 290, 291, 298, 301, 302, 311, 313, 323, 329, 331, 333, 335, 337, 341, 359, 361, 372, 393, 416, 417, 419, 422, 423, 424], "plan": [1, 416], "enjoi": 1, "speed": 1, "appl": [1, 4, 6, 7, 423], "silicon": [1, 4, 6, 7, 423], "address": 1, "shade": 1, "languag": 1, "kernel": [1, 95, 96, 97, 286, 287, 303, 304, 416, 418], "written": 1, "help": [1, 4, 416, 423], "resourc": 1, "walkthrough": 1, "pipelin": 1, "document": [1, 2, 63, 76, 226, 227, 278, 416, 417, 418], "specif": [1, 7, 417], "cpp": 1, "keep": [1, 14, 16, 25, 26, 173, 175, 177, 190, 203, 243, 247, 262, 284, 310, 417, 419], "launch": [1, 418], "exactli": [1, 4, 313, 417], "mani": [1, 79, 238, 289, 290, 291, 295, 328, 416, 419], "thread": 1, "pick": 1, "assign": [1, 37, 389], "axpby_gener": 1, "buffer": [1, 181, 420], "3": [1, 4, 7, 139, 153, 160, 161, 270, 274, 291, 296, 341, 344, 346, 352, 355, 393, 398, 413, 416, 418, 420, 421], "x_stride": 1, "6": [1, 4, 160, 228, 340, 344, 352, 353, 355, 362, 372, 376, 403, 416, 418, 421], "y_stride": 1, "7": [1, 4, 160, 204, 418], "uint": 1, "thread_position_in_grid": 1, "instanti": [1, 5, 419], "give": [1, 4, 5, 27, 416], "uniqu": [1, 413], "host": 1, "name": [1, 164, 204, 205, 226, 227, 228, 229, 284, 298, 310, 313, 315, 418, 422], "so": [1, 4, 7, 143, 261, 292, 341, 391, 416, 419, 423], "identifi": [1, 271, 415], "instantiate_axpbi": 1, "type_nam": 1, "host_nam": 1, "axpby_general_": 1, "set": [1, 4, 5, 7, 91, 111, 114, 123, 125, 180, 186, 187, 230, 231, 245, 296, 301, 302, 309, 311, 318, 319, 320, 323, 324, 329, 333, 339, 360, 372, 383, 389, 393, 400, 413, 417, 419], "grid": [1, 178], "shown": 1, "below": [1, 7, 160, 258, 260, 278, 341, 419], "prepar": [1, 4], "carri": 1, "ostringstream": 1, "kname": 1, "axpby_": 1, "general_": 1, "type_to_nam": 1, "sure": [1, 2, 4, 7, 284, 416], "look": [1, 4], "folder": 1, "register_librari": 1, "mlx_ext": 1, "get_colocated_mtllib_path": 1, "get_kernel": 1, "str": [1, 98, 143, 160, 164, 178, 180, 188, 225, 226, 227, 228, 229, 261, 271, 275, 306, 307, 310, 311, 313, 315, 317, 323, 341, 345, 346, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "encod": [1, 125, 333, 337, 340, 361], "compute_encod": 1, "get_command_encod": 1, "setcomputepipelinest": 1, "regist": [1, 5], "those": [1, 4, 284], "nelem": 1, "set_input_arrai": 1, "set_output_arrai": 1, "setbyt": 1, "sizeof": 1, "threadgroup": 1, "higher": [1, 147, 368, 417], "than": [1, 4, 75, 87, 98, 110, 113, 125, 144, 145, 156, 157, 158, 159, 162, 174, 186, 270, 272, 333, 339, 341, 368, 371, 383, 393, 398, 416, 417, 423], "tgp_size": 1, "maxtotalthreadsperthreadgroup": 1, "mtl": 1, "group_dim": 1, "grid_dim": 1, "among": 1, "dispatchthread": 1, "few": [1, 4, 5, 6, 419, 421], "thing": [1, 4], "note": [1, 4, 7, 15, 79, 86, 91, 95, 96, 126, 134, 135, 148, 160, 181, 204, 208, 268, 284, 330, 341, 420, 422], "about": [1, 4, 5, 180, 419, 423], "befor": [1, 4, 7, 27, 201, 310, 340, 400, 418, 419], "track": [1, 284, 288], "activ": [1, 7, 181, 293, 339, 340, 373, 382, 383, 385, 416], "command_buff": 1, "mtlcommandbuff": 1, "associ": [1, 228, 229, 419], "reli": 1, "u": [1, 158, 162, 302, 325, 411, 419], "command": [1, 2, 7], "instead": [1, 7, 284, 325, 337, 417, 419], "end_encod": 1, "until": [1, 419, 421], "hit": 1, "flush": 1, "next": [1, 4, 5, 186], "These": [1, 91, 251, 361, 423], "built": [1, 7, 419], "top": [1, 256, 302, 341], "includ": [1, 101, 102, 103, 104, 181, 182, 187, 301, 307, 319, 329, 362, 416, 417, 418, 421, 422, 424], "forward": [1, 261, 416, 419], "mode": [1, 98, 309, 320, 322, 341, 345, 346], "diff": 1, "push": 1, "op": [1, 199, 311, 419], "similarli": [1, 7, 174, 417, 419], "scale_arr": 1, "contribut": 1, "tangent_x": 1, "tangent_i": 1, "cotang": [1, 263], "unus": 1, "arg": [1, 4, 9, 10, 118, 228, 229], "push_back": 1, "fulli": [1, 6, 416, 420, 423], "overal": 1, "directori": [1, 4, 7], "h": [1, 95, 96, 160, 287, 288, 290, 291, 293, 294, 297, 300, 304, 331, 417, 419], "mlx_sample_extens": 1, "__init__": [1, 4, 5, 8, 9, 10, 29, 276, 284, 389], "py": [1, 4, 7], "cmakelist": 1, "txt": 1, "setup": [1, 3, 5, 7, 416], "packag": [1, 3, 5, 386], "hold": [1, 4, 9, 10, 160, 416], "instal": 1, "nanobind": [1, 7, 340], "sinc": [1, 4, 5, 183, 389, 398, 407, 420, 423], "compon": [1, 4], "etc": [1, 204, 284, 341], "alreadi": [1, 2, 4], "nb_modul": 1, "_ext": 1, "doc": [1, 5], "sampl": [1, 3, 4, 163, 207, 208, 209, 211, 213, 216, 217, 343, 344, 345, 346, 348, 349, 362, 368, 372, 413, 416], "_a": 1, "nb": 1, "kw_onli": 1, "none": [1, 4, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 271, 272, 273, 274, 276, 286, 287, 296, 303, 304, 306, 310, 311, 318, 323, 326, 331, 337, 340, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 393, 411, 418], "r": [1, 4, 161, 261, 293, 297], "most": [1, 208, 284, 402, 416, 417, 418, 419], "complex": [1, 93, 94, 134, 135, 136, 137, 138, 271, 278, 284, 325, 416, 417], "abov": [1, 4, 204, 259, 284, 341, 396, 417, 418, 419, 423], "come": [1, 4, 417], "bell": 1, "whistl": 1, "liter": [1, 341, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "modul": [1, 4, 5, 268, 269, 335, 340, 386, 402, 415, 416, 419], "caster": 1, "requir": [1, 4, 284, 419, 420], "find_packag": 1, "config": 1, "link": [1, 7], "your": [1, 4, 7, 389, 417, 419], "add_librari": 1, "target_sourc": 1, "cmake_current_list_dir": 1, "header": 1, "target_include_directori": 1, "target_link_librari": 1, "attach": 1, "conveni": [1, 5, 153], "mlx_build_metallib": 1, "metallib": [1, 7], "target": [1, 261, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 416], "automat": [1, 6, 164, 421, 422, 423], "what": [1, 4, 272], "practic": [1, 416], "mlx_build_met": [1, 7], "mlx_ext_metallib": 1, "titl": 1, "include_dir": 1, "project_source_dir": 1, "mlx_include_dir": 1, "output_directori": 1, "cmake_library_output_directori": 1, "add_depend": 1, "endif": 1, "final": [1, 3, 4, 5, 405, 408], "nanobind_add_modul": 1, "nb_static": 1, "stable_abi": 1, "lto": 1, "nomins": 1, "nb_domain": 1, "build_shared_lib": [1, 7], "target_link_opt": 1, "wl": 1, "rpath": 1, "loader_path": 1, "onc": [1, 416], "describ": [1, 419], "util": [1, 4, 6, 7, 228, 284], "__name__": [1, 4], "__main__": [1, 4], "descript": [1, 4, 278], "ext_modul": 1, "cmakeextens": 1, "cmdclass": 1, "build_ext": 1, "cmakebuild": 1, "package_data": 1, "dylib": 1, "extras_requir": 1, "dev": [1, 7], "zip_saf": 1, "python_requir": 1, "even": [1, 4, 91, 416, 419, 420], "though": [1, 4, 416, 419, 420], "locat": [1, 79, 324, 325, 423], "pip": [1, 7], "develop": [1, 7], "j8": 1, "libmlx_ext": 1, "cpython": 1, "3x": 1, "darwin": 1, "try": [1, 7], "after": [1, 4, 5, 27, 139, 141, 179, 201, 204, 288, 298, 301, 306, 307, 311, 313, 320, 323, 324, 325, 326, 340, 371, 416, 423], "abl": [1, 204], "simpli": [1, 4, 7, 332, 350, 356, 375, 384, 389, 416, 417], "plai": [1, 4], "item": [1, 3, 4, 5, 272, 419, 420, 421], "quick": [1, 6], "benchmark": [1, 416], "see": [1, 4, 5, 7, 9, 10, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 160, 186, 226, 227, 268, 278, 284, 288, 293, 296, 309, 327, 328, 329, 332, 333, 334, 336, 337, 338, 341, 343, 344, 345, 346, 351, 352, 353, 377, 416, 417, 418, 421, 423], "compar": [1, 78, 416], "time": [1, 4, 7, 187, 255, 284, 286, 287, 297, 300, 303, 304, 331, 416, 417, 419, 423], "set_default_devic": 1, "256": [1, 5], "512": [1, 2, 4, 340, 423], "random": [1, 2, 3, 4, 5, 6, 286, 287, 288, 299, 303, 304, 313, 320, 416, 417, 423, 424], "normal": [1, 3, 4, 123, 124, 211, 216, 284, 286, 287, 288, 298, 299, 301, 303, 304, 330, 340, 343, 345, 420, 423], "bench": 1, "warm": [1, 416], "100": [1, 3, 4, 408, 416, 417, 419, 423], "5000": 1, "e": [1, 5, 7, 87, 116, 154, 232, 288, 289, 290, 291, 293, 294, 298, 299, 301, 311, 330, 357, 358, 380, 385, 391, 394, 416, 419, 424], "simple_tim": 1, "custom_tim": 1, "3f": [1, 5, 416], "114": 1, "109": 1, "modest": 1, "improv": [1, 2, 4, 392, 393, 394, 395, 396, 397, 403, 416], "awai": [1, 4], "nn": [1, 4, 5, 228, 272, 284, 386, 389, 391, 400, 402, 416, 419], "grad": [1, 3, 5, 261, 270, 391, 399, 416, 417, 418, 419, 421], "profil": 2, "kei": [2, 4, 126, 180, 207, 208, 209, 211, 212, 213, 215, 216, 217, 271, 272, 310, 311, 323, 326, 400, 413, 415, 417], "optim": [2, 3, 5, 6, 324, 416, 417, 419], "build": [2, 4, 6, 345, 389, 416], "mlx": [2, 3, 4, 5, 7, 284, 386, 389, 391, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423], "mlx_metal_debug": [2, 7], "debug": 2, "record": [2, 183, 419], "dure": [2, 91, 292, 293, 294, 341, 420], "later": [2, 7], "inspect": [2, 416, 421], "label": [2, 3, 361, 368], "object": [2, 9, 29, 48, 75, 91, 153, 228, 264, 271, 272, 273, 274, 278, 293, 340, 415], "queue": 2, "readabl": 2, "enabl": [2, 4, 7, 91, 114, 404], "python": [2, 4, 48, 66, 75, 118, 271, 272, 273, 274, 275, 389, 399, 400, 402, 415, 417, 420], "prepend": [2, 174], "cmake_arg": 2, "dmlx_metal_debug": 2, "ON": [2, 7], "start_captur": 2, "initi": [2, 3, 4, 274, 284, 288, 298, 299, 301, 302, 327, 330, 342, 343, 344, 345, 346, 347, 348, 349, 389, 400, 405, 406, 408, 409, 416, 419], "gpu": [2, 6, 180, 416, 418, 423], "trace": [2, 416], "applic": [2, 7], "mtl_capture_en": 2, "uniform": [2, 284, 302, 313, 344, 346, 386, 413, 416, 417, 423], "trace_fil": 2, "mlx_trace": 2, "gputrac": [2, 188], "path": [2, 7, 188, 228, 229, 268, 273, 313], "_": [2, 3, 4, 273, 284, 405, 406, 407, 408, 409, 413, 416, 419, 423], "stop_captur": 2, "open": [2, 7, 17, 213, 217], "replai": 2, "great": 2, "overview": 2, "oper": [2, 4, 6, 8, 36, 80, 81, 82, 87, 97, 126, 202, 236, 244, 251, 276, 284, 340, 398, 416, 417, 418, 419, 420, 421, 423, 424], "checkout": [2, 416], "inform": [2, 4, 5, 7, 180, 226, 227, 278, 284, 288, 296, 326, 417, 423], "skip": [2, 79], "save": [2, 4, 6, 164, 188, 204, 226, 227, 228, 229, 317, 419], "project": [2, 4, 326], "cmake": [2, 7], "mkdir": [2, 7], "cd": [2, 7], "g": [2, 7, 160, 204, 300, 385, 403, 404, 419, 424], "xcodeproj": 2, "metal_captur": 2, "exampl": [2, 3, 4, 5, 7, 17, 37, 139, 160, 161, 245, 250, 270, 273, 274, 284, 286, 287, 288, 299, 303, 304, 311, 313, 320, 323, 341, 342, 343, 344, 345, 346, 347, 348, 349, 359, 361, 368, 386, 391, 400, 405, 406, 407, 408, 409, 413, 417, 418, 419, 420, 421, 422], "schema": 2, "basic": [3, 223, 417], "model": [3, 5, 6, 228, 268, 269, 272, 273, 284, 306, 309, 311, 313, 317, 320, 322, 323, 324, 326, 340, 386, 389, 391, 399, 400, 402, 416, 419], "learn": [3, 5, 6, 288, 298, 299, 301, 327, 330, 392, 393, 394, 395, 396, 397, 398, 403, 404], "problem": [3, 5, 284], "metadata": [3, 164, 226, 227], "num_featur": [3, 288], "num_exampl": 3, "1_000": 3, "num_it": 3, "10_000": 3, "iter": [3, 5, 162, 272, 273, 413, 416, 419], "sgd": [3, 5, 391, 398, 400, 405, 406, 409, 416], "lr": [3, 398], "01": [3, 356, 396], "rate": [3, 392, 393, 394, 395, 396, 397, 398, 403, 404], "ll": [3, 5, 364, 416, 417], "synthet": 3, "dataset": [3, 419], "design": [3, 6, 413, 423], "ground": [3, 4, 361, 371], "truth": [3, 361, 371], "w_star": 3, "gaussian": [3, 296, 351, 352, 353, 362], "nois": 3, "noisi": 3, "ep": [3, 123, 124, 288, 298, 299, 301, 330, 360, 362, 372, 392, 393, 394, 395, 396, 397, 403], "loss": [3, 5, 261, 284, 391, 416, 417, 419], "loss_fn": [3, 5, 391, 416, 417], "grad_fn": [3, 416, 417], "randomli": [3, 4, 292, 293, 294], "Then": [3, 7], "repeatedli": 3, "verifi": [3, 7], "close": [3, 6, 7, 15, 148], "error_norm": 3, "5f": 3, "someth": [3, 4, 418], "00005": 3, "00364": 3, "complet": [3, 4, 7, 187, 324, 325, 417, 423], "github": [3, 5, 7, 416], "repo": [3, 5, 7, 416], "effici": [4, 6, 87, 293, 333, 419, 421], "larg": [4, 284, 326, 367, 416, 419], "ish": 4, "transform": [4, 6, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 269, 284, 288, 298, 301, 302, 310, 311, 323, 329, 333, 418], "without": [4, 6, 244, 326, 385, 415, 416, 419, 420, 423], "compromis": 4, "eas": 4, "llama": 4, "famili": 4, "200": [4, 407], "line": [4, 419, 420], "neural": [4, 6, 295, 343, 344, 373, 386, 389, 403], "network": [4, 6, 288, 293, 295, 343, 344, 386, 389, 403], "concis": 4, "architectur": [4, 7, 180, 284, 325, 423], "notabl": [4, 6], "rope": [4, 284], "posit": [4, 27, 110, 125, 139, 143, 152, 158, 192, 201, 211, 261, 272, 284, 289, 290, 291, 326, 333, 337, 362, 372], "cach": [4, 179, 181, 182, 186, 416], "llamaattent": 4, "self": [4, 5, 8, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 276, 284, 373, 389], "dim": [4, 125, 126, 295, 298, 299, 301, 326, 328, 330, 333, 337, 340], "num_head": [4, 326, 340], "super": [4, 5, 284, 389], "tradit": [4, 125, 293, 294, 333], "query_proj": 4, "bia": [4, 108, 123, 204, 205, 272, 284, 289, 290, 291, 297, 300, 301, 302, 311, 313, 323, 326, 329, 331, 395, 396, 397, 400, 417], "key_proj": 4, "value_proj": 4, "out_proj": [4, 389], "__call__": [4, 5, 284, 389], "queri": [4, 126, 326], "l": [4, 5, 158, 284, 286, 288, 289, 297, 300, 303, 331, 371], "combin": [4, 162, 274], "key_cach": 4, "value_cach": 4, "math": [4, 372, 416], "score": [4, 126, 368], "values_hat": 4, "possibli": [4, 13, 86, 87, 174, 270], "rm": [4, 7, 124, 393], "swiglu": 4, "rmsnorm": [4, 284], "llamaencoderlay": 4, "mlp_dim": [4, 340], "norm1": 4, "norm2": 4, "linear1": 4, "linear2": 4, "linear3": 4, "instanc": [4, 37, 204, 275, 284, 299, 306, 307, 308, 311, 313, 314, 315, 320, 323, 324, 325, 335, 389, 420], "embed": [4, 268, 284, 328, 333, 337, 360], "emb": [4, 295, 328, 337], "token": [4, 295, 328], "num_lay": [4, 5, 391], "vocab_s": 4, "norm": [4, 124, 270, 298, 372, 397, 398], "multiheadattent": [4, 284], "create_additive_causal_mask": 4, "list": [4, 9, 14, 16, 29, 69, 75, 79, 80, 81, 82, 88, 91, 92, 97, 118, 128, 129, 131, 132, 134, 135, 137, 138, 142, 143, 154, 160, 173, 175, 177, 178, 190, 197, 200, 203, 207, 208, 209, 211, 212, 213, 216, 217, 226, 236, 238, 242, 243, 247, 254, 255, 257, 261, 262, 263, 266, 271, 274, 275, 284, 311, 313, 314, 315, 316, 321, 323, 324, 325, 389, 395, 396, 397, 398, 407, 415, 416, 417, 419], "still": [4, 7, 160, 416, 419], "consid": [4, 15, 78, 148, 271, 272, 273, 298, 415], "train": [4, 5, 284, 288, 292, 293, 294, 309, 311, 323, 343, 344], "process": [4, 97, 98, 272, 273, 294, 295, 340, 415], "ignor": [4, 37, 90, 91, 118, 393], "whatsoev": 4, "rest": [4, 125, 272, 273, 333], "subsect": 4, "prompt": 4, "autoregress": 4, "yield": [4, 5, 413], "temp": 4, "causal": 4, "append": [4, 174, 416, 419], "store": 4, "per": [4, 5, 108, 204, 205, 268, 288, 298, 299, 301, 330, 411, 416, 419], "care": [4, 419], "logit": [4, 208, 359, 361, 416], "categor": 4, "lazili": [4, 284], "noth": [4, 284, 419], "yet": [4, 160, 284, 389, 400, 417, 418, 419, 421], "forc": [4, 5, 284, 421], "choos": [4, 125, 333], "pars": 4, "feed": 4, "back": [4, 184, 420], "loop": [4, 5, 416, 417, 419], "unsqueez": 4, "sequenc": [4, 14, 16, 32, 33, 54, 55, 56, 57, 61, 69, 72, 73, 77, 79, 88, 97, 120, 128, 129, 131, 132, 134, 135, 137, 138, 142, 173, 175, 177, 190, 197, 203, 207, 208, 209, 211, 212, 213, 216, 217, 221, 236, 238, 241, 243, 247, 254, 255, 257, 262, 266, 288, 289, 297, 300, 331, 340, 413, 423], "length": [4, 241, 288, 289, 297, 300, 331, 407], "len": [4, 129, 132, 135, 138, 407], "overwrit": 4, "discard": [4, 271], "old": 4, "moment": [4, 97, 393, 395, 396, 397], "anymor": 4, "everyth": 4, "small": [4, 121, 123, 124, 288, 298, 301, 330, 362, 367, 372, 416, 423], "12": [4, 407], "8192": 4, "1024": 4, "actual": [4, 17, 313, 389, 419], "materi": [4, 6], "could": [4, 284], "20_000": 4, "machin": [4, 6, 7, 403], "8gb": 4, "ram": 4, "32": [4, 5, 86, 204, 205, 278, 287, 304, 330, 416], "44": 4, "bracket": 4, "becaus": [4, 181, 284, 419], "batch": [4, 13, 86, 87, 174, 211, 288, 289, 290, 291, 293, 294, 297, 300, 326, 331, 341, 419], "zip": [4, 5], "haven": 4, "anyth": [4, 261, 419], "result": [4, 13, 17, 37, 75, 79, 91, 123, 124, 160, 174, 205, 211, 220, 242, 272, 273, 274, 337, 416, 417, 420], "veri": [4, 326, 419, 423], "similar": [4, 153, 272, 324, 325, 326, 360, 420, 422], "runtim": [4, 416], "section": [4, 7, 238, 372, 416, 417], "access": [4, 48, 284, 389, 400, 419, 423], "origin": [4, 110, 270, 288, 319, 343, 344, 345, 346, 392, 393, 394, 395, 397, 398, 420], "sentencepiec": 4, "pytorch": [4, 6, 298, 417], "compat": [4, 208, 211, 422], "npz": [4, 164, 228, 229, 313, 317, 422], "file": [4, 7, 164, 225, 226, 227, 228, 229, 313, 317, 417, 422], "argpars": 4, "itertool": [4, 272], "starmap": [4, 272], "np": [4, 5, 420, 421], "torch": [4, 420], "map_torch_to_mlx": 4, "tok_embed": 4, "elif": 4, "replac": [4, 324, 325, 340, 371], "attention_norm": 4, "ffn_norm": 4, "wq": 4, "wk": 4, "wv": 4, "wo": 4, "w1": [4, 270], "w2": [4, 270], "w3": 4, "ffn": 4, "separ": [4, 63, 76, 298, 368], "submodul": [4, 5, 284, 307, 311, 312, 323, 325], "feed_forward": 4, "parser": 4, "argumentpars": 4, "add_argu": 4, "torch_weight": 4, "output_fil": 4, "parse_arg": 4, "state": [4, 5, 284, 297, 300, 331, 391, 400, 413, 416], "savez": [4, 317, 422], "v": [4, 98, 126, 284, 311, 420], "disk": 4, "text": [4, 286, 287, 296, 297, 300, 303, 304, 305, 331, 339, 343, 344, 345, 346, 352, 355, 362, 363, 364, 367, 368, 371, 373, 374, 377, 378, 382, 383, 393, 398], "format": [4, 164, 225, 226, 227, 228, 229, 420], "dictionari": [4, 91, 164, 180, 226, 227, 270, 271, 274, 284, 310, 319, 324, 325, 401, 415, 422], "represent": [4, 204, 271, 275], "tree_unflatten": 4, "helper": [4, 416], "weight_fil": 4, "incur": 4, "sever": [4, 7, 95, 96, 97, 228, 229, 416, 422], "futur": [4, 329, 418, 419], "pth": 4, "current": [4, 6, 7, 79, 86, 95, 96, 97, 180, 182, 204, 274, 284, 393, 419], "around": 4, "m1": [4, 416, 417, 423], "ultra": 4, "7b": 4, "me": 4, "ishmael": 4, "year": 4, "ago": 4, "never": [4, 419], "long": 4, "info": [4, 7], "247": 4, "press": [4, 160], "enter": 4, "littl": 4, "monei": 4, "my": [4, 7], "purs": 4, "consequ": 4, "walk": 4, "down": [4, 270], "gower": 4, "street": 4, "afternoon": 4, "heavi": 4, "rain": 4, "saw": [4, 417], "off": [4, 7, 419], "man": 4, "rag": 4, "who": 4, "sat": 4, "upon": [4, 272, 273], "hi": [4, 300], "bundl": 4, "hard": 4, "wet": 4, "he": [4, 345, 346], "were": [4, 423], "cry": 4, "watch": [4, 416], "him": 4, "observ": 4, "numer": [4, 123, 124, 160, 169, 173, 236, 288, 298, 299, 301, 330, 360, 362, 372, 392, 393, 394, 395, 396, 397, 403, 416, 419], "crowd": 4, "wa": [4, 79, 419], "hurri": 4, "437": 4, "330": 4, "second": [4, 110, 155, 170, 172, 174, 222, 248, 261, 287, 304, 360, 368, 393, 395, 396, 397, 417, 423], "spent": 4, "amount": [4, 183, 286, 303], "39": 4, "By": [4, 268, 318, 417, 420], "bigger": [4, 393], "well": [4, 284, 311, 323, 326, 419], "remain": [4, 261, 273, 292, 293, 294], "almost": 4, "nobodi": 4, "took": 4, "least": [4, 80, 81, 82, 90, 158, 159, 161, 162, 204], "notic": [4, 417, 422], "distanc": [4, 372], "had": 4, "doubt": 4, "minut": 4, "straight": 4, "slowli": 4, "speak": [4, 160], "resum": 4, "postur": 4, "stood": 4, "feel": 4, "pain": 4, "heart": 4, "said": 4, "smile": 4, "face": 4, "am": 4, "someon": 4, "three": [4, 82, 341], "quarter": 4, "hour": 4, "made": 4, "immedi": [4, 306], "repli": 4, "again": [4, 7, 284, 416], "hand": [4, 417, 419], "did": 4, "accustom": 4, "thu": [4, 284], "question": [4, 419], "reason": [4, 418], "tell": [4, 416, 420], "understand": [4, 343, 344], "579": 4, "690": 4, "500": [4, 423], "628": 4, "went": 4, "nervou": 4, "trembl": 4, "told": 4, "why": 4, "And": [4, 341], "surpris": 4, "matter": [4, 284], "shall": 4, "anyhow": 4, "friend": 4, "ye": 4, "slight": [4, 419], "kind": 4, "want": [4, 417, 423], "longer": [4, 98, 417], "soon": 4, "unless": [4, 15, 148, 160, 389], "unlik": [4, 15, 148, 293, 294, 319], "strang": 4, "amus": 4, "That": 4, "secret": 4, "disappoint": 4, "mine": 4, "cannot": [4, 90, 418, 420], "happi": 4, "ask": 4, "shop": 4, "bui": 4, "food": 4, "633": 4, "21": [4, 409], "475": 4, "su": 4, "j": [4, 7, 160, 293, 394, 395, 397], "lu": 4, "pan": 4, "murtadha": 4, "wen": 4, "liu": 4, "2021": 4, "roform": [4, 333], "enhanc": [4, 333, 419], "rotari": [4, 125, 333], "arxiv": [4, 298, 299, 301, 305, 330, 353, 373, 392, 398], "preprint": [4, 392, 398], "2104": 4, "09864": 4, "zhang": 4, "sennrich": 4, "2019": [4, 396], "advanc": [4, 416], "system": [4, 7, 180, 181, 182], "shazeer": 4, "2020": 4, "glu": [4, 284], "variant": [4, 371, 397], "2002": 4, "05202": 4, "classifi": 5, "mnist": 5, "As": [5, 37, 250, 284, 416], "mlp": [5, 284, 340, 391], "inherit": [5, 415], "idiom": [5, 416], "input_dim": [5, 284, 302, 329], "hidden_dim": [5, 389, 391], "output_dim": [5, 284, 302, 329], "layer_s": 5, "idim": 5, "odim": 5, "cross": [5, 97, 359, 361], "entropi": [5, 359, 361], "commonli": [5, 324, 386, 416], "cross_entropi": [5, 284], "accuraci": 5, "valid": [5, 98, 139, 264, 271, 311, 323, 415], "eval_fn": 5, "load": [5, 6, 313], "loader": 5, "num_class": [5, 391], "batch_siz": [5, 391], "num_epoch": [5, 391], "learning_r": [5, 391, 392, 393, 394, 395, 396, 397, 398, 400, 403, 404, 405, 406, 407, 408, 409, 416], "train_imag": [5, 391], "train_label": [5, 391], "test_imag": 5, "test_label": 5, "re": [5, 7, 386], "shuffl": 5, "minibatch": 5, "batch_iter": [5, 391], "perm": 5, "id": [5, 7], "put": [5, 416], "trainabl": [5, 269, 284, 389], "loss_and_grad_fn": [5, 391, 416, 417], "value_and_grad": [5, 284, 324, 389, 391, 402, 416, 417, 420, 421], "epoch": 5, "test": [5, 7], "confus": 5, "decent": 5, "95": 5, "flexibl": 6, "brought": 6, "research": 6, "except": [6, 122, 133, 134, 136, 137, 138, 298, 313, 418, 420], "featur": [6, 95, 96, 97, 125, 288, 297, 298, 299, 300, 301, 302, 329, 330, 331, 333, 340, 341, 416, 419], "main": [6, 110, 122, 272, 273, 284], "differ": [6, 153, 246, 371, 417], "compos": [6, 284, 416, 417, 421], "lazi": [6, 389, 421], "multi": [6, 126, 289, 290, 291, 418, 420], "cpu": [6, 7, 161, 416, 423], "inspir": 6, "jax": [6, 413], "arrayfir": 6, "unifi": 6, "live": [6, 423], "share": [6, 108, 204, 205], "convers": 6, "regress": [6, 367], "layer": [6, 123, 268, 284, 286, 287, 293, 294, 297, 298, 300, 301, 302, 303, 304, 320, 325, 328, 329, 331, 335, 340, 385, 389], "perceptron": 6, "llm": 6, "infer": [6, 142, 164], "fast": [6, 296, 353, 423], "fft": 6, "algebra": 6, "tree": [6, 91, 118, 143, 261, 264, 271, 272, 273, 274, 275, 399, 400, 402, 411, 417], "custom": [6, 340], "extens": [6, 164, 188, 317, 422], "debugg": 6, "pypi": 7, "own": [7, 420], "meet": 7, "seri": 7, "chip": 7, "nativ": 7, "maco": 7, "13": 7, "highli": 7, "recommend": [7, 187, 398], "14": 7, "sonoma": 7, "conda": 7, "forg": 7, "match": [7, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 181, 313, 341, 361, 418, 420], "distribut": [7, 207, 208, 209, 211, 212, 216, 217, 302, 343, 344, 345, 346, 348, 349, 362, 365, 370, 372, 386], "probabl": [7, 213, 292, 293, 294, 329, 359, 361, 365, 423], "platform": 7, "processor": 7, "arm": 7, "i386": 7, "switch": 7, "17": 7, "clang": 7, "24": 7, "xcode": 7, "15": [7, 160, 274, 416], "sdk": 7, "environ": [7, 111, 114], "via": [7, 399, 402, 419, 420], "rosetta": 7, "unam": 7, "p": [7, 207, 284, 292, 293, 294, 372, 395, 397], "clone": 7, "git": 7, "com": 7, "ml": 7, "explor": 7, "http": [7, 298, 299, 301, 305, 330, 353, 373], "wjakob": 7, "2f04eac452a6d9142dedb957701bdb20125561e4": 7, "env": 7, "cmake_build_parallel_level": 7, "edit": [7, 325], "unittest": 7, "discov": 7, "stub": 7, "generate_stub": 7, "either": [7, 12, 63, 75, 76, 83, 84, 85, 90, 112, 113, 115, 141, 144, 145, 155, 156, 157, 160, 169, 174, 176, 191, 193, 196, 202, 219, 222, 246, 261, 287, 304, 335, 341, 345, 346], "static": 7, "libmlx": 7, "preprocessor": 7, "metal_path": 7, "mlx_build_test": 7, "mlx_build_exampl": 7, "mlx_build_benchmark": 7, "mlx_build_cpu": 7, "mlx_build_python_bind": 7, "mlx_build_safetensor": 7, "mlx_build_gguf": 7, "wish": 7, "variabl": [7, 91, 111, 114, 143, 154, 261, 263, 264], "export": 7, "developer_dir": 7, "app": 7, "content": [7, 310, 416], "xcrun": 7, "macosx": 7, "show": [7, 278, 416], "cmake_build_typ": 7, "minsizerel": 7, "don": [7, 416, 423], "backend": 7, "safetensor": [7, 164, 227, 313, 317, 419, 422], "gguf": [7, 164, 226, 422], "dcmake_build_typ": 7, "dbuild_shared_lib": 7, "dmlx_build_cpu": 7, "dmlx_build_safetensor": 7, "dmlx_build_gguf": 7, "unabl": 7, "tool": 7, "sudo": 7, "ouptut": 7, "finder": 7, "iterm": 7, "termin": 7, "click": 7, "uncheck": 7, "window": [7, 286, 287, 303, 304], "restart": 7, "grep": 7, "cmake_host_system_processor": 7, "arm64": 7, "x86_64": 7, "wipe": 7, "cahc": 7, "rf": 7, "devicetyp": 8, "attribut": [8, 9, 29, 276, 319, 389, 411], "kwarg": [9, 10, 228, 229, 424], "categori": [10, 278], "bool_": [10, 278], "unsignedinteg": 10, "uint8": [10, 278], "uint16": [10, 278], "uint32": [10, 25, 26, 27, 28, 208, 278], "uint64": [10, 278], "signedinteg": [10, 153], "int8": [10, 278], "int64": [10, 278], "inexact": [10, 153], "complexflo": 10, "complex128": 10, "issubdtyp": [10, 278], "semant": [12, 83, 84, 85, 88, 112, 113, 115, 144, 145, 155, 156, 157, 169, 174, 176, 191, 193, 196, 202, 219, 222, 246, 423], "reduct": [14, 16, 173, 175, 190, 203, 274, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "unspecifi": [14, 16, 17, 25, 26, 27, 28, 92, 101, 102, 103, 104, 142, 173, 175, 177, 190, 197, 201, 203, 220, 236, 237, 243, 247, 250, 256, 262, 266, 424], "entir": [14, 16, 25, 26, 173, 175, 177, 190, 203, 243, 247, 262, 293, 294], "05": [15, 148, 288, 298, 299, 301, 330], "08": [15, 148, 360, 394, 395, 396, 397, 403], "approxim": [15, 296, 351, 352, 353], "comparison": [15, 115, 144, 145, 156, 157, 196], "infinit": [15, 148], "nan": [15, 78, 148, 150], "rel": [15, 148, 393, 416], "interv": [17, 163, 213, 217], "increment": 17, "otherwis": [17, 97, 187, 268, 271, 272, 273, 274, 311, 313, 323, 339, 340, 341, 359, 364, 371, 382, 383, 419, 420], "convent": [17, 98, 341, 396], "lead": [17, 79, 416], "fraction": 17, "integr": [17, 250, 419], "undefin": [27, 158, 201, 211, 418], "dimension": [29, 123, 124, 127, 128, 129, 130, 131, 132, 136, 137, 138, 286, 287, 288, 289, 290, 291, 295, 302, 303, 304, 328, 329, 337, 418, 420], "ndarrai": [29, 418, 419, 421], "properti": [30, 37, 45, 49, 59, 60, 66, 68, 319, 322, 401, 417], "argument": [30, 63, 76, 91, 118, 143, 261, 272, 273, 274, 284, 341, 413, 417, 422, 423, 424], "union": [31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 80, 81, 82, 86, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 151, 152, 180, 215, 216, 245], "appli": [37, 87, 125, 126, 162, 272, 273, 274, 284, 286, 287, 288, 289, 290, 291, 293, 294, 296, 298, 299, 301, 302, 303, 304, 305, 307, 320, 327, 329, 330, 331, 332, 334, 336, 338, 339, 341, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 399, 402, 408, 411, 416], "regular": [37, 293, 373, 396, 416, 418], "idx": [37, 418], "correctli": 37, "syntax": [37, 418], "datatyp": 49, "byte": [49, 59, 181, 182, 183, 186, 187, 278], "indices_or_sect": [69, 238], "nest": [75, 91, 274, 284, 389, 415, 417], "alwai": [79, 181, 271, 417], "regardless": [79, 126], "storag": 79, "caution": 79, "chang": [79, 91, 231, 324, 329, 341, 364, 371, 416, 420], "invalid": 79, "crash": [79, 416], "begin": [79, 183, 204, 287, 297, 300, 304, 339, 364, 371, 377, 382, 383], "ari": [80, 81, 82], "xor": 85, "lhs_mask": 86, "lceil": 86, "rceil": 86, "rhs_mask": 86, "out_mask": 86, "operand": 87, "explicitli": [87, 284, 413], "flat": [87, 271, 275], "a1": 87, "a2": 87, "AS": 87, "b1": 87, "b2": 87, "edg": [90, 200, 341, 416], "At": 90, "fun": [91, 143, 154, 261, 263, 264, 416, 418, 419, 423], "callabl": [91, 143, 154, 261, 263, 264, 268, 269, 271, 272, 273, 274, 306, 307, 310, 318, 331, 335, 340, 342, 343, 344, 345, 346, 347, 348, 349, 392, 393, 394, 395, 396, 397, 398, 403, 404, 405, 406, 407, 408, 409], "dict": [91, 118, 164, 180, 226, 227, 228, 270, 316, 321, 324, 325, 389, 399, 400, 402, 415, 417, 422], "arbitrarili": [91, 284, 415, 417, 421], "leaf": [91, 268, 271, 272, 273, 274, 310], "node": [91, 118, 264, 273, 274], "recompil": [91, 416], "Not": [91, 196, 416], "attempt": 91, "elementwis": [93, 94], "alia": [93, 94], "conj": 94, "channel": [95, 96, 97, 288, 289, 290, 291, 293, 294], "c_in": [95, 96, 97], "c_out": [95, 96, 97], "convolv": [95, 96, 97], "spatial": [96, 97, 286, 298, 303, 341], "symmetr": [96, 158], "correl": [97, 293], "discret": [98, 127, 128, 129, 130, 131, 132, 136, 137, 138, 295, 328], "conv": 98, "signal": [98, 341], "th": [101, 102, 103, 104, 109, 122, 407], "angl": [107, 206], "configur": 108, "formal": [108, 204], "notat": [108, 271, 315], "w_i": [108, 204], "hat": [108, 204], "occupi": [108, 204, 205], "subarrai": [110, 238], "insert": [110, 120, 423], "end": [110, 184, 204, 287, 297, 300, 304, 339, 364, 371, 377, 382, 383, 405, 408], "taken": [110, 250], "global": [111, 114, 214, 270, 413, 416], "disabl": [111, 186, 416], "mlx_disable_compil": [111, 114, 416], "fuction": 113, "mathrm": [116, 232, 299], "frac": [116, 204, 232, 286, 287, 288, 292, 293, 294, 298, 299, 301, 302, 303, 304, 330, 343, 344, 345, 346, 360, 362, 364, 367, 378, 380, 392, 394, 395, 396, 397, 403], "pi": [116, 296, 337, 352, 417], "int_0": 116, "dt": 116, "minu": 121, "whose": [122, 268, 269], "translat": [123, 301], "stabil": [123, 124, 288, 298, 299, 301, 330, 360, 362, 392, 393, 394, 395, 396, 397, 403], "traditino": 125, "rotat": [125, 333], "larger": [125, 333, 398], "unchang": [125, 244, 333], "consecut": [125, 204, 333], "angular": [125, 333], "frequenc": [125, 333, 337], "q": [126, 161], "head": [126, 326, 340], "attent": [126, 311, 326, 337, 340], "pre": 126, "typic": [126, 295, 391, 416, 419], "One": [127, 130, 136, 224, 416, 417], "fourier": [127, 128, 129, 130, 131, 132, 136, 137, 138], "truncat": [127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 216], "dft": [127, 128, 129, 130, 131, 132, 136, 137, 138], "rfft": 133, "real": [133, 134, 135, 136, 137, 138, 158], "rfft2": 134, "rfftn": 135, "silent": [136, 137, 138], "outsid": 139, "clamp": 139, "argnam": [143, 261], "neither": [143, 261], "keyword": [143, 228, 229, 261, 272, 284, 413, 422, 424], "strict": [144, 156, 311, 313, 323], "ordinari": 147, "inifn": 149, "infin": [149, 151, 152, 303, 304, 397], "dtypecategori": [153, 278], "subtyp": [153, 278], "subdtyp": 153, "float64": 153, "too": [153, 416, 419], "upper": [158, 204, 213, 216, 217, 349], "decomposit": [158, 162], "semi": [158, 211], "definit": [158, 211], "behaviour": 158, "triangular": 158, "lower": [158, 204, 213, 216, 217, 258, 349], "trinagular": 158, "dot": [158, 159, 254, 271, 315, 326], "ainv": 159, "ord": 160, "tabl": [160, 278, 295], "frobeniu": 160, "matric": [160, 161, 162], "strictli": 160, "mathemat": 160, "variou": 160, "purpos": 160, "calcul": [160, 362, 368, 393], "fro": 160, "inf": [160, 326], "largest": [160, 256], "sing": 160, "smallest": 160, "singular": [160, 162], "nuclear": 160, "_f": 160, "sum_": [160, 286, 287, 367], "a_": 160, "valueerror": [160, 313, 417], "refer": [160, 299, 305, 319, 343, 344, 345, 346, 353, 373, 418], "golub": 160, "van": 160, "loan": 160, "baltimor": 160, "md": 160, "john": 160, "hopkin": 160, "univers": 160, "1985": 160, "pg": 160, "la": 160, "9": [160, 361, 392, 395, 396, 397, 398, 400, 406, 409, 420], "74597": 160, "20": 160, "84804": 160, "41421": 160, "23607": [160, 161], "74166": 160, "24264": 160, "11": 160, "225": 160, "894427": 161, "447214": 161, "57771": 161, "vt": 162, "return_metadata": 164, "binari": [164, 225, 226, 227, 228, 229, 339, 359, 383, 416], "npy": [164, 225, 422], "matadata": 164, "unsupport": 164, "tensor": [164, 254, 286, 287, 303, 304, 372, 420], "stabl": [169, 173, 236, 367], "multidimension": 178, "dens": [178, 423], "cartesian": 178, "ij": 178, "clear": 179, "get_cache_memori": 179, "max_buffer_s": 180, "max_recommended_working_set_s": 180, "memory_s": 180, "report": [181, 187], "peak": [183, 185], "program": 183, "reset_peak_memori": 183, "reset": 185, "free": 186, "reclaim": 186, "set_memory_limit": 186, "previou": [186, 187], "relax": 187, "task": [187, 367], "exceed": 187, "potenti": 187, "beforehand": 199, "pad_with": 200, "constant_valu": 200, "before_1": 200, "after_1": 200, "before_2": 200, "after_2": 200, "before_n": 200, "after_n": 200, "before_i": 200, "after_i": 200, "side": [200, 286, 287, 303, 304, 416], "everi": [204, 272, 409, 417], "particular": [204, 298], "w_1": 204, "w_g": 204, "align": [204, 287, 297, 300, 304], "max_i": 204, "min_i": 204, "textrm": [204, 296, 351, 354], "pack": [204, 205], "unsign": [204, 205, 278], "1st": 204, "signific": 204, "2nd": 204, "w_q": 204, "whether": [205, 297, 300, 310, 326, 331, 359, 362, 368], "prng": [207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 413], "num_sampl": 208, "unnorm": [208, 359, 361], "draw": 208, "cdf": [209, 296, 351], "seed": 210, "cov": 211, "jointli": 211, "covari": [211, 288], "behavior": [211, 367, 418, 419], "empti": 211, "loc": 212, "low": [213, 217, 349, 386], "high": [213, 217, 284, 295, 349, 386], "bound": [213, 216, 217, 296, 349, 416, 418, 423], "roadcast": 213, "domain": 216, "uniformli": 217, "repetit": 220, "preserv": [221, 417], "obj": 226, "uncompress": 228, "my_path": 228, "tree_flatten": [228, 272, 275, 284], "transformerencod": 228, "128": [228, 284], "flat_param": 228, "compress": 229, "possibl": [238, 295, 328, 416, 418, 423], "divisor": [243, 262], "being": [244, 284], "prevent": [244, 372, 420], "streamcontext": 245, "context": 245, "manag": [245, 413, 423], "prior": [250, 251], "exclud": 251, "necessarili": 256, "elsewher": [258, 418], "col": 258, "triangl": 258, "mse": 261, "param": [261, 284, 386, 417], "lvalu": 261, "dlvalu": 261, "dparam": 261, "lasso": 261, "l1": [261, 364, 366, 367, 371], "in_ax": [264, 417], "out_ax": [264, 417], "prefix": [264, 271], "class_pred": 268, "predic": [268, 318], "to_quant": 268, "receiv": [268, 407, 420], "fn": [269, 272, 273, 274, 421], "wrt": 269, "max_norm": 270, "exce": 270, "proportion": 270, "clipped_grad": 270, "total_norm": 270, "rescal": 270, "is_leaf": [271, 272, 273, 274], "arbitrari": [271, 389], "depth": [271, 291, 294, 417], "hello": [271, 275], "charact": 271, "superset": [272, 399], "extra": [272, 273], "closer": 272, "decid": [272, 310], "constitut": 272, "dict_kei": [272, 400], "lambda": [272, 273, 274, 284, 306, 311, 318, 338, 377, 382, 392, 393, 394, 395, 396, 397, 398, 403, 404, 416, 417], "tree_map": [273, 284], "new_tre": 273, "accumul": [274, 330], "acc": 274, "recreat": 275, "world": 275, "42": 275, "16": [278, 286, 299, 303, 306, 389], "int16": 278, "brain": 278, "e8": 278, "m7": 278, "ieee": 278, "e5": 278, "m10": 278, "hierarchi": 278, "done": [284, 292, 330, 416, 419, 420], "manual": 284, "solv": 284, "intuit": 284, "freez": [284, 323, 389], "finetun": 284, "in_dim": [284, 389], "out_dim": [284, 389], "enumer": 284, "caus": [284, 416, 419], "local": [284, 293], "scope": 284, "l2_loss": 284, "y_hat": 284, "trainable_paramet": [284, 310, 400], "loss_and_grad": 284, "workhors": 284, "Its": 284, "recurs": [284, 310, 311, 316, 321, 323, 389], "frozen": [284, 311, 321, 323, 329, 389], "individu": [284, 293, 294], "subset": [284, 310], "action": 284, "displai": 284, "count": [284, 407], "num_param": 284, "preclud": 284, "pure": [284, 391], "pattern": [284, 419], "achiev": 284, "other_input": 284, "necessari": 284, "wrap": 284, "apply_to_modul": [284, 311], "children": 284, "filter_and_map": 284, "leaf_modul": 284, "load_weight": [284, 419], "named_modul": 284, "save_weight": 284, "set_dtyp": 284, "unfreez": [284, 311], "update_modul": 284, "alibi": 284, "avgpool1d": 284, "avgpool2d": 284, "batchnorm": 284, "dropout": [284, 293, 294, 320, 340, 416], "dropout2d": 284, "dropout3d": 284, "gelu": [284, 352, 353, 416], "groupnorm": 284, "gru": 284, "instancenorm": 284, "layernorm": 284, "lstm": 284, "maxpool1d": 284, "maxpool2d": 284, "mish": 284, "prelu": 284, "quantizedembed": 284, "quantizedlinear": 284, "relu": [284, 327, 340, 374, 386], "rnn": [284, 297], "selu": 284, "sequenti": [284, 386], "silu": 284, "sinusoidalpositionalencod": 284, "softshrink": 284, "upsampl": 284, "elu": [284, 377], "gelu_approx": [284, 296, 351], "gelu_fast_approx": [284, 296, 351], "hardswish": 284, "leaky_relu": 284, "log_sigmoid": 284, "log_softmax": 284, "relu6": 284, "softplu": [284, 305, 373], "binary_cross_entropi": [284, 416], "cosine_similarity_loss": 284, "gaussian_nll_loss": 284, "hinge_loss": 284, "huber_loss": 284, "kl_div_loss": 284, "l1_loss": 284, "log_cosh_loss": 284, "margin_ranking_loss": 284, "mse_loss": 284, "nll_loss": 284, "smooth_l1_loss": 284, "triplet_loss": 284, "init": [284, 327, 386, 391, 405, 406, 408, 409], "glorot_norm": 284, "glorot_uniform": 284, "he_norm": 284, "he_uniform": 284, "kernel_s": [286, 287, 289, 290, 291, 303, 304], "averag": [286, 287, 392, 393, 395, 396, 397], "pool": [286, 287, 303, 304, 423], "l_": [286, 303, 364], "n_i": [286, 287, 303, 304], "c_j": [286, 287, 303, 304], "ldot": [286, 287, 303, 304], "lfloor": [286, 287, 303, 304], "_size": [286, 287, 303, 304], "rfloor": [286, 287, 303, 304], "k_h": [287, 304], "k_w": [287, 304], "h_": [287, 297, 300, 304, 331], "w_": [287, 297, 300, 304, 331, 392, 393, 394, 395, 396, 397, 398, 403, 404], "height": [287, 288, 290, 291, 293, 294, 304], "width": [287, 288, 290, 291, 293, 294, 304, 328, 329], "momentum": [288, 398, 400, 404, 416], "affin": [288, 298, 299, 301, 302, 329], "track_running_stat": 288, "epsilon": [288, 298, 299, 301, 330, 360, 362, 392, 394, 395, 396, 397, 403], "gamma": [288, 298, 299, 301, 330, 343, 344, 345, 346], "nc": 288, "nlc": [288, 289], "four": 288, "nhwc": [288, 290], "paper": [288, 337, 392, 393, 394, 395, 397, 398], "deep": [288, 343, 344, 345, 346], "intern": 288, "bn": 288, "in_channel": [289, 290, 291], "out_channel": [289, 290, 291], "learnabl": [289, 290, 291, 335], "imag": [290, 291, 293, 294, 341], "ndhwc": [291, 294], "portion": 292, "independ": [293, 294], "nwhc": 293, "whc": 293, "maintain": [293, 294, 398], "benefici": [293, 294, 419], "earli": 293, "adjac": 293, "pixel": 293, "effect": [293, 416, 419], "thompson": 293, "goroshin": 293, "jain": 293, "lecun": 293, "bregler": 293, "2015": [293, 395, 397], "cvpr": 293, "dhwc": 294, "often": 294, "medic": 294, "video": 294, "num_embed": [295, 328], "lookup": 295, "usual": [295, 328, 415, 419], "vocabulari": [295, 328], "approx": 296, "unit": [296, 297, 332, 334, 336, 343, 344, 345, 346, 350, 351, 352, 353, 354, 356, 375, 376, 377, 379], "phi": [296, 351], "geluapprox": 296, "044715": [296, 352], "gelufast": 296, "sigma": [296, 297, 300, 343, 344, 345, 346, 353, 354, 357, 378, 379], "773": 296, "regard": 296, "input_s": [297, 300, 331], "hidden_s": [297, 300, 331], "gate": [297, 354], "recurr": [297, 300, 331], "nld": [297, 300, 331], "ld": [297, 300, 331], "r_t": 297, "xr": 297, "x_t": [297, 300, 331], "hr": 297, "h_t": [297, 300, 331], "b_": [297, 300], "z_t": 297, "xz": 297, "hz": 297, "n_t": 297, "xn": 297, "odot": [297, 300], "hn": 297, "hidden": [297, 300, 331, 340], "nh": [297, 300, 331], "nlh": [297, 300, 331], "lh": [297, 300, 331], "num_group": 298, "pytorch_compat": 298, "preced": 298, "org": [298, 299, 301, 305, 330, 353, 373], "1803": 298, "08494": 298, "denomin": [299, 360, 392, 394, 395, 396, 397, 403], "inorm": 299, "1607": [299, 301], "08022": 299, "i_t": 300, "xi": 300, "f_t": 300, "xf": 300, "hf": 300, "g_t": [300, 392, 394, 395, 396, 397, 398, 403, 404], "xg": 300, "hg": 300, "o_t": 300, "xo": 300, "ho": 300, "c_": [300, 398], "c_t": [300, 398], "cell": 300, "06450": 301, "realli": 301, "mathcal": 302, "d_i": 302, "max_": [303, 304], "1908": [305, 373], "08681": [305, 373], "map_fn": [306, 310], "filter_fn": [306, 310], "valid_parameter_filt": 306, "apply_fn": 307, "descend": 308, "is_leaf_fn": 310, "found": 310, "drop": 310, "idempot": [311, 323], "endswith": 311, "file_or_weight": 313, "miss": [313, 422], "ok": [313, 417], "save_safetensor": [317, 422], "reflect": [319, 416, 418, 420], "ie": 323, "noop": 323, "unfrozen": 323, "tracer": 324, "partial": [324, 325, 416, 419], "child": 325, "flexibli": 325, "programmat": 325, "query_input_dim": 326, "key_input_dim": 326, "value_input_dim": 326, "value_dim": 326, "value_output_dim": 326, "aggreg": 326, "linearli": 326, "attend": 326, "num_paramet": 327, "25": [327, 341], "parametr": [327, 374], "from_embed": 328, "classmethod": [328, 329], "from_linear": 329, "1910": 330, "07467": 330, "nonlinear": [331, 416], "elman": 331, "ih": 331, "hh": 331, "func": 331, "rectifi": [332, 345, 346, 356, 375, 376], "10000": 333, "slightli": [333, 423], "plain": 335, "known": [336, 379], "swish": [336, 379], "min_freq": 337, "0001": 337, "max_freq": 337, "cos_first": 337, "full_turn": 337, "sinusoid": 337, "lambd": [338, 382], "threshold": [339, 364, 371, 383], "geq": [339, 383], "num_encoder_lay": 340, "num_decoder_lay": 340, "nb_func": 340, "custom_encod": 340, "custom_decod": 340, "norm_first": 340, "checkpoint": 340, "decod": 340, "interact": 340, "mechan": 340, "chekpoint": 340, "usag": [340, 416], "expens": 340, "scale_factor": 341, "nearest": 341, "align_corn": 341, "audio": 341, "4d": 341, "forth": 341, "algorithm": [341, 398], "neighbor": 341, "interpol": 341, "cubic": 341, "bilinear": 341, "trilinear": 341, "bicub": 341, "corner": 341, "bottom": 341, "75": 341, "33333": 341, "66667": 341, "init_fn": [342, 343, 344, 345, 346, 347, 348, 349, 386], "glorot": [343, 344], "fan_in": [343, 344, 345, 346], "fan_out": [343, 344, 345, 346], "fan": [343, 344, 345, 346], "_in": [343, 344], "_out": [343, 344], "difficulti": [343, 344], "feedforward": [343, 344], "191107": 343, "61278": 343, "150594": 343, "363207": 343, "gain": [343, 344, 345, 346], "89613": 343, "53947": 343, "48095": 343, "995016": 343, "223404": 344, "890597": 344, "379159": 344, "776856": 344, "90041": 344, "02264": 344, "912766": 344, "12451": 344, "delv": [345, 346], "surpass": [345, 346], "human": [345, 346], "imagenet": [345, 346], "classif": [345, 346], "25211": 345, "458835": 345, "177208": 345, "0137595": 345, "6967": 345, "02765": 345, "15268": 345, "75787": 345, "kaim": 346, "0300242": 346, "0184009": 346, "793615": 346, "666329": 346, "64331": 346, "16506": 346, "08619": 346, "79854": 346, "982273": 348, "534422": 348, "380709": 348, "0645099": 348, "883935": 349, "863726": 349, "617261": 349, "417497": 349, "exact": [352, 353], "0005": 352, "015": 353, "702": 353, "cdot": [353, 360, 363, 379], "hendryck": 353, "1606": 353, "08415": 353, "halv": 354, "negative_slop": 356, "leaki": 356, "sum_i": 358, "x_i": [358, 380], "with_logit": 359, "predict": [359, 362, 363, 364, 365, 366, 367, 369, 370, 371], "105361": 359, "223144": 359, "20397": 359, "916291": 359, "539245": 359, "prob": 359, "510826": 359, "x1": 360, "x2": 360, "x_1": [360, 368], "x_2": [360, 368], "label_smooth": 361, "hot": 361, "smooth": [361, 371, 403], "0485873": 361, "348587": 361, "06": [362, 372, 392], "likelihood": [362, 370], "nll": [362, 370], "hing": 363, "y_": [363, 367], "pred": [363, 367], "delta": [364, 392], "huber": 364, "leq": [364, 377], "l2": [364, 367, 404], "kullback": 365, "leibler": 365, "diverg": 365, "logcosh": 367, "sensit": 367, "outlier": 367, "dual": 367, "offer": 367, "balanc": 367, "robust": 367, "approach": [367, 417], "inputs1": 368, "inputs2": 368, "margin": [368, 372], "rank": 368, "573409": 368, "765166": 368, "0638": 368, "75596": 368, "225763": 368, "256995": 368, "773433": 368, "formula": 371, "anchor": 372, "triplet": 372, "_p": 372, "pairwis": 372, "instabl": 372, "monoton": 373, "0507": 377, "67326": 377, "sum_j": 380, "x_j": 380, "subclass": 389, "concept": 389, "mymlp": 389, "in_proj": 389, "involv": [391, 416], "subsequ": 391, "far": 391, "apply_gradi": 391, "rmsprop": 391, "adagrad": 391, "adafactor": 391, "adadelta": 391, "adam": [391, 397, 398, 407, 408], "adamw": [391, 398], "adamax": 391, "lion": 391, "cosine_decai": [391, 407], "exponential_decai": 391, "join_schedul": 391, "linear_schedul": [391, 407], "step_decai": 391, "rho": 392, "zeiler": 392, "2012": [392, 403], "adapt": [392, 393, 394], "1212": 392, "5701": 392, "v_": [392, 394, 395, 396, 397, 403, 404], "v_t": [392, 394, 395, 396, 397, 403, 404], "u_t": 392, "u_": 392, "w_t": [392, 394, 395, 396, 397, 398, 403, 404], "30": 393, "001": 393, "clip_threshold": 393, "decay_r": [393, 406, 409], "beta_1": [393, 395, 396, 397, 398], "weight_decai": [393, 396, 398, 404], "scale_paramet": 393, "relative_step": 393, "warmup_init": 393, "sublinear": 393, "cost": [393, 419], "epsilon_1": 393, "epsilon_2": 393, "parameter_scal": 393, "unscal": 393, "decai": [393, 396, 398, 404, 405, 406, 409], "duchi": 394, "hazan": 394, "singer": 394, "2011": 394, "subgradi": 394, "onlin": 394, "stochast": [394, 395, 397, 404, 419], "jmlr": 394, "999": [395, 396, 397], "omit": [395, 397], "estim": [395, 397], "kingma": [395, 397], "ba": [395, 397], "iclr": [395, 396, 397], "m_": [395, 396, 397, 398], "m_t": [395, 396, 397, 398], "beta_2": [395, 396, 397, 398], "contrast": 396, "loshchilov": 396, "hutter": 396, "decoupl": 396, "99": [398, 403], "tend": 398, "10x": 398, "strength": [398, 404], "wd": 398, "chen": 398, "symbol": 398, "discoveri": 398, "2302": 398, "06675": 398, "eta": 398, "opt": 399, "tieleman": 403, "hinton": 403, "lectur": 403, "coursera": 403, "dampen": 404, "nesterov": 404, "descent": [404, 416, 419], "mu": 404, "tau": 404, "penalti": 404, "decay_step": 405, "beyond": [405, 408], "lr_schedul": [405, 406, 407, 409], "1000": [405, 416], "0999961": 405, "06561": 406, "boundari": 407, "join": 407, "transit": 407, "warmup": [407, 408], "0999938": 407, "101": 408, "step_siz": 409, "081": 409, "basi": 411, "implicit": [413, 416, 417], "fine": [413, 419], "grain": 413, "control": [413, 419], "pseudo": 413, "altern": 413, "splittabl": 413, "threefri": 413, "counter": 413, "cycl": 415, "merg": 416, "fuse": 416, "big": 416, "awar": [416, 419], "36788": 416, "compiled_fun": 416, "code": [416, 419], "slow": 416, "rerun": [416, 419], "frequent": [416, 419], "destroi": 416, "anonym": 416, "unari": 416, "overhead": [416, 419, 423], "bandwidth": 416, "fusibl": 416, "consider": 416, "versu": 416, "timeit": [416, 417], "tic": 416, "perf_count": 416, "toc": 416, "tpi": 416, "1e3": 416, "4096": [416, 417, 423], "On": [416, 417, 419], "millisecond": [416, 423], "five": 416, "latest": 416, "won": 416, "placehold": 416, "insid": 416, "disable_compil": 416, "okai": [416, 419], "deal": 416, "pretti": [416, 419], "inconveni": 416, "functool": 416, "particularli": 416, "backward": [416, 417], "compiled_grad_fn": 416, "71828": 416, "opportun": 416, "idea": [417, 419], "behind": 417, "dfdx": [417, 418], "d2fdx2": 417, "zero_grad": 417, "detach": 417, "requires_grad": 417, "dloss_dw": 417, "dloss_dx": 417, "lot": 417, "redund": 417, "continu": 417, "suppos": [417, 423], "nice": [417, 419], "propag": [417, 418], "autom": 417, "contriv": [417, 423], "sake": 417, "clariti": 417, "quit": [417, 420], "difficult": 417, "primit": 417, "issu": [417, 420], "priorit": 417, "naive_add": 417, "vmap_add": 417, "total": 417, "390": 417, "wherea": 417, "025": 417, "ten": [417, 419], "Of": 417, "cours": 417, "better": [417, 423], "handi": 417, "ellipsi": 418, "mix": 418, "lack": 418, "extrem": [418, 419], "ineffici": [418, 419], "nonzero": 418, "dynam": 419, "easier": 419, "worri": 419, "fun1": 419, "expensive_fun": 419, "consum": 419, "eager": 419, "thank": 419, "weights_fp16": 419, "trade": 419, "bad": 419, "grow": 419, "computation": 419, "costli": 419, "luckili": 419, "wide": 419, "thousand": 419, "value_and_grad_fn": 419, "implicitli": 419, "anytim": 419, "memoryview": [419, 420], "perfectli": 419, "first_lay": 419, "second_layer_a": 419, "second_layer_b": 419, "protocol": 420, "pep": 420, "3118": 420, "a_view": 420, "owndata": 420, "extern": 420, "demonstr": 420, "x_view": 420, "modifi": 420, "df": 420, "x\u00b2": 420, "2x": 420, "indirectli": 420, "modif": 420, "seen": 420, "occur": 420, "incorpor": 420, "aris": 420, "incorrect": 420, "experiment": 420, "break": 420, "advis": 420, "intermedi": 420, "jnp": 420, "tf": 420, "page": 421, "composit": 421, "archiv": 422, "savez_compress": 422, "save_gguf": 422, "arr_0": 422, "advantag": 423, "parallel": 423, "race": 423, "interest": 423, "albeit": 423, "d1": 423, "d2": 423, "But": 423, "twice": 423, "measur": 423, "default_stream": 424, "default_devic": 424, "my_devic": 424}, "objects": {"": [[0, 0, 1, "_CPPv43absRK5array14StreamOrDevice", "abs"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::a"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::s"], [0, 0, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::a"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::b"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::s"], [0, 0, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::a"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::alpha"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::b"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::beta"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::c"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::s"], [0, 0, 1, "_CPPv43allRK5array14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::axes"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::axis"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::s"], [0, 0, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::a"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::atol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::b"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::equal_nan"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::rtol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::s"], [0, 0, 1, "_CPPv43anyRK5array14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::axes"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::axis"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::s"], [0, 0, 1, "_CPPv46aranged14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangei14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeii14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeiii14StreamOrDevice", "arange"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::stop"], [0, 0, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::a"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::s"], [0, 0, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::a"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::s"], [0, 0, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::a"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::s"], [0, 0, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::a"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::s"], [0, 0, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan"], [0, 0, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::a"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::b"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::s"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::a"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::s"], [0, 0, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::a"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::s"], [0, 0, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::axis"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::s"], [0, 0, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::axis"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::s"], [0, 0, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition"], [0, 0, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::axis"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::s"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::s"], [0, 0, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort"], [0, 0, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::axis"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::s"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::s"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::equal_nan"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::s"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::s"], [0, 0, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::a"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::offset"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::s"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::shape"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::strides"], [0, 0, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::a"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::dtype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::s"], [0, 0, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d"], [0, 0, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::s"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::s"], [0, 0, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d"], [0, 0, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::s"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::s"], [0, 0, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d"], [0, 0, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::s"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::s"], [0, 0, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::a"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::b"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::s"], [0, 0, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::a"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::b"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::s"], [0, 0, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::a"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::b"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::s"], [0, 0, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::a"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::b"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::block_size"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_lhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_out"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_rhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::s"], [0, 0, 1, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_sparse_mm"], [0, 1, 1, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_sparse_mm::a"], [0, 1, 1, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_sparse_mm::b"], [0, 1, 1, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_sparse_mm::lhs_indices"], [0, 1, 1, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_sparse_mm::rhs_indices"], [0, 1, 1, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_sparse_mm::s"], [0, 0, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::biases"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::bits"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::group_size"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::lhs_indices"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::rhs_indices"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::s"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::scales"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::transpose"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::w"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::x"], [0, 0, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::inputs"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::s"], [0, 0, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::a"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::s"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::shape"], [0, 0, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::a"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::s"], [0, 0, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_max"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_min"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::s"], [0, 0, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate"], [0, 0, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::axis"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::s"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::s"], [0, 0, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::a"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::s"], [0, 0, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::dilation"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::groups"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::input"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::padding"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::s"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::stride"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::weight"], [0, 0, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::dilation"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::groups"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::input"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::padding"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::s"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::stride"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::weight"], [0, 0, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::dilation"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::groups"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::input"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::padding"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::s"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::stride"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::weight"], [0, 0, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 0, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_hi"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_lo"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 0, 1, "_CPPv44copy5array14StreamOrDevice", "copy"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::a"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::s"], [0, 0, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::a"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::s"], [0, 0, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::a"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::s"], [0, 0, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::a"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::axis"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::inclusive"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::reverse"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::s"], [0, 0, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::a"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::axis"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::inclusive"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::reverse"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::s"], [0, 0, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::a"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::axis"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::inclusive"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::reverse"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::s"], [0, 0, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::a"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::axis"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::inclusive"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::reverse"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::s"], [0, 0, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::a"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::s"], [0, 0, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::dependencies"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::inputs"], [0, 0, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::biases"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::bits"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::group_size"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::s"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::scales"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::w"], [0, 0, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::a"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::k"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::s"], [0, 0, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::a"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis1"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis2"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::offset"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::s"], [0, 0, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::a"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::b"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::s"], [0, 0, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::a"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::b"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::s"], [0, 0, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::a"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::b"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::s"], [0, 0, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::a"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::s"], [0, 0, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::a"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::s"], [0, 0, 1, "_CPPv43expRK5array14StreamOrDevice", "exp"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::a"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::s"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::axes"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::axis"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::s"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::s"], [0, 0, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::a"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::s"], [0, 0, 1, "_CPPv43eyei14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::s"], [0, 0, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten"], [0, 0, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::end_axis"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::start_axis"], [0, 0, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::a"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::s"], [0, 0, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::a"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::b"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::s"], [0, 0, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full"], [0, 0, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full"], [0, 2, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::T"], [0, 2, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::T"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::vals"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::vals"], [0, 0, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather"], [0, 0, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::axes"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::axis"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::slice_sizes"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::slice_sizes"], [0, 0, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::a"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::b"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::s"], [0, 0, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::a"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::b"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::s"], [0, 0, 1, "_CPPv48identityi14StreamOrDevice", "identity"], [0, 0, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::dtype"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::s"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::s"], [0, 0, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::a"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::b"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::s"], [0, 0, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::a"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::atol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::b"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::equal_nan"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::rtol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::s"], [0, 0, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::a"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::s"], [0, 0, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::a"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::s"], [0, 0, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::a"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::s"], [0, 0, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::a"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::s"], [0, 0, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::a"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::b"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::s"], [0, 0, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::a"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::b"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::s"], [0, 0, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::a"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::b"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::s"], [0, 0, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::dtype"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::num"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::s"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::start"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::stop"], [0, 0, 1, "_CPPv43logRK5array14StreamOrDevice", "log"], [0, 0, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::a"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::s"], [0, 0, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::a"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::s"], [0, 0, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::a"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::s"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::a"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::s"], [0, 0, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::a"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::b"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::s"], [0, 0, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::a"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::b"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::s"], [0, 0, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::a"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::s"], [0, 0, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::a"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::b"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::s"], [0, 0, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::axes"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::axis"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::s"], [0, 0, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::a"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::b"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::s"], [0, 0, 1, "_CPPv43maxRK5array14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::axes"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::axis"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::s"], [0, 0, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::a"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::b"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::s"], [0, 0, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::axes"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::axis"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::s"], [0, 0, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::arrays"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::indexing"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::s"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::sparse"], [0, 0, 1, "_CPPv43minRK5array14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::axes"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::axis"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::s"], [0, 0, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::a"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::b"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::s"], [0, 0, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::a"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::destination"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::s"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::source"], [0, 0, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::a"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::b"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::s"], [0, 0, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::a"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::s"], [0, 0, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::a"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::b"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::s"], [0, 0, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::a"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::axes"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::dtype"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::inverted"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::s"], [0, 0, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones"], [0, 0, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::dtype"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones::shape"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::shape"], [0, 0, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::a"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::s"], [0, 0, 1, "_CPPv4I0Ene5array1TRK5array", "operator!="], [0, 0, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!="], [0, 0, 1, "_CPPv4neRK5arrayRK5array", "operator!="], [0, 2, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::T"], [0, 2, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::T"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::a"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::b"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::b"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::b"], [0, 0, 1, "_CPPv4I0Erm5array1TRK5array", "operator%"], [0, 0, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%"], [0, 0, 1, "_CPPv4rmRK5arrayRK5array", "operator%"], [0, 2, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::T"], [0, 2, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::T"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::a"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::b"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::b"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::b"], [0, 0, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;"], [0, 0, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::a"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::b"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::a"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::b"], [0, 0, 1, "_CPPv4I0Eml5array1TRK5array", "operator*"], [0, 0, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*"], [0, 0, 1, "_CPPv4mlRK5arrayRK5array", "operator*"], [0, 2, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::T"], [0, 2, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::T"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::a"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::b"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::b"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::b"], [0, 0, 1, "_CPPv4I0Epl5array1TRK5array", "operator+"], [0, 0, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+"], [0, 0, 1, "_CPPv4plRK5arrayRK5array", "operator+"], [0, 2, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::T"], [0, 2, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::T"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::a"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::b"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::b"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::b"], [0, 0, 1, "_CPPv4I0Emi5array1TRK5array", "operator-"], [0, 0, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-"], [0, 0, 1, "_CPPv4miRK5array", "operator-"], [0, 0, 1, "_CPPv4miRK5arrayRK5array", "operator-"], [0, 2, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::T"], [0, 2, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::T"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::a"], [0, 1, 1, "_CPPv4miRK5array", "operator-::a"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::b"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::b"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::b"], [0, 0, 1, "_CPPv4dvRK5arrayRK5array", "operator/"], [0, 0, 1, "_CPPv4dvRK5arrayd", "operator/"], [0, 0, 1, "_CPPv4dvdRK5array", "operator/"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::a"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::b"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::b"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::b"], [0, 0, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;"], [0, 0, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;"], [0, 0, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;"], [0, 2, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::T"], [0, 2, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::T"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::a"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::b"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::b"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::b"], [0, 0, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::a"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::b"], [0, 0, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;="], [0, 0, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;="], [0, 0, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;="], [0, 2, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::T"], [0, 2, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::T"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::a"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::b"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::b"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::b"], [0, 0, 1, "_CPPv4I0Eeq5array1TRK5array", "operator=="], [0, 0, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator=="], [0, 0, 1, "_CPPv4eqRK5arrayRK5array", "operator=="], [0, 2, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::T"], [0, 2, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::T"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::a"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::b"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::b"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::b"], [0, 0, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;"], [0, 0, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;"], [0, 0, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;"], [0, 2, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::T"], [0, 2, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::T"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::a"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::b"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::b"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::b"], [0, 0, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;="], [0, 0, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;="], [0, 0, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;="], [0, 2, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::T"], [0, 2, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::T"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::a"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::b"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::b"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::b"], [0, 0, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::a"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::b"], [0, 0, 1, "_CPPv4eoRK5arrayRK5array", "operator^"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::a"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::b"], [0, 0, 1, "_CPPv4orRK5arrayRK5array", "operator|"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::a"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::b"], [0, 0, 1, "_CPPv4ooRK5arrayRK5array", "operator||"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::a"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::b"], [0, 0, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::a"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::b"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::s"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::axes"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::high_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::low_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::s"], [0, 0, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition"], [0, 0, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::axis"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::s"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::s"], [0, 0, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::a"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::b"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::s"], [0, 0, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::axes"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::axis"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::s"], [0, 0, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::bits"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::group_size"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::s"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::w"], [0, 0, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::biases"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::bits"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::group_size"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::s"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::scales"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::transpose"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::w"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::x"], [0, 0, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::a"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::s"], [0, 0, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::a"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::s"], [0, 0, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::a"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::b"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::s"], [0, 0, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat"], [0, 0, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::axis"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::s"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::s"], [0, 0, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::a"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::s"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::shape"], [0, 0, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::a"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::b"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::s"], [0, 0, 1, "_CPPv45roundRK5array14StreamOrDevice", "round"], [0, 0, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::decimals"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::s"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::s"], [0, 0, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::a"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::s"], [0, 0, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter"], [0, 0, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::axes"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::axis"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::updates"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::updates"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::axes"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::axis"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::updates"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::updates"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::axes"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::axis"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::updates"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::updates"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::axes"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::axis"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::updates"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::updates"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::axes"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::axis"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::updates"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::updates"], [0, 0, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::a"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::s"], [0, 0, 1, "_CPPv44signRK5array14StreamOrDevice", "sign"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::a"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::s"], [0, 0, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::a"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::s"], [0, 0, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::a"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::s"], [0, 0, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::strides"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::strides"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 0, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::axes"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::axis"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::s"], [0, 0, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort"], [0, 0, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::axis"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::s"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::s"], [0, 0, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::s"], [0, 0, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::a"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::s"], [0, 0, 1, "_CPPv46squareRK5array14StreamOrDevice", "square"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::a"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::s"], [0, 0, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::axes"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::axis"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::s"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::axis"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::s"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::s"], [0, 0, 1, "_CPPv4StRK5array14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::axes"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::axis"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::s"], [0, 0, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::a"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::s"], [0, 0, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::a"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::b"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::s"], [0, 0, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::axes"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::axis"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::s"], [0, 0, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::a"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis1"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis2"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::s"], [0, 0, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::s"], [0, 0, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::a"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::indices"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::s"], [0, 0, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::a"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::s"], [0, 0, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::a"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::s"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::axis"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::s"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::s"], [0, 0, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::arr"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::reps"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::s"], [0, 0, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk"], [0, 0, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::axis"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::s"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::s"], [0, 0, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::s"], [0, 0, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri"], [0, 0, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::k"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::m"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::type"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::type"], [0, 0, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::k"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::s"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::x"], [0, 0, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::k"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::s"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::x"], [0, 0, 1, "_CPPv43varRK5array14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::axes"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::axis"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::s"], [0, 0, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::condition"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::s"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::x"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::y"], [0, 0, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros"], [0, 0, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::dtype"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros::shape"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::shape"], [0, 0, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::a"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::s"]], "mlx.core": [[8, 3, 1, "", "Device"], [9, 3, 1, "", "Dtype"], [10, 3, 1, "", "DtypeCategory"], [276, 3, 1, "", "Stream"], [11, 5, 1, "", "abs"], [12, 5, 1, "", "add"], [13, 5, 1, "", "addmm"], [14, 5, 1, "", "all"], [15, 5, 1, "", "allclose"], [16, 5, 1, "", "any"], [17, 5, 1, "", "arange"], [18, 5, 1, "", "arccos"], [19, 5, 1, "", "arccosh"], [20, 5, 1, "", "arcsin"], [21, 5, 1, "", "arcsinh"], [22, 5, 1, "", "arctan"], [23, 5, 1, "", "arctan2"], [24, 5, 1, "", "arctanh"], [25, 5, 1, "", "argmax"], [26, 5, 1, "", "argmin"], [27, 5, 1, "", "argpartition"], [28, 5, 1, "", "argsort"], [29, 3, 1, "", "array"], [78, 5, 1, "", "array_equal"], [79, 5, 1, "", "as_strided"], [80, 5, 1, "", "atleast_1d"], [81, 5, 1, "", "atleast_2d"], [82, 5, 1, "", "atleast_3d"], [83, 5, 1, "", "bitwise_and"], [84, 5, 1, "", "bitwise_or"], [85, 5, 1, "", "bitwise_xor"], [86, 5, 1, "", "block_masked_mm"], [87, 5, 1, "", "block_sparse_mm"], [88, 5, 1, "", "broadcast_to"], [89, 5, 1, "", "ceil"], [90, 5, 1, "", "clip"], [91, 5, 1, "", "compile"], [92, 5, 1, "", "concatenate"], [93, 5, 1, "", "conj"], [94, 5, 1, "", "conjugate"], [95, 5, 1, "", "conv1d"], [96, 5, 1, "", "conv2d"], [97, 5, 1, "", "conv_general"], [98, 5, 1, "", "convolve"], [99, 5, 1, "", "cos"], [100, 5, 1, "", "cosh"], [101, 5, 1, "", "cummax"], [102, 5, 1, "", "cummin"], [103, 5, 1, "", "cumprod"], [104, 5, 1, "", "cumsum"], [105, 5, 1, "", "default_device"], [106, 5, 1, "", "default_stream"], [107, 5, 1, "", "degrees"], [108, 5, 1, "", "dequantize"], [109, 5, 1, "", "diag"], [110, 5, 1, "", "diagonal"], [111, 5, 1, "", "disable_compile"], [112, 5, 1, "", "divide"], [113, 5, 1, "", "divmod"], [114, 5, 1, "", "enable_compile"], [115, 5, 1, "", "equal"], [116, 5, 1, "", "erf"], [117, 5, 1, "", "erfinv"], [118, 5, 1, "", "eval"], [119, 5, 1, "", "exp"], [120, 5, 1, "", "expand_dims"], [121, 5, 1, "", "expm1"], [122, 5, 1, "", "eye"], [139, 5, 1, "", "flatten"], [140, 5, 1, "", "floor"], [141, 5, 1, "", "floor_divide"], [142, 5, 1, "", "full"], [143, 5, 1, "", "grad"], [144, 5, 1, "", "greater"], [145, 5, 1, "", "greater_equal"], [146, 5, 1, "", "identity"], [147, 5, 1, "", "inner"], [148, 5, 1, "", "isclose"], [149, 5, 1, "", "isinf"], [150, 5, 1, "", "isnan"], [151, 5, 1, "", "isneginf"], [152, 5, 1, "", "isposinf"], [153, 5, 1, "", "issubdtype"], [154, 5, 1, "", "jvp"], [155, 5, 1, "", "left_shift"], [156, 5, 1, "", "less"], [157, 5, 1, "", "less_equal"], [163, 5, 1, "", "linspace"], [164, 5, 1, "", "load"], [165, 5, 1, "", "log"], [166, 5, 1, "", "log10"], [167, 5, 1, "", "log1p"], [168, 5, 1, "", "log2"], [169, 5, 1, "", "logaddexp"], [170, 5, 1, "", "logical_and"], [171, 5, 1, "", "logical_not"], [172, 5, 1, "", "logical_or"], [173, 5, 1, "", "logsumexp"], [174, 5, 1, "", "matmul"], [175, 5, 1, "", "max"], [176, 5, 1, "", "maximum"], [177, 5, 1, "", "mean"], [178, 5, 1, "", "meshgrid"], [190, 5, 1, "", "min"], [191, 5, 1, "", "minimum"], [192, 5, 1, "", "moveaxis"], [193, 5, 1, "", "multiply"], [194, 5, 1, "", "negative"], [195, 5, 1, "", "new_stream"], [196, 5, 1, "", "not_equal"], [197, 5, 1, "", "ones"], [198, 5, 1, "", "ones_like"], [199, 5, 1, "", "outer"], [200, 5, 1, "", "pad"], [201, 5, 1, "", "partition"], [202, 5, 1, "", "power"], [203, 5, 1, "", "prod"], [204, 5, 1, "", "quantize"], [205, 5, 1, "", "quantized_matmul"], [206, 5, 1, "", "radians"], [218, 5, 1, "", "reciprocal"], [219, 5, 1, "", "remainder"], [220, 5, 1, "", "repeat"], [221, 5, 1, "", "reshape"], [222, 5, 1, "", "right_shift"], [223, 5, 1, "", "round"], [224, 5, 1, "", "rsqrt"], [225, 5, 1, "", "save"], [226, 5, 1, "", "save_gguf"], [227, 5, 1, "", "save_safetensors"], [228, 5, 1, "", "savez"], [229, 5, 1, "", "savez_compressed"], [230, 5, 1, "", "set_default_device"], [231, 5, 1, "", "set_default_stream"], [232, 5, 1, "", "sigmoid"], [233, 5, 1, "", "sign"], [234, 5, 1, "", "sin"], [235, 5, 1, "", "sinh"], [236, 5, 1, "", "softmax"], [237, 5, 1, "", "sort"], [238, 5, 1, "", "split"], [239, 5, 1, "", "sqrt"], [240, 5, 1, "", "square"], [241, 5, 1, "", "squeeze"], [242, 5, 1, "", "stack"], [243, 5, 1, "", "std"], [244, 5, 1, "", "stop_gradient"], [245, 5, 1, "", "stream"], [246, 5, 1, "", "subtract"], [247, 5, 1, "", "sum"], [248, 5, 1, "", "swapaxes"], [249, 5, 1, "", "synchronize"], [250, 5, 1, "", "take"], [251, 5, 1, "", "take_along_axis"], [252, 5, 1, "", "tan"], [253, 5, 1, "", "tanh"], [254, 5, 1, "", "tensordot"], [255, 5, 1, "", "tile"], [256, 5, 1, "", "topk"], [257, 5, 1, "", "transpose"], [258, 5, 1, "", "tri"], [259, 5, 1, "", "tril"], [260, 5, 1, "", "triu"], [261, 5, 1, "", "value_and_grad"], [262, 5, 1, "", "var"], [263, 5, 1, "", "vjp"], [264, 5, 1, "", "vmap"], [265, 5, 1, "", "where"], [266, 5, 1, "", "zeros"], [267, 5, 1, "", "zeros_like"]], "mlx.core.Device": [[8, 4, 1, "", "__init__"]], "mlx.core.Dtype": [[9, 4, 1, "", "__init__"]], "mlx.core.DtypeCategory": [[10, 4, 1, "", "__init__"]], "mlx.core.Stream": [[276, 4, 1, "", "__init__"]], "mlx.core.array": [[30, 6, 1, "", "T"], [29, 4, 1, "", "__init__"], [31, 4, 1, "", "abs"], [32, 4, 1, "", "all"], [33, 4, 1, "", "any"], [34, 4, 1, "", "argmax"], [35, 4, 1, "", "argmin"], [36, 4, 1, "", "astype"], [37, 6, 1, "", "at"], [38, 4, 1, "", "cos"], [39, 4, 1, "", "cummax"], [40, 4, 1, "", "cummin"], [41, 4, 1, "", "cumprod"], [42, 4, 1, "", "cumsum"], [43, 4, 1, "", "diag"], [44, 4, 1, "", "diagonal"], [45, 6, 1, "", "dtype"], [46, 4, 1, "", "exp"], [47, 4, 1, "", "flatten"], [48, 4, 1, "", "item"], [49, 6, 1, "", "itemsize"], [50, 4, 1, "", "log"], [51, 4, 1, "", "log10"], [52, 4, 1, "", "log1p"], [53, 4, 1, "", "log2"], [54, 4, 1, "", "logsumexp"], [55, 4, 1, "", "max"], [56, 4, 1, "", "mean"], [57, 4, 1, "", "min"], [58, 4, 1, "", "moveaxis"], [59, 6, 1, "", "nbytes"], [60, 6, 1, "", "ndim"], [61, 4, 1, "", "prod"], [62, 4, 1, "", "reciprocal"], [63, 4, 1, "", "reshape"], [64, 4, 1, "", "round"], [65, 4, 1, "", "rsqrt"], [66, 6, 1, "", "shape"], [67, 4, 1, "", "sin"], [68, 6, 1, "", "size"], [69, 4, 1, "", "split"], [70, 4, 1, "", "sqrt"], [71, 4, 1, "", "square"], [72, 4, 1, "", "squeeze"], [73, 4, 1, "", "sum"], [74, 4, 1, "", "swapaxes"], [75, 4, 1, "", "tolist"], [76, 4, 1, "", "transpose"], [77, 4, 1, "", "var"]], "mlx.core.fast": [[123, 5, 1, "", "layer_norm"], [124, 5, 1, "", "rms_norm"], [125, 5, 1, "", "rope"], [126, 5, 1, "", "scaled_dot_product_attention"]], "mlx.core.fft": [[127, 5, 1, "", "fft"], [128, 5, 1, "", "fft2"], [129, 5, 1, "", "fftn"], [130, 5, 1, "", "ifft"], [131, 5, 1, "", "ifft2"], [132, 5, 1, "", "ifftn"], [133, 5, 1, "", "irfft"], [134, 5, 1, "", "irfft2"], [135, 5, 1, "", "irfftn"], [136, 5, 1, "", "rfft"], [137, 5, 1, "", "rfft2"], [138, 5, 1, "", "rfftn"]], "mlx.core.linalg": [[158, 5, 1, "", "cholesky"], [159, 5, 1, "", "inv"], [160, 5, 1, "", "norm"], [161, 5, 1, "", "qr"], [162, 5, 1, "", "svd"]], "mlx.core.metal": [[179, 5, 1, "", "clear_cache"], [180, 5, 1, "", "device_info"], [181, 5, 1, "", "get_active_memory"], [182, 5, 1, "", "get_cache_memory"], [183, 5, 1, "", "get_peak_memory"], [184, 5, 1, "", "is_available"], [185, 5, 1, "", "reset_peak_memory"], [186, 5, 1, "", "set_cache_limit"], [187, 5, 1, "", "set_memory_limit"], [188, 5, 1, "", "start_capture"], [189, 5, 1, "", "stop_capture"]], "mlx.core.random": [[207, 5, 1, "", "bernoulli"], [208, 5, 1, "", "categorical"], [209, 5, 1, "", "gumbel"], [210, 5, 1, "", "key"], [211, 5, 1, "", "multivariate_normal"], [212, 5, 1, "", "normal"], [213, 5, 1, "", "randint"], [214, 5, 1, "", "seed"], [215, 5, 1, "", "split"], [216, 5, 1, "", "truncated_normal"], [217, 5, 1, "", "uniform"]], "mlx.nn": [[285, 3, 1, "", "ALiBi"], [286, 3, 1, "", "AvgPool1d"], [287, 3, 1, "", "AvgPool2d"], [288, 3, 1, "", "BatchNorm"], [289, 3, 1, "", "Conv1d"], [290, 3, 1, "", "Conv2d"], [291, 3, 1, "", "Conv3d"], [292, 3, 1, "", "Dropout"], [293, 3, 1, "", "Dropout2d"], [294, 3, 1, "", "Dropout3d"], [295, 3, 1, "", "Embedding"], [296, 3, 1, "", "GELU"], [297, 3, 1, "", "GRU"], [298, 3, 1, "", "GroupNorm"], [299, 3, 1, "", "InstanceNorm"], [300, 3, 1, "", "LSTM"], [301, 3, 1, "", "LayerNorm"], [302, 3, 1, "", "Linear"], [303, 3, 1, "", "MaxPool1d"], [304, 3, 1, "", "MaxPool2d"], [305, 3, 1, "", "Mish"], [389, 3, 1, "", "Module"], [326, 3, 1, "", "MultiHeadAttention"], [327, 3, 1, "", "PReLU"], [328, 3, 1, "", "QuantizedEmbedding"], [329, 3, 1, "", "QuantizedLinear"], [330, 3, 1, "", "RMSNorm"], [331, 3, 1, "", "RNN"], [332, 3, 1, "", "ReLU"], [333, 3, 1, "", "RoPE"], [334, 3, 1, "", "SELU"], [335, 3, 1, "", "Sequential"], [336, 3, 1, "", "SiLU"], [337, 3, 1, "", "SinusoidalPositionalEncoding"], [338, 3, 1, "", "Softshrink"], [339, 3, 1, "", "Step"], [340, 3, 1, "", "Transformer"], [341, 3, 1, "", "Upsample"], [350, 3, 1, "", "elu"], [351, 3, 1, "", "gelu"], [352, 3, 1, "", "gelu_approx"], [353, 3, 1, "", "gelu_fast_approx"], [354, 3, 1, "", "glu"], [355, 3, 1, "", "hardswish"], [356, 3, 1, "", "leaky_relu"], [357, 3, 1, "", "log_sigmoid"], [358, 3, 1, "", "log_softmax"], [373, 3, 1, "", "mish"], [374, 3, 1, "", "prelu"], [268, 5, 1, "", "quantize"], [375, 3, 1, "", "relu"], [376, 3, 1, "", "relu6"], [377, 3, 1, "", "selu"], [378, 3, 1, "", "sigmoid"], [379, 3, 1, "", "silu"], [380, 3, 1, "", "softmax"], [381, 3, 1, "", "softplus"], [382, 3, 1, "", "softshrink"], [383, 3, 1, "", "step"], [384, 3, 1, "", "tanh"], [269, 5, 1, "", "value_and_grad"]], "mlx.nn.Module": [[306, 4, 1, "", "apply"], [307, 4, 1, "", "apply_to_modules"], [308, 4, 1, "", "children"], [309, 4, 1, "", "eval"], [310, 4, 1, "", "filter_and_map"], [311, 4, 1, "", "freeze"], [312, 4, 1, "", "leaf_modules"], [313, 4, 1, "", "load_weights"], [314, 4, 1, "", "modules"], [315, 4, 1, "", "named_modules"], [316, 4, 1, "", "parameters"], [317, 4, 1, "", "save_weights"], [318, 4, 1, "", "set_dtype"], [319, 6, 1, "", "state"], [320, 4, 1, "", "train"], [321, 4, 1, "", "trainable_parameters"], [322, 6, 1, "", "training"], [323, 4, 1, "", "unfreeze"], [324, 4, 1, "", "update"], [325, 4, 1, "", "update_modules"]], "mlx.nn.init": [[342, 5, 1, "", "constant"], [343, 5, 1, "", "glorot_normal"], [344, 5, 1, "", "glorot_uniform"], [345, 5, 1, "", "he_normal"], [346, 5, 1, "", "he_uniform"], [347, 5, 1, "", "identity"], [348, 5, 1, "", "normal"], [349, 5, 1, "", "uniform"]], "mlx.nn.losses": [[359, 3, 1, "", "binary_cross_entropy"], [360, 3, 1, "", "cosine_similarity_loss"], [361, 3, 1, "", "cross_entropy"], [362, 3, 1, "", "gaussian_nll_loss"], [363, 3, 1, "", "hinge_loss"], [364, 3, 1, "", "huber_loss"], [365, 3, 1, "", "kl_div_loss"], [366, 3, 1, "", "l1_loss"], [367, 3, 1, "", "log_cosh_loss"], [368, 3, 1, "", "margin_ranking_loss"], [369, 3, 1, "", "mse_loss"], [370, 3, 1, "", "nll_loss"], [371, 3, 1, "", "smooth_l1_loss"], [372, 3, 1, "", "triplet_loss"]], "mlx.optimizers": [[392, 3, 1, "", "AdaDelta"], [393, 3, 1, "", "Adafactor"], [394, 3, 1, "", "Adagrad"], [395, 3, 1, "", "Adam"], [396, 3, 1, "", "AdamW"], [397, 3, 1, "", "Adamax"], [398, 3, 1, "", "Lion"], [411, 3, 1, "", "Optimizer"], [403, 3, 1, "", "RMSprop"], [404, 3, 1, "", "SGD"], [270, 5, 1, "", "clip_grad_norm"], [405, 5, 1, "", "cosine_decay"], [406, 5, 1, "", "exponential_decay"], [407, 5, 1, "", "join_schedules"], [408, 5, 1, "", "linear_schedule"], [409, 5, 1, "", "step_decay"]], "mlx.optimizers.Optimizer": [[399, 4, 1, "", "apply_gradients"], [400, 4, 1, "", "init"], [401, 6, 1, "", "state"], [402, 4, 1, "", "update"]], "mlx.utils": [[271, 5, 1, "", "tree_flatten"], [272, 5, 1, "", "tree_map"], [273, 5, 1, "", "tree_map_with_path"], [274, 5, 1, "", "tree_reduce"], [275, 5, 1, "", "tree_unflatten"]]}, "objtypes": {"0": "cpp:function", "1": "cpp:functionParam", "2": "cpp:templateParam", "3": "py:class", "4": "py:method", "5": "py:function", "6": "py:property"}, "objnames": {"0": ["cpp", "function", "C++ function"], "1": ["cpp", "functionParam", "C++ function parameter"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "titleterms": {"oper": [0, 1, 390], "custom": 1, "extens": 1, "mlx": [1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409], "introduc": 1, "exampl": [1, 6, 416, 423], "primit": 1, "us": [1, 419, 424], "implement": [1, 4], "cpu": 1, "back": 1, "end": 1, "gpu": 1, "transform": [1, 340, 414, 416, 417, 419, 421], "build": [1, 7], "bind": 1, "python": [1, 6, 7], "cmake": 1, "setuptool": 1, "usag": [1, 6], "result": 1, "script": [1, 4], "download": [1, 4], "code": [1, 4], "metal": [2, 7, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 283], "debugg": 2, "xcode": 2, "workflow": 2, "linear": [3, 282, 302], "regress": 3, "llm": 4, "infer": 4, "model": 4, "attent": 4, "layer": [4, 5, 387], "encod": 4, "full": [4, 142], "gener": 4, "put": 4, "all": [4, 14, 32], "togeth": 4, "convert": 4, "weight": 4, "load": [4, 164, 422], "benchmark": 4, "multi": 5, "perceptron": 5, "instal": [6, 7], "api": [6, 7], "refer": 6, "c": [6, 7], "further": 6, "read": 6, "troubleshoot": 7, "from": [7, 418], "sourc": 7, "requir": 7, "option": 7, "binari": 7, "size": [7, 68], "minim": 7, "found": 7, "x86": 7, "shell": 7, "core": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 276], "devic": [8, 279], "dtype": [9, 45], "dtypecategori": 10, "ab": [11, 31], "add": 12, "addmm": 13, "allclos": 15, "ani": [16, 33], "arang": 17, "arcco": 18, "arccosh": 19, "arcsin": 20, "arcsinh": 21, "arctan": 22, "arctan2": 23, "arctanh": 24, "argmax": [25, 34], "argmin": [26, 35], "argpartit": 27, "argsort": 28, "arrai": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 277, 418, 422], "t": 30, "astyp": 36, "co": [38, 99], "cummax": [39, 101], "cummin": [40, 102], "cumprod": [41, 103], "cumsum": [42, 104], "diag": [43, 109], "diagon": [44, 110], "exp": [46, 119], "flatten": [47, 139], "item": 48, "items": 49, "log": [50, 165], "log10": [51, 166], "log1p": [52, 167], "log2": [53, 168], "logsumexp": [54, 173], "max": [55, 175], "mean": [56, 177], "min": [57, 190], "moveaxi": [58, 192], "nbyte": 59, "ndim": 60, "prod": [61, 203], "reciproc": [62, 218], "reshap": [63, 221], "round": [64, 223], "rsqrt": [65, 224], "shape": 66, "sin": [67, 234], "split": [69, 215, 238], "sqrt": [70, 239], "squar": [71, 240], "squeez": [72, 241], "sum": [73, 247], "swapax": [74, 248], "tolist": 75, "transpos": [76, 257], "var": [77, 262], "array_equ": 78, "as_strid": 79, "atleast_1d": 80, "atleast_2d": 81, "atleast_3d": 82, "bitwise_and": 83, "bitwise_or": 84, "bitwise_xor": 85, "block_masked_mm": 86, "block_sparse_mm": 87, "broadcast_to": 88, "ceil": 89, "clip": 90, "compil": [91, 416], "concaten": 92, "conj": 93, "conjug": 94, "conv1d": [95, 289], "conv2d": [96, 290], "conv_gener": 97, "convolv": 98, "cosh": 100, "default_devic": 105, "default_stream": 106, "degre": 107, "dequant": 108, "disable_compil": 111, "divid": 112, "divmod": 113, "enable_compil": 114, "equal": 115, "erf": 116, "erfinv": 117, "eval": [118, 309], "expand_dim": 120, "expm1": 121, "ey": 122, "fast": [123, 124, 125, 126, 280], "layer_norm": 123, "rms_norm": 124, "rope": [125, 333], "scaled_dot_product_attent": 126, "fft": [127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 281], "fft2": 128, "fftn": 129, "ifft": 130, "ifft2": 131, "ifftn": 132, "irfft": 133, "irfft2": 134, "irfftn": 135, "rfft": 136, "rfft2": 137, "rfftn": 138, "floor": 140, "floor_divid": 141, "grad": [143, 284], "greater": 144, "greater_equ": 145, "ident": [146, 347], "inner": 147, "isclos": 148, "isinf": 149, "isnan": 150, "isneginf": 151, "isposinf": 152, "issubdtyp": 153, "jvp": 154, "left_shift": 155, "less": 156, "less_equ": 157, "linalg": [158, 159, 160, 161, 162], "choleski": 158, "inv": 159, "norm": 160, "qr": 161, "svd": 162, "linspac": 163, "logaddexp": 169, "logical_and": 170, "logical_not": 171, "logical_or": 172, "matmul": 174, "maximum": 176, "meshgrid": 178, "clear_cach": 179, "device_info": 180, "get_active_memori": 181, "get_cache_memori": 182, "get_peak_memori": 183, "is_avail": 184, "reset_peak_memori": 185, "set_cache_limit": 186, "set_memory_limit": 187, "start_captur": 188, "stop_captur": 189, "minimum": 191, "multipli": 193, "neg": 194, "new_stream": 195, "not_equ": 196, "ones": 197, "ones_lik": 198, "outer": 199, "pad": 200, "partit": 201, "power": 202, "quantiz": [204, 268], "quantized_matmul": 205, "radian": 206, "random": [207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 413], "bernoulli": 207, "categor": 208, "gumbel": 209, "kei": 210, "multivariate_norm": 211, "normal": [212, 348], "randint": 213, "seed": 214, "truncated_norm": 216, "uniform": [217, 349], "remaind": 219, "repeat": 220, "right_shift": 222, "save": [225, 422], "save_gguf": 226, "save_safetensor": 227, "savez": 228, "savez_compress": 229, "set_default_devic": 230, "set_default_stream": 231, "sigmoid": [232, 378], "sign": 233, "sinh": 235, "softmax": [236, 380], "sort": 237, "stack": 242, "std": 243, "stop_gradi": 244, "stream": [245, 276, 279, 424], "subtract": 246, "synchron": 249, "take": 250, "take_along_axi": 251, "tan": 252, "tanh": [253, 384], "tensordot": 254, "tile": 255, "topk": 256, "tri": 258, "tril": 259, "triu": 260, "value_and_grad": [261, 269], "vjp": 263, "vmap": 264, "where": 265, "zero": 266, "zeros_lik": 267, "nn": [268, 269, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384], "optim": [270, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], "clip_grad_norm": 270, "util": [271, 272, 273, 274, 275, 415], "tree_flatten": 271, "tree_map": 272, "tree_map_with_path": 273, "tree_reduc": 274, "tree_unflatten": 275, "data": 278, "type": 278, "support": 278, "algebra": 282, "neural": 284, "network": 284, "quick": [284, 421], "start": [284, 421], "The": 284, "modul": [284, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 389], "class": 284, "paramet": [284, 316], "updat": [284, 324, 402, 418], "inspect": 284, "valu": 284, "alibi": 285, "avgpool1d": 286, "avgpool2d": 287, "batchnorm": 288, "conv3d": 291, "dropout": 292, "dropout2d": 293, "dropout3d": 294, "embed": 295, "gelu": [296, 351], "gru": 297, "groupnorm": 298, "instancenorm": 299, "lstm": 300, "layernorm": 301, "maxpool1d": 303, "maxpool2d": 304, "mish": [305, 373], "appli": 306, "apply_to_modul": 307, "children": 308, "filter_and_map": 310, "freez": 311, "leaf_modul": 312, "load_weight": 313, "named_modul": 315, "save_weight": 317, "set_dtyp": 318, "state": [319, 401], "train": [320, 322, 416], "trainable_paramet": 321, "unfreez": 323, "update_modul": 325, "multiheadattent": 326, "prelu": [327, 374], "quantizedembed": 328, "quantizedlinear": 329, "rmsnorm": 330, "rnn": 331, "relu": [332, 375], "selu": [334, 377], "sequenti": 335, "silu": [336, 379], "sinusoidalpositionalencod": 337, "softshrink": [338, 382], "step": [339, 383], "upsampl": 341, "init": [342, 343, 344, 345, 346, 347, 348, 349, 400], "constant": 342, "glorot_norm": 343, "glorot_uniform": 344, "he_norm": 345, "he_uniform": 346, "elu": 350, "gelu_approx": 352, "gelu_fast_approx": 353, "glu": 354, "hardswish": 355, "leaky_relu": 356, "log_sigmoid": 357, "log_softmax": 358, "loss": [359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 388], "binary_cross_entropi": 359, "cosine_similarity_loss": 360, "cross_entropi": 361, "gaussian_nll_loss": 362, "hinge_loss": 363, "huber_loss": 364, "kl_div_loss": 365, "l1_loss": 366, "log_cosh_loss": 367, "margin_ranking_loss": 368, "mse_loss": 369, "nll_loss": 370, "smooth_l1_loss": 371, "triplet_loss": 372, "relu6": 376, "softplu": 381, "function": [385, 388, 416, 417, 421], "initi": 386, "adadelta": 392, "adafactor": 393, "adagrad": 394, "adam": 395, "adamw": 396, "adamax": 397, "lion": 398, "apply_gradi": 399, "rmsprop": 403, "sgd": 404, "cosine_decai": 405, "exponential_decai": 406, "join_schedul": 407, "linear_schedul": 408, "step_decai": 409, "common": 410, "schedul": 412, "tree": 415, "basic": [416, 421], "speedup": 416, "debug": 416, "pure": 416, "graph": [416, 419, 421], "automat": 417, "differenti": 417, "vector": 417, "index": 418, "differ": 418, "numpi": [418, 420], "In": 418, "place": 418, "lazi": 419, "evalu": 419, "why": 419, "comput": 419, "onli": 419, "what": 419, "you": 419, "when": 419, "convers": 420, "other": 420, "framework": 420, "pytorch": 420, "jax": 420, "tensorflow": 420, "guid": 421, "serial": 422, "format": 422, "unifi": 423, "memori": 423, "A": 423, "simpl": 423, "specifi": 424}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Operations": [[0, "operations"], [1, "operations"], [390, "operations"]], "Custom Extensions in MLX": [[1, "custom-extensions-in-mlx"]], "Introducing the Example": [[1, "introducing-the-example"]], "Operations and Primitives": [[1, "operations-and-primitives"]], "Primitives": [[1, "primitives"]], "Using the Primitive": [[1, "using-the-primitive"]], "Implementing the Primitive": [[1, "implementing-the-primitive"]], "Implementing the CPU Back-end": [[1, "implementing-the-cpu-back-end"]], "Implementing the GPU Back-end": [[1, "implementing-the-gpu-back-end"]], "Primitive Transforms": [[1, "primitive-transforms"]], "Building and Binding": [[1, "building-and-binding"]], "Binding to Python": [[1, "binding-to-python"]], "Building with CMake": [[1, "building-with-cmake"]], "Building with setuptools": [[1, "building-with-setuptools"]], "Usage": [[1, "usage"], [6, null]], "Results": [[1, "results"]], "Scripts": [[1, "scripts"], [4, "scripts"]], "Download the code": [[1, null], [4, null]], "Metal Debugger": [[2, "metal-debugger"]], "Xcode Workflow": [[2, "xcode-workflow"]], "Linear Regression": [[3, "linear-regression"]], "LLM inference": [[4, "llm-inference"]], "Implementing the model": [[4, "implementing-the-model"]], "Attention layer": [[4, "attention-layer"]], "Encoder layer": [[4, "encoder-layer"]], "Full model": [[4, "full-model"]], "Generation": [[4, "generation"]], "Putting it all together": [[4, "putting-it-all-together"]], "Converting the weights": [[4, "converting-the-weights"]], "Weight loading and benchmarking": [[4, "weight-loading-and-benchmarking"]], "Multi-Layer Perceptron": [[5, "multi-layer-perceptron"]], "MLX": [[6, "mlx"]], "Install": [[6, null]], "Examples": [[6, null]], "Python API Reference": [[6, null]], "C++ API Reference": [[6, null]], "Further Reading": [[6, null]], "Build and Install": [[7, "build-and-install"]], "Python Installation": [[7, "python-installation"]], "Troubleshooting": [[7, "troubleshooting"], [7, "id2"]], "Build from source": [[7, "build-from-source"]], "Build Requirements": [[7, "build-requirements"]], "Python API": [[7, "python-api"]], "C++ API": [[7, "c-api"]], "Build Options": [[7, "id3"]], "Binary Size Minimization": [[7, "binary-size-minimization"]], "Metal not found": [[7, "metal-not-found"]], "x86 Shell": [[7, "x86-shell"]], "mlx.core.fast.layer_norm": [[123, "mlx-core-fast-layer-norm"]], "mlx.core.fast.rms_norm": [[124, "mlx-core-fast-rms-norm"]], "mlx.core.fast.rope": [[125, "mlx-core-fast-rope"]], "mlx.core.fast.scaled_dot_product_attention": [[126, "mlx-core-fast-scaled-dot-product-attention"]], "mlx.core.fft.fft": [[127, "mlx-core-fft-fft"]], "mlx.core.fft.fft2": [[128, "mlx-core-fft-fft2"]], "mlx.core.fft.fftn": [[129, "mlx-core-fft-fftn"]], "mlx.core.fft.ifft": [[130, "mlx-core-fft-ifft"]], "mlx.core.fft.ifft2": [[131, "mlx-core-fft-ifft2"]], "mlx.core.fft.ifftn": [[132, "mlx-core-fft-ifftn"]], "mlx.core.fft.irfft": [[133, "mlx-core-fft-irfft"]], "mlx.core.fft.irfft2": [[134, "mlx-core-fft-irfft2"]], "mlx.core.fft.irfftn": [[135, "mlx-core-fft-irfftn"]], "mlx.core.fft.rfft": [[136, "mlx-core-fft-rfft"]], "mlx.core.fft.rfft2": [[137, "mlx-core-fft-rfft2"]], "mlx.core.fft.rfftn": [[138, "mlx-core-fft-rfftn"]], "mlx.core.metal.clear_cache": [[179, "mlx-core-metal-clear-cache"]], "mlx.core.metal.device_info": [[180, "mlx-core-metal-device-info"]], "mlx.core.metal.get_active_memory": [[181, "mlx-core-metal-get-active-memory"]], "mlx.core.metal.get_cache_memory": [[182, "mlx-core-metal-get-cache-memory"]], "mlx.core.metal.get_peak_memory": [[183, "mlx-core-metal-get-peak-memory"]], "mlx.core.metal.is_available": [[184, "mlx-core-metal-is-available"]], "mlx.core.metal.reset_peak_memory": [[185, "mlx-core-metal-reset-peak-memory"]], "mlx.core.metal.set_cache_limit": [[186, "mlx-core-metal-set-cache-limit"]], "mlx.core.metal.set_memory_limit": [[187, "mlx-core-metal-set-memory-limit"]], "mlx.core.metal.start_capture": [[188, "mlx-core-metal-start-capture"]], "mlx.core.metal.stop_capture": [[189, "mlx-core-metal-stop-capture"]], "mlx.core.random.bernoulli": [[207, "mlx-core-random-bernoulli"]], "mlx.core.random.categorical": [[208, "mlx-core-random-categorical"]], "mlx.core.random.gumbel": [[209, "mlx-core-random-gumbel"]], "mlx.core.random.key": [[210, "mlx-core-random-key"]], "mlx.core.random.multivariate_normal": [[211, "mlx-core-random-multivariate-normal"]], "mlx.core.random.normal": [[212, "mlx-core-random-normal"]], "mlx.core.random.randint": [[213, "mlx-core-random-randint"]], "mlx.core.random.seed": [[214, "mlx-core-random-seed"]], "mlx.core.random.split": [[215, "mlx-core-random-split"]], "mlx.core.random.truncated_normal": [[216, "mlx-core-random-truncated-normal"]], "mlx.core.random.uniform": [[217, "mlx-core-random-uniform"]], "mlx.nn.quantize": [[268, "mlx-nn-quantize"]], "mlx.nn.value_and_grad": [[269, "mlx-nn-value-and-grad"]], "mlx.optimizers.clip_grad_norm": [[270, "mlx-optimizers-clip-grad-norm"]], "mlx.utils.tree_flatten": [[271, "mlx-utils-tree-flatten"]], "mlx.utils.tree_map": [[272, "mlx-utils-tree-map"]], "mlx.utils.tree_map_with_path": [[273, "mlx-utils-tree-map-with-path"]], "mlx.utils.tree_reduce": [[274, "mlx-utils-tree-reduce"]], "mlx.utils.tree_unflatten": [[275, "mlx-utils-tree-unflatten"]], "Array": [[277, "array"]], "Data Types": [[278, "data-types"]], "Supported Data Types": [[278, "id2"]], "Devices and Streams": [[279, "devices-and-streams"]], "Fast": [[280, "fast"]], "FFT": [[281, "fft"]], "Linear Algebra": [[282, "linear-algebra"]], "Metal": [[283, "metal"]], "Neural Networks": [[284, "neural-networks"]], "Quick Start with Neural Networks": [[284, "quick-start-with-neural-networks"]], "The Module Class": [[284, "the-module-class"]], "Parameters": [[284, "parameters"]], "Updating the Parameters": [[284, "updating-the-parameters"]], "Inspecting Modules": [[284, "inspecting-modules"]], "Value and Grad": [[284, "value-and-grad"]], "mlx.nn.ALiBi": [[285, "mlx-nn-alibi"]], "mlx.nn.AvgPool1d": [[286, "mlx-nn-avgpool1d"]], "mlx.nn.AvgPool2d": [[287, "mlx-nn-avgpool2d"]], "mlx.nn.BatchNorm": [[288, "mlx-nn-batchnorm"]], "mlx.nn.Dropout": [[292, "mlx-nn-dropout"]], "mlx.nn.Dropout2d": [[293, "mlx-nn-dropout2d"]], "mlx.nn.Dropout3d": [[294, "mlx-nn-dropout3d"]], "mlx.nn.Embedding": [[295, "mlx-nn-embedding"]], "mlx.nn.GELU": [[296, "mlx-nn-gelu"]], "mlx.nn.GRU": [[297, "mlx-nn-gru"]], "mlx.nn.GroupNorm": [[298, "mlx-nn-groupnorm"]], "mlx.nn.InstanceNorm": [[299, "mlx-nn-instancenorm"]], "mlx.nn.LSTM": [[300, "mlx-nn-lstm"]], "mlx.nn.LayerNorm": [[301, "mlx-nn-layernorm"]], "mlx.nn.Linear": [[302, "mlx-nn-linear"]], "mlx.nn.MaxPool1d": [[303, "mlx-nn-maxpool1d"]], "mlx.nn.MaxPool2d": [[304, "mlx-nn-maxpool2d"]], "mlx.nn.Mish": [[305, "mlx-nn-mish"]], "mlx.nn.Module.apply": [[306, "mlx-nn-module-apply"]], "mlx.nn.Module.apply_to_modules": [[307, "mlx-nn-module-apply-to-modules"]], "mlx.nn.Module.children": [[308, "mlx-nn-module-children"]], "mlx.nn.Module.eval": [[309, "mlx-nn-module-eval"]], "mlx.nn.Module.filter_and_map": [[310, "mlx-nn-module-filter-and-map"]], "mlx.nn.Module.freeze": [[311, "mlx-nn-module-freeze"]], "mlx.nn.Module.leaf_modules": [[312, "mlx-nn-module-leaf-modules"]], "mlx.nn.Module.load_weights": [[313, "mlx-nn-module-load-weights"]], "mlx.nn.Module.modules": [[314, "mlx-nn-module-modules"]], "mlx.nn.Module.named_modules": [[315, "mlx-nn-module-named-modules"]], "mlx.nn.Module.parameters": [[316, "mlx-nn-module-parameters"]], "mlx.nn.Module.save_weights": [[317, "mlx-nn-module-save-weights"]], "mlx.nn.Module.set_dtype": [[318, "mlx-nn-module-set-dtype"]], "mlx.nn.Module.state": [[319, "mlx-nn-module-state"]], "mlx.nn.Module.train": [[320, "mlx-nn-module-train"]], "mlx.nn.Module.trainable_parameters": [[321, "mlx-nn-module-trainable-parameters"]], "mlx.nn.Module.training": [[322, "mlx-nn-module-training"]], "mlx.nn.Module.unfreeze": [[323, "mlx-nn-module-unfreeze"]], "mlx.nn.Module.update": [[324, "mlx-nn-module-update"]], "mlx.nn.Module.update_modules": [[325, "mlx-nn-module-update-modules"]], "mlx.nn.MultiHeadAttention": [[326, "mlx-nn-multiheadattention"]], "mlx.nn.PReLU": [[327, "mlx-nn-prelu"]], "mlx.nn.QuantizedEmbedding": [[328, "mlx-nn-quantizedembedding"]], "mlx.nn.QuantizedLinear": [[329, "mlx-nn-quantizedlinear"]], "mlx.nn.RMSNorm": [[330, "mlx-nn-rmsnorm"]], "mlx.nn.RNN": [[331, "mlx-nn-rnn"]], "mlx.nn.ReLU": [[332, "mlx-nn-relu"]], "mlx.nn.RoPE": [[333, "mlx-nn-rope"]], "mlx.nn.SELU": [[334, "mlx-nn-selu"]], "mlx.nn.Sequential": [[335, "mlx-nn-sequential"]], "mlx.nn.SiLU": [[336, "mlx-nn-silu"]], "mlx.nn.SinusoidalPositionalEncoding": [[337, "mlx-nn-sinusoidalpositionalencoding"]], "mlx.nn.Softshrink": [[338, "mlx-nn-softshrink"]], "mlx.nn.Step": [[339, "mlx-nn-step"]], "mlx.nn.Transformer": [[340, "mlx-nn-transformer"]], "mlx.nn.Upsample": [[341, "mlx-nn-upsample"]], "mlx.nn.init.constant": [[342, "mlx-nn-init-constant"]], "mlx.nn.init.glorot_normal": [[343, "mlx-nn-init-glorot-normal"]], "mlx.nn.init.glorot_uniform": [[344, "mlx-nn-init-glorot-uniform"]], "mlx.nn.init.he_normal": [[345, "mlx-nn-init-he-normal"]], "mlx.nn.init.he_uniform": [[346, "mlx-nn-init-he-uniform"]], "mlx.nn.init.identity": [[347, "mlx-nn-init-identity"]], "mlx.nn.init.normal": [[348, "mlx-nn-init-normal"]], "mlx.nn.init.uniform": [[349, "mlx-nn-init-uniform"]], "mlx.nn.elu": [[350, "mlx-nn-elu"]], "mlx.nn.gelu": [[351, "mlx-nn-gelu"]], "mlx.nn.gelu_approx": [[352, "mlx-nn-gelu-approx"]], "mlx.nn.gelu_fast_approx": [[353, "mlx-nn-gelu-fast-approx"]], "mlx.nn.glu": [[354, "mlx-nn-glu"]], "mlx.nn.hardswish": [[355, "mlx-nn-hardswish"]], "mlx.nn.leaky_relu": [[356, "mlx-nn-leaky-relu"]], "mlx.nn.log_sigmoid": [[357, "mlx-nn-log-sigmoid"]], "mlx.nn.log_softmax": [[358, "mlx-nn-log-softmax"]], "mlx.nn.losses.binary_cross_entropy": [[359, "mlx-nn-losses-binary-cross-entropy"]], "mlx.nn.losses.cosine_similarity_loss": [[360, "mlx-nn-losses-cosine-similarity-loss"]], "mlx.nn.losses.cross_entropy": [[361, "mlx-nn-losses-cross-entropy"]], "mlx.nn.losses.gaussian_nll_loss": [[362, "mlx-nn-losses-gaussian-nll-loss"]], "mlx.nn.losses.hinge_loss": [[363, "mlx-nn-losses-hinge-loss"]], "mlx.nn.losses.huber_loss": [[364, "mlx-nn-losses-huber-loss"]], "mlx.nn.losses.kl_div_loss": [[365, "mlx-nn-losses-kl-div-loss"]], "mlx.nn.losses.l1_loss": [[366, "mlx-nn-losses-l1-loss"]], "mlx.nn.losses.log_cosh_loss": [[367, "mlx-nn-losses-log-cosh-loss"]], "mlx.nn.losses.margin_ranking_loss": [[368, "mlx-nn-losses-margin-ranking-loss"]], "mlx.nn.losses.mse_loss": [[369, "mlx-nn-losses-mse-loss"]], "mlx.nn.losses.nll_loss": [[370, "mlx-nn-losses-nll-loss"]], "mlx.nn.losses.smooth_l1_loss": [[371, "mlx-nn-losses-smooth-l1-loss"]], "mlx.nn.losses.triplet_loss": [[372, "mlx-nn-losses-triplet-loss"]], "mlx.nn.mish": [[373, "mlx-nn-mish"]], "mlx.nn.prelu": [[374, "mlx-nn-prelu"]], "mlx.nn.relu": [[375, "mlx-nn-relu"]], "mlx.nn.relu6": [[376, "mlx-nn-relu6"]], "mlx.nn.selu": [[377, "mlx-nn-selu"]], "mlx.nn.sigmoid": [[378, "mlx-nn-sigmoid"]], "mlx.nn.silu": [[379, "mlx-nn-silu"]], "mlx.nn.softmax": [[380, "mlx-nn-softmax"]], "mlx.nn.softplus": [[381, "mlx-nn-softplus"]], "mlx.nn.softshrink": [[382, "mlx-nn-softshrink"]], "mlx.nn.step": [[383, "mlx-nn-step"]], "mlx.nn.tanh": [[384, "mlx-nn-tanh"]], "Functions": [[385, "functions"]], "Initializers": [[386, "initializers"]], "Layers": [[387, "layers"]], "Loss Functions": [[388, "loss-functions"]], "Module": [[389, "module"]], "Optimizers": [[391, "optimizers"]], "mlx.optimizers.AdaDelta": [[392, "mlx-optimizers-adadelta"]], "mlx.optimizers.Adafactor": [[393, "mlx-optimizers-adafactor"]], "mlx.optimizers.Adagrad": [[394, "mlx-optimizers-adagrad"]], "mlx.optimizers.Adam": [[395, "mlx-optimizers-adam"]], "mlx.optimizers.AdamW": [[396, "mlx-optimizers-adamw"]], "mlx.optimizers.Adamax": [[397, "mlx-optimizers-adamax"]], "mlx.optimizers.Lion": [[398, "mlx-optimizers-lion"]], "mlx.optimizers.Optimizer.apply_gradients": [[399, "mlx-optimizers-optimizer-apply-gradients"]], "mlx.optimizers.Optimizer.init": [[400, "mlx-optimizers-optimizer-init"]], "mlx.optimizers.Optimizer.state": [[401, "mlx-optimizers-optimizer-state"]], "mlx.optimizers.Optimizer.update": [[402, "mlx-optimizers-optimizer-update"]], "mlx.optimizers.RMSprop": [[403, "mlx-optimizers-rmsprop"]], "mlx.optimizers.SGD": [[404, "mlx-optimizers-sgd"]], "mlx.optimizers.cosine_decay": [[405, "mlx-optimizers-cosine-decay"]], "mlx.optimizers.exponential_decay": [[406, "mlx-optimizers-exponential-decay"]], "mlx.optimizers.join_schedules": [[407, "mlx-optimizers-join-schedules"]], "mlx.optimizers.linear_schedule": [[408, "mlx-optimizers-linear-schedule"]], "mlx.optimizers.step_decay": [[409, "mlx-optimizers-step-decay"]], "Common Optimizers": [[410, "common-optimizers"]], "Optimizer": [[411, "optimizer"]], "Schedulers": [[412, "schedulers"]], "Random": [[413, "random"]], "Transforms": [[414, "transforms"]], "Tree Utils": [[415, "tree-utils"]], "Compilation": [[416, "compilation"]], "Basics of Compile": [[416, "basics-of-compile"]], "Example Speedup": [[416, "example-speedup"]], "Debugging": [[416, "debugging"]], "Pure Functions": [[416, "pure-functions"]], "Compiling Training Graphs": [[416, "compiling-training-graphs"]], "Transformations with Compile": [[416, "transformations-with-compile"]], "Function Transforms": [[417, "function-transforms"]], "Automatic Differentiation": [[417, "automatic-differentiation"]], "Automatic Vectorization": [[417, "automatic-vectorization"]], "Indexing Arrays": [[418, "indexing-arrays"]], "Differences from NumPy": [[418, "differences-from-numpy"]], "In Place Updates": [[418, "in-place-updates"]], "Lazy Evaluation": [[419, "lazy-evaluation"]], "Why Lazy Evaluation": [[419, "why-lazy-evaluation"]], "Transforming Compute Graphs": [[419, "transforming-compute-graphs"]], "Only Compute What You Use": [[419, "only-compute-what-you-use"]], "When to Evaluate": [[419, "when-to-evaluate"]], "Conversion to NumPy and Other Frameworks": [[420, "conversion-to-numpy-and-other-frameworks"]], "PyTorch": [[420, "pytorch"]], "JAX": [[420, "jax"]], "TensorFlow": [[420, "tensorflow"]], "Quick Start Guide": [[421, "quick-start-guide"]], "Basics": [[421, "basics"]], "Function and Graph Transformations": [[421, "function-and-graph-transformations"]], "Saving and Loading Arrays": [[422, "saving-and-loading-arrays"]], "Serialization Formats": [[422, "id1"]], "Unified Memory": [[423, "unified-memory"]], "A Simple Example": [[423, "a-simple-example"]], "Using Streams": [[424, "using-streams"]], "Specifying the Stream": [[424, "specifying-the-stream"]], "mlx.nn.Conv1d": [[289, "mlx-nn-conv1d"]], "mlx.nn.Conv2d": [[290, "mlx-nn-conv2d"]], "mlx.nn.Conv3d": [[291, "mlx-nn-conv3d"]], "mlx.core.Device": [[8, "mlx-core-device"]], "mlx.core.Dtype": [[9, "mlx-core-dtype"]], "mlx.core.DtypeCategory": [[10, "mlx-core-dtypecategory"]], "mlx.core.abs": [[11, "mlx-core-abs"]], "mlx.core.add": [[12, "mlx-core-add"]], "mlx.core.addmm": [[13, "mlx-core-addmm"]], "mlx.core.all": [[14, "mlx-core-all"]], "mlx.core.allclose": [[15, "mlx-core-allclose"]], "mlx.core.any": [[16, "mlx-core-any"]], "mlx.core.arange": [[17, "mlx-core-arange"]], "mlx.core.arccos": [[18, "mlx-core-arccos"]], "mlx.core.arccosh": [[19, "mlx-core-arccosh"]], "mlx.core.arcsin": [[20, "mlx-core-arcsin"]], "mlx.core.arcsinh": [[21, "mlx-core-arcsinh"]], "mlx.core.arctan": [[22, "mlx-core-arctan"]], "mlx.core.arctan2": [[23, "mlx-core-arctan2"]], "mlx.core.arctanh": [[24, "mlx-core-arctanh"]], "mlx.core.argmax": [[25, "mlx-core-argmax"]], "mlx.core.argmin": [[26, "mlx-core-argmin"]], "mlx.core.argpartition": [[27, "mlx-core-argpartition"]], "mlx.core.argsort": [[28, "mlx-core-argsort"]], "mlx.core.array": [[29, "mlx-core-array"]], "mlx.core.array.T": [[30, "mlx-core-array-t"]], "mlx.core.array.abs": [[31, "mlx-core-array-abs"]], "mlx.core.array.all": [[32, "mlx-core-array-all"]], "mlx.core.array.any": [[33, "mlx-core-array-any"]], "mlx.core.array.argmax": [[34, "mlx-core-array-argmax"]], "mlx.core.array.argmin": [[35, "mlx-core-array-argmin"]], "mlx.core.array.astype": [[36, "mlx-core-array-astype"]], "mlx.core.array.at": [[37, "mlx-core-array-at"]], "mlx.core.array.cos": [[38, "mlx-core-array-cos"]], "mlx.core.array.cummax": [[39, "mlx-core-array-cummax"]], "mlx.core.array.cummin": [[40, "mlx-core-array-cummin"]], "mlx.core.array.cumprod": [[41, "mlx-core-array-cumprod"]], "mlx.core.array.cumsum": [[42, "mlx-core-array-cumsum"]], "mlx.core.array.diag": [[43, "mlx-core-array-diag"]], "mlx.core.array.diagonal": [[44, "mlx-core-array-diagonal"]], "mlx.core.array.dtype": [[45, "mlx-core-array-dtype"]], "mlx.core.array.exp": [[46, "mlx-core-array-exp"]], "mlx.core.array.flatten": [[47, "mlx-core-array-flatten"]], "mlx.core.array.item": [[48, "mlx-core-array-item"]], "mlx.core.array.itemsize": [[49, "mlx-core-array-itemsize"]], "mlx.core.array.log": [[50, "mlx-core-array-log"]], "mlx.core.array.log10": [[51, "mlx-core-array-log10"]], "mlx.core.array.log1p": [[52, "mlx-core-array-log1p"]], "mlx.core.array.log2": [[53, "mlx-core-array-log2"]], "mlx.core.array.logsumexp": [[54, "mlx-core-array-logsumexp"]], "mlx.core.array.max": [[55, "mlx-core-array-max"]], "mlx.core.array.mean": [[56, "mlx-core-array-mean"]], "mlx.core.array.min": [[57, "mlx-core-array-min"]], "mlx.core.array.moveaxis": [[58, "mlx-core-array-moveaxis"]], "mlx.core.array.nbytes": [[59, "mlx-core-array-nbytes"]], "mlx.core.array.ndim": [[60, "mlx-core-array-ndim"]], "mlx.core.array.prod": [[61, "mlx-core-array-prod"]], "mlx.core.array.reciprocal": [[62, "mlx-core-array-reciprocal"]], "mlx.core.array.reshape": [[63, "mlx-core-array-reshape"]], "mlx.core.array.round": [[64, "mlx-core-array-round"]], "mlx.core.array.rsqrt": [[65, "mlx-core-array-rsqrt"]], "mlx.core.array.shape": [[66, "mlx-core-array-shape"]], "mlx.core.array.sin": [[67, "mlx-core-array-sin"]], "mlx.core.array.size": [[68, "mlx-core-array-size"]], "mlx.core.array.split": [[69, "mlx-core-array-split"]], "mlx.core.array.sqrt": [[70, "mlx-core-array-sqrt"]], "mlx.core.array.square": [[71, "mlx-core-array-square"]], "mlx.core.array.squeeze": [[72, "mlx-core-array-squeeze"]], "mlx.core.array.sum": [[73, "mlx-core-array-sum"]], "mlx.core.array.swapaxes": [[74, "mlx-core-array-swapaxes"]], "mlx.core.array.tolist": [[75, "mlx-core-array-tolist"]], "mlx.core.array.transpose": [[76, "mlx-core-array-transpose"]], "mlx.core.array.var": [[77, "mlx-core-array-var"]], "mlx.core.array_equal": [[78, "mlx-core-array-equal"]], "mlx.core.as_strided": [[79, "mlx-core-as-strided"]], "mlx.core.atleast_1d": [[80, "mlx-core-atleast-1d"]], "mlx.core.atleast_2d": [[81, "mlx-core-atleast-2d"]], "mlx.core.atleast_3d": [[82, "mlx-core-atleast-3d"]], "mlx.core.bitwise_and": [[83, "mlx-core-bitwise-and"]], "mlx.core.bitwise_or": [[84, "mlx-core-bitwise-or"]], "mlx.core.bitwise_xor": [[85, "mlx-core-bitwise-xor"]], "mlx.core.block_masked_mm": [[86, "mlx-core-block-masked-mm"]], "mlx.core.block_sparse_mm": [[87, "mlx-core-block-sparse-mm"]], "mlx.core.broadcast_to": [[88, "mlx-core-broadcast-to"]], "mlx.core.ceil": [[89, "mlx-core-ceil"]], "mlx.core.clip": [[90, "mlx-core-clip"]], "mlx.core.compile": [[91, "mlx-core-compile"]], "mlx.core.concatenate": [[92, "mlx-core-concatenate"]], "mlx.core.conj": [[93, "mlx-core-conj"]], "mlx.core.conjugate": [[94, "mlx-core-conjugate"]], "mlx.core.conv1d": [[95, "mlx-core-conv1d"]], "mlx.core.conv2d": [[96, "mlx-core-conv2d"]], "mlx.core.conv_general": [[97, "mlx-core-conv-general"]], "mlx.core.convolve": [[98, "mlx-core-convolve"]], "mlx.core.cos": [[99, "mlx-core-cos"]], "mlx.core.cosh": [[100, "mlx-core-cosh"]], "mlx.core.cummax": [[101, "mlx-core-cummax"]], "mlx.core.cummin": [[102, "mlx-core-cummin"]], "mlx.core.cumprod": [[103, "mlx-core-cumprod"]], "mlx.core.cumsum": [[104, "mlx-core-cumsum"]], "mlx.core.default_device": [[105, "mlx-core-default-device"]], "mlx.core.default_stream": [[106, "mlx-core-default-stream"]], "mlx.core.degrees": [[107, "mlx-core-degrees"]], "mlx.core.dequantize": [[108, "mlx-core-dequantize"]], "mlx.core.diag": [[109, "mlx-core-diag"]], "mlx.core.diagonal": [[110, "mlx-core-diagonal"]], "mlx.core.disable_compile": [[111, "mlx-core-disable-compile"]], "mlx.core.divide": [[112, "mlx-core-divide"]], "mlx.core.divmod": [[113, "mlx-core-divmod"]], "mlx.core.enable_compile": [[114, "mlx-core-enable-compile"]], "mlx.core.equal": [[115, "mlx-core-equal"]], "mlx.core.erf": [[116, "mlx-core-erf"]], "mlx.core.erfinv": [[117, "mlx-core-erfinv"]], "mlx.core.eval": [[118, "mlx-core-eval"]], "mlx.core.exp": [[119, "mlx-core-exp"]], "mlx.core.expand_dims": [[120, "mlx-core-expand-dims"]], "mlx.core.expm1": [[121, "mlx-core-expm1"]], "mlx.core.eye": [[122, "mlx-core-eye"]], "mlx.core.flatten": [[139, "mlx-core-flatten"]], "mlx.core.floor": [[140, "mlx-core-floor"]], "mlx.core.floor_divide": [[141, "mlx-core-floor-divide"]], "mlx.core.full": [[142, "mlx-core-full"]], "mlx.core.grad": [[143, "mlx-core-grad"]], "mlx.core.greater": [[144, "mlx-core-greater"]], "mlx.core.greater_equal": [[145, "mlx-core-greater-equal"]], "mlx.core.identity": [[146, "mlx-core-identity"]], "mlx.core.inner": [[147, "mlx-core-inner"]], "mlx.core.isclose": [[148, "mlx-core-isclose"]], "mlx.core.isinf": [[149, "mlx-core-isinf"]], "mlx.core.isnan": [[150, "mlx-core-isnan"]], "mlx.core.isneginf": [[151, "mlx-core-isneginf"]], "mlx.core.isposinf": [[152, "mlx-core-isposinf"]], "mlx.core.issubdtype": [[153, "mlx-core-issubdtype"]], "mlx.core.jvp": [[154, "mlx-core-jvp"]], "mlx.core.left_shift": [[155, "mlx-core-left-shift"]], "mlx.core.less": [[156, "mlx-core-less"]], "mlx.core.less_equal": [[157, "mlx-core-less-equal"]], "mlx.core.linspace": [[163, "mlx-core-linspace"]], "mlx.core.load": [[164, "mlx-core-load"]], "mlx.core.log": [[165, "mlx-core-log"]], "mlx.core.log10": [[166, "mlx-core-log10"]], "mlx.core.log1p": [[167, "mlx-core-log1p"]], "mlx.core.log2": [[168, "mlx-core-log2"]], "mlx.core.logaddexp": [[169, "mlx-core-logaddexp"]], "mlx.core.logical_and": [[170, "mlx-core-logical-and"]], "mlx.core.logical_not": [[171, "mlx-core-logical-not"]], "mlx.core.logical_or": [[172, "mlx-core-logical-or"]], "mlx.core.logsumexp": [[173, "mlx-core-logsumexp"]], "mlx.core.matmul": [[174, "mlx-core-matmul"]], "mlx.core.max": [[175, "mlx-core-max"]], "mlx.core.maximum": [[176, "mlx-core-maximum"]], "mlx.core.mean": [[177, "mlx-core-mean"]], "mlx.core.meshgrid": [[178, "mlx-core-meshgrid"]], "mlx.core.min": [[190, "mlx-core-min"]], "mlx.core.minimum": [[191, "mlx-core-minimum"]], "mlx.core.moveaxis": [[192, "mlx-core-moveaxis"]], "mlx.core.multiply": [[193, "mlx-core-multiply"]], "mlx.core.negative": [[194, "mlx-core-negative"]], "mlx.core.new_stream": [[195, "mlx-core-new-stream"]], "mlx.core.not_equal": [[196, "mlx-core-not-equal"]], "mlx.core.ones": [[197, "mlx-core-ones"]], "mlx.core.ones_like": [[198, "mlx-core-ones-like"]], "mlx.core.outer": [[199, "mlx-core-outer"]], "mlx.core.pad": [[200, "mlx-core-pad"]], "mlx.core.partition": [[201, "mlx-core-partition"]], "mlx.core.power": [[202, "mlx-core-power"]], "mlx.core.prod": [[203, "mlx-core-prod"]], "mlx.core.quantize": [[204, "mlx-core-quantize"]], "mlx.core.quantized_matmul": [[205, "mlx-core-quantized-matmul"]], "mlx.core.radians": [[206, "mlx-core-radians"]], "mlx.core.reciprocal": [[218, "mlx-core-reciprocal"]], "mlx.core.remainder": [[219, "mlx-core-remainder"]], "mlx.core.repeat": [[220, "mlx-core-repeat"]], "mlx.core.reshape": [[221, "mlx-core-reshape"]], "mlx.core.right_shift": [[222, "mlx-core-right-shift"]], "mlx.core.round": [[223, "mlx-core-round"]], "mlx.core.rsqrt": [[224, "mlx-core-rsqrt"]], "mlx.core.save": [[225, "mlx-core-save"]], "mlx.core.save_gguf": [[226, "mlx-core-save-gguf"]], "mlx.core.save_safetensors": [[227, "mlx-core-save-safetensors"]], "mlx.core.savez": [[228, "mlx-core-savez"]], "mlx.core.savez_compressed": [[229, "mlx-core-savez-compressed"]], "mlx.core.set_default_device": [[230, "mlx-core-set-default-device"]], "mlx.core.set_default_stream": [[231, "mlx-core-set-default-stream"]], "mlx.core.sigmoid": [[232, "mlx-core-sigmoid"]], "mlx.core.sign": [[233, "mlx-core-sign"]], "mlx.core.sin": [[234, "mlx-core-sin"]], "mlx.core.sinh": [[235, "mlx-core-sinh"]], "mlx.core.softmax": [[236, "mlx-core-softmax"]], "mlx.core.sort": [[237, "mlx-core-sort"]], "mlx.core.split": [[238, "mlx-core-split"]], "mlx.core.sqrt": [[239, "mlx-core-sqrt"]], "mlx.core.square": [[240, "mlx-core-square"]], "mlx.core.squeeze": [[241, "mlx-core-squeeze"]], "mlx.core.stack": [[242, "mlx-core-stack"]], "mlx.core.std": [[243, "mlx-core-std"]], "mlx.core.stop_gradient": [[244, "mlx-core-stop-gradient"]], "mlx.core.stream": [[245, "mlx-core-stream"]], "mlx.core.subtract": [[246, "mlx-core-subtract"]], "mlx.core.sum": [[247, "mlx-core-sum"]], "mlx.core.swapaxes": [[248, "mlx-core-swapaxes"]], "mlx.core.synchronize": [[249, "mlx-core-synchronize"]], "mlx.core.take": [[250, "mlx-core-take"]], "mlx.core.take_along_axis": [[251, "mlx-core-take-along-axis"]], "mlx.core.tan": [[252, "mlx-core-tan"]], "mlx.core.tanh": [[253, "mlx-core-tanh"]], "mlx.core.tensordot": [[254, "mlx-core-tensordot"]], "mlx.core.tile": [[255, "mlx-core-tile"]], "mlx.core.topk": [[256, "mlx-core-topk"]], "mlx.core.transpose": [[257, "mlx-core-transpose"]], "mlx.core.tri": [[258, "mlx-core-tri"]], "mlx.core.tril": [[259, "mlx-core-tril"]], "mlx.core.triu": [[260, "mlx-core-triu"]], "mlx.core.value_and_grad": [[261, "mlx-core-value-and-grad"]], "mlx.core.var": [[262, "mlx-core-var"]], "mlx.core.vjp": [[263, "mlx-core-vjp"]], "mlx.core.vmap": [[264, "mlx-core-vmap"]], "mlx.core.where": [[265, "mlx-core-where"]], "mlx.core.zeros": [[266, "mlx-core-zeros"]], "mlx.core.zeros_like": [[267, "mlx-core-zeros-like"]], "mlx.core.Stream": [[276, "mlx-core-stream"]], "mlx.core.linalg.cholesky": [[158, "mlx-core-linalg-cholesky"]], "mlx.core.linalg.inv": [[159, "mlx-core-linalg-inv"]], "mlx.core.linalg.norm": [[160, "mlx-core-linalg-norm"]], "mlx.core.linalg.qr": [[161, "mlx-core-linalg-qr"]], "mlx.core.linalg.svd": [[162, "mlx-core-linalg-svd"]]}, "indexentries": {"cholesky() (in module mlx.core.linalg)": [[158, "mlx.core.linalg.cholesky"]], "inv() (in module mlx.core.linalg)": [[159, "mlx.core.linalg.inv"]], "norm() (in module mlx.core.linalg)": [[160, "mlx.core.linalg.norm"]], "qr() (in module mlx.core.linalg)": [[161, "mlx.core.linalg.qr"]], "svd() (in module mlx.core.linalg)": [[162, "mlx.core.linalg.svd"]]}})