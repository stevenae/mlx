Search.setIndex({"docnames": ["cpp/ops", "dev/extensions", "dev/metal_debugger", "examples/linear_regression", "examples/llama-inference", "examples/mlp", "index", "install", "python/_autosummary/mlx.core.Device", "python/_autosummary/mlx.core.Dtype", "python/_autosummary/mlx.core.DtypeCategory", "python/_autosummary/mlx.core.abs", "python/_autosummary/mlx.core.add", "python/_autosummary/mlx.core.addmm", "python/_autosummary/mlx.core.all", "python/_autosummary/mlx.core.allclose", "python/_autosummary/mlx.core.any", "python/_autosummary/mlx.core.arange", "python/_autosummary/mlx.core.arccos", "python/_autosummary/mlx.core.arccosh", "python/_autosummary/mlx.core.arcsin", "python/_autosummary/mlx.core.arcsinh", "python/_autosummary/mlx.core.arctan", "python/_autosummary/mlx.core.arctan2", "python/_autosummary/mlx.core.arctanh", "python/_autosummary/mlx.core.argmax", "python/_autosummary/mlx.core.argmin", "python/_autosummary/mlx.core.argpartition", "python/_autosummary/mlx.core.argsort", "python/_autosummary/mlx.core.array", "python/_autosummary/mlx.core.array.T", "python/_autosummary/mlx.core.array.abs", "python/_autosummary/mlx.core.array.all", "python/_autosummary/mlx.core.array.any", "python/_autosummary/mlx.core.array.argmax", "python/_autosummary/mlx.core.array.argmin", "python/_autosummary/mlx.core.array.astype", "python/_autosummary/mlx.core.array.at", "python/_autosummary/mlx.core.array.cos", "python/_autosummary/mlx.core.array.cummax", "python/_autosummary/mlx.core.array.cummin", "python/_autosummary/mlx.core.array.cumprod", "python/_autosummary/mlx.core.array.cumsum", "python/_autosummary/mlx.core.array.diag", "python/_autosummary/mlx.core.array.diagonal", "python/_autosummary/mlx.core.array.dtype", "python/_autosummary/mlx.core.array.exp", "python/_autosummary/mlx.core.array.flatten", "python/_autosummary/mlx.core.array.item", "python/_autosummary/mlx.core.array.itemsize", "python/_autosummary/mlx.core.array.log", "python/_autosummary/mlx.core.array.log10", "python/_autosummary/mlx.core.array.log1p", "python/_autosummary/mlx.core.array.log2", "python/_autosummary/mlx.core.array.logsumexp", "python/_autosummary/mlx.core.array.max", "python/_autosummary/mlx.core.array.mean", "python/_autosummary/mlx.core.array.min", "python/_autosummary/mlx.core.array.moveaxis", "python/_autosummary/mlx.core.array.nbytes", "python/_autosummary/mlx.core.array.ndim", "python/_autosummary/mlx.core.array.prod", "python/_autosummary/mlx.core.array.reciprocal", "python/_autosummary/mlx.core.array.reshape", "python/_autosummary/mlx.core.array.round", "python/_autosummary/mlx.core.array.rsqrt", "python/_autosummary/mlx.core.array.shape", "python/_autosummary/mlx.core.array.sin", "python/_autosummary/mlx.core.array.size", "python/_autosummary/mlx.core.array.split", "python/_autosummary/mlx.core.array.sqrt", "python/_autosummary/mlx.core.array.square", "python/_autosummary/mlx.core.array.squeeze", "python/_autosummary/mlx.core.array.sum", "python/_autosummary/mlx.core.array.swapaxes", "python/_autosummary/mlx.core.array.tolist", "python/_autosummary/mlx.core.array.transpose", "python/_autosummary/mlx.core.array.var", "python/_autosummary/mlx.core.array_equal", "python/_autosummary/mlx.core.as_strided", "python/_autosummary/mlx.core.atleast_1d", "python/_autosummary/mlx.core.atleast_2d", "python/_autosummary/mlx.core.atleast_3d", "python/_autosummary/mlx.core.bitwise_and", "python/_autosummary/mlx.core.bitwise_or", "python/_autosummary/mlx.core.bitwise_xor", "python/_autosummary/mlx.core.block_masked_mm", "python/_autosummary/mlx.core.block_sparse_mm", "python/_autosummary/mlx.core.broadcast_to", "python/_autosummary/mlx.core.ceil", "python/_autosummary/mlx.core.clip", "python/_autosummary/mlx.core.compile", "python/_autosummary/mlx.core.concatenate", "python/_autosummary/mlx.core.conj", "python/_autosummary/mlx.core.conjugate", "python/_autosummary/mlx.core.conv1d", "python/_autosummary/mlx.core.conv2d", "python/_autosummary/mlx.core.conv_general", "python/_autosummary/mlx.core.convolve", "python/_autosummary/mlx.core.cos", "python/_autosummary/mlx.core.cosh", "python/_autosummary/mlx.core.cummax", "python/_autosummary/mlx.core.cummin", "python/_autosummary/mlx.core.cumprod", "python/_autosummary/mlx.core.cumsum", "python/_autosummary/mlx.core.default_device", "python/_autosummary/mlx.core.default_stream", "python/_autosummary/mlx.core.degrees", "python/_autosummary/mlx.core.dequantize", "python/_autosummary/mlx.core.diag", "python/_autosummary/mlx.core.diagonal", "python/_autosummary/mlx.core.disable_compile", "python/_autosummary/mlx.core.divide", "python/_autosummary/mlx.core.divmod", "python/_autosummary/mlx.core.enable_compile", "python/_autosummary/mlx.core.equal", "python/_autosummary/mlx.core.erf", "python/_autosummary/mlx.core.erfinv", "python/_autosummary/mlx.core.eval", "python/_autosummary/mlx.core.exp", "python/_autosummary/mlx.core.expand_dims", "python/_autosummary/mlx.core.expm1", "python/_autosummary/mlx.core.eye", "python/_autosummary/mlx.core.fast.layer_norm", "python/_autosummary/mlx.core.fast.rms_norm", "python/_autosummary/mlx.core.fast.rope", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention", "python/_autosummary/mlx.core.fft.fft", "python/_autosummary/mlx.core.fft.fft2", "python/_autosummary/mlx.core.fft.fftn", "python/_autosummary/mlx.core.fft.ifft", "python/_autosummary/mlx.core.fft.ifft2", "python/_autosummary/mlx.core.fft.ifftn", "python/_autosummary/mlx.core.fft.irfft", "python/_autosummary/mlx.core.fft.irfft2", "python/_autosummary/mlx.core.fft.irfftn", "python/_autosummary/mlx.core.fft.rfft", "python/_autosummary/mlx.core.fft.rfft2", "python/_autosummary/mlx.core.fft.rfftn", "python/_autosummary/mlx.core.flatten", "python/_autosummary/mlx.core.floor", "python/_autosummary/mlx.core.floor_divide", "python/_autosummary/mlx.core.full", "python/_autosummary/mlx.core.gather_mm", "python/_autosummary/mlx.core.gather_qmm", "python/_autosummary/mlx.core.grad", "python/_autosummary/mlx.core.greater", "python/_autosummary/mlx.core.greater_equal", "python/_autosummary/mlx.core.identity", "python/_autosummary/mlx.core.inner", "python/_autosummary/mlx.core.isclose", "python/_autosummary/mlx.core.isinf", "python/_autosummary/mlx.core.isnan", "python/_autosummary/mlx.core.isneginf", "python/_autosummary/mlx.core.isposinf", "python/_autosummary/mlx.core.issubdtype", "python/_autosummary/mlx.core.jvp", "python/_autosummary/mlx.core.left_shift", "python/_autosummary/mlx.core.less", "python/_autosummary/mlx.core.less_equal", "python/_autosummary/mlx.core.linalg.cholesky", "python/_autosummary/mlx.core.linalg.inv", "python/_autosummary/mlx.core.linalg.norm", "python/_autosummary/mlx.core.linalg.qr", "python/_autosummary/mlx.core.linalg.svd", "python/_autosummary/mlx.core.linspace", "python/_autosummary/mlx.core.load", "python/_autosummary/mlx.core.log", "python/_autosummary/mlx.core.log10", "python/_autosummary/mlx.core.log1p", "python/_autosummary/mlx.core.log2", "python/_autosummary/mlx.core.logaddexp", "python/_autosummary/mlx.core.logical_and", "python/_autosummary/mlx.core.logical_not", "python/_autosummary/mlx.core.logical_or", "python/_autosummary/mlx.core.logsumexp", "python/_autosummary/mlx.core.matmul", "python/_autosummary/mlx.core.max", "python/_autosummary/mlx.core.maximum", "python/_autosummary/mlx.core.mean", "python/_autosummary/mlx.core.meshgrid", "python/_autosummary/mlx.core.metal.clear_cache", "python/_autosummary/mlx.core.metal.device_info", "python/_autosummary/mlx.core.metal.get_active_memory", "python/_autosummary/mlx.core.metal.get_cache_memory", "python/_autosummary/mlx.core.metal.get_peak_memory", "python/_autosummary/mlx.core.metal.is_available", "python/_autosummary/mlx.core.metal.reset_peak_memory", "python/_autosummary/mlx.core.metal.set_cache_limit", "python/_autosummary/mlx.core.metal.set_memory_limit", "python/_autosummary/mlx.core.metal.start_capture", "python/_autosummary/mlx.core.metal.stop_capture", "python/_autosummary/mlx.core.min", "python/_autosummary/mlx.core.minimum", "python/_autosummary/mlx.core.moveaxis", "python/_autosummary/mlx.core.multiply", "python/_autosummary/mlx.core.negative", "python/_autosummary/mlx.core.new_stream", "python/_autosummary/mlx.core.not_equal", "python/_autosummary/mlx.core.ones", "python/_autosummary/mlx.core.ones_like", "python/_autosummary/mlx.core.outer", "python/_autosummary/mlx.core.pad", "python/_autosummary/mlx.core.partition", "python/_autosummary/mlx.core.power", "python/_autosummary/mlx.core.prod", "python/_autosummary/mlx.core.quantize", "python/_autosummary/mlx.core.quantized_matmul", "python/_autosummary/mlx.core.radians", "python/_autosummary/mlx.core.random.bernoulli", "python/_autosummary/mlx.core.random.categorical", "python/_autosummary/mlx.core.random.gumbel", "python/_autosummary/mlx.core.random.key", "python/_autosummary/mlx.core.random.multivariate_normal", "python/_autosummary/mlx.core.random.normal", "python/_autosummary/mlx.core.random.randint", "python/_autosummary/mlx.core.random.seed", "python/_autosummary/mlx.core.random.split", "python/_autosummary/mlx.core.random.truncated_normal", "python/_autosummary/mlx.core.random.uniform", "python/_autosummary/mlx.core.reciprocal", "python/_autosummary/mlx.core.remainder", "python/_autosummary/mlx.core.repeat", "python/_autosummary/mlx.core.reshape", "python/_autosummary/mlx.core.right_shift", "python/_autosummary/mlx.core.round", "python/_autosummary/mlx.core.rsqrt", "python/_autosummary/mlx.core.save", "python/_autosummary/mlx.core.save_gguf", "python/_autosummary/mlx.core.save_safetensors", "python/_autosummary/mlx.core.savez", "python/_autosummary/mlx.core.savez_compressed", "python/_autosummary/mlx.core.set_default_device", "python/_autosummary/mlx.core.set_default_stream", "python/_autosummary/mlx.core.sigmoid", "python/_autosummary/mlx.core.sign", "python/_autosummary/mlx.core.sin", "python/_autosummary/mlx.core.sinh", "python/_autosummary/mlx.core.softmax", "python/_autosummary/mlx.core.sort", "python/_autosummary/mlx.core.split", "python/_autosummary/mlx.core.sqrt", "python/_autosummary/mlx.core.square", "python/_autosummary/mlx.core.squeeze", "python/_autosummary/mlx.core.stack", "python/_autosummary/mlx.core.std", "python/_autosummary/mlx.core.stop_gradient", "python/_autosummary/mlx.core.stream", "python/_autosummary/mlx.core.subtract", "python/_autosummary/mlx.core.sum", "python/_autosummary/mlx.core.swapaxes", "python/_autosummary/mlx.core.synchronize", "python/_autosummary/mlx.core.take", "python/_autosummary/mlx.core.take_along_axis", "python/_autosummary/mlx.core.tan", "python/_autosummary/mlx.core.tanh", "python/_autosummary/mlx.core.tensordot", "python/_autosummary/mlx.core.tile", "python/_autosummary/mlx.core.topk", "python/_autosummary/mlx.core.trace", "python/_autosummary/mlx.core.transpose", "python/_autosummary/mlx.core.tri", "python/_autosummary/mlx.core.tril", "python/_autosummary/mlx.core.triu", "python/_autosummary/mlx.core.value_and_grad", "python/_autosummary/mlx.core.var", "python/_autosummary/mlx.core.vjp", "python/_autosummary/mlx.core.vmap", "python/_autosummary/mlx.core.where", "python/_autosummary/mlx.core.zeros", "python/_autosummary/mlx.core.zeros_like", "python/_autosummary/mlx.nn.quantize", "python/_autosummary/mlx.nn.value_and_grad", "python/_autosummary/mlx.optimizers.clip_grad_norm", "python/_autosummary/mlx.utils.tree_flatten", "python/_autosummary/mlx.utils.tree_map", "python/_autosummary/mlx.utils.tree_map_with_path", "python/_autosummary/mlx.utils.tree_reduce", "python/_autosummary/mlx.utils.tree_unflatten", "python/_autosummary/stream_class", "python/array", "python/data_types", "python/devices_and_streams", "python/fast", "python/fft", "python/linalg", "python/metal", "python/nn", "python/nn/_autosummary/mlx.nn.ALiBi", "python/nn/_autosummary/mlx.nn.AvgPool1d", "python/nn/_autosummary/mlx.nn.AvgPool2d", "python/nn/_autosummary/mlx.nn.BatchNorm", "python/nn/_autosummary/mlx.nn.Conv1d", "python/nn/_autosummary/mlx.nn.Conv2d", "python/nn/_autosummary/mlx.nn.Conv3d", "python/nn/_autosummary/mlx.nn.Dropout", "python/nn/_autosummary/mlx.nn.Dropout2d", "python/nn/_autosummary/mlx.nn.Dropout3d", "python/nn/_autosummary/mlx.nn.Embedding", "python/nn/_autosummary/mlx.nn.GELU", "python/nn/_autosummary/mlx.nn.GRU", "python/nn/_autosummary/mlx.nn.GroupNorm", "python/nn/_autosummary/mlx.nn.InstanceNorm", "python/nn/_autosummary/mlx.nn.LSTM", "python/nn/_autosummary/mlx.nn.LayerNorm", "python/nn/_autosummary/mlx.nn.Linear", "python/nn/_autosummary/mlx.nn.MaxPool1d", "python/nn/_autosummary/mlx.nn.MaxPool2d", "python/nn/_autosummary/mlx.nn.Mish", "python/nn/_autosummary/mlx.nn.Module.apply", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules", "python/nn/_autosummary/mlx.nn.Module.children", "python/nn/_autosummary/mlx.nn.Module.eval", "python/nn/_autosummary/mlx.nn.Module.filter_and_map", "python/nn/_autosummary/mlx.nn.Module.freeze", "python/nn/_autosummary/mlx.nn.Module.leaf_modules", "python/nn/_autosummary/mlx.nn.Module.load_weights", "python/nn/_autosummary/mlx.nn.Module.modules", "python/nn/_autosummary/mlx.nn.Module.named_modules", "python/nn/_autosummary/mlx.nn.Module.parameters", "python/nn/_autosummary/mlx.nn.Module.save_weights", "python/nn/_autosummary/mlx.nn.Module.set_dtype", "python/nn/_autosummary/mlx.nn.Module.state", "python/nn/_autosummary/mlx.nn.Module.train", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters", "python/nn/_autosummary/mlx.nn.Module.training", "python/nn/_autosummary/mlx.nn.Module.unfreeze", "python/nn/_autosummary/mlx.nn.Module.update", "python/nn/_autosummary/mlx.nn.Module.update_modules", "python/nn/_autosummary/mlx.nn.MultiHeadAttention", "python/nn/_autosummary/mlx.nn.PReLU", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding", "python/nn/_autosummary/mlx.nn.QuantizedLinear", "python/nn/_autosummary/mlx.nn.RMSNorm", "python/nn/_autosummary/mlx.nn.RNN", "python/nn/_autosummary/mlx.nn.ReLU", "python/nn/_autosummary/mlx.nn.RoPE", "python/nn/_autosummary/mlx.nn.SELU", "python/nn/_autosummary/mlx.nn.Sequential", "python/nn/_autosummary/mlx.nn.SiLU", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding", "python/nn/_autosummary/mlx.nn.Softshrink", "python/nn/_autosummary/mlx.nn.Step", "python/nn/_autosummary/mlx.nn.Transformer", "python/nn/_autosummary/mlx.nn.Upsample", "python/nn/_autosummary/mlx.nn.init.constant", "python/nn/_autosummary/mlx.nn.init.glorot_normal", "python/nn/_autosummary/mlx.nn.init.glorot_uniform", "python/nn/_autosummary/mlx.nn.init.he_normal", "python/nn/_autosummary/mlx.nn.init.he_uniform", "python/nn/_autosummary/mlx.nn.init.identity", "python/nn/_autosummary/mlx.nn.init.normal", "python/nn/_autosummary/mlx.nn.init.uniform", "python/nn/_autosummary_functions/mlx.nn.elu", "python/nn/_autosummary_functions/mlx.nn.gelu", "python/nn/_autosummary_functions/mlx.nn.gelu_approx", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx", "python/nn/_autosummary_functions/mlx.nn.glu", "python/nn/_autosummary_functions/mlx.nn.hardswish", "python/nn/_autosummary_functions/mlx.nn.leaky_relu", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid", "python/nn/_autosummary_functions/mlx.nn.log_softmax", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss", "python/nn/_autosummary_functions/mlx.nn.mish", "python/nn/_autosummary_functions/mlx.nn.prelu", "python/nn/_autosummary_functions/mlx.nn.relu", "python/nn/_autosummary_functions/mlx.nn.relu6", "python/nn/_autosummary_functions/mlx.nn.selu", "python/nn/_autosummary_functions/mlx.nn.sigmoid", "python/nn/_autosummary_functions/mlx.nn.silu", "python/nn/_autosummary_functions/mlx.nn.softmax", "python/nn/_autosummary_functions/mlx.nn.softplus", "python/nn/_autosummary_functions/mlx.nn.softshrink", "python/nn/_autosummary_functions/mlx.nn.step", "python/nn/_autosummary_functions/mlx.nn.tanh", "python/nn/functions", "python/nn/init", "python/nn/layers", "python/nn/losses", "python/nn/module", "python/ops", "python/optimizers", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta", "python/optimizers/_autosummary/mlx.optimizers.Adafactor", "python/optimizers/_autosummary/mlx.optimizers.Adagrad", "python/optimizers/_autosummary/mlx.optimizers.Adam", "python/optimizers/_autosummary/mlx.optimizers.AdamW", "python/optimizers/_autosummary/mlx.optimizers.Adamax", "python/optimizers/_autosummary/mlx.optimizers.Lion", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update", "python/optimizers/_autosummary/mlx.optimizers.RMSprop", "python/optimizers/_autosummary/mlx.optimizers.SGD", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay", "python/optimizers/_autosummary/mlx.optimizers.join_schedules", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule", "python/optimizers/_autosummary/mlx.optimizers.step_decay", "python/optimizers/common_optimizers", "python/optimizers/optimizer", "python/optimizers/schedulers", "python/random", "python/transforms", "python/tree_utils", "usage/compile", "usage/function_transforms", "usage/indexing", "usage/lazy_evaluation", "usage/numpy", "usage/quick_start", "usage/saving_and_loading", "usage/unified_memory", "usage/using_streams"], "filenames": ["cpp/ops.rst", "dev/extensions.rst", "dev/metal_debugger.rst", "examples/linear_regression.rst", "examples/llama-inference.rst", "examples/mlp.rst", "index.rst", "install.rst", "python/_autosummary/mlx.core.Device.rst", "python/_autosummary/mlx.core.Dtype.rst", "python/_autosummary/mlx.core.DtypeCategory.rst", "python/_autosummary/mlx.core.abs.rst", "python/_autosummary/mlx.core.add.rst", "python/_autosummary/mlx.core.addmm.rst", "python/_autosummary/mlx.core.all.rst", "python/_autosummary/mlx.core.allclose.rst", "python/_autosummary/mlx.core.any.rst", "python/_autosummary/mlx.core.arange.rst", "python/_autosummary/mlx.core.arccos.rst", "python/_autosummary/mlx.core.arccosh.rst", "python/_autosummary/mlx.core.arcsin.rst", "python/_autosummary/mlx.core.arcsinh.rst", "python/_autosummary/mlx.core.arctan.rst", "python/_autosummary/mlx.core.arctan2.rst", "python/_autosummary/mlx.core.arctanh.rst", "python/_autosummary/mlx.core.argmax.rst", "python/_autosummary/mlx.core.argmin.rst", "python/_autosummary/mlx.core.argpartition.rst", "python/_autosummary/mlx.core.argsort.rst", "python/_autosummary/mlx.core.array.rst", "python/_autosummary/mlx.core.array.T.rst", "python/_autosummary/mlx.core.array.abs.rst", "python/_autosummary/mlx.core.array.all.rst", "python/_autosummary/mlx.core.array.any.rst", "python/_autosummary/mlx.core.array.argmax.rst", "python/_autosummary/mlx.core.array.argmin.rst", "python/_autosummary/mlx.core.array.astype.rst", "python/_autosummary/mlx.core.array.at.rst", "python/_autosummary/mlx.core.array.cos.rst", "python/_autosummary/mlx.core.array.cummax.rst", "python/_autosummary/mlx.core.array.cummin.rst", "python/_autosummary/mlx.core.array.cumprod.rst", "python/_autosummary/mlx.core.array.cumsum.rst", "python/_autosummary/mlx.core.array.diag.rst", "python/_autosummary/mlx.core.array.diagonal.rst", "python/_autosummary/mlx.core.array.dtype.rst", "python/_autosummary/mlx.core.array.exp.rst", "python/_autosummary/mlx.core.array.flatten.rst", "python/_autosummary/mlx.core.array.item.rst", "python/_autosummary/mlx.core.array.itemsize.rst", "python/_autosummary/mlx.core.array.log.rst", "python/_autosummary/mlx.core.array.log10.rst", "python/_autosummary/mlx.core.array.log1p.rst", "python/_autosummary/mlx.core.array.log2.rst", "python/_autosummary/mlx.core.array.logsumexp.rst", "python/_autosummary/mlx.core.array.max.rst", "python/_autosummary/mlx.core.array.mean.rst", "python/_autosummary/mlx.core.array.min.rst", "python/_autosummary/mlx.core.array.moveaxis.rst", "python/_autosummary/mlx.core.array.nbytes.rst", "python/_autosummary/mlx.core.array.ndim.rst", "python/_autosummary/mlx.core.array.prod.rst", "python/_autosummary/mlx.core.array.reciprocal.rst", "python/_autosummary/mlx.core.array.reshape.rst", "python/_autosummary/mlx.core.array.round.rst", "python/_autosummary/mlx.core.array.rsqrt.rst", "python/_autosummary/mlx.core.array.shape.rst", "python/_autosummary/mlx.core.array.sin.rst", "python/_autosummary/mlx.core.array.size.rst", "python/_autosummary/mlx.core.array.split.rst", "python/_autosummary/mlx.core.array.sqrt.rst", "python/_autosummary/mlx.core.array.square.rst", "python/_autosummary/mlx.core.array.squeeze.rst", "python/_autosummary/mlx.core.array.sum.rst", "python/_autosummary/mlx.core.array.swapaxes.rst", "python/_autosummary/mlx.core.array.tolist.rst", "python/_autosummary/mlx.core.array.transpose.rst", "python/_autosummary/mlx.core.array.var.rst", "python/_autosummary/mlx.core.array_equal.rst", "python/_autosummary/mlx.core.as_strided.rst", "python/_autosummary/mlx.core.atleast_1d.rst", "python/_autosummary/mlx.core.atleast_2d.rst", "python/_autosummary/mlx.core.atleast_3d.rst", "python/_autosummary/mlx.core.bitwise_and.rst", "python/_autosummary/mlx.core.bitwise_or.rst", "python/_autosummary/mlx.core.bitwise_xor.rst", "python/_autosummary/mlx.core.block_masked_mm.rst", "python/_autosummary/mlx.core.block_sparse_mm.rst", "python/_autosummary/mlx.core.broadcast_to.rst", "python/_autosummary/mlx.core.ceil.rst", "python/_autosummary/mlx.core.clip.rst", "python/_autosummary/mlx.core.compile.rst", "python/_autosummary/mlx.core.concatenate.rst", "python/_autosummary/mlx.core.conj.rst", "python/_autosummary/mlx.core.conjugate.rst", "python/_autosummary/mlx.core.conv1d.rst", "python/_autosummary/mlx.core.conv2d.rst", "python/_autosummary/mlx.core.conv_general.rst", "python/_autosummary/mlx.core.convolve.rst", "python/_autosummary/mlx.core.cos.rst", "python/_autosummary/mlx.core.cosh.rst", "python/_autosummary/mlx.core.cummax.rst", "python/_autosummary/mlx.core.cummin.rst", "python/_autosummary/mlx.core.cumprod.rst", "python/_autosummary/mlx.core.cumsum.rst", "python/_autosummary/mlx.core.default_device.rst", "python/_autosummary/mlx.core.default_stream.rst", "python/_autosummary/mlx.core.degrees.rst", "python/_autosummary/mlx.core.dequantize.rst", "python/_autosummary/mlx.core.diag.rst", "python/_autosummary/mlx.core.diagonal.rst", "python/_autosummary/mlx.core.disable_compile.rst", "python/_autosummary/mlx.core.divide.rst", "python/_autosummary/mlx.core.divmod.rst", "python/_autosummary/mlx.core.enable_compile.rst", "python/_autosummary/mlx.core.equal.rst", "python/_autosummary/mlx.core.erf.rst", "python/_autosummary/mlx.core.erfinv.rst", "python/_autosummary/mlx.core.eval.rst", "python/_autosummary/mlx.core.exp.rst", "python/_autosummary/mlx.core.expand_dims.rst", "python/_autosummary/mlx.core.expm1.rst", "python/_autosummary/mlx.core.eye.rst", "python/_autosummary/mlx.core.fast.layer_norm.rst", "python/_autosummary/mlx.core.fast.rms_norm.rst", "python/_autosummary/mlx.core.fast.rope.rst", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention.rst", "python/_autosummary/mlx.core.fft.fft.rst", "python/_autosummary/mlx.core.fft.fft2.rst", "python/_autosummary/mlx.core.fft.fftn.rst", "python/_autosummary/mlx.core.fft.ifft.rst", "python/_autosummary/mlx.core.fft.ifft2.rst", "python/_autosummary/mlx.core.fft.ifftn.rst", "python/_autosummary/mlx.core.fft.irfft.rst", "python/_autosummary/mlx.core.fft.irfft2.rst", "python/_autosummary/mlx.core.fft.irfftn.rst", "python/_autosummary/mlx.core.fft.rfft.rst", "python/_autosummary/mlx.core.fft.rfft2.rst", "python/_autosummary/mlx.core.fft.rfftn.rst", "python/_autosummary/mlx.core.flatten.rst", "python/_autosummary/mlx.core.floor.rst", "python/_autosummary/mlx.core.floor_divide.rst", "python/_autosummary/mlx.core.full.rst", "python/_autosummary/mlx.core.gather_mm.rst", "python/_autosummary/mlx.core.gather_qmm.rst", "python/_autosummary/mlx.core.grad.rst", "python/_autosummary/mlx.core.greater.rst", "python/_autosummary/mlx.core.greater_equal.rst", "python/_autosummary/mlx.core.identity.rst", "python/_autosummary/mlx.core.inner.rst", "python/_autosummary/mlx.core.isclose.rst", "python/_autosummary/mlx.core.isinf.rst", "python/_autosummary/mlx.core.isnan.rst", "python/_autosummary/mlx.core.isneginf.rst", "python/_autosummary/mlx.core.isposinf.rst", "python/_autosummary/mlx.core.issubdtype.rst", "python/_autosummary/mlx.core.jvp.rst", "python/_autosummary/mlx.core.left_shift.rst", "python/_autosummary/mlx.core.less.rst", "python/_autosummary/mlx.core.less_equal.rst", "python/_autosummary/mlx.core.linalg.cholesky.rst", "python/_autosummary/mlx.core.linalg.inv.rst", "python/_autosummary/mlx.core.linalg.norm.rst", "python/_autosummary/mlx.core.linalg.qr.rst", "python/_autosummary/mlx.core.linalg.svd.rst", "python/_autosummary/mlx.core.linspace.rst", "python/_autosummary/mlx.core.load.rst", "python/_autosummary/mlx.core.log.rst", "python/_autosummary/mlx.core.log10.rst", "python/_autosummary/mlx.core.log1p.rst", "python/_autosummary/mlx.core.log2.rst", "python/_autosummary/mlx.core.logaddexp.rst", "python/_autosummary/mlx.core.logical_and.rst", "python/_autosummary/mlx.core.logical_not.rst", "python/_autosummary/mlx.core.logical_or.rst", "python/_autosummary/mlx.core.logsumexp.rst", "python/_autosummary/mlx.core.matmul.rst", "python/_autosummary/mlx.core.max.rst", "python/_autosummary/mlx.core.maximum.rst", "python/_autosummary/mlx.core.mean.rst", "python/_autosummary/mlx.core.meshgrid.rst", "python/_autosummary/mlx.core.metal.clear_cache.rst", "python/_autosummary/mlx.core.metal.device_info.rst", "python/_autosummary/mlx.core.metal.get_active_memory.rst", "python/_autosummary/mlx.core.metal.get_cache_memory.rst", "python/_autosummary/mlx.core.metal.get_peak_memory.rst", "python/_autosummary/mlx.core.metal.is_available.rst", "python/_autosummary/mlx.core.metal.reset_peak_memory.rst", "python/_autosummary/mlx.core.metal.set_cache_limit.rst", "python/_autosummary/mlx.core.metal.set_memory_limit.rst", "python/_autosummary/mlx.core.metal.start_capture.rst", "python/_autosummary/mlx.core.metal.stop_capture.rst", "python/_autosummary/mlx.core.min.rst", "python/_autosummary/mlx.core.minimum.rst", "python/_autosummary/mlx.core.moveaxis.rst", "python/_autosummary/mlx.core.multiply.rst", "python/_autosummary/mlx.core.negative.rst", "python/_autosummary/mlx.core.new_stream.rst", "python/_autosummary/mlx.core.not_equal.rst", "python/_autosummary/mlx.core.ones.rst", "python/_autosummary/mlx.core.ones_like.rst", "python/_autosummary/mlx.core.outer.rst", "python/_autosummary/mlx.core.pad.rst", "python/_autosummary/mlx.core.partition.rst", "python/_autosummary/mlx.core.power.rst", "python/_autosummary/mlx.core.prod.rst", "python/_autosummary/mlx.core.quantize.rst", "python/_autosummary/mlx.core.quantized_matmul.rst", "python/_autosummary/mlx.core.radians.rst", "python/_autosummary/mlx.core.random.bernoulli.rst", "python/_autosummary/mlx.core.random.categorical.rst", "python/_autosummary/mlx.core.random.gumbel.rst", "python/_autosummary/mlx.core.random.key.rst", "python/_autosummary/mlx.core.random.multivariate_normal.rst", "python/_autosummary/mlx.core.random.normal.rst", "python/_autosummary/mlx.core.random.randint.rst", "python/_autosummary/mlx.core.random.seed.rst", "python/_autosummary/mlx.core.random.split.rst", "python/_autosummary/mlx.core.random.truncated_normal.rst", "python/_autosummary/mlx.core.random.uniform.rst", "python/_autosummary/mlx.core.reciprocal.rst", "python/_autosummary/mlx.core.remainder.rst", "python/_autosummary/mlx.core.repeat.rst", "python/_autosummary/mlx.core.reshape.rst", "python/_autosummary/mlx.core.right_shift.rst", "python/_autosummary/mlx.core.round.rst", "python/_autosummary/mlx.core.rsqrt.rst", "python/_autosummary/mlx.core.save.rst", "python/_autosummary/mlx.core.save_gguf.rst", "python/_autosummary/mlx.core.save_safetensors.rst", "python/_autosummary/mlx.core.savez.rst", "python/_autosummary/mlx.core.savez_compressed.rst", "python/_autosummary/mlx.core.set_default_device.rst", "python/_autosummary/mlx.core.set_default_stream.rst", "python/_autosummary/mlx.core.sigmoid.rst", "python/_autosummary/mlx.core.sign.rst", "python/_autosummary/mlx.core.sin.rst", "python/_autosummary/mlx.core.sinh.rst", "python/_autosummary/mlx.core.softmax.rst", "python/_autosummary/mlx.core.sort.rst", "python/_autosummary/mlx.core.split.rst", "python/_autosummary/mlx.core.sqrt.rst", "python/_autosummary/mlx.core.square.rst", "python/_autosummary/mlx.core.squeeze.rst", "python/_autosummary/mlx.core.stack.rst", "python/_autosummary/mlx.core.std.rst", "python/_autosummary/mlx.core.stop_gradient.rst", "python/_autosummary/mlx.core.stream.rst", "python/_autosummary/mlx.core.subtract.rst", "python/_autosummary/mlx.core.sum.rst", "python/_autosummary/mlx.core.swapaxes.rst", "python/_autosummary/mlx.core.synchronize.rst", "python/_autosummary/mlx.core.take.rst", "python/_autosummary/mlx.core.take_along_axis.rst", "python/_autosummary/mlx.core.tan.rst", "python/_autosummary/mlx.core.tanh.rst", "python/_autosummary/mlx.core.tensordot.rst", "python/_autosummary/mlx.core.tile.rst", "python/_autosummary/mlx.core.topk.rst", "python/_autosummary/mlx.core.trace.rst", "python/_autosummary/mlx.core.transpose.rst", "python/_autosummary/mlx.core.tri.rst", "python/_autosummary/mlx.core.tril.rst", "python/_autosummary/mlx.core.triu.rst", "python/_autosummary/mlx.core.value_and_grad.rst", "python/_autosummary/mlx.core.var.rst", "python/_autosummary/mlx.core.vjp.rst", "python/_autosummary/mlx.core.vmap.rst", "python/_autosummary/mlx.core.where.rst", "python/_autosummary/mlx.core.zeros.rst", "python/_autosummary/mlx.core.zeros_like.rst", "python/_autosummary/mlx.nn.quantize.rst", "python/_autosummary/mlx.nn.value_and_grad.rst", "python/_autosummary/mlx.optimizers.clip_grad_norm.rst", "python/_autosummary/mlx.utils.tree_flatten.rst", "python/_autosummary/mlx.utils.tree_map.rst", "python/_autosummary/mlx.utils.tree_map_with_path.rst", "python/_autosummary/mlx.utils.tree_reduce.rst", "python/_autosummary/mlx.utils.tree_unflatten.rst", "python/_autosummary/stream_class.rst", "python/array.rst", "python/data_types.rst", "python/devices_and_streams.rst", "python/fast.rst", "python/fft.rst", "python/linalg.rst", "python/metal.rst", "python/nn.rst", "python/nn/_autosummary/mlx.nn.ALiBi.rst", "python/nn/_autosummary/mlx.nn.AvgPool1d.rst", "python/nn/_autosummary/mlx.nn.AvgPool2d.rst", "python/nn/_autosummary/mlx.nn.BatchNorm.rst", "python/nn/_autosummary/mlx.nn.Conv1d.rst", "python/nn/_autosummary/mlx.nn.Conv2d.rst", "python/nn/_autosummary/mlx.nn.Conv3d.rst", "python/nn/_autosummary/mlx.nn.Dropout.rst", "python/nn/_autosummary/mlx.nn.Dropout2d.rst", "python/nn/_autosummary/mlx.nn.Dropout3d.rst", "python/nn/_autosummary/mlx.nn.Embedding.rst", "python/nn/_autosummary/mlx.nn.GELU.rst", "python/nn/_autosummary/mlx.nn.GRU.rst", "python/nn/_autosummary/mlx.nn.GroupNorm.rst", "python/nn/_autosummary/mlx.nn.InstanceNorm.rst", "python/nn/_autosummary/mlx.nn.LSTM.rst", "python/nn/_autosummary/mlx.nn.LayerNorm.rst", "python/nn/_autosummary/mlx.nn.Linear.rst", "python/nn/_autosummary/mlx.nn.MaxPool1d.rst", "python/nn/_autosummary/mlx.nn.MaxPool2d.rst", "python/nn/_autosummary/mlx.nn.Mish.rst", "python/nn/_autosummary/mlx.nn.Module.apply.rst", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules.rst", "python/nn/_autosummary/mlx.nn.Module.children.rst", "python/nn/_autosummary/mlx.nn.Module.eval.rst", "python/nn/_autosummary/mlx.nn.Module.filter_and_map.rst", "python/nn/_autosummary/mlx.nn.Module.freeze.rst", "python/nn/_autosummary/mlx.nn.Module.leaf_modules.rst", "python/nn/_autosummary/mlx.nn.Module.load_weights.rst", "python/nn/_autosummary/mlx.nn.Module.modules.rst", "python/nn/_autosummary/mlx.nn.Module.named_modules.rst", "python/nn/_autosummary/mlx.nn.Module.parameters.rst", "python/nn/_autosummary/mlx.nn.Module.save_weights.rst", "python/nn/_autosummary/mlx.nn.Module.set_dtype.rst", "python/nn/_autosummary/mlx.nn.Module.state.rst", "python/nn/_autosummary/mlx.nn.Module.train.rst", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters.rst", "python/nn/_autosummary/mlx.nn.Module.training.rst", "python/nn/_autosummary/mlx.nn.Module.unfreeze.rst", "python/nn/_autosummary/mlx.nn.Module.update.rst", "python/nn/_autosummary/mlx.nn.Module.update_modules.rst", "python/nn/_autosummary/mlx.nn.MultiHeadAttention.rst", "python/nn/_autosummary/mlx.nn.PReLU.rst", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding.rst", "python/nn/_autosummary/mlx.nn.QuantizedLinear.rst", "python/nn/_autosummary/mlx.nn.RMSNorm.rst", "python/nn/_autosummary/mlx.nn.RNN.rst", "python/nn/_autosummary/mlx.nn.ReLU.rst", "python/nn/_autosummary/mlx.nn.RoPE.rst", "python/nn/_autosummary/mlx.nn.SELU.rst", "python/nn/_autosummary/mlx.nn.Sequential.rst", "python/nn/_autosummary/mlx.nn.SiLU.rst", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding.rst", "python/nn/_autosummary/mlx.nn.Softshrink.rst", "python/nn/_autosummary/mlx.nn.Step.rst", "python/nn/_autosummary/mlx.nn.Transformer.rst", "python/nn/_autosummary/mlx.nn.Upsample.rst", "python/nn/_autosummary/mlx.nn.init.constant.rst", "python/nn/_autosummary/mlx.nn.init.glorot_normal.rst", "python/nn/_autosummary/mlx.nn.init.glorot_uniform.rst", "python/nn/_autosummary/mlx.nn.init.he_normal.rst", "python/nn/_autosummary/mlx.nn.init.he_uniform.rst", "python/nn/_autosummary/mlx.nn.init.identity.rst", "python/nn/_autosummary/mlx.nn.init.normal.rst", "python/nn/_autosummary/mlx.nn.init.uniform.rst", "python/nn/_autosummary_functions/mlx.nn.elu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_approx.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx.rst", "python/nn/_autosummary_functions/mlx.nn.glu.rst", "python/nn/_autosummary_functions/mlx.nn.hardswish.rst", "python/nn/_autosummary_functions/mlx.nn.leaky_relu.rst", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.log_softmax.rst", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss.rst", "python/nn/_autosummary_functions/mlx.nn.mish.rst", "python/nn/_autosummary_functions/mlx.nn.prelu.rst", "python/nn/_autosummary_functions/mlx.nn.relu.rst", "python/nn/_autosummary_functions/mlx.nn.relu6.rst", "python/nn/_autosummary_functions/mlx.nn.selu.rst", "python/nn/_autosummary_functions/mlx.nn.sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.silu.rst", "python/nn/_autosummary_functions/mlx.nn.softmax.rst", "python/nn/_autosummary_functions/mlx.nn.softplus.rst", "python/nn/_autosummary_functions/mlx.nn.softshrink.rst", "python/nn/_autosummary_functions/mlx.nn.step.rst", "python/nn/_autosummary_functions/mlx.nn.tanh.rst", "python/nn/functions.rst", "python/nn/init.rst", "python/nn/layers.rst", "python/nn/losses.rst", "python/nn/module.rst", "python/ops.rst", "python/optimizers.rst", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta.rst", "python/optimizers/_autosummary/mlx.optimizers.Adafactor.rst", "python/optimizers/_autosummary/mlx.optimizers.Adagrad.rst", "python/optimizers/_autosummary/mlx.optimizers.Adam.rst", "python/optimizers/_autosummary/mlx.optimizers.AdamW.rst", "python/optimizers/_autosummary/mlx.optimizers.Adamax.rst", "python/optimizers/_autosummary/mlx.optimizers.Lion.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update.rst", "python/optimizers/_autosummary/mlx.optimizers.RMSprop.rst", "python/optimizers/_autosummary/mlx.optimizers.SGD.rst", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.join_schedules.rst", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule.rst", "python/optimizers/_autosummary/mlx.optimizers.step_decay.rst", "python/optimizers/common_optimizers.rst", "python/optimizers/optimizer.rst", "python/optimizers/schedulers.rst", "python/random.rst", "python/transforms.rst", "python/tree_utils.rst", "usage/compile.rst", "usage/function_transforms.rst", "usage/indexing.rst", "usage/lazy_evaluation.rst", "usage/numpy.rst", "usage/quick_start.rst", "usage/saving_and_loading.rst", "usage/unified_memory.rst", "usage/using_streams.rst"], "titles": ["Operations", "Custom Extensions in MLX", "Metal Debugger", "Linear Regression", "LLM inference", "Multi-Layer Perceptron", "MLX", "Build and Install", "mlx.core.Device", "mlx.core.Dtype", "mlx.core.DtypeCategory", "mlx.core.abs", "mlx.core.add", "mlx.core.addmm", "mlx.core.all", "mlx.core.allclose", "mlx.core.any", "mlx.core.arange", "mlx.core.arccos", "mlx.core.arccosh", "mlx.core.arcsin", "mlx.core.arcsinh", "mlx.core.arctan", "mlx.core.arctan2", "mlx.core.arctanh", "mlx.core.argmax", "mlx.core.argmin", "mlx.core.argpartition", "mlx.core.argsort", "mlx.core.array", "mlx.core.array.T", "mlx.core.array.abs", "mlx.core.array.all", "mlx.core.array.any", "mlx.core.array.argmax", "mlx.core.array.argmin", "mlx.core.array.astype", "mlx.core.array.at", "mlx.core.array.cos", "mlx.core.array.cummax", "mlx.core.array.cummin", "mlx.core.array.cumprod", "mlx.core.array.cumsum", "mlx.core.array.diag", "mlx.core.array.diagonal", "mlx.core.array.dtype", "mlx.core.array.exp", "mlx.core.array.flatten", "mlx.core.array.item", "mlx.core.array.itemsize", "mlx.core.array.log", "mlx.core.array.log10", "mlx.core.array.log1p", "mlx.core.array.log2", "mlx.core.array.logsumexp", "mlx.core.array.max", "mlx.core.array.mean", "mlx.core.array.min", "mlx.core.array.moveaxis", "mlx.core.array.nbytes", "mlx.core.array.ndim", "mlx.core.array.prod", "mlx.core.array.reciprocal", "mlx.core.array.reshape", "mlx.core.array.round", "mlx.core.array.rsqrt", "mlx.core.array.shape", "mlx.core.array.sin", "mlx.core.array.size", "mlx.core.array.split", "mlx.core.array.sqrt", "mlx.core.array.square", "mlx.core.array.squeeze", "mlx.core.array.sum", "mlx.core.array.swapaxes", "mlx.core.array.tolist", "mlx.core.array.transpose", "mlx.core.array.var", "mlx.core.array_equal", "mlx.core.as_strided", "mlx.core.atleast_1d", "mlx.core.atleast_2d", "mlx.core.atleast_3d", "mlx.core.bitwise_and", "mlx.core.bitwise_or", "mlx.core.bitwise_xor", "mlx.core.block_masked_mm", "mlx.core.block_sparse_mm", "mlx.core.broadcast_to", "mlx.core.ceil", "mlx.core.clip", "mlx.core.compile", "mlx.core.concatenate", "mlx.core.conj", "mlx.core.conjugate", "mlx.core.conv1d", "mlx.core.conv2d", "mlx.core.conv_general", "mlx.core.convolve", "mlx.core.cos", "mlx.core.cosh", "mlx.core.cummax", "mlx.core.cummin", "mlx.core.cumprod", "mlx.core.cumsum", "mlx.core.default_device", "mlx.core.default_stream", "mlx.core.degrees", "mlx.core.dequantize", "mlx.core.diag", "mlx.core.diagonal", "mlx.core.disable_compile", "mlx.core.divide", "mlx.core.divmod", "mlx.core.enable_compile", "mlx.core.equal", "mlx.core.erf", "mlx.core.erfinv", "mlx.core.eval", "mlx.core.exp", "mlx.core.expand_dims", "mlx.core.expm1", "mlx.core.eye", "mlx.core.fast.layer_norm", "mlx.core.fast.rms_norm", "mlx.core.fast.rope", "mlx.core.fast.scaled_dot_product_attention", "mlx.core.fft.fft", "mlx.core.fft.fft2", "mlx.core.fft.fftn", "mlx.core.fft.ifft", "mlx.core.fft.ifft2", "mlx.core.fft.ifftn", "mlx.core.fft.irfft", "mlx.core.fft.irfft2", "mlx.core.fft.irfftn", "mlx.core.fft.rfft", "mlx.core.fft.rfft2", "mlx.core.fft.rfftn", "mlx.core.flatten", "mlx.core.floor", "mlx.core.floor_divide", "mlx.core.full", "mlx.core.gather_mm", "mlx.core.gather_qmm", "mlx.core.grad", "mlx.core.greater", "mlx.core.greater_equal", "mlx.core.identity", "mlx.core.inner", "mlx.core.isclose", "mlx.core.isinf", "mlx.core.isnan", "mlx.core.isneginf", "mlx.core.isposinf", "mlx.core.issubdtype", "mlx.core.jvp", "mlx.core.left_shift", "mlx.core.less", "mlx.core.less_equal", "mlx.core.linalg.cholesky", "mlx.core.linalg.inv", "mlx.core.linalg.norm", "mlx.core.linalg.qr", "mlx.core.linalg.svd", "mlx.core.linspace", "mlx.core.load", "mlx.core.log", "mlx.core.log10", "mlx.core.log1p", "mlx.core.log2", "mlx.core.logaddexp", "mlx.core.logical_and", "mlx.core.logical_not", "mlx.core.logical_or", "mlx.core.logsumexp", "mlx.core.matmul", "mlx.core.max", "mlx.core.maximum", "mlx.core.mean", "mlx.core.meshgrid", "mlx.core.metal.clear_cache", "mlx.core.metal.device_info", "mlx.core.metal.get_active_memory", "mlx.core.metal.get_cache_memory", "mlx.core.metal.get_peak_memory", "mlx.core.metal.is_available", "mlx.core.metal.reset_peak_memory", "mlx.core.metal.set_cache_limit", "mlx.core.metal.set_memory_limit", "mlx.core.metal.start_capture", "mlx.core.metal.stop_capture", "mlx.core.min", "mlx.core.minimum", "mlx.core.moveaxis", "mlx.core.multiply", "mlx.core.negative", "mlx.core.new_stream", "mlx.core.not_equal", "mlx.core.ones", "mlx.core.ones_like", "mlx.core.outer", "mlx.core.pad", "mlx.core.partition", "mlx.core.power", "mlx.core.prod", "mlx.core.quantize", "mlx.core.quantized_matmul", "mlx.core.radians", "mlx.core.random.bernoulli", "mlx.core.random.categorical", "mlx.core.random.gumbel", "mlx.core.random.key", "mlx.core.random.multivariate_normal", "mlx.core.random.normal", "mlx.core.random.randint", "mlx.core.random.seed", "mlx.core.random.split", "mlx.core.random.truncated_normal", "mlx.core.random.uniform", "mlx.core.reciprocal", "mlx.core.remainder", "mlx.core.repeat", "mlx.core.reshape", "mlx.core.right_shift", "mlx.core.round", "mlx.core.rsqrt", "mlx.core.save", "mlx.core.save_gguf", "mlx.core.save_safetensors", "mlx.core.savez", "mlx.core.savez_compressed", "mlx.core.set_default_device", "mlx.core.set_default_stream", "mlx.core.sigmoid", "mlx.core.sign", "mlx.core.sin", "mlx.core.sinh", "mlx.core.softmax", "mlx.core.sort", "mlx.core.split", "mlx.core.sqrt", "mlx.core.square", "mlx.core.squeeze", "mlx.core.stack", "mlx.core.std", "mlx.core.stop_gradient", "mlx.core.stream", "mlx.core.subtract", "mlx.core.sum", "mlx.core.swapaxes", "mlx.core.synchronize", "mlx.core.take", "mlx.core.take_along_axis", "mlx.core.tan", "mlx.core.tanh", "mlx.core.tensordot", "mlx.core.tile", "mlx.core.topk", "mlx.core.trace", "mlx.core.transpose", "mlx.core.tri", "mlx.core.tril", "mlx.core.triu", "mlx.core.value_and_grad", "mlx.core.var", "mlx.core.vjp", "mlx.core.vmap", "mlx.core.where", "mlx.core.zeros", "mlx.core.zeros_like", "mlx.nn.quantize", "mlx.nn.value_and_grad", "mlx.optimizers.clip_grad_norm", "mlx.utils.tree_flatten", "mlx.utils.tree_map", "mlx.utils.tree_map_with_path", "mlx.utils.tree_reduce", "mlx.utils.tree_unflatten", "mlx.core.Stream", "Array", "Data Types", "Devices and Streams", "Fast", "FFT", "Linear Algebra", "Metal", "Neural Networks", "mlx.nn.ALiBi", "mlx.nn.AvgPool1d", "mlx.nn.AvgPool2d", "mlx.nn.BatchNorm", "mlx.nn.Conv1d", "mlx.nn.Conv2d", "mlx.nn.Conv3d", "mlx.nn.Dropout", "mlx.nn.Dropout2d", "mlx.nn.Dropout3d", "mlx.nn.Embedding", "mlx.nn.GELU", "mlx.nn.GRU", "mlx.nn.GroupNorm", "mlx.nn.InstanceNorm", "mlx.nn.LSTM", "mlx.nn.LayerNorm", "mlx.nn.Linear", "mlx.nn.MaxPool1d", "mlx.nn.MaxPool2d", "mlx.nn.Mish", "mlx.nn.Module.apply", "mlx.nn.Module.apply_to_modules", "mlx.nn.Module.children", "mlx.nn.Module.eval", "mlx.nn.Module.filter_and_map", "mlx.nn.Module.freeze", "mlx.nn.Module.leaf_modules", "mlx.nn.Module.load_weights", "mlx.nn.Module.modules", "mlx.nn.Module.named_modules", "mlx.nn.Module.parameters", "mlx.nn.Module.save_weights", "mlx.nn.Module.set_dtype", "mlx.nn.Module.state", "mlx.nn.Module.train", "mlx.nn.Module.trainable_parameters", "mlx.nn.Module.training", "mlx.nn.Module.unfreeze", "mlx.nn.Module.update", "mlx.nn.Module.update_modules", "mlx.nn.MultiHeadAttention", "mlx.nn.PReLU", "mlx.nn.QuantizedEmbedding", "mlx.nn.QuantizedLinear", "mlx.nn.RMSNorm", "mlx.nn.RNN", "mlx.nn.ReLU", "mlx.nn.RoPE", "mlx.nn.SELU", "mlx.nn.Sequential", "mlx.nn.SiLU", "mlx.nn.SinusoidalPositionalEncoding", "mlx.nn.Softshrink", "mlx.nn.Step", "mlx.nn.Transformer", "mlx.nn.Upsample", "mlx.nn.init.constant", "mlx.nn.init.glorot_normal", "mlx.nn.init.glorot_uniform", "mlx.nn.init.he_normal", "mlx.nn.init.he_uniform", "mlx.nn.init.identity", "mlx.nn.init.normal", "mlx.nn.init.uniform", "mlx.nn.elu", "mlx.nn.gelu", "mlx.nn.gelu_approx", "mlx.nn.gelu_fast_approx", "mlx.nn.glu", "mlx.nn.hardswish", "mlx.nn.leaky_relu", "mlx.nn.log_sigmoid", "mlx.nn.log_softmax", "mlx.nn.losses.binary_cross_entropy", "mlx.nn.losses.cosine_similarity_loss", "mlx.nn.losses.cross_entropy", "mlx.nn.losses.gaussian_nll_loss", "mlx.nn.losses.hinge_loss", "mlx.nn.losses.huber_loss", "mlx.nn.losses.kl_div_loss", "mlx.nn.losses.l1_loss", "mlx.nn.losses.log_cosh_loss", "mlx.nn.losses.margin_ranking_loss", "mlx.nn.losses.mse_loss", "mlx.nn.losses.nll_loss", "mlx.nn.losses.smooth_l1_loss", "mlx.nn.losses.triplet_loss", "mlx.nn.mish", "mlx.nn.prelu", "mlx.nn.relu", "mlx.nn.relu6", "mlx.nn.selu", "mlx.nn.sigmoid", "mlx.nn.silu", "mlx.nn.softmax", "mlx.nn.softplus", "mlx.nn.softshrink", "mlx.nn.step", "mlx.nn.tanh", "Functions", "Initializers", "Layers", "Loss Functions", "Module", "Operations", "Optimizers", "mlx.optimizers.AdaDelta", "mlx.optimizers.Adafactor", "mlx.optimizers.Adagrad", "mlx.optimizers.Adam", "mlx.optimizers.AdamW", "mlx.optimizers.Adamax", "mlx.optimizers.Lion", "mlx.optimizers.Optimizer.apply_gradients", "mlx.optimizers.Optimizer.init", "mlx.optimizers.Optimizer.state", "mlx.optimizers.Optimizer.update", "mlx.optimizers.RMSprop", "mlx.optimizers.SGD", "mlx.optimizers.cosine_decay", "mlx.optimizers.exponential_decay", "mlx.optimizers.join_schedules", "mlx.optimizers.linear_schedule", "mlx.optimizers.step_decay", "Common Optimizers", "Optimizer", "Schedulers", "Random", "Transforms", "Tree Utils", "Compilation", "Function Transforms", "Indexing Arrays", "Lazy Evaluation", "Conversion to NumPy and Other Frameworks", "Quick Start Guide", "Saving and Loading Arrays", "Unified Memory", "Using Streams"], "terms": {"arrai": [0, 1, 4, 5, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 287, 291, 303, 309, 316, 319, 324, 330, 344, 345, 346, 347, 348, 349, 350, 351, 352, 357, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 386, 389, 392, 395, 396, 397, 398, 399, 400, 401, 406, 407, 408, 409, 410, 411, 412, 419, 420, 422, 423, 424, 426], "arang": [0, 162, 281, 344, 421, 423], "doubl": [0, 4], "start": [0, 1, 3, 4, 6, 7, 17, 125, 165, 190, 240, 277, 419, 421, 426], "stop": [0, 1, 4, 17, 165, 191, 246, 420, 421], "step": [0, 2, 4, 5, 17, 287, 300, 303, 334, 396, 403, 408, 410, 411, 412, 419], "dtype": [0, 1, 4, 10, 17, 29, 36, 37, 75, 122, 139, 142, 148, 155, 162, 163, 165, 199, 211, 213, 214, 215, 218, 219, 259, 261, 269, 281, 321, 344, 345, 346, 347, 348, 349, 350, 351, 352, 362, 364, 371, 408, 409, 410, 411, 412, 419, 420, 421, 423, 424, 425], "streamordevic": [0, 1], "": [0, 1, 3, 4, 5, 45, 49, 60, 91, 106, 108, 128, 129, 131, 132, 134, 135, 137, 138, 145, 162, 164, 166, 179, 201, 206, 210, 225, 228, 229, 245, 247, 264, 265, 267, 272, 287, 290, 300, 303, 307, 313, 314, 316, 320, 321, 322, 326, 334, 394, 403, 404, 416, 419, 420, 422, 423, 424, 425, 426], "A": [0, 1, 4, 6, 7, 8, 66, 78, 91, 123, 124, 126, 145, 156, 162, 163, 164, 166, 175, 176, 177, 182, 192, 206, 209, 210, 211, 213, 214, 215, 218, 219, 240, 244, 247, 264, 266, 267, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287, 291, 296, 300, 301, 302, 304, 313, 317, 318, 321, 327, 328, 333, 338, 340, 343, 346, 347, 349, 356, 375, 376, 392, 394, 398, 400, 402, 403, 405, 410, 419, 420, 422, 423], "1d": [0, 95, 97, 98, 228, 253], "number": [0, 1, 10, 17, 59, 68, 91, 96, 97, 108, 122, 144, 145, 148, 156, 165, 202, 206, 207, 210, 214, 217, 219, 222, 225, 256, 257, 261, 264, 266, 267, 271, 287, 291, 292, 293, 294, 296, 297, 301, 302, 329, 330, 343, 344, 346, 347, 348, 349, 408, 410, 411, 416, 419, 420, 427], "option": [0, 2, 4, 13, 14, 16, 17, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 86, 91, 92, 95, 96, 97, 98, 101, 102, 103, 104, 108, 109, 110, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 148, 153, 154, 160, 161, 162, 163, 164, 165, 166, 175, 177, 179, 180, 189, 192, 199, 202, 203, 205, 206, 207, 209, 210, 211, 213, 214, 215, 217, 218, 219, 222, 223, 238, 239, 240, 243, 244, 245, 249, 251, 252, 256, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 271, 274, 275, 276, 277, 289, 290, 291, 292, 293, 294, 300, 303, 305, 306, 307, 309, 313, 314, 316, 321, 326, 329, 331, 332, 334, 336, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 395, 396, 397, 398, 399, 400, 401, 403, 406, 407, 408, 416, 419, 425, 427], "int": [0, 1, 4, 5, 8, 14, 16, 17, 25, 26, 27, 28, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 47, 54, 55, 56, 57, 58, 61, 64, 66, 69, 72, 73, 74, 75, 77, 79, 86, 88, 92, 95, 96, 97, 101, 102, 103, 104, 108, 109, 110, 120, 122, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 144, 145, 148, 155, 162, 165, 175, 177, 179, 182, 183, 184, 185, 188, 189, 192, 194, 199, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 225, 238, 239, 240, 243, 244, 245, 249, 250, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 271, 279, 287, 289, 290, 291, 292, 293, 294, 298, 300, 301, 302, 303, 304, 305, 306, 307, 329, 331, 332, 333, 334, 336, 340, 343, 357, 363, 364, 368, 373, 375, 392, 408, 410, 411, 412], "linspac": 0, "num": [0, 4, 165, 217], "50": [0, 165], "float32": [0, 1, 10, 17, 122, 126, 148, 155, 162, 163, 165, 199, 211, 213, 214, 218, 219, 261, 269, 281, 344, 345, 346, 347, 348, 349, 350, 351, 352, 362, 364, 371, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425], "evenli": [0, 165], "space": [0, 1, 165, 373], "rang": [0, 1, 2, 3, 4, 5, 7, 17, 139, 143, 165, 347, 349, 355, 356, 394, 408, 409, 410, 411, 412, 416, 419, 420, 422, 426], "astyp": [0, 1, 4, 309, 423], "convert": [0, 1, 75, 80, 81, 82, 107, 139, 208, 331, 332, 422, 423, 424], "an": [0, 1, 2, 4, 5, 7, 9, 14, 16, 29, 80, 81, 82, 88, 95, 96, 97, 118, 122, 123, 126, 139, 142, 148, 160, 162, 166, 189, 194, 199, 200, 202, 205, 206, 207, 222, 223, 225, 240, 243, 250, 252, 253, 256, 257, 261, 267, 269, 270, 274, 275, 276, 277, 287, 289, 290, 295, 301, 303, 304, 305, 306, 307, 309, 329, 330, 332, 334, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 377, 389, 395, 405, 409, 414, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "given": [0, 1, 7, 14, 16, 27, 37, 79, 88, 90, 92, 101, 102, 103, 104, 108, 110, 118, 120, 127, 128, 129, 130, 131, 132, 136, 137, 138, 142, 143, 162, 175, 177, 179, 188, 192, 197, 205, 213, 215, 225, 233, 238, 240, 245, 249, 251, 257, 258, 259, 261, 262, 263, 265, 279, 289, 290, 295, 306, 307, 313, 329, 363, 365, 371], "data": [0, 1, 5, 6, 9, 17, 122, 136, 137, 142, 148, 165, 199, 218, 259, 261, 269, 297, 345, 346, 347, 348, 349, 350, 351, 352, 419, 421, 423], "type": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 66, 75, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 107, 108, 109, 110, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 188, 189, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 277, 287, 321, 343, 345, 346, 347, 348, 349, 350, 351, 352, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 419, 421], "as_strid": 0, "std": [0, 1, 351], "vector": [0, 1, 3, 6, 149, 156, 162, 252, 266, 267, 298, 364, 424], "shape": [0, 1, 2, 4, 5, 63, 78, 79, 86, 88, 91, 95, 96, 97, 110, 126, 127, 130, 133, 136, 137, 138, 142, 143, 156, 161, 176, 199, 200, 209, 210, 211, 213, 214, 215, 218, 219, 223, 253, 266, 268, 269, 270, 287, 289, 290, 291, 292, 293, 294, 296, 297, 300, 302, 303, 305, 306, 307, 316, 334, 345, 346, 347, 348, 349, 350, 351, 352, 364, 375, 394, 419, 420, 421, 424, 426], "size_t": [0, 1], "stride": [0, 1, 79, 95, 96, 97, 289, 290, 292, 293, 294, 306, 307, 336, 421], "offset": [0, 1, 4, 44, 79, 110, 123, 125, 259], "creat": [0, 1, 4, 7, 79, 122, 148, 247, 287, 392, 394, 410, 419, 421, 423], "view": [0, 2, 79, 423], "copi": [0, 1, 4, 6, 203, 239, 423], "anoth": [0, 90, 155, 176, 248, 268, 281, 287, 309, 419, 420, 421, 426], "full": [0, 1, 5, 63, 76, 98, 238, 327, 328, 365, 419, 422], "val": [0, 29, 142], "fill": [0, 1, 142, 200, 261, 270, 345, 346, 347, 348, 349, 351, 352], "valu": [0, 3, 4, 11, 15, 17, 25, 26, 48, 75, 78, 90, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 150, 162, 164, 165, 182, 202, 209, 210, 211, 213, 214, 215, 218, 219, 228, 252, 253, 264, 267, 272, 274, 275, 276, 277, 281, 290, 295, 296, 297, 302, 305, 307, 313, 329, 330, 341, 342, 343, 345, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 386, 392, 396, 399, 408, 409, 411, 412, 420], "templat": [0, 1], "typenam": [0, 1], "t": [0, 1, 4, 7, 116, 126, 144, 160, 207, 264, 287, 289, 300, 303, 306, 334, 395, 396, 397, 398, 399, 400, 401, 406, 407, 419, 420, 426], "zero": [0, 122, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 180, 187, 261, 262, 263, 270, 287, 289, 290, 295, 296, 297, 316, 345, 346, 347, 348, 349, 350, 351, 352, 389, 396, 421], "const": [0, 1, 365], "inlin": 0, "zeros_lik": 0, "ones": [0, 1, 4, 200, 230, 261, 327, 328, 421], "ones_lik": 0, "ey": [0, 4, 161], "n": [0, 1, 4, 29, 86, 95, 96, 97, 122, 127, 129, 130, 132, 133, 136, 138, 148, 213, 245, 261, 265, 289, 290, 291, 292, 293, 294, 296, 297, 300, 303, 306, 307, 334, 344, 370, 375], "m": [0, 1, 4, 7, 86, 122, 143, 162, 261, 289, 290, 306, 307, 395, 419], "k": [0, 4, 43, 86, 109, 122, 126, 143, 258, 261, 262, 263, 289, 305, 306, 314], "specifi": [0, 1, 17, 36, 96, 97, 110, 134, 135, 142, 145, 162, 165, 194, 199, 210, 222, 250, 252, 253, 256, 259, 260, 264, 267, 269, 291, 342, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 386, 420, 426], "diagon": [0, 43, 109, 122, 259, 261, 262, 263], "everywher": 0, "els": [0, 1, 4, 287, 314, 422], "ident": [0, 122, 246, 287, 323], "squar": [0, 3, 4, 124, 148, 161, 226, 241, 264, 275, 287, 333, 372, 374, 395, 396, 398, 399, 400, 420, 423], "matrix": [0, 3, 13, 43, 86, 108, 109, 122, 143, 144, 148, 160, 161, 162, 163, 164, 176, 180, 206, 207, 213, 331, 332, 350, 389], "major": [0, 1], "tri": 0, "tril": 0, "x": [0, 1, 3, 4, 5, 37, 86, 116, 121, 123, 124, 144, 148, 162, 207, 211, 225, 230, 234, 262, 263, 268, 275, 277, 287, 289, 290, 291, 299, 301, 302, 304, 305, 306, 307, 308, 309, 330, 333, 335, 340, 342, 344, 353, 354, 355, 356, 357, 358, 359, 360, 361, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 392, 394, 401, 419, 420, 421, 422, 423, 424, 426], "0": [0, 1, 3, 4, 5, 7, 8, 13, 17, 37, 43, 44, 47, 64, 69, 77, 79, 92, 95, 96, 97, 109, 110, 122, 126, 139, 143, 145, 161, 162, 163, 181, 188, 202, 209, 214, 219, 222, 225, 240, 244, 245, 259, 261, 262, 263, 264, 265, 267, 273, 274, 276, 277, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 302, 304, 306, 307, 330, 335, 336, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 358, 359, 362, 364, 366, 367, 371, 374, 375, 377, 378, 379, 380, 385, 386, 389, 392, 395, 396, 398, 399, 400, 401, 403, 406, 407, 408, 409, 410, 411, 412, 416, 419, 420, 421, 422, 423, 424, 425], "triu": 0, "reshap": [0, 4, 162, 344, 421], "flatten": [0, 27, 28, 101, 102, 103, 104, 162, 201, 203, 222, 239, 252, 253, 258, 274], "start_axi": [0, 47, 139], "end_axi": [0, 47, 139], "1": [0, 1, 2, 4, 5, 13, 17, 27, 28, 37, 44, 47, 95, 96, 97, 109, 110, 121, 126, 127, 128, 130, 131, 133, 134, 135, 136, 137, 138, 139, 149, 155, 162, 163, 176, 180, 189, 201, 203, 206, 210, 213, 214, 219, 234, 239, 252, 258, 259, 264, 273, 276, 277, 281, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 330, 333, 334, 336, 340, 342, 344, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 374, 375, 380, 381, 383, 384, 386, 389, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 423, 424, 425, 426], "dimens": [0, 1, 4, 14, 16, 25, 26, 60, 66, 75, 80, 81, 82, 91, 96, 97, 110, 120, 125, 134, 135, 137, 138, 139, 143, 144, 149, 160, 161, 162, 163, 164, 175, 176, 177, 179, 192, 205, 206, 210, 217, 245, 249, 253, 256, 260, 265, 291, 292, 293, 294, 296, 297, 300, 301, 302, 303, 304, 329, 333, 334, 336, 343, 344, 357, 364, 419, 420], "squeez": [0, 344, 419], "ax": [0, 1, 14, 16, 25, 26, 76, 120, 128, 129, 131, 132, 134, 135, 137, 138, 139, 149, 162, 175, 177, 179, 192, 202, 205, 238, 243, 245, 249, 250, 256, 260, 265, 420], "remov": [0, 110, 176, 210, 243, 364], "singleton": [0, 14, 16, 25, 26, 175, 176, 177, 179, 192, 205, 245, 249, 265], "axi": [0, 1, 4, 5, 14, 16, 25, 26, 27, 28, 32, 33, 34, 35, 39, 40, 41, 42, 54, 55, 56, 57, 61, 69, 72, 73, 77, 92, 101, 102, 103, 104, 110, 120, 123, 124, 127, 130, 133, 134, 135, 136, 137, 138, 139, 162, 175, 177, 179, 192, 194, 202, 203, 205, 210, 222, 238, 239, 240, 243, 244, 245, 249, 250, 252, 253, 257, 258, 259, 260, 265, 267, 289, 290, 306, 307, 334, 357, 361, 363, 364, 368, 373, 375, 383, 421], "all": [0, 1, 2, 5, 7, 15, 27, 37, 80, 81, 82, 91, 96, 97, 122, 129, 132, 135, 138, 143, 144, 164, 176, 202, 203, 243, 271, 287, 309, 310, 314, 317, 318, 319, 324, 326, 329, 340, 343, 344, 389, 392, 414, 416, 419, 421, 422, 424, 427], "expand_dim": 0, "add": [0, 1, 2, 4, 13, 37, 120, 171, 202, 206, 292, 293, 294, 420, 426], "slice": [0, 421], "each": [0, 1, 66, 108, 118, 125, 144, 155, 160, 161, 164, 176, 180, 202, 206, 207, 210, 222, 230, 231, 240, 257, 260, 267, 268, 296, 297, 298, 300, 301, 303, 334, 336, 343, 362, 364, 416, 419, 422], "slice_upd": 0, "src": 0, "updat": [0, 1, 3, 4, 5, 37, 91, 271, 275, 277, 291, 309, 310, 316, 321, 322, 323, 328, 394, 396, 399, 401, 402, 403, 407, 408, 409, 410, 411, 412, 419, 422], "from": [0, 1, 4, 5, 6, 79, 107, 108, 110, 134, 135, 137, 138, 142, 143, 162, 166, 176, 180, 185, 188, 200, 206, 208, 209, 210, 211, 212, 215, 218, 230, 243, 246, 248, 252, 253, 258, 259, 268, 270, 274, 275, 276, 277, 278, 287, 305, 314, 316, 329, 346, 347, 348, 349, 351, 352, 365, 374, 389, 418, 419, 420, 422, 423, 424, 425, 426], "sourc": [0, 1, 2, 58, 194, 260], "split": [0, 301, 357], "num_split": 0, "sub": [0, 5, 110, 217, 259, 271], "along": [0, 1, 25, 26, 91, 92, 101, 102, 103, 104, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 143, 144, 162, 222, 238, 240, 244, 252, 253, 256, 257, 258, 259, 287, 334, 357], "indic": [0, 1, 15, 25, 26, 27, 28, 37, 143, 144, 145, 150, 151, 152, 153, 154, 164, 240, 252, 253, 264, 323, 325, 364, 371, 410, 421], "meshgrid": 0, "bool": [0, 1, 14, 15, 16, 25, 26, 32, 33, 34, 35, 39, 40, 41, 42, 54, 55, 56, 57, 61, 73, 75, 77, 78, 91, 97, 101, 102, 103, 104, 125, 144, 150, 155, 160, 162, 166, 175, 177, 179, 180, 186, 189, 192, 205, 207, 245, 249, 265, 291, 292, 293, 294, 300, 301, 302, 303, 304, 305, 309, 313, 314, 316, 321, 323, 326, 329, 332, 334, 336, 340, 343, 344, 362, 365, 396, 407], "spars": [0, 180], "fals": [0, 1, 4, 14, 15, 16, 25, 26, 32, 33, 34, 35, 39, 40, 41, 42, 54, 55, 56, 57, 61, 73, 77, 78, 91, 97, 101, 102, 103, 104, 150, 155, 160, 162, 166, 175, 177, 179, 180, 189, 192, 205, 245, 249, 265, 268, 271, 274, 275, 276, 277, 281, 301, 302, 304, 305, 314, 316, 326, 329, 332, 336, 340, 343, 344, 362, 365, 396, 407, 423], "string": [0, 1, 182, 423, 425], "index": [0, 1, 6, 8, 27, 37, 120, 122, 145, 180, 203, 252, 253, 264, 279], "xy": [0, 180], "coordin": [0, 180], "clip": [0, 273, 396], "a_min": [0, 90], "nullopt": 0, "a_max": [0, 90], "limit": [0, 1, 90, 188, 189, 421], "concaten": [0, 4], "stack": [0, 419], "new": [0, 1, 5, 88, 110, 194, 197, 223, 244, 260, 275, 276, 321, 329, 392, 394, 405, 410, 419, 421, 422, 423], "repeat": [0, 257], "arr": [0, 227, 421], "tile": [0, 126], "rep": [0, 257], "transpos": [0, 4, 30, 144, 207], "permut": [0, 5], "accord": [0, 211, 268, 271, 329, 346, 347, 348, 349], "initializer_list": 0, "swapax": 0, "axis1": [0, 44, 74, 110, 250, 259], "axis2": [0, 44, 74, 110, 250, 259], "swap": [0, 98, 189, 250, 328], "two": [0, 1, 12, 13, 15, 23, 78, 81, 83, 84, 85, 86, 110, 112, 115, 128, 131, 137, 143, 144, 146, 147, 150, 158, 159, 160, 161, 163, 164, 171, 176, 178, 193, 195, 198, 201, 250, 277, 290, 303, 307, 357, 363, 419, 420, 421, 426], "moveaxi": 0, "destin": [0, 1, 58, 194], "move": [0, 1, 194, 426], "pad": [0, 95, 96, 97, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 289, 290, 292, 293, 294, 306, 307], "low_pad_s": 0, "high_pad_s": 0, "pad_valu": 0, "constant": [0, 1, 4, 7, 123, 124, 202, 287, 291, 301, 304, 333, 365, 375, 406, 408, 419, 423], "pair": [0, 1, 202, 316, 336], "pad_width": [0, 202], "revers": [0, 1, 39, 40, 41, 42, 79, 101, 102, 103, 104, 260, 340], "order": [0, 27, 79, 97, 162, 203, 206, 258, 287, 301, 327, 338, 403, 419, 420], "broadcast_to": 0, "broadcast": [0, 1, 12, 15, 83, 84, 85, 88, 90, 112, 113, 115, 142, 146, 147, 150, 157, 158, 159, 171, 176, 178, 193, 195, 198, 204, 209, 210, 213, 218, 219, 221, 224, 248, 253, 268, 329], "broadcast_arrai": [0, 1], "input": [0, 1, 3, 4, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 109, 110, 112, 113, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 217, 220, 221, 222, 223, 224, 225, 226, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 270, 289, 290, 291, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 329, 332, 333, 334, 336, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 357, 362, 363, 365, 366, 367, 368, 370, 371, 373, 375, 386, 389, 419, 420, 421, 424, 425], "against": 0, "one": [0, 1, 4, 7, 37, 75, 80, 90, 96, 97, 120, 122, 123, 124, 162, 169, 176, 207, 210, 243, 248, 281, 326, 344, 364, 426], "equal": [0, 15, 27, 78, 122, 147, 150, 159, 198, 203, 215, 240, 302, 305], "b": [0, 1, 2, 4, 12, 13, 15, 23, 78, 83, 84, 85, 86, 112, 113, 115, 141, 143, 146, 147, 149, 150, 157, 158, 159, 162, 171, 172, 174, 176, 178, 193, 195, 198, 201, 204, 206, 221, 224, 248, 256, 264, 276, 277, 305, 334, 344, 357, 420, 421, 422, 423, 424, 425, 426], "return": [0, 1, 3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 48, 66, 75, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 188, 189, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 287, 300, 303, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 323, 324, 326, 327, 328, 334, 345, 346, 347, 348, 349, 350, 351, 352, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 389, 392, 402, 418, 419, 420, 421, 422, 423, 425, 426], "element": [0, 1, 11, 12, 18, 19, 20, 21, 22, 23, 24, 27, 68, 79, 83, 84, 85, 89, 99, 100, 101, 102, 103, 104, 108, 112, 113, 115, 116, 117, 119, 121, 122, 140, 141, 144, 146, 147, 150, 151, 152, 153, 154, 157, 158, 159, 167, 168, 169, 170, 171, 172, 173, 174, 178, 180, 193, 195, 196, 198, 203, 204, 206, 207, 220, 221, 222, 224, 226, 234, 235, 236, 237, 241, 242, 248, 252, 254, 255, 258, 264, 268, 295, 296, 297, 300, 303, 308, 330, 334, 336, 358, 360, 361, 376, 377, 379, 382, 383, 384, 419, 420], "wise": [0, 1, 11, 12, 18, 19, 20, 21, 22, 23, 24, 83, 84, 85, 89, 99, 100, 112, 113, 115, 116, 117, 119, 121, 140, 141, 146, 147, 150, 157, 158, 159, 167, 168, 169, 170, 171, 172, 173, 174, 178, 193, 195, 196, 198, 204, 220, 221, 224, 226, 234, 235, 236, 237, 241, 242, 248, 254, 255, 296, 297, 308, 330, 358, 360, 361, 376, 377, 379, 382, 383, 384, 419], "not_equ": 0, "greater": [0, 4, 27, 121, 147, 203, 273, 342, 386], "greater_equ": 0, "less": [0, 4, 27, 159, 203, 336, 374], "less_equ": 0, "array_equ": [0, 15, 150], "equal_nan": [0, 15, 78, 150], "true": [0, 1, 3, 4, 15, 39, 40, 41, 42, 78, 91, 101, 102, 103, 104, 125, 144, 150, 155, 160, 162, 166, 180, 189, 207, 238, 268, 271, 274, 275, 276, 277, 281, 287, 291, 292, 293, 294, 300, 301, 302, 303, 304, 305, 313, 314, 316, 323, 326, 332, 334, 336, 340, 343, 344, 362, 370, 396], "have": [0, 1, 4, 7, 15, 78, 80, 81, 82, 86, 134, 135, 137, 138, 144, 150, 176, 190, 210, 274, 303, 329, 338, 401, 403, 418, 419, 421, 422, 426], "same": [0, 1, 4, 7, 15, 37, 78, 88, 91, 96, 97, 98, 123, 124, 133, 136, 137, 138, 144, 145, 150, 156, 202, 210, 225, 266, 268, 276, 287, 290, 291, 295, 301, 302, 307, 331, 345, 346, 347, 348, 349, 350, 351, 352, 364, 375, 392, 402, 416, 419, 421, 426], "isnan": 0, "isinf": 0, "isposinf": 0, "isneginf": 0, "where": [0, 5, 122, 150, 206, 264, 267, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 330, 333, 334, 342, 348, 349, 353, 354, 356, 365, 371, 377, 380, 382, 386, 403, 420, 421], "condit": [0, 1, 268, 426], "y": [0, 1, 3, 4, 5, 37, 268, 287, 291, 296, 301, 302, 304, 305, 333, 366, 371, 374, 394, 397, 419, 420, 422, 423], "select": [0, 2, 7, 258, 268, 309, 313, 321], "depend": [0, 1, 2, 3, 7, 75, 162, 300, 303, 334, 421, 425, 426], "keepdim": [0, 14, 16, 25, 26, 32, 33, 34, 35, 54, 55, 56, 57, 61, 73, 77, 162, 175, 177, 179, 192, 205, 238, 245, 249, 265], "ar": [0, 1, 3, 4, 5, 6, 7, 15, 17, 78, 86, 88, 90, 91, 97, 98, 110, 118, 122, 128, 129, 131, 132, 134, 135, 137, 138, 139, 144, 145, 150, 151, 152, 153, 154, 155, 156, 162, 163, 166, 176, 189, 201, 202, 203, 206, 207, 209, 210, 211, 215, 218, 219, 230, 231, 243, 244, 252, 264, 266, 267, 271, 274, 275, 281, 291, 292, 293, 294, 295, 296, 297, 301, 302, 304, 305, 316, 329, 332, 344, 362, 364, 365, 388, 392, 401, 403, 418, 419, 420, 421, 422, 423, 424, 425, 426], "non": [0, 1, 7, 180, 324, 334, 376, 392], "allclos": 0, "rtol": [0, 15, 150], "1e": [0, 3, 5, 15, 150, 291, 301, 302, 304, 333, 363, 365, 375, 395, 396, 397, 398, 399, 400, 403, 406, 408, 409, 410, 411, 412], "5": [0, 1, 3, 4, 7, 162, 189, 209, 277, 289, 291, 295, 296, 297, 299, 302, 306, 341, 344, 345, 348, 349, 355, 374, 385, 389, 406, 408, 409, 419, 420, 421], "atol": [0, 15, 150], "8": [0, 1, 4, 7, 162, 206, 281, 290, 302, 307, 343, 363, 395, 396, 397, 398, 399, 400, 406, 419, 421, 424, 426], "within": [0, 2, 27, 150], "toler": [0, 15, 150], "isclos": 0, "boolean": [0, 15, 78, 150, 151, 152, 153, 154, 172, 173, 174, 281, 325, 421], "reduc": [0, 7, 14, 16, 25, 26, 175, 177, 179, 192, 205, 245, 249, 265, 277, 291, 343, 370], "output": [0, 1, 4, 7, 14, 15, 16, 17, 27, 79, 86, 88, 91, 101, 102, 103, 104, 122, 123, 124, 125, 126, 133, 136, 137, 138, 142, 145, 148, 150, 162, 165, 175, 177, 179, 180, 192, 199, 200, 203, 205, 209, 210, 211, 213, 214, 215, 218, 219, 230, 231, 238, 243, 245, 249, 253, 259, 261, 264, 265, 266, 267, 268, 269, 270, 289, 290, 291, 292, 293, 294, 302, 305, 306, 307, 329, 332, 342, 343, 344, 346, 347, 348, 349, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 386, 389, 419, 420, 421, 422, 423, 424, 425, 426], "i": [0, 1, 2, 4, 5, 6, 7, 15, 17, 27, 36, 75, 79, 90, 95, 96, 97, 98, 101, 102, 103, 104, 109, 110, 113, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 150, 155, 156, 160, 161, 162, 163, 164, 166, 171, 175, 176, 180, 186, 189, 202, 203, 206, 207, 209, 210, 213, 214, 217, 218, 219, 223, 227, 228, 229, 234, 238, 240, 245, 246, 251, 252, 253, 256, 259, 260, 264, 265, 266, 267, 268, 271, 273, 274, 275, 276, 277, 281, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 314, 320, 322, 323, 325, 326, 328, 329, 330, 332, 333, 334, 336, 340, 342, 343, 344, 348, 349, 354, 356, 362, 363, 365, 370, 371, 374, 375, 377, 382, 386, 392, 396, 399, 401, 402, 403, 408, 410, 411, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427], "correspond": [0, 1, 14, 16, 75, 90, 108, 110, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 175, 177, 192, 205, 249, 256, 267, 275, 420], "ani": [0, 1, 4, 6, 17, 91, 274, 275, 276, 277, 278, 287, 299, 309, 310, 313, 322, 332, 343, 344, 389, 411, 418, 419, 420, 422, 424, 425, 426], "sum": [0, 1, 3, 12, 104, 149, 162, 175, 238, 256, 259, 287, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 421, 423], "mean": [0, 3, 4, 5, 124, 213, 214, 264, 287, 291, 301, 314, 333, 351, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 419, 420, 423], "comput": [0, 1, 3, 4, 5, 6, 7, 101, 102, 103, 104, 108, 121, 125, 145, 156, 160, 161, 162, 171, 179, 201, 206, 221, 238, 245, 246, 256, 264, 265, 266, 272, 287, 291, 300, 301, 302, 303, 304, 314, 327, 332, 333, 336, 343, 346, 347, 348, 349, 355, 356, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 394, 395, 396, 398, 399, 400, 401, 405, 419, 420, 424, 426], "var": [0, 291, 301, 302, 304, 365], "ddof": [0, 77, 245, 265], "varianc": [0, 245, 265, 291, 301, 365], "standard": [0, 5, 48, 75, 176, 211, 214, 245, 343, 346, 348, 351, 424], "deviat": [0, 214, 245, 346, 348, 351], "deviatoin": 0, "prod": 0, "The": [0, 1, 2, 4, 5, 6, 7, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 45, 49, 59, 60, 66, 75, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 185, 188, 189, 190, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 314, 316, 320, 321, 322, 323, 326, 327, 328, 329, 331, 332, 333, 334, 336, 338, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 357, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 386, 389, 392, 394, 395, 396, 397, 398, 399, 400, 401, 404, 406, 407, 408, 411, 414, 419, 420, 421, 422, 423, 424, 425, 426, 427], "product": [0, 1, 13, 79, 103, 149, 156, 176, 201, 205, 256, 266, 329, 424], "max": [0, 1, 162, 178, 306, 307, 330, 358, 363, 365, 366, 371, 375, 377, 379, 396, 400, 419, 420, 426], "maximum": [0, 5, 25, 37, 90, 101, 185, 189, 273, 287, 335, 340, 355, 356, 359, 378, 392, 422], "min": [0, 1, 162, 193, 330, 358, 377, 379], "minimum": [0, 26, 37, 90, 102, 340, 363], "argmin": 0, "argmax": [0, 5], "sort": [0, 27, 28, 203, 258], "argsort": 0, "partit": [0, 27], "kth": [0, 27, 203], "smaller": [0, 7, 203, 401, 419], "first": [0, 1, 2, 3, 4, 5, 7, 110, 139, 145, 157, 164, 172, 174, 176, 203, 217, 224, 250, 256, 259, 264, 274, 276, 277, 287, 290, 301, 307, 344, 363, 371, 396, 398, 399, 400, 403, 419, 420, 423, 426], "argpartit": 0, "topk": 0, "logsumexp": 0, "ab": [0, 15, 150, 162, 264, 301, 302, 304, 308, 333, 356, 376, 419], "absolut": [0, 11, 15, 150, 355, 356, 374], "neg": [0, 110, 139, 153, 259, 306, 307, 329, 365, 373, 375, 421], "negat": [0, 196], "sign": [0, 15, 150, 281, 401], "logical_not": 0, "logic": [0, 1, 172, 173, 174], "logical_and": 0, "logical_or": 0, "reciproc": [0, 226], "subtract": [0, 37], "multipli": [0, 1, 37, 144, 206, 207, 295, 340, 344], "divid": [0, 1, 37, 141, 206, 221], "divmod": 0, "quotient": [0, 112, 113, 141], "remaind": [0, 113], "floor_divid": 0, "integ": [0, 10, 141, 143, 144, 155, 162, 182, 202, 206, 207, 209, 215, 240, 256, 267, 281, 298, 321, 410, 421], "divis": [0, 112, 141, 206, 221], "equival": [0, 1, 30, 63, 76, 113, 141, 144, 252, 299, 328, 330, 332, 335, 337, 339, 341], "do": [0, 1, 4, 7, 287, 315, 326, 389, 392, 399, 419, 420, 422], "floor": [0, 141], "between": [0, 1, 6, 90, 139, 343, 363, 366, 367, 370, 410, 422, 426], "ceil": 0, "exp": [0, 121, 171, 175, 211, 238, 353, 368, 380, 381, 384, 419, 426], "exponenti": [0, 119, 121, 337, 353, 380, 409], "sin": [0, 340, 420, 424], "sine": [0, 20, 21, 236, 237, 420], "co": [0, 1, 340, 420], "cosin": [0, 18, 19, 99, 100, 363, 408, 410, 420], "tan": 0, "tangent": [0, 1, 22, 23, 24, 156, 254, 255, 387], "arcsin": 0, "arc": 0, "arcco": 0, "arctan": 0, "arctan2": 0, "invers": [0, 18, 19, 20, 21, 22, 23, 24, 117, 130, 131, 132, 133, 134, 135, 161], "ratio": [0, 23], "sinh": 0, "hyperbol": [0, 19, 21, 24, 100, 237, 255, 387], "cosh": [0, 370], "tanh": [0, 287, 299, 300, 303, 308, 334, 355, 376], "arcsinh": 0, "arccosh": 0, "arctanh": 0, "degre": [0, 208, 375], "radian": [0, 107], "log": [0, 169, 171, 175, 360, 361, 365, 368, 370, 373, 384], "natur": [0, 167, 169, 422], "logarithm": [0, 167, 168, 169, 170], "log2": 0, "base": [0, 1, 125, 162, 168, 170, 204, 336, 343, 392, 394, 400, 414, 416, 419, 421], "2": [0, 1, 3, 4, 5, 37, 96, 109, 110, 116, 128, 131, 133, 134, 135, 136, 137, 138, 139, 155, 160, 161, 162, 163, 164, 170, 176, 206, 213, 217, 256, 259, 261, 262, 263, 273, 277, 281, 287, 289, 290, 293, 299, 306, 307, 333, 340, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 364, 365, 367, 374, 375, 389, 392, 395, 397, 398, 399, 403, 406, 419, 420, 421, 422, 423, 424, 425, 426], "log10": 0, "10": [0, 2, 4, 5, 168, 225, 230, 275, 287, 316, 389, 410, 412, 419, 421], "log1p": 0, "plu": [0, 169], "logaddexp": 0, "sigmoid": [0, 4, 287, 339, 356, 360, 382], "logist": [0, 3, 234, 356, 382], "erf": [0, 117, 419], "error": [0, 1, 7, 116, 117, 189, 240, 299, 354, 355, 356, 370, 372, 420, 423], "function": [0, 1, 2, 3, 4, 5, 6, 15, 79, 91, 113, 116, 117, 145, 150, 156, 160, 161, 162, 163, 164, 176, 234, 264, 266, 267, 272, 273, 275, 276, 277, 287, 299, 308, 310, 314, 321, 326, 330, 334, 335, 337, 338, 339, 341, 342, 343, 354, 355, 356, 357, 358, 360, 361, 376, 381, 383, 384, 385, 386, 387, 389, 394, 403, 416, 418, 421, 422, 423, 425], "erfinv": 0, "expm1": 0, "stop_gradi": [0, 420], "flow": [0, 246, 422], "gradient": [0, 3, 5, 145, 246, 264, 272, 273, 287, 314, 327, 332, 343, 370, 392, 394, 395, 396, 398, 399, 400, 401, 402, 405, 407, 419, 420, 421, 422, 423, 424], "round": [0, 206], "decim": [0, 64, 225], "float": [0, 1, 10, 13, 15, 17, 75, 123, 124, 125, 126, 141, 142, 150, 155, 162, 207, 209, 214, 273, 281, 291, 295, 296, 297, 301, 302, 304, 309, 321, 333, 336, 340, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 363, 364, 365, 367, 371, 374, 375, 385, 386, 395, 396, 397, 398, 399, 400, 401, 406, 407, 408, 409, 411, 412], "point": [0, 1, 3, 4, 7, 79, 141, 207, 281], "matmul": [0, 143, 426], "multipl": [0, 7, 13, 86, 123, 124, 143, 144, 176, 195, 206, 207, 329, 340, 409, 410, 412, 419, 422, 425], "gather": [0, 143, 144], "slice_s": 0, "entri": [0, 296, 297], "take": [0, 1, 4, 5, 83, 84, 85, 91, 143, 145, 156, 178, 193, 200, 207, 253, 264, 266, 267, 270, 276, 277, 329, 416, 420, 421, 425, 426, 427], "treat": [0, 1, 134, 135, 137, 138, 252, 344, 419], "take_along_axi": [0, 421], "scatter": 0, "linear": [0, 1, 4, 5, 6, 271, 275, 287, 299, 316, 332, 334, 335, 337, 339, 344, 353, 354, 355, 356, 357, 359, 378, 379, 380, 382, 389, 392, 403, 411, 419], "scatter_add": 0, "scatter_prod": 0, "scatter_max": 0, "scatter_min": 0, "sqrt": [0, 4, 116, 126, 291, 299, 301, 302, 304, 305, 333, 340, 346, 347, 348, 349, 355, 395, 397, 398, 399, 406, 419], "root": [0, 4, 124, 226, 241, 333], "rsqrt": 0, "softmax": [0, 4, 126, 287, 361, 364], "precis": [0, 1, 4, 121, 126, 287, 299, 333, 402, 419], "power": [0, 420, 423], "rais": [0, 4, 162, 189, 204, 240, 316], "cumsum": 0, "inclus": [0, 39, 40, 41, 42, 101, 102, 103, 104, 139], "cumul": [0, 79, 101, 102, 103, 104], "cumprod": 0, "cummax": 0, "cummin": 0, "conv_gener": 0, "weight": [0, 3, 95, 96, 97, 123, 124, 275, 287, 316, 320, 331, 332, 362, 364, 392, 396, 399, 401, 403, 407, 420, 422], "padding_lo": 0, "padding_hi": 0, "kernel_dil": [0, 97], "input_dil": [0, 97], "group": [0, 95, 96, 97, 108, 126, 144, 206, 207, 271, 301, 331, 332], "flip": [0, 97, 98], "gener": [0, 1, 2, 3, 10, 17, 97, 122, 134, 135, 165, 180, 209, 213, 214, 215, 218, 219, 343, 416, 419, 421, 422, 427], "convolut": [0, 95, 96, 97, 98, 292, 293, 294, 296, 297], "filter": [0, 98, 292, 293, 294, 309, 313], "conv1d": [0, 287], "dilat": [0, 95, 96, 97, 292, 293], "conv2d": [0, 287], "2d": [0, 96, 97, 110, 206, 291, 296], "conv3d": [0, 287], "tupl": [0, 29, 63, 66, 76, 92, 96, 97, 113, 118, 120, 156, 162, 163, 164, 202, 206, 223, 243, 264, 266, 274, 275, 276, 277, 278, 289, 290, 293, 294, 306, 307, 316, 318, 338, 344, 396, 398, 399, 400, 401, 418, 420], "3d": [0, 1, 291, 297, 344], "quantized_matmul": 0, "w": [0, 3, 96, 108, 144, 206, 207, 264, 276, 290, 291, 293, 294, 296, 297, 305, 307, 407, 420], "scale": [0, 1, 4, 13, 108, 123, 124, 125, 126, 144, 206, 207, 214, 273, 296, 297, 304, 329, 336, 337, 340, 344, 380, 396], "bias": [0, 108, 144, 206, 207, 300, 303, 314, 326, 329], "group_siz": [0, 108, 144, 206, 207, 271, 331, 332], "64": [0, 86, 108, 144, 206, 207, 271, 281, 331, 332], "bit": [0, 108, 144, 157, 206, 207, 224, 271, 281, 309, 331, 332, 333], "4": [0, 1, 4, 108, 139, 144, 162, 206, 207, 230, 271, 277, 281, 289, 290, 291, 302, 306, 307, 331, 332, 343, 344, 346, 347, 348, 362, 419, 421, 424, 426], "quantiz": [0, 108, 144, 166, 207, 331, 332], "its": [0, 1, 7, 176, 203, 217, 261, 272, 278, 287, 332, 398, 399, 400, 423, 426], "last": [0, 4, 28, 75, 123, 124, 129, 132, 134, 135, 137, 138, 139, 143, 144, 149, 160, 161, 163, 164, 176, 185, 210, 239, 256, 292, 293, 294, 296, 297, 301, 344, 423], "dequant": [0, 206], "produc": [0, 1, 7, 91, 329, 389], "block_sparse_qmm": 0, "lhs_indic": [0, 143, 144], "rhs_indic": [0, 143, 144], "level": [0, 143, 144, 348, 349], "tensordot": 0, "contract": 0, "over": [0, 1, 4, 5, 14, 16, 25, 26, 27, 28, 95, 96, 97, 101, 102, 103, 104, 129, 132, 135, 138, 149, 162, 164, 165, 175, 177, 179, 192, 203, 205, 226, 238, 239, 245, 249, 256, 258, 265, 291, 292, 293, 294, 301, 304, 333, 364, 408, 411, 420], "axes_a": 0, "axes_b": 0, "outer": [0, 419, 422], "inner": [0, 419], "addmm": 0, "c": [0, 1, 4, 13, 162, 289, 290, 291, 292, 293, 294, 296, 297, 302, 303, 306, 307, 423, 424, 426], "alpha": [0, 1, 13, 206, 353, 375, 377, 380, 399, 406], "f": [0, 1, 3, 5, 162, 287, 303, 399, 419, 423], "beta": [0, 1, 13, 108, 206, 291, 301, 302, 304, 374, 398, 399, 400, 401], "d": [0, 1, 4, 109, 110, 149, 162, 176, 180, 201, 252, 259, 261, 262, 263, 278, 294, 297, 300, 303, 334, 395, 398, 400, 426], "block_masked_mm": 0, "block_siz": [0, 86], "mask_out": [0, 86], "mask_lh": [0, 86], "mask_rh": [0, 86], "block": [0, 1, 4, 86, 343], "mask": [0, 4, 86, 126, 323, 329, 421], "block_sparse_mm": 0, "extract": [0, 4, 43, 109, 110, 287, 313, 392], "construct": [0, 1, 5, 43, 109, 142, 199, 257, 269], "diag": [0, 164], "implement": [0, 3, 5, 125, 126, 162, 298, 313, 329, 336, 338, 340, 342, 343, 344, 386, 395, 396, 397, 398, 400, 401, 402, 414, 419, 420, 423], "allow": [0, 1, 155, 273, 287, 328, 392, 414, 421, 424], "inject": 0, "other": [0, 1, 4, 6, 155, 162, 287, 315, 392, 401, 419, 421, 422, 424], "thi": [0, 1, 4, 5, 7, 14, 15, 16, 17, 25, 26, 27, 28, 79, 114, 143, 144, 150, 156, 160, 161, 162, 163, 164, 171, 175, 176, 177, 179, 181, 183, 192, 203, 205, 210, 233, 238, 239, 240, 245, 249, 252, 258, 265, 273, 276, 277, 287, 295, 296, 297, 300, 303, 310, 311, 313, 314, 317, 318, 319, 324, 326, 327, 328, 329, 332, 334, 342, 346, 347, 348, 349, 355, 356, 357, 370, 386, 392, 403, 418, 419, 420, 422, 423, 425], "ensur": [0, 1, 7, 273, 370], "been": [0, 1, 4, 184, 422], "when": [0, 1, 4, 6, 7, 91, 97, 160, 161, 162, 164, 166, 292, 293, 294, 344, 348, 349, 368, 374, 392, 410, 416, 419, 426], "atleast_1d": 0, "atleast": 0, "ndim": [0, 1, 139, 162, 164, 344], "atleast_2d": 0, "atleast_3d": 0, "number_of_el": 0, "invert": 0, "int32": [0, 10, 17, 37, 139, 155, 162, 215, 281, 344, 421, 424], "some": [0, 1, 3, 4, 5, 314, 326, 403, 419, 420, 422], "scalar": [0, 1, 12, 13, 15, 29, 48, 75, 78, 83, 84, 85, 86, 88, 90, 112, 113, 115, 141, 142, 145, 146, 147, 150, 157, 158, 159, 162, 165, 171, 172, 173, 174, 176, 178, 193, 195, 198, 202, 204, 209, 215, 218, 219, 221, 224, 228, 248, 264, 268, 272, 375, 420, 422, 424], "us": [0, 2, 3, 4, 5, 6, 7, 17, 37, 79, 108, 111, 113, 125, 139, 144, 157, 160, 161, 162, 163, 164, 176, 183, 184, 185, 188, 206, 207, 222, 223, 224, 251, 274, 277, 281, 287, 290, 296, 298, 299, 300, 303, 305, 307, 309, 313, 320, 327, 329, 331, 332, 334, 336, 340, 343, 344, 348, 349, 355, 356, 363, 389, 392, 394, 395, 396, 398, 399, 400, 401, 402, 403, 416, 418, 419, 420, 421, 424, 426], "shapeless": [0, 91], "compil": [0, 2, 6, 7, 111, 114, 420, 422], "pun": 0, "intend": [0, 419], "conjug": [0, 93], "bitwise_and": 0, "bitwis": [0, 83, 84, 85, 157, 224], "bitwise_or": 0, "bitwise_xor": 0, "exclus": [0, 79, 85], "left_shift": 0, "shift": [0, 157, 224, 291], "left": [0, 4, 125, 157, 162, 206, 289, 290, 299, 306, 307, 336, 344, 355, 356, 365, 367, 375], "right_shift": 0, "right": [0, 1, 7, 206, 224, 289, 290, 299, 306, 307, 344, 355, 356, 365, 367, 375], "you": [1, 2, 4, 5, 6, 7, 287, 340, 343, 389, 416, 419, 420, 421, 423, 425, 426], "can": [1, 2, 4, 6, 7, 12, 17, 63, 76, 79, 83, 84, 85, 91, 110, 111, 112, 113, 115, 118, 146, 147, 157, 158, 159, 162, 171, 178, 193, 195, 198, 204, 209, 210, 215, 218, 219, 221, 224, 228, 248, 259, 264, 277, 287, 290, 298, 307, 313, 326, 331, 338, 344, 364, 389, 392, 394, 402, 403, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "extend": [1, 202], "guid": [1, 6], "explain": 1, "how": [1, 4, 5, 287, 289, 290, 292, 293, 294, 298, 306, 307, 331, 344, 402, 419, 421, 426], "simpl": [1, 4, 5, 287, 298, 388, 419, 420, 422], "let": [1, 3, 4, 419, 420, 422, 423], "sai": [1, 4, 389, 422], "would": [1, 4, 344, 421, 422, 423, 426], "like": [1, 4, 6, 155, 200, 270, 297, 370, 403, 405, 419, 420, 422, 423, 424, 426], "them": [1, 4, 287, 314, 326, 426], "both": [1, 12, 83, 84, 85, 112, 113, 115, 146, 147, 155, 157, 158, 159, 162, 171, 178, 193, 195, 198, 204, 210, 221, 224, 248, 271, 289, 290, 302, 303, 306, 307, 394, 419, 420, 424, 426], "coeffici": [1, 395, 396, 398, 399, 400, 401], "respect": [1, 3, 5, 123, 124, 143, 144, 145, 206, 264, 275, 287, 291, 299, 301, 302, 304, 392, 420, 424], "togeth": [1, 5, 206, 275, 276], "get": [1, 3, 5, 7, 96, 97, 105, 106, 182, 183, 184, 185, 212, 287, 419, 420, 422, 426], "z": [1, 300, 419, 422], "directli": [1, 4, 79], "import": [1, 2, 3, 4, 5, 7, 162, 230, 264, 274, 275, 276, 277, 278, 287, 289, 290, 291, 302, 306, 307, 316, 344, 362, 364, 371, 389, 392, 419, 420, 421, 422, 423, 424], "core": [1, 2, 3, 4, 5, 271, 287, 289, 290, 291, 302, 306, 307, 316, 319, 321, 324, 344, 345, 346, 347, 348, 349, 350, 351, 352, 362, 364, 371, 389, 392, 394, 419, 423, 424], "mx": [1, 2, 3, 4, 5, 37, 93, 94, 139, 155, 162, 163, 166, 230, 264, 273, 287, 289, 290, 291, 302, 306, 307, 309, 316, 320, 335, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 359, 362, 363, 364, 368, 371, 378, 387, 389, 392, 394, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427], "def": [1, 3, 4, 5, 264, 287, 392, 419, 420, 421, 422, 423, 426], "simple_axpbi": 1, "perform": [1, 2, 4, 6, 13, 86, 97, 101, 102, 103, 104, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 143, 144, 176, 207, 225, 238, 252, 287, 301, 343, 348, 349, 419, 421, 422, 426], "while": [1, 2, 4, 7, 223, 336, 422, 423], "leav": [1, 118, 275, 276, 277], "howev": [1, 287, 299, 301, 403, 416, 419, 422, 423], "mai": [1, 162, 271, 296, 420, 421], "need": [1, 4, 5, 6, 7, 78, 206, 287, 327, 328, 340, 343, 416, 420, 422, 423, 424, 426], "underli": 1, "perhap": [1, 4], "make": [1, 2, 4, 5, 7, 176, 197, 233, 287, 408, 409, 411, 412, 419, 422, 424, 426], "faster": [1, 113, 354, 419, 420], "differenti": [1, 6], "In": [1, 4, 5, 37, 176, 206, 275, 287, 296, 301, 392, 395, 397, 398, 400, 401, 402, 418, 419, 420, 422, 425, 426], "tutori": 1, "we": [1, 3, 4, 5, 108, 144, 206, 207, 287, 298, 331, 338, 399, 401, 416, 418, 419, 420, 422, 426], "go": [1, 4, 420], "through": [1, 246, 343, 401, 419, 420, 423], "ad": [1, 3, 7, 123, 302, 392, 395, 396, 397, 398, 399, 400, 406, 422, 425], "It": [1, 4, 7, 145, 233, 264, 273, 277, 287, 328, 332, 402, 414, 423, 425], "cover": 1, "structur": [1, 402, 420], "librari": [1, 7, 287], "redirect": 1, "acceler": [1, 291], "appropri": [1, 419], "metal": [1, 6], "vjp": [1, 424], "jvp": [1, 424], "graph": [1, 4, 5, 6, 420], "provid": [1, 4, 79, 108, 145, 256, 264, 275, 277, 287, 309, 314, 316, 326, 327, 328, 331, 332, 343, 344, 388, 392, 425, 427], "rule": 1, "evalu": [1, 4, 5, 6, 118, 156, 266, 287, 312, 323, 392, 394, 419, 424], "discuss": 1, "more": [1, 2, 5, 9, 75, 110, 143, 160, 161, 164, 176, 188, 189, 228, 229, 281, 287, 291, 296, 336, 340, 343, 344, 346, 347, 348, 349, 416, 419, 420, 421, 424, 426], "detail": [1, 9, 188, 287, 296, 336, 340, 344, 346, 347, 348, 349, 395, 397, 398, 400, 401, 421, 424], "front": 1, "thei": [1, 3, 4, 7, 15, 98, 144, 150, 338, 366, 392, 401, 418, 419, 422, 424, 425, 426], "defin": [1, 3, 4, 5, 7, 144, 162, 207, 271, 274, 423], "api": [1, 420], "axpbi": 1, "follow": [1, 4, 5, 6, 7, 17, 98, 108, 143, 162, 206, 276, 287, 355, 356, 368, 395, 396, 397, 398, 399, 400, 401, 407, 416, 419, 420, 426], "numpi": [1, 4, 5, 6, 12, 15, 17, 83, 84, 85, 88, 112, 113, 115, 146, 147, 150, 157, 158, 159, 171, 176, 178, 193, 195, 198, 204, 221, 224, 248, 422, 424, 425], "style": [1, 12, 15, 83, 84, 85, 112, 113, 115, 146, 147, 150, 157, 158, 159, 171, 176, 178, 193, 195, 198, 204, 221, 224, 248], "upcast": 1, "factor": [1, 13, 160, 163, 344, 364, 409, 412], "stream": [1, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 268, 269, 270, 426], "which": [1, 4, 5, 6, 7, 17, 36, 79, 91, 97, 110, 118, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 145, 151, 152, 153, 154, 156, 160, 161, 162, 163, 164, 166, 180, 190, 206, 210, 211, 222, 223, 227, 228, 229, 230, 231, 243, 244, 252, 259, 264, 266, 267, 271, 290, 296, 297, 299, 307, 309, 313, 336, 364, 367, 371, 374, 389, 402, 403, 416, 419, 420, 421, 422, 426, 427], "schedul": [1, 189, 394, 408, 409, 410, 411, 412, 414, 426], "simplest": [1, 287], "wai": [1, 4, 7, 287, 344, 419, 420, 421], "term": [1, 365, 395, 396, 397, 398, 399, 400, 406], "exist": [1, 2, 4, 314, 326], "auto": [1, 7], "themselv": [1, 419], "contain": [1, 4, 7, 27, 28, 66, 91, 110, 133, 134, 135, 143, 144, 162, 172, 173, 174, 206, 240, 268, 273, 287, 313, 315, 316, 322, 343, 371, 389, 392, 419, 420], "act": [1, 370], "nor": [1, 145, 264], "rather": [1, 420, 426], "easi": [1, 287], "interfac": 1, "part": [1, 420, 421], "further": [1, 7, 420], "ha": [1, 2, 4, 5, 6, 7, 75, 91, 110, 133, 134, 136, 137, 138, 145, 160, 161, 164, 180, 184, 210, 291, 300, 303, 305, 334, 392, 394, 419, 421, 422, 424, 426], "method": [1, 4, 8, 9, 10, 29, 271, 279, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 320, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 392, 395, 396, 397, 398, 399, 400, 401, 403, 406, 407, 414], "run": [1, 2, 4, 5, 6, 7, 8, 201, 279, 291, 309, 395, 396, 398, 399, 400, 419, 422, 426, 427], "our": [1, 4, 5, 338, 395, 396, 397, 398, 400, 401], "concret": [1, 300, 303, 305, 334, 422, 426], "class": [1, 4, 5, 8, 9, 10, 29, 279, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 392, 395, 396, 397, 398, 399, 400, 401, 406, 407, 414], "public": [1, 287], "explicit": [1, 403, 416, 423], "alpha_": 1, "beta_": 1, "must": [1, 2, 7, 86, 90, 142, 144, 162, 209, 210, 213, 215, 218, 219, 268, 344, 423], "know": [1, 4], "itself": [1, 271, 403], "popul": 1, "To": [1, 2, 3, 4, 5, 7, 188, 287, 389, 419, 420, 424], "avoid": [1, 321, 419], "unnecessari": [1, 4], "alloc": [1, 184, 188, 189, 392], "respons": 1, "void": 1, "eval_cpu": 1, "overrid": [1, 114], "eval_gpu": 1, "jacobian": [1, 156, 266, 424], "primal": [1, 156, 266], "argnum": [1, 145, 264, 420], "cotan": 1, "across": [1, 301], "repres": [1, 4, 144, 371, 375, 423], "virtual": 1, "vmap": [1, 420, 422, 424], "print": [1, 3, 4, 5, 7, 273, 274, 275, 276, 278, 287, 416, 419, 420, 421, 422, 423, 424], "ostream": 1, "o": [1, 7, 126, 303], "check": [1, 7, 78, 155, 186, 316, 420, 421], "is_equival": 1, "privat": 1, "fall": 1, "eval": [1, 2, 3, 4, 5, 287, 392, 394, 419, 420, 422, 424], "out": [1, 7, 86, 289, 290, 296, 297, 306, 307, 323, 419, 420, 421], "deriv": [1, 420, 422], "paramet": [1, 3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 188, 189, 190, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 313, 314, 316, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 357, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 386, 388, 389, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 419, 420, 422], "also": [1, 4, 5, 6, 7, 10, 12, 83, 84, 85, 111, 112, 113, 115, 129, 132, 135, 138, 146, 147, 157, 158, 159, 171, 178, 193, 195, 198, 204, 206, 221, 224, 248, 271, 272, 287, 313, 327, 329, 331, 332, 339, 354, 380, 382, 388, 394, 419, 420, 421, 422, 423, 424, 427], "pass": [1, 4, 5, 63, 76, 201, 202, 264, 272, 274, 275, 276, 287, 314, 326, 327, 328, 338, 419, 422], "reimplement": 1, "now": [1, 4, 7, 332, 419, 423], "promot": 1, "promoted_dtyp": 1, "promote_typ": 1, "out_dtyp": 1, "is_floating_point": 1, "cast": [1, 36, 136, 137, 138, 166, 309, 321, 423], "up": [1, 4, 419], "determin": [1, 110, 213, 277, 281, 320, 425], "x_cast": 1, "y_cast": 1, "broadcasted_input": 1, "out_shap": 1, "unique_ptr": 1, "make_shar": 1, "to_stream": 1, "handl": [1, 287, 419], "resolv": 1, "No": [1, 4], "happen": [1, 4, 123, 343, 394, 419, 422], "call": [1, 2, 4, 5, 30, 141, 181, 185, 287, 298, 314, 326, 331, 338, 392, 394, 403, 419, 420, 422], "alon": [1, 423], "onli": [1, 4, 6, 7, 78, 86, 95, 96, 97, 162, 206, 213, 287, 313, 314, 316, 321, 323, 326, 327, 328, 392, 419, 420, 425, 426], "execut": [1, 7, 80, 81, 82, 185, 423, 426], "devic": [1, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 268, 269, 270, 279, 426, 427], "user": [1, 4, 287], "memori": [1, 6, 79, 181, 183, 184, 185, 187, 188, 189, 343, 392, 396, 419, 422, 423], "naiv": [1, 420], "version": [1, 7, 108, 171, 175, 206, 238, 267, 416, 420, 421], "declar": 1, "member": [1, 287, 319, 324], "earlier": 1, "find": [1, 3, 7], "captur": [1, 2, 91, 190, 191, 287, 419], "axpby_impl": 1, "readi": 1, "malloc_or_wait": 1, "synchron": [1, 419], "avail": [1, 3, 4, 5, 7, 9, 186, 426], "There": [1, 287, 344, 419], "wait": [1, 4, 189], "here": [1, 4, 419, 420, 422, 425, 426], "request": 1, "under": [1, 162], "pressur": 1, "set_data": 1, "nbyte": 1, "collect": [1, 275, 276, 418], "pointer": 1, "x_ptr": 1, "y_ptr": 1, "out_ptr": 1, "relev": 1, "static_cast": 1, "out_idx": 1, "size": [1, 4, 5, 49, 66, 86, 96, 108, 120, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 144, 148, 155, 162, 184, 189, 206, 207, 210, 223, 240, 243, 271, 287, 289, 290, 292, 293, 294, 298, 302, 306, 307, 331, 332, 344, 396, 422, 423], "map": [1, 5, 37, 166, 275, 298, 309], "x_offset": 1, "elem_to_loc": 1, "y_offset": 1, "contigu": [1, 79], "regularli": 1, "default": [1, 7, 13, 14, 15, 16, 17, 25, 26, 27, 28, 78, 79, 86, 91, 92, 95, 96, 97, 105, 106, 108, 109, 110, 122, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 148, 150, 160, 161, 162, 163, 164, 165, 166, 175, 177, 179, 180, 188, 189, 192, 199, 203, 205, 206, 207, 209, 210, 211, 213, 214, 215, 217, 218, 219, 222, 223, 225, 232, 233, 239, 240, 243, 244, 245, 247, 249, 251, 256, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 271, 281, 289, 290, 291, 292, 293, 294, 300, 302, 303, 305, 306, 307, 309, 314, 316, 321, 323, 326, 329, 330, 331, 332, 334, 336, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 357, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 392, 395, 396, 397, 398, 399, 400, 401, 406, 407, 408, 416, 418, 419, 420, 423, 425, 427], "row": [1, 79, 122, 148, 206, 261], "henc": [1, 206, 419], "doesn": [1, 287], "addit": [1, 4, 7, 12, 13, 123, 124, 126, 166, 291, 301, 304, 329, 333, 392, 420], "should": [1, 3, 4, 5, 7, 79, 110, 123, 124, 126, 156, 181, 190, 206, 253, 259, 264, 266, 271, 274, 287, 292, 293, 294, 296, 297, 323, 329, 338, 364, 366, 371, 392, 418, 419, 420, 422, 423, 427], "work": [1, 2, 4, 7, 189, 419, 420, 421, 422], "incom": 1, "accordingli": 1, "dispatch": 1, "float16": [1, 10, 166, 281, 309, 422, 423], "bfloat16": [1, 10, 281, 423], "complex64": [1, 281], "throw": [1, 91], "encount": [1, 420], "unexpect": [1, 17], "correct": [1, 7, 398, 399, 400, 421, 422], "float16_t": 1, "bfloat16_t": 1, "complex64_t": 1, "runtime_error": 1, "support": [1, 4, 6, 7, 15, 86, 95, 96, 97, 126, 139, 150, 160, 161, 163, 164, 166, 176, 206, 213, 420, 421, 423, 425], "good": [1, 7, 419, 426], "fallback": 1, "routin": 1, "framework": [1, 6], "certain": [1, 323, 419], "case": [1, 4, 129, 132, 133, 135, 136, 137, 138, 139, 160, 161, 163, 164, 176, 223, 243, 290, 296, 307, 342, 374, 380, 385, 386, 402, 403, 419, 420, 424, 425, 426, 427], "doe": [1, 2, 4, 7, 183, 273, 287, 419, 421, 422, 423], "half": [1, 17, 215, 219, 336, 422], "assum": [1, 4, 86, 163, 275, 287, 289, 290, 301, 306, 307], "fix": [1, 4, 7, 422], "direct": [1, 4, 311, 401, 426], "column": [1, 122, 148, 206], "place": [1, 4, 37, 225, 271, 422, 423], "expect": [1, 4, 292, 293, 294, 295, 296, 297, 340, 343, 365, 419, 421], "write": [1, 4, 287, 423], "catlas_saxpbi": 1, "axpby_impl_acceler": 1, "special": 1, "copy_inplac": 1, "copytyp": 1, "inplac": 1, "incx": 1, "inci": 1, "For": [1, 4, 7, 37, 126, 143, 155, 162, 206, 278, 287, 291, 296, 309, 314, 323, 326, 332, 336, 340, 344, 346, 347, 348, 349, 389, 416, 419, 420, 421, 422, 423, 424, 425, 426], "fit": [1, 206, 426], "criteria": 1, "With": 1, "mind": [1, 4], "finish": 1, "assert": 1, "singl": [1, 5, 118, 156, 166, 180, 202, 266, 290, 307, 419, 421, 425], "flag": [1, 7, 419, 423], "row_contigu": 1, "col_contigu": 1, "common": [1, 394, 419, 422], "just": [1, 5, 304, 419, 421], "much": [1, 4, 289, 290, 306, 307, 419, 422], "enough": [1, 422], "If": [1, 4, 7, 14, 15, 16, 17, 25, 26, 27, 28, 75, 78, 79, 90, 92, 98, 101, 102, 103, 104, 109, 110, 118, 123, 125, 136, 137, 138, 141, 142, 145, 150, 160, 162, 166, 175, 176, 177, 179, 180, 188, 189, 192, 199, 202, 203, 205, 210, 213, 222, 238, 239, 240, 245, 249, 251, 252, 253, 256, 258, 259, 264, 265, 267, 269, 271, 275, 277, 291, 292, 293, 294, 301, 304, 305, 314, 316, 326, 332, 334, 336, 338, 340, 344, 362, 364, 375, 396, 419, 420, 422, 425, 426, 427], "plan": [1, 419], "enjoi": 1, "speed": 1, "appl": [1, 4, 6, 7, 426], "silicon": [1, 4, 6, 7, 426], "address": 1, "shade": 1, "languag": 1, "kernel": [1, 7, 95, 96, 97, 289, 290, 306, 307, 419, 421], "written": 1, "help": [1, 4, 419, 426], "resourc": 1, "walkthrough": 1, "pipelin": 1, "document": [1, 2, 63, 76, 228, 229, 281, 419, 420, 421], "specif": [1, 7, 420], "cpp": 1, "keep": [1, 14, 16, 25, 26, 175, 177, 179, 192, 205, 245, 249, 265, 287, 313, 420, 422], "launch": [1, 421], "exactli": [1, 4, 316, 420], "mani": [1, 79, 240, 292, 293, 294, 298, 331, 419, 422], "thread": 1, "pick": 1, "assign": [1, 37, 392], "axpby_gener": 1, "buffer": [1, 183, 423], "3": [1, 4, 7, 139, 155, 162, 163, 273, 277, 294, 299, 344, 347, 349, 355, 358, 396, 401, 416, 419, 421, 423, 424], "x_stride": 1, "6": [1, 4, 162, 230, 343, 347, 355, 356, 358, 365, 375, 379, 406, 419, 421, 424], "y_stride": 1, "7": [1, 4, 162, 206, 421], "uint": 1, "thread_position_in_grid": 1, "instanti": [1, 5, 422], "give": [1, 4, 5, 27, 419], "uniqu": [1, 416], "host": 1, "name": [1, 144, 166, 206, 207, 228, 229, 230, 231, 287, 301, 313, 316, 318, 421, 425], "so": [1, 4, 7, 145, 264, 295, 344, 394, 419, 422, 426], "identifi": [1, 274, 418], "instantiate_axpbi": 1, "type_nam": 1, "host_nam": 1, "axpby_general_": 1, "set": [1, 4, 5, 7, 91, 111, 114, 123, 125, 182, 188, 189, 232, 233, 247, 299, 304, 305, 312, 314, 321, 322, 323, 326, 327, 332, 336, 342, 363, 375, 386, 392, 396, 403, 416, 420, 422], "grid": [1, 180], "shown": 1, "below": [1, 7, 162, 261, 263, 281, 344, 422], "prepar": [1, 4], "carri": 1, "ostringstream": 1, "kname": 1, "axpby_": 1, "general_": 1, "type_to_nam": 1, "sure": [1, 2, 4, 7, 287, 419], "look": [1, 4], "folder": 1, "register_librari": 1, "mlx_ext": 1, "get_colocated_mtllib_path": 1, "get_kernel": 1, "str": [1, 98, 145, 162, 166, 180, 182, 190, 227, 228, 229, 230, 231, 264, 274, 278, 309, 310, 313, 314, 316, 318, 320, 326, 344, 348, 349, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "encod": [1, 125, 336, 340, 343, 364], "compute_encod": 1, "get_command_encod": 1, "setcomputepipelinest": 1, "regist": [1, 5], "those": [1, 4, 287], "nelem": 1, "set_input_arrai": 1, "set_output_arrai": 1, "setbyt": 1, "sizeof": 1, "threadgroup": 1, "higher": [1, 149, 371, 420], "than": [1, 4, 75, 98, 110, 113, 125, 143, 146, 147, 158, 159, 160, 161, 164, 176, 188, 273, 275, 336, 342, 344, 371, 374, 386, 396, 401, 419, 420, 426], "tgp_size": 1, "maxtotalthreadsperthreadgroup": 1, "mtl": 1, "group_dim": 1, "grid_dim": 1, "among": 1, "dispatchthread": 1, "few": [1, 4, 5, 6, 7, 422, 424], "thing": [1, 4], "note": [1, 4, 7, 15, 79, 86, 91, 95, 96, 126, 134, 135, 144, 150, 162, 183, 206, 210, 271, 287, 333, 344, 423, 425], "about": [1, 4, 5, 182, 422, 426], "befor": [1, 4, 7, 27, 203, 313, 343, 403, 421, 422], "track": [1, 287, 291], "activ": [1, 7, 183, 296, 342, 343, 376, 385, 386, 388, 419], "command_buff": 1, "mtlcommandbuff": 1, "associ": [1, 230, 231, 422], "reli": 1, "u": [1, 160, 164, 305, 328, 414, 422], "command": [1, 2, 7], "instead": [1, 7, 287, 328, 340, 420, 422], "end_encod": 1, "until": [1, 422, 424], "hit": 1, "flush": 1, "next": [1, 4, 5, 188], "These": [1, 91, 253, 364, 426], "built": [1, 7, 422], "top": [1, 258, 305, 344], "includ": [1, 101, 102, 103, 104, 183, 184, 189, 304, 310, 322, 332, 365, 419, 420, 421, 424, 425, 427], "forward": [1, 264, 419, 422], "mode": [1, 98, 312, 323, 325, 344, 348, 349], "diff": 1, "push": 1, "op": [1, 201, 314, 422], "similarli": [1, 7, 176, 420, 422], "scale_arr": 1, "contribut": 1, "tangent_x": 1, "tangent_i": 1, "cotang": [1, 266], "unus": 1, "arg": [1, 4, 9, 10, 87, 118, 230, 231], "push_back": 1, "fulli": [1, 6, 419, 423, 426], "overal": 1, "directori": [1, 4, 7], "h": [1, 95, 96, 162, 290, 291, 293, 294, 296, 297, 300, 303, 307, 334, 420, 422], "mlx_sample_extens": 1, "__init__": [1, 4, 5, 8, 9, 10, 29, 279, 287, 392], "py": [1, 4, 7], "cmakelist": 1, "txt": 1, "setup": [1, 3, 5, 7, 419], "packag": [1, 3, 5, 389], "hold": [1, 4, 9, 10, 162, 419], "instal": 1, "nanobind": [1, 7, 343], "sinc": [1, 4, 5, 144, 185, 392, 401, 410, 423, 426], "compon": [1, 4], "etc": [1, 206, 287, 344], "alreadi": [1, 2, 4], "nb_modul": 1, "_ext": 1, "doc": [1, 5], "sampl": [1, 3, 4, 165, 209, 210, 211, 213, 215, 218, 219, 346, 347, 348, 349, 351, 352, 365, 371, 375, 416, 419], "_a": 1, "nb": 1, "kw_onli": 1, "none": [1, 4, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 187, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 274, 275, 276, 277, 279, 289, 290, 299, 306, 307, 309, 313, 314, 321, 326, 329, 334, 340, 343, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 396, 414, 421], "r": [1, 4, 163, 264, 296, 300], "most": [1, 210, 287, 405, 419, 420, 421, 422], "complex": [1, 93, 94, 134, 135, 136, 137, 138, 274, 281, 287, 328, 419, 420], "abov": [1, 4, 206, 262, 287, 344, 399, 420, 421, 422, 426], "come": [1, 4, 420], "bell": 1, "whistl": 1, "liter": [1, 344, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "modul": [1, 4, 5, 271, 272, 338, 343, 389, 405, 418, 419, 422], "caster": 1, "requir": [1, 4, 287, 422, 423], "find_packag": 1, "config": 1, "link": [1, 7], "your": [1, 4, 7, 392, 420, 422], "add_librari": 1, "target_sourc": 1, "cmake_current_list_dir": 1, "header": 1, "target_include_directori": 1, "target_link_librari": 1, "attach": 1, "conveni": [1, 5, 155], "mlx_build_metallib": 1, "metallib": [1, 7], "target": [1, 264, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 419], "automat": [1, 6, 166, 424, 425, 426], "what": [1, 4, 275], "practic": [1, 419], "mlx_build_met": [1, 7], "mlx_ext_metallib": 1, "titl": 1, "include_dir": 1, "project_source_dir": 1, "mlx_include_dir": 1, "output_directori": 1, "cmake_library_output_directori": 1, "add_depend": 1, "endif": 1, "final": [1, 3, 4, 5, 408, 411], "nanobind_add_modul": 1, "nb_static": 1, "stable_abi": 1, "lto": 1, "nomins": 1, "nb_domain": 1, "build_shared_lib": [1, 7], "target_link_opt": 1, "wl": 1, "rpath": 1, "loader_path": 1, "onc": [1, 7, 419], "describ": [1, 422], "util": [1, 4, 6, 7, 230, 287], "__name__": [1, 4], "__main__": [1, 4], "descript": [1, 4, 281], "ext_modul": 1, "cmakeextens": 1, "cmdclass": 1, "build_ext": 1, "cmakebuild": 1, "package_data": 1, "dylib": 1, "extras_requir": 1, "dev": [1, 7], "zip_saf": 1, "python_requir": 1, "even": [1, 4, 91, 419, 422, 423], "though": [1, 4, 419, 422, 423], "locat": [1, 79, 327, 328, 426], "pip": [1, 7], "develop": [1, 7], "j8": 1, "libmlx_ext": 1, "cpython": 1, "3x": 1, "darwin": 1, "try": [1, 7], "after": [1, 4, 5, 27, 139, 141, 144, 181, 203, 206, 291, 301, 304, 309, 310, 314, 316, 323, 326, 327, 328, 329, 343, 374, 419, 426], "abl": [1, 206], "simpli": [1, 4, 7, 335, 353, 359, 378, 387, 392, 419, 420], "plai": [1, 4], "item": [1, 3, 4, 5, 275, 422, 423, 424], "quick": [1, 6], "benchmark": [1, 419], "see": [1, 4, 5, 7, 9, 10, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 162, 188, 228, 229, 271, 281, 287, 291, 296, 299, 312, 330, 331, 332, 335, 336, 337, 339, 340, 341, 344, 346, 347, 348, 349, 354, 355, 356, 380, 419, 420, 421, 424, 426], "compar": [1, 78, 419], "time": [1, 4, 7, 189, 257, 287, 289, 290, 300, 303, 306, 307, 334, 419, 420, 422, 426], "set_default_devic": 1, "256": [1, 5], "512": [1, 2, 4, 343, 426], "random": [1, 2, 3, 4, 5, 6, 289, 290, 291, 302, 306, 307, 316, 323, 419, 420, 426, 427], "normal": [1, 3, 4, 123, 124, 213, 218, 287, 289, 290, 291, 301, 302, 304, 306, 307, 333, 343, 346, 348, 423, 426], "bench": 1, "warm": [1, 419], "100": [1, 3, 4, 411, 419, 420, 422, 426], "5000": 1, "e": [1, 5, 7, 116, 143, 144, 156, 234, 291, 292, 293, 294, 296, 297, 301, 302, 304, 314, 333, 360, 361, 383, 388, 394, 397, 419, 422, 427], "simple_tim": 1, "custom_tim": 1, "3f": [1, 5, 419], "114": 1, "109": 1, "modest": 1, "improv": [1, 2, 4, 395, 396, 397, 398, 399, 400, 406, 419], "awai": [1, 4], "nn": [1, 4, 5, 230, 275, 287, 389, 392, 394, 403, 405, 419, 422], "grad": [1, 3, 5, 264, 273, 394, 402, 419, 420, 421, 422, 424], "profil": 2, "kei": [2, 4, 126, 182, 209, 210, 211, 213, 214, 215, 217, 218, 219, 274, 275, 313, 314, 326, 329, 403, 416, 418, 420], "optim": [2, 3, 5, 6, 327, 419, 420, 422], "build": [2, 4, 6, 348, 392, 419], "mlx": [2, 3, 4, 5, 7, 287, 389, 392, 394, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426], "mlx_metal_debug": [2, 7], "debug": 2, "record": [2, 185, 422], "dure": [2, 91, 295, 296, 297, 344, 423], "later": [2, 7], "inspect": [2, 419, 424], "label": [2, 3, 364, 371], "object": [2, 9, 29, 48, 75, 91, 155, 230, 267, 274, 275, 276, 277, 281, 296, 343, 418], "queue": 2, "readabl": 2, "enabl": [2, 4, 7, 91, 114, 407], "python": [2, 4, 48, 66, 75, 118, 274, 275, 276, 277, 278, 392, 402, 403, 405, 418, 420, 423], "prepend": [2, 176], "cmake_arg": 2, "dmlx_metal_debug": 2, "ON": [2, 7], "start_captur": 2, "initi": [2, 3, 4, 277, 287, 291, 301, 302, 304, 305, 330, 333, 345, 346, 347, 348, 349, 350, 351, 352, 392, 403, 408, 409, 411, 412, 419, 422], "gpu": [2, 6, 7, 182, 419, 421, 426], "trace": [2, 419], "applic": [2, 7], "mtl_capture_en": 2, "uniform": [2, 287, 305, 316, 347, 349, 389, 416, 419, 420, 426], "trace_fil": 2, "mlx_trace": 2, "gputrac": [2, 190], "path": [2, 7, 190, 230, 231, 271, 276, 316], "_": [2, 3, 4, 276, 287, 408, 409, 410, 411, 412, 416, 419, 422, 426], "stop_captur": 2, "open": [2, 7, 17, 215, 219], "replai": 2, "great": 2, "overview": 2, "oper": [2, 4, 6, 8, 36, 80, 81, 82, 97, 126, 143, 144, 204, 238, 246, 253, 279, 287, 343, 401, 419, 420, 421, 422, 423, 424, 426, 427], "checkout": [2, 419], "inform": [2, 4, 5, 7, 182, 228, 229, 281, 287, 291, 299, 329, 420, 426], "skip": [2, 79], "save": [2, 4, 6, 166, 190, 206, 228, 229, 230, 231, 320, 422], "project": [2, 4, 329], "cmake": [2, 7], "mkdir": [2, 7], "cd": [2, 7], "g": [2, 7, 162, 206, 303, 388, 406, 407, 422, 427], "xcodeproj": 2, "metal_captur": 2, "exampl": [2, 3, 4, 5, 7, 17, 37, 139, 162, 163, 247, 252, 273, 276, 277, 287, 289, 290, 291, 302, 306, 307, 314, 316, 323, 326, 344, 345, 346, 347, 348, 349, 350, 351, 352, 362, 364, 371, 389, 394, 403, 408, 409, 410, 411, 412, 416, 420, 421, 422, 423, 424, 425], "schema": 2, "basic": [3, 225, 420], "model": [3, 5, 6, 230, 271, 272, 275, 276, 287, 309, 312, 314, 316, 320, 323, 325, 326, 327, 329, 343, 389, 392, 394, 402, 403, 405, 419, 422], "learn": [3, 5, 6, 291, 301, 302, 304, 330, 333, 395, 396, 397, 398, 399, 400, 401, 406, 407], "problem": [3, 5, 287], "metadata": [3, 166, 228, 229], "num_featur": [3, 291], "num_exampl": 3, "1_000": 3, "num_it": 3, "10_000": 3, "iter": [3, 5, 164, 275, 276, 416, 419, 422], "sgd": [3, 5, 394, 401, 403, 408, 409, 412, 419], "lr": [3, 401], "01": [3, 359, 399], "rate": [3, 395, 396, 397, 398, 399, 400, 401, 406, 407], "ll": [3, 5, 367, 419, 420], "synthet": 3, "dataset": [3, 422], "design": [3, 6, 416, 426], "ground": [3, 4, 364, 374], "truth": [3, 364, 374], "w_star": 3, "gaussian": [3, 299, 354, 355, 356, 365], "nois": 3, "noisi": 3, "ep": [3, 123, 124, 291, 301, 302, 304, 333, 363, 365, 375, 395, 396, 397, 398, 399, 400, 406], "loss": [3, 5, 264, 287, 394, 419, 420, 422], "loss_fn": [3, 5, 394, 419, 420], "grad_fn": [3, 419, 420], "randomli": [3, 4, 295, 296, 297], "Then": [3, 7], "repeatedli": 3, "verifi": [3, 7], "close": [3, 6, 7, 15, 150], "error_norm": 3, "5f": 3, "someth": [3, 4, 421], "00005": 3, "00364": 3, "complet": [3, 4, 7, 189, 327, 328, 420, 426], "github": [3, 5, 7, 419], "repo": [3, 5, 7, 419], "effici": [4, 6, 143, 296, 336, 422, 424], "larg": [4, 287, 329, 370, 419, 422], "ish": 4, "transform": [4, 6, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 272, 287, 291, 301, 304, 305, 313, 314, 326, 332, 336, 421], "without": [4, 6, 246, 329, 388, 418, 419, 422, 423, 426], "compromis": 4, "eas": 4, "llama": 4, "famili": 4, "200": [4, 410], "line": [4, 422, 423], "neural": [4, 6, 298, 346, 347, 376, 389, 392, 406], "network": [4, 6, 291, 296, 298, 346, 347, 389, 392, 406], "concis": 4, "architectur": [4, 7, 182, 287, 328, 426], "notabl": [4, 6], "rope": [4, 287], "posit": [4, 27, 110, 125, 139, 145, 154, 160, 194, 203, 213, 259, 264, 275, 287, 292, 293, 294, 329, 336, 340, 365, 375], "cach": [4, 7, 181, 183, 184, 188, 419], "llamaattent": 4, "self": [4, 5, 8, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 279, 287, 376, 392], "dim": [4, 125, 126, 298, 301, 302, 304, 329, 331, 333, 336, 340, 343], "num_head": [4, 329, 343], "super": [4, 5, 287, 392], "tradit": [4, 125, 296, 297, 336], "query_proj": 4, "bia": [4, 108, 123, 144, 206, 207, 275, 287, 292, 293, 294, 300, 303, 304, 305, 314, 316, 326, 329, 332, 334, 398, 399, 400, 403, 420], "key_proj": 4, "value_proj": 4, "out_proj": [4, 392], "__call__": [4, 5, 287, 392], "queri": [4, 126, 329], "l": [4, 5, 160, 287, 289, 291, 292, 300, 303, 306, 334, 374], "combin": [4, 164, 277], "key_cach": 4, "value_cach": 4, "math": [4, 375, 419], "score": [4, 126, 371], "values_hat": 4, "possibli": [4, 13, 86, 143, 176, 273], "rm": [4, 7, 124, 396], "swiglu": 4, "rmsnorm": [4, 287], "llamaencoderlay": 4, "mlp_dim": [4, 343], "norm1": 4, "norm2": 4, "linear1": 4, "linear2": 4, "linear3": 4, "instanc": [4, 37, 206, 278, 287, 302, 309, 310, 311, 314, 316, 317, 318, 323, 326, 327, 328, 338, 392, 423], "embed": [4, 271, 287, 331, 336, 340, 363], "emb": [4, 298, 331, 340], "token": [4, 298, 331], "num_lay": [4, 5, 394], "vocab_s": 4, "norm": [4, 124, 273, 301, 375, 400, 401], "multiheadattent": [4, 287], "create_additive_causal_mask": 4, "list": [4, 9, 14, 16, 29, 69, 75, 79, 80, 81, 82, 88, 91, 92, 97, 118, 128, 129, 131, 132, 134, 135, 137, 138, 142, 145, 156, 162, 175, 177, 179, 180, 192, 199, 202, 205, 209, 210, 211, 213, 214, 215, 218, 219, 228, 238, 240, 244, 245, 249, 256, 257, 260, 264, 265, 266, 269, 274, 277, 278, 287, 314, 316, 317, 318, 319, 324, 326, 327, 328, 392, 398, 399, 400, 401, 410, 418, 419, 420, 422], "still": [4, 7, 162, 419, 422], "consid": [4, 15, 78, 150, 274, 275, 276, 301, 418], "train": [4, 5, 287, 291, 295, 296, 297, 312, 314, 326, 346, 347], "process": [4, 97, 98, 275, 276, 297, 298, 343, 418], "ignor": [4, 37, 90, 91, 118, 396], "whatsoev": 4, "rest": [4, 125, 275, 276, 336], "subsect": 4, "prompt": 4, "autoregress": 4, "yield": [4, 5, 416], "temp": 4, "causal": 4, "append": [4, 176, 419, 422], "store": 4, "per": [4, 5, 108, 144, 206, 207, 271, 291, 301, 302, 304, 333, 414, 419, 422], "care": [4, 422], "logit": [4, 210, 362, 364, 419], "categor": 4, "lazili": [4, 287], "noth": [4, 287, 422], "yet": [4, 162, 287, 392, 403, 420, 421, 422, 424], "forc": [4, 5, 287, 424], "choos": [4, 125, 336], "pars": 4, "feed": 4, "back": [4, 186, 423], "loop": [4, 5, 419, 420, 422], "unsqueez": 4, "sequenc": [4, 14, 16, 32, 33, 54, 55, 56, 57, 61, 69, 72, 73, 77, 79, 88, 97, 120, 128, 129, 131, 132, 134, 135, 137, 138, 142, 175, 177, 179, 192, 199, 205, 209, 210, 211, 213, 214, 215, 218, 219, 223, 238, 240, 243, 245, 249, 256, 257, 260, 265, 269, 291, 292, 300, 303, 334, 343, 416, 426], "length": [4, 243, 291, 292, 300, 303, 334, 410], "len": [4, 129, 132, 135, 138, 410], "overwrit": 4, "discard": [4, 274], "old": 4, "moment": [4, 97, 396, 398, 399, 400], "anymor": 4, "everyth": 4, "small": [4, 121, 123, 124, 291, 301, 304, 333, 365, 370, 375, 419, 426], "12": [4, 410], "8192": 4, "1024": 4, "actual": [4, 17, 316, 392, 422], "materi": [4, 6], "could": [4, 287], "20_000": 4, "machin": [4, 6, 7, 406], "8gb": 4, "ram": 4, "32": [4, 5, 86, 206, 207, 281, 290, 307, 333, 419], "44": 4, "bracket": 4, "becaus": [4, 183, 287, 422], "batch": [4, 13, 86, 143, 144, 176, 213, 291, 292, 293, 294, 296, 297, 300, 303, 329, 334, 344, 422], "zip": [4, 5], "haven": 4, "anyth": [4, 264, 422], "result": [4, 13, 17, 37, 75, 79, 91, 123, 124, 144, 162, 176, 207, 213, 222, 244, 275, 276, 277, 340, 419, 420, 423], "veri": [4, 329, 422, 426], "similar": [4, 144, 155, 275, 327, 328, 329, 363, 423, 425], "runtim": [4, 419], "section": [4, 7, 240, 375, 419, 420], "access": [4, 48, 287, 392, 403, 422, 426], "origin": [4, 110, 273, 291, 322, 346, 347, 348, 349, 395, 396, 397, 398, 400, 401, 423], "sentencepiec": 4, "pytorch": [4, 6, 301, 420], "compat": [4, 210, 213, 425], "npz": [4, 166, 230, 231, 316, 320, 425], "file": [4, 7, 166, 227, 228, 229, 230, 231, 316, 320, 420, 425], "argpars": 4, "itertool": [4, 275], "starmap": [4, 275], "np": [4, 5, 423, 424], "torch": [4, 423], "map_torch_to_mlx": 4, "tok_embed": 4, "elif": 4, "replac": [4, 327, 328, 343, 374], "attention_norm": 4, "ffn_norm": 4, "wq": 4, "wk": 4, "wv": 4, "wo": 4, "w1": [4, 273], "w2": [4, 273], "w3": 4, "ffn": 4, "separ": [4, 63, 76, 301, 371], "submodul": [4, 5, 287, 310, 314, 315, 326, 328], "feed_forward": 4, "parser": 4, "argumentpars": 4, "add_argu": 4, "torch_weight": 4, "output_fil": 4, "parse_arg": 4, "state": [4, 5, 287, 300, 303, 334, 394, 403, 416, 419], "savez": [4, 320, 425], "v": [4, 98, 126, 287, 314, 423], "disk": 4, "text": [4, 289, 290, 299, 300, 303, 306, 307, 308, 334, 342, 346, 347, 348, 349, 355, 358, 365, 366, 367, 370, 371, 374, 376, 377, 380, 381, 385, 386, 396, 401], "format": [4, 166, 227, 228, 229, 230, 231, 423], "dictionari": [4, 91, 166, 182, 228, 229, 273, 274, 277, 287, 313, 322, 327, 328, 404, 418, 425], "represent": [4, 206, 274, 278], "tree_unflatten": 4, "helper": [4, 419], "weight_fil": 4, "incur": [4, 7], "sever": [4, 7, 95, 96, 97, 230, 231, 419, 425], "futur": [4, 332, 421, 422], "pth": 4, "current": [4, 6, 7, 79, 86, 95, 96, 97, 182, 184, 206, 277, 287, 396, 422], "around": 4, "m1": [4, 419, 420, 426], "ultra": 4, "7b": 4, "me": 4, "ishmael": 4, "year": 4, "ago": 4, "never": [4, 422], "long": 4, "info": [4, 7], "247": 4, "press": [4, 162], "enter": 4, "littl": 4, "monei": 4, "my": [4, 7], "purs": 4, "consequ": 4, "walk": 4, "down": [4, 273], "gower": 4, "street": 4, "afternoon": 4, "heavi": 4, "rain": 4, "saw": [4, 420], "off": [4, 7, 422], "man": 4, "rag": 4, "who": 4, "sat": 4, "upon": [4, 275, 276], "hi": [4, 303], "bundl": 4, "hard": 4, "wet": 4, "he": [4, 348, 349], "were": [4, 426], "cry": 4, "watch": [4, 419], "him": 4, "observ": 4, "numer": [4, 123, 124, 162, 171, 175, 238, 291, 301, 302, 304, 333, 363, 365, 375, 395, 396, 397, 398, 399, 400, 406, 419, 422], "crowd": 4, "wa": [4, 79, 422], "hurri": 4, "437": 4, "330": 4, "second": [4, 7, 110, 157, 172, 174, 176, 224, 250, 259, 264, 290, 307, 363, 371, 396, 398, 399, 400, 420, 426], "spent": 4, "amount": [4, 185, 289, 306], "39": 4, "By": [4, 271, 321, 420, 423], "bigger": [4, 396], "well": [4, 287, 314, 326, 329, 422], "remain": [4, 264, 276, 295, 296, 297], "almost": 4, "nobodi": 4, "took": 4, "least": [4, 80, 81, 82, 90, 160, 161, 163, 164, 206], "notic": [4, 420, 425], "distanc": [4, 375], "had": 4, "doubt": 4, "minut": 4, "straight": 4, "slowli": 4, "speak": [4, 162], "resum": 4, "postur": 4, "stood": 4, "feel": 4, "pain": 4, "heart": 4, "said": 4, "smile": 4, "face": 4, "am": 4, "someon": 4, "three": [4, 82, 344], "quarter": 4, "hour": 4, "made": 4, "immedi": [4, 309], "repli": 4, "again": [4, 7, 287, 419], "hand": [4, 420, 422], "did": 4, "accustom": 4, "thu": [4, 287], "question": [4, 422], "reason": [4, 421], "tell": [4, 419, 423], "understand": [4, 346, 347], "579": 4, "690": 4, "500": [4, 426], "628": 4, "went": 4, "nervou": 4, "trembl": 4, "told": 4, "why": 4, "And": [4, 344], "surpris": 4, "matter": [4, 287], "shall": 4, "anyhow": 4, "friend": 4, "ye": 4, "slight": [4, 422], "kind": 4, "want": [4, 420, 426], "longer": [4, 98, 420], "soon": 4, "unless": [4, 15, 150, 162, 392], "unlik": [4, 15, 150, 296, 297, 322], "strang": 4, "amus": 4, "That": 4, "secret": 4, "disappoint": 4, "mine": 4, "cannot": [4, 90, 421, 423], "happi": 4, "ask": 4, "shop": 4, "bui": 4, "food": 4, "633": 4, "21": [4, 412], "475": 4, "su": 4, "j": [4, 7, 162, 296, 397, 398, 400], "lu": 4, "pan": 4, "murtadha": 4, "wen": 4, "liu": 4, "2021": 4, "roform": [4, 336], "enhanc": [4, 336, 422], "rotari": [4, 125, 336], "arxiv": [4, 301, 302, 304, 308, 333, 356, 376, 395, 401], "preprint": [4, 395, 401], "2104": 4, "09864": 4, "zhang": 4, "sennrich": 4, "2019": [4, 399], "advanc": [4, 419], "system": [4, 7, 182, 183, 184], "shazeer": 4, "2020": 4, "glu": [4, 287], "variant": [4, 374, 400], "2002": 4, "05202": 4, "classifi": 5, "mnist": 5, "As": [5, 37, 252, 287, 419], "mlp": [5, 287, 343, 394], "inherit": [5, 418], "idiom": [5, 419], "input_dim": [5, 287, 305, 332], "hidden_dim": [5, 392, 394], "output_dim": [5, 287, 305, 332], "layer_s": 5, "idim": 5, "odim": 5, "cross": [5, 97, 362, 364], "entropi": [5, 362, 364], "commonli": [5, 327, 389, 419], "cross_entropi": [5, 287], "accuraci": 5, "valid": [5, 98, 139, 267, 274, 314, 326, 418], "eval_fn": 5, "load": [5, 6, 316], "loader": 5, "num_class": [5, 394], "batch_siz": [5, 394], "num_epoch": [5, 394], "learning_r": [5, 394, 395, 396, 397, 398, 399, 400, 401, 403, 406, 407, 408, 409, 410, 411, 412, 419], "train_imag": [5, 394], "train_label": [5, 394], "test_imag": 5, "test_label": 5, "re": [5, 7, 389], "shuffl": 5, "minibatch": 5, "batch_iter": [5, 394], "perm": 5, "id": [5, 7], "put": [5, 419], "trainabl": [5, 272, 287, 392], "loss_and_grad_fn": [5, 394, 419, 420], "value_and_grad": [5, 287, 327, 392, 394, 405, 419, 420, 423, 424], "epoch": 5, "test": [5, 7], "confus": 5, "decent": 5, "95": 5, "flexibl": 6, "brought": 6, "research": 6, "except": [6, 122, 133, 134, 136, 137, 138, 301, 316, 421, 423], "featur": [6, 95, 96, 97, 125, 291, 300, 301, 302, 303, 304, 305, 332, 333, 334, 336, 343, 344, 419, 422], "main": [6, 110, 122, 259, 275, 276, 287], "differ": [6, 155, 248, 374, 420], "compos": [6, 287, 419, 420, 424], "lazi": [6, 392, 424], "multi": [6, 126, 292, 293, 294, 421, 423], "cpu": [6, 7, 163, 419, 426], "inspir": 6, "jax": [6, 416], "arrayfir": 6, "unifi": 6, "live": [6, 426], "share": [6, 108, 144, 206, 207], "convers": 6, "regress": [6, 370], "layer": [6, 123, 271, 287, 289, 290, 296, 297, 300, 301, 303, 304, 305, 306, 307, 323, 328, 331, 332, 334, 338, 343, 388, 392], "perceptron": 6, "llm": 6, "infer": [6, 142, 166, 259], "fast": [6, 299, 356, 426], "fft": 6, "algebra": 6, "tree": [6, 91, 118, 145, 264, 267, 274, 275, 276, 277, 278, 402, 403, 405, 414, 420], "custom": [6, 343], "extens": [6, 166, 190, 320, 425], "debugg": 6, "pypi": 7, "own": [7, 423], "meet": 7, "seri": 7, "chip": 7, "nativ": 7, "maco": 7, "13": 7, "highli": 7, "recommend": [7, 189, 401], "14": 7, "sonoma": 7, "conda": 7, "forg": 7, "match": [7, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 183, 316, 344, 364, 421, 423], "distribut": [7, 209, 210, 211, 213, 214, 218, 219, 305, 346, 347, 348, 349, 351, 352, 365, 368, 373, 375, 389], "probabl": [7, 215, 295, 296, 297, 332, 362, 364, 368, 426], "platform": 7, "processor": 7, "arm": 7, "i386": 7, "switch": 7, "17": 7, "clang": 7, "24": 7, "xcode": 7, "15": [7, 162, 277, 419], "sdk": 7, "environ": [7, 111, 114], "via": [7, 402, 405, 422, 423], "rosetta": 7, "unam": 7, "p": [7, 209, 287, 295, 296, 297, 375, 398, 400], "clone": 7, "git": 7, "com": 7, "ml": 7, "explor": 7, "http": [7, 301, 302, 304, 308, 333, 356, 376], "wjakob": 7, "2f04eac452a6d9142dedb957701bdb20125561e4": 7, "env": 7, "cmake_build_parallel_level": 7, "edit": [7, 328], "unittest": 7, "discov": 7, "stub": 7, "generate_stub": 7, "either": [7, 12, 63, 75, 76, 83, 84, 85, 90, 112, 113, 115, 141, 146, 147, 157, 158, 159, 162, 171, 176, 178, 193, 195, 198, 204, 221, 224, 248, 264, 290, 307, 338, 344, 348, 349], "static": 7, "libmlx": 7, "preprocessor": 7, "metal_path": 7, "mlx_build_test": 7, "mlx_build_exampl": 7, "mlx_build_benchmark": 7, "mlx_build_cpu": 7, "mlx_build_python_bind": 7, "mlx_build_safetensor": 7, "mlx_build_gguf": 7, "mlx_metal_jit": 7, "wish": 7, "variabl": [7, 91, 111, 114, 145, 156, 264, 266, 267], "export": 7, "developer_dir": 7, "app": 7, "content": [7, 313, 419], "xcrun": 7, "macosx": 7, "show": [7, 281, 419], "cmake_build_typ": 7, "minsizerel": 7, "don": [7, 419, 426], "backend": 7, "safetensor": [7, 166, 229, 316, 320, 422, 425], "gguf": [7, 166, 228, 425], "dcmake_build_typ": 7, "dbuild_shared_lib": 7, "dmlx_build_cpu": 7, "dmlx_build_safetensor": 7, "dmlx_build_gguf": 7, "dmlx_metal_jit": 7, "THE": 7, "pre": [7, 126], "substanti": 7, "cold": 7, "cost": [7, 396, 422], "anwywher": 7, "hundr": 7, "millisecond": [7, 419, 426], "persist": 7, "accross": 7, "reboot": 7, "unabl": 7, "tool": 7, "sudo": 7, "ouptut": 7, "finder": 7, "iterm": 7, "termin": 7, "click": 7, "uncheck": 7, "window": [7, 289, 290, 306, 307], "restart": 7, "grep": 7, "cmake_host_system_processor": 7, "arm64": 7, "x86_64": 7, "wipe": 7, "cahc": 7, "rf": 7, "devicetyp": 8, "attribut": [8, 9, 29, 279, 322, 392, 414], "kwarg": [9, 10, 87, 230, 231, 427], "categori": [10, 281], "bool_": [10, 281], "unsignedinteg": 10, "uint8": [10, 281], "uint16": [10, 281], "uint32": [10, 25, 26, 27, 28, 210, 281], "uint64": [10, 281], "signedinteg": [10, 155], "int8": [10, 281], "int64": [10, 281], "inexact": [10, 155], "complexflo": 10, "complex128": 10, "issubdtyp": [10, 281], "semant": [12, 83, 84, 85, 88, 112, 113, 115, 146, 147, 157, 158, 159, 171, 176, 178, 193, 195, 198, 204, 221, 224, 248, 426], "reduct": [14, 16, 175, 177, 192, 205, 277, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "unspecifi": [14, 16, 17, 25, 26, 27, 28, 92, 101, 102, 103, 104, 142, 175, 177, 179, 192, 199, 203, 205, 222, 238, 239, 245, 249, 252, 258, 259, 265, 269, 427], "entir": [14, 16, 25, 26, 175, 177, 179, 192, 205, 245, 249, 265, 296, 297], "05": [15, 150, 291, 301, 302, 304, 333], "08": [15, 150, 363, 397, 398, 399, 400, 406], "approxim": [15, 299, 354, 355, 356], "comparison": [15, 115, 146, 147, 158, 159, 198], "infinit": [15, 150], "nan": [15, 78, 150, 152], "rel": [15, 150, 396, 419], "interv": [17, 165, 215, 219], "increment": 17, "otherwis": [17, 97, 189, 271, 274, 275, 276, 277, 314, 316, 326, 342, 343, 344, 362, 367, 374, 385, 386, 422, 423], "convent": [17, 98, 344, 399], "lead": [17, 79, 419], "fraction": 17, "integr": [17, 252, 422], "undefin": [27, 160, 203, 213, 421], "dimension": [29, 123, 124, 127, 128, 129, 130, 131, 132, 136, 137, 138, 289, 290, 291, 292, 293, 294, 298, 305, 306, 307, 331, 332, 340, 421, 423], "ndarrai": [29, 421, 422, 424], "properti": [30, 37, 45, 49, 59, 60, 66, 68, 322, 325, 404, 420], "argument": [30, 63, 76, 91, 118, 145, 264, 275, 276, 277, 287, 344, 416, 420, 425, 426, 427], "union": [31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 80, 81, 82, 86, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 153, 154, 182, 217, 218, 247, 259], "appli": [37, 125, 126, 143, 164, 275, 276, 277, 287, 289, 290, 291, 292, 293, 294, 296, 297, 299, 301, 302, 304, 305, 306, 307, 308, 310, 323, 330, 332, 333, 334, 335, 337, 339, 341, 342, 344, 353, 354, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 402, 405, 411, 414, 419], "regular": [37, 296, 376, 399, 419, 421], "idx": [37, 421], "correctli": 37, "syntax": [37, 421], "datatyp": 49, "byte": [49, 59, 183, 184, 185, 188, 189, 281], "indices_or_sect": [69, 240], "nest": [75, 91, 277, 287, 392, 418, 420], "alwai": [79, 183, 274, 420], "regardless": [79, 126], "storag": 79, "caution": 79, "chang": [79, 91, 233, 327, 332, 344, 367, 374, 419, 423], "invalid": 79, "crash": [79, 419], "begin": [79, 185, 206, 290, 300, 303, 307, 342, 367, 374, 380, 385, 386], "ari": [80, 81, 82], "xor": 85, "lhs_mask": 86, "lceil": 86, "rceil": 86, "rhs_mask": 86, "out_mask": 86, "edg": [90, 202, 344, 419], "At": 90, "fun": [91, 145, 156, 264, 266, 267, 419, 421, 422, 426], "callabl": [91, 145, 156, 264, 266, 267, 271, 272, 274, 275, 276, 277, 309, 310, 313, 321, 334, 338, 343, 345, 346, 347, 348, 349, 350, 351, 352, 395, 396, 397, 398, 399, 400, 401, 406, 407, 408, 409, 410, 411, 412], "dict": [91, 118, 166, 182, 228, 229, 230, 273, 319, 324, 327, 328, 392, 402, 403, 405, 418, 420, 425], "arbitrarili": [91, 287, 418, 420, 424], "leaf": [91, 271, 274, 275, 276, 277, 313], "node": [91, 118, 267, 276, 277], "recompil": [91, 419], "Not": [91, 198, 419], "attempt": 91, "elementwis": [93, 94], "alia": [93, 94], "conj": 94, "channel": [95, 96, 97, 291, 292, 293, 294, 296, 297], "c_in": [95, 96, 97], "c_out": [95, 96, 97], "convolv": [95, 96, 97], "spatial": [96, 97, 289, 301, 306, 344], "symmetr": [96, 160], "correl": [97, 296], "discret": [98, 127, 128, 129, 130, 131, 132, 136, 137, 138, 298, 331], "conv": 98, "signal": [98, 344], "th": [101, 102, 103, 104, 109, 122, 410], "angl": [107, 208], "configur": 108, "formal": [108, 206], "notat": [108, 274, 318], "w_i": [108, 206], "hat": [108, 206], "occupi": [108, 144, 206, 207], "subarrai": [110, 240], "insert": [110, 120, 426], "end": [110, 186, 206, 290, 300, 303, 307, 342, 367, 374, 380, 385, 386, 408, 411], "taken": [110, 252, 259], "global": [111, 114, 216, 273, 416, 419], "disabl": [111, 188, 419], "mlx_disable_compil": [111, 114, 419], "fuction": 113, "mathrm": [116, 234, 302], "frac": [116, 206, 234, 289, 290, 291, 295, 296, 297, 301, 302, 304, 305, 306, 307, 333, 346, 347, 348, 349, 363, 365, 367, 370, 381, 383, 395, 397, 398, 399, 400, 406], "pi": [116, 299, 340, 355, 420], "int_0": 116, "dt": 116, "minu": 121, "whose": [122, 271, 272], "translat": [123, 304], "stabil": [123, 124, 291, 301, 302, 304, 333, 363, 365, 395, 396, 397, 398, 399, 400, 406], "traditino": 125, "rotat": [125, 336], "larger": [125, 336, 401], "unchang": [125, 246, 336], "consecut": [125, 206, 336], "angular": [125, 336], "frequenc": [125, 336, 340], "q": [126, 163], "head": [126, 329, 343], "attent": [126, 314, 329, 340, 343], "typic": [126, 298, 394, 419, 422], "One": [127, 130, 136, 226, 419, 420], "fourier": [127, 128, 129, 130, 131, 132, 136, 137, 138], "truncat": [127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 218], "dft": [127, 128, 129, 130, 131, 132, 136, 137, 138], "rfft": 133, "real": [133, 134, 135, 136, 137, 138, 160], "rfft2": 134, "rfftn": 135, "silent": [136, 137, 138], "outsid": 139, "clamp": 139, "operand": 143, "explicitli": [143, 287, 416], "flat": [143, 144, 274, 278], "a1": 143, "a2": 143, "AS": 143, "b1": 143, "b2": 143, "gather_mm": 144, "pack": [144, 206, 207], "unsign": [144, 206, 207, 281], "whether": [144, 207, 300, 303, 313, 329, 334, 362, 365, 371], "argnam": [145, 264], "neither": [145, 264], "keyword": [145, 230, 231, 264, 275, 287, 416, 425, 427], "strict": [146, 158, 314, 316, 326], "ordinari": 149, "inifn": 151, "infin": [151, 153, 154, 306, 307, 400], "dtypecategori": [155, 281], "subtyp": [155, 281], "subdtyp": 155, "float64": 155, "too": [155, 419, 422], "upper": [160, 206, 215, 218, 219, 352], "decomposit": [160, 164], "semi": [160, 213], "definit": [160, 213], "behaviour": 160, "triangular": 160, "lower": [160, 206, 215, 218, 219, 261, 352], "trinagular": 160, "dot": [160, 161, 256, 274, 318, 329], "ainv": 161, "ord": 162, "tabl": [162, 281, 298], "frobeniu": 162, "matric": [162, 163, 164], "strictli": 162, "mathemat": 162, "variou": 162, "purpos": 162, "calcul": [162, 365, 371, 396], "fro": 162, "inf": [162, 329], "largest": [162, 258], "sing": 162, "smallest": 162, "singular": [162, 164], "nuclear": 162, "_f": 162, "sum_": [162, 289, 290, 370], "a_": 162, "valueerror": [162, 316, 420], "refer": [162, 302, 308, 322, 346, 347, 348, 349, 356, 376, 421], "golub": 162, "van": 162, "loan": 162, "baltimor": 162, "md": 162, "john": 162, "hopkin": 162, "univers": 162, "1985": 162, "pg": 162, "la": 162, "9": [162, 364, 395, 398, 399, 400, 401, 403, 409, 412, 423], "74597": 162, "20": 162, "84804": 162, "41421": 162, "23607": [162, 163], "74166": 162, "24264": 162, "11": 162, "225": 162, "894427": 163, "447214": 163, "57771": 163, "vt": 164, "return_metadata": 166, "binari": [166, 227, 228, 229, 230, 231, 342, 362, 386, 419], "npy": [166, 227, 425], "matadata": 166, "unsupport": 166, "tensor": [166, 256, 289, 290, 306, 307, 375, 423], "stabl": [171, 175, 238, 370], "multidimension": 180, "dens": [180, 426], "cartesian": 180, "ij": 180, "clear": 181, "get_cache_memori": 181, "max_buffer_s": 182, "max_recommended_working_set_s": 182, "memory_s": 182, "report": [183, 189], "peak": [185, 187], "program": 185, "reset_peak_memori": 185, "reset": 187, "free": 188, "reclaim": 188, "set_memory_limit": 188, "previou": [188, 189], "relax": 189, "task": [189, 370], "exceed": 189, "potenti": 189, "beforehand": 201, "pad_with": 202, "constant_valu": 202, "before_1": 202, "after_1": 202, "before_2": 202, "after_2": 202, "before_n": 202, "after_n": 202, "before_i": 202, "after_i": 202, "side": [202, 289, 290, 306, 307, 419], "everi": [206, 275, 412, 420], "particular": [206, 301], "w_1": 206, "w_g": 206, "align": [206, 290, 300, 303, 307], "max_i": 206, "min_i": 206, "textrm": [206, 299, 354, 357], "1st": 206, "signific": 206, "2nd": 206, "w_q": 206, "prng": [209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 416], "num_sampl": 210, "unnorm": [210, 362, 364], "draw": 210, "cdf": [211, 299, 354], "seed": 212, "cov": 213, "jointli": 213, "covari": [213, 291], "behavior": [213, 370, 421, 422], "empti": 213, "loc": 214, "low": [215, 219, 352, 389], "high": [215, 219, 287, 298, 352, 389], "bound": [215, 218, 219, 299, 352, 419, 421, 426], "roadcast": 215, "domain": 218, "uniformli": 219, "repetit": 222, "preserv": [223, 420], "obj": 228, "uncompress": 230, "my_path": 230, "tree_flatten": [230, 275, 278, 287], "transformerencod": 230, "128": [230, 287], "flat_param": 230, "compress": 231, "possibl": [240, 298, 331, 419, 421, 426], "divisor": [245, 265], "being": [246, 287], "prevent": [246, 375, 423], "streamcontext": 247, "context": 247, "manag": [247, 416, 426], "prior": [252, 253], "exclud": 253, "necessarili": 258, "elsewher": [261, 421], "col": 261, "triangl": 261, "mse": 264, "param": [264, 287, 389, 420], "lvalu": 264, "dlvalu": 264, "dparam": 264, "lasso": 264, "l1": [264, 367, 369, 370, 374], "in_ax": [267, 420], "out_ax": [267, 420], "prefix": [267, 274], "class_pred": 271, "predic": [271, 321], "to_quant": 271, "receiv": [271, 410, 423], "fn": [272, 275, 276, 277, 424], "wrt": 272, "max_norm": 273, "exce": 273, "proportion": 273, "clipped_grad": 273, "total_norm": 273, "rescal": 273, "is_leaf": [274, 275, 276, 277], "arbitrari": [274, 392], "depth": [274, 294, 297, 420], "hello": [274, 278], "charact": 274, "superset": [275, 402], "extra": [275, 276], "closer": 275, "decid": [275, 313], "constitut": 275, "dict_kei": [275, 403], "lambda": [275, 276, 277, 287, 309, 314, 321, 341, 380, 385, 395, 396, 397, 398, 399, 400, 401, 406, 407, 419, 420], "tree_map": [276, 287], "new_tre": 276, "accumul": [277, 333], "acc": 277, "recreat": 278, "world": 278, "42": 278, "16": [281, 289, 302, 306, 309, 392], "int16": 281, "brain": 281, "e8": 281, "m7": 281, "ieee": 281, "e5": 281, "m10": 281, "hierarchi": 281, "done": [287, 295, 333, 419, 422, 423], "manual": 287, "solv": 287, "intuit": 287, "freez": [287, 326, 392], "finetun": 287, "in_dim": [287, 392], "out_dim": [287, 392], "enumer": 287, "caus": [287, 419, 422], "local": [287, 296], "scope": 287, "l2_loss": 287, "y_hat": 287, "trainable_paramet": [287, 313, 403], "loss_and_grad": 287, "workhors": 287, "Its": 287, "recurs": [287, 313, 314, 319, 324, 326, 392], "frozen": [287, 314, 324, 326, 332, 392], "individu": [287, 296, 297], "subset": [287, 313], "action": 287, "displai": 287, "count": [287, 410], "num_param": 287, "preclud": 287, "pure": [287, 394], "pattern": [287, 422], "achiev": 287, "other_input": 287, "necessari": 287, "wrap": 287, "apply_to_modul": [287, 314], "children": 287, "filter_and_map": 287, "leaf_modul": 287, "load_weight": [287, 422], "named_modul": 287, "save_weight": 287, "set_dtyp": 287, "unfreez": [287, 314], "update_modul": 287, "alibi": 287, "avgpool1d": 287, "avgpool2d": 287, "batchnorm": 287, "dropout": [287, 296, 297, 323, 343, 419], "dropout2d": 287, "dropout3d": 287, "gelu": [287, 355, 356, 419], "groupnorm": 287, "gru": 287, "instancenorm": 287, "layernorm": 287, "lstm": 287, "maxpool1d": 287, "maxpool2d": 287, "mish": 287, "prelu": 287, "quantizedembed": 287, "quantizedlinear": 287, "relu": [287, 330, 343, 377, 389], "rnn": [287, 300], "selu": 287, "sequenti": [287, 389], "silu": 287, "sinusoidalpositionalencod": 287, "softshrink": 287, "upsampl": 287, "elu": [287, 380], "gelu_approx": [287, 299, 354], "gelu_fast_approx": [287, 299, 354], "hardswish": 287, "leaky_relu": 287, "log_sigmoid": 287, "log_softmax": 287, "relu6": 287, "softplu": [287, 308, 376], "binary_cross_entropi": [287, 419], "cosine_similarity_loss": 287, "gaussian_nll_loss": 287, "hinge_loss": 287, "huber_loss": 287, "kl_div_loss": 287, "l1_loss": 287, "log_cosh_loss": 287, "margin_ranking_loss": 287, "mse_loss": 287, "nll_loss": 287, "smooth_l1_loss": 287, "triplet_loss": 287, "init": [287, 330, 389, 394, 408, 409, 411, 412], "glorot_norm": 287, "glorot_uniform": 287, "he_norm": 287, "he_uniform": 287, "kernel_s": [289, 290, 292, 293, 294, 306, 307], "averag": [289, 290, 395, 396, 398, 399, 400], "pool": [289, 290, 306, 307, 426], "l_": [289, 306, 367], "n_i": [289, 290, 306, 307], "c_j": [289, 290, 306, 307], "ldot": [289, 290, 306, 307], "lfloor": [289, 290, 306, 307], "_size": [289, 290, 306, 307], "rfloor": [289, 290, 306, 307], "k_h": [290, 307], "k_w": [290, 307], "h_": [290, 300, 303, 307, 334], "w_": [290, 300, 303, 307, 334, 395, 396, 397, 398, 399, 400, 401, 406, 407], "height": [290, 291, 293, 294, 296, 297, 307], "width": [290, 291, 293, 294, 296, 297, 307, 331, 332], "momentum": [291, 401, 403, 407, 419], "affin": [291, 301, 302, 304, 305, 332], "track_running_stat": 291, "epsilon": [291, 301, 302, 304, 333, 363, 365, 395, 397, 398, 399, 400, 406], "gamma": [291, 301, 302, 304, 333, 346, 347, 348, 349], "nc": 291, "nlc": [291, 292], "four": 291, "nhwc": [291, 293], "paper": [291, 340, 395, 396, 397, 398, 400, 401], "deep": [291, 346, 347, 348, 349], "intern": 291, "bn": 291, "in_channel": [292, 293, 294], "out_channel": [292, 293, 294], "learnabl": [292, 293, 294, 338], "imag": [293, 294, 296, 297, 344], "ndhwc": [294, 297], "portion": 295, "independ": [296, 297], "nwhc": 296, "whc": 296, "maintain": [296, 297, 401], "benefici": [296, 297, 422], "earli": 296, "adjac": 296, "pixel": 296, "effect": [296, 419, 422], "thompson": 296, "goroshin": 296, "jain": 296, "lecun": 296, "bregler": 296, "2015": [296, 398, 400], "cvpr": 296, "dhwc": 297, "often": 297, "medic": 297, "video": 297, "num_embed": [298, 331], "lookup": 298, "usual": [298, 331, 418, 422], "vocabulari": [298, 331], "approx": 299, "unit": [299, 300, 335, 337, 339, 346, 347, 348, 349, 353, 354, 355, 356, 357, 359, 378, 379, 380, 382], "phi": [299, 354], "geluapprox": 299, "044715": [299, 355], "gelufast": 299, "sigma": [299, 300, 303, 346, 347, 348, 349, 356, 357, 360, 381, 382], "773": 299, "regard": 299, "input_s": [300, 303, 334], "hidden_s": [300, 303, 334], "gate": [300, 357], "recurr": [300, 303, 334], "nld": [300, 303, 334], "ld": [300, 303, 334], "r_t": 300, "xr": 300, "x_t": [300, 303, 334], "hr": 300, "h_t": [300, 303, 334], "b_": [300, 303], "z_t": 300, "xz": 300, "hz": 300, "n_t": 300, "xn": 300, "odot": [300, 303], "hn": 300, "hidden": [300, 303, 334, 343], "nh": [300, 303, 334], "nlh": [300, 303, 334], "lh": [300, 303, 334], "num_group": 301, "pytorch_compat": 301, "preced": 301, "org": [301, 302, 304, 308, 333, 356, 376], "1803": 301, "08494": 301, "denomin": [302, 363, 395, 397, 398, 399, 400, 406], "inorm": 302, "1607": [302, 304], "08022": 302, "i_t": 303, "xi": 303, "f_t": 303, "xf": 303, "hf": 303, "g_t": [303, 395, 397, 398, 399, 400, 401, 406, 407], "xg": 303, "hg": 303, "o_t": 303, "xo": 303, "ho": 303, "c_": [303, 401], "c_t": [303, 401], "cell": 303, "06450": 304, "realli": 304, "mathcal": 305, "d_i": 305, "max_": [306, 307], "1908": [308, 376], "08681": [308, 376], "map_fn": [309, 313], "filter_fn": [309, 313], "valid_parameter_filt": 309, "apply_fn": 310, "descend": 311, "is_leaf_fn": 313, "found": 313, "drop": 313, "idempot": [314, 326], "endswith": 314, "file_or_weight": 316, "miss": [316, 425], "ok": [316, 420], "save_safetensor": [320, 425], "reflect": [322, 419, 421, 423], "ie": 326, "noop": 326, "unfrozen": 326, "tracer": 327, "partial": [327, 328, 419, 422], "child": 328, "flexibli": 328, "programmat": 328, "query_input_dim": 329, "key_input_dim": 329, "value_input_dim": 329, "value_dim": 329, "value_output_dim": 329, "aggreg": 329, "linearli": 329, "attend": 329, "num_paramet": 330, "25": [330, 344], "parametr": [330, 377], "from_embed": 331, "classmethod": [331, 332], "from_linear": 332, "1910": 333, "07467": 333, "nonlinear": [334, 419], "elman": 334, "ih": 334, "hh": 334, "func": 334, "rectifi": [335, 348, 349, 359, 378, 379], "10000": 336, "slightli": [336, 426], "plain": 338, "known": [339, 382], "swish": [339, 382], "min_freq": 340, "0001": 340, "max_freq": 340, "cos_first": 340, "full_turn": 340, "sinusoid": 340, "lambd": [341, 385], "threshold": [342, 367, 374, 386], "geq": [342, 386], "num_encoder_lay": 343, "num_decoder_lay": 343, "nb_func": 343, "custom_encod": 343, "custom_decod": 343, "norm_first": 343, "checkpoint": 343, "decod": 343, "interact": 343, "mechan": 343, "chekpoint": 343, "usag": [343, 419], "expens": 343, "scale_factor": 344, "nearest": 344, "align_corn": 344, "audio": 344, "4d": 344, "forth": 344, "algorithm": [344, 401], "neighbor": 344, "interpol": 344, "cubic": 344, "bilinear": 344, "trilinear": 344, "bicub": 344, "corner": 344, "bottom": 344, "75": 344, "33333": 344, "66667": 344, "init_fn": [345, 346, 347, 348, 349, 350, 351, 352, 389], "glorot": [346, 347], "fan_in": [346, 347, 348, 349], "fan_out": [346, 347, 348, 349], "fan": [346, 347, 348, 349], "_in": [346, 347], "_out": [346, 347], "difficulti": [346, 347], "feedforward": [346, 347], "191107": 346, "61278": 346, "150594": 346, "363207": 346, "gain": [346, 347, 348, 349], "89613": 346, "53947": 346, "48095": 346, "995016": 346, "223404": 347, "890597": 347, "379159": 347, "776856": 347, "90041": 347, "02264": 347, "912766": 347, "12451": 347, "delv": [348, 349], "surpass": [348, 349], "human": [348, 349], "imagenet": [348, 349], "classif": [348, 349], "25211": 348, "458835": 348, "177208": 348, "0137595": 348, "6967": 348, "02765": 348, "15268": 348, "75787": 348, "kaim": 349, "0300242": 349, "0184009": 349, "793615": 349, "666329": 349, "64331": 349, "16506": 349, "08619": 349, "79854": 349, "982273": 351, "534422": 351, "380709": 351, "0645099": 351, "883935": 352, "863726": 352, "617261": 352, "417497": 352, "exact": [355, 356], "0005": 355, "015": 356, "702": 356, "cdot": [356, 363, 366, 382], "hendryck": 356, "1606": 356, "08415": 356, "halv": 357, "negative_slop": 359, "leaki": 359, "sum_i": 361, "x_i": [361, 383], "with_logit": 362, "predict": [362, 365, 366, 367, 368, 369, 370, 372, 373, 374], "105361": 362, "223144": 362, "20397": 362, "916291": 362, "539245": 362, "prob": 362, "510826": 362, "x1": 363, "x2": 363, "x_1": [363, 371], "x_2": [363, 371], "label_smooth": 364, "hot": 364, "smooth": [364, 374, 406], "0485873": 364, "348587": 364, "06": [365, 375, 395], "likelihood": [365, 373], "nll": [365, 373], "hing": 366, "y_": [366, 370], "pred": [366, 370], "delta": [367, 395], "huber": 367, "leq": [367, 380], "l2": [367, 370, 407], "kullback": 368, "leibler": 368, "diverg": 368, "logcosh": 370, "sensit": 370, "outlier": 370, "dual": 370, "offer": 370, "balanc": 370, "robust": 370, "approach": [370, 420], "inputs1": 371, "inputs2": 371, "margin": [371, 375], "rank": 371, "573409": 371, "765166": 371, "0638": 371, "75596": 371, "225763": 371, "256995": 371, "773433": 371, "formula": 374, "anchor": 375, "triplet": 375, "_p": 375, "pairwis": 375, "instabl": 375, "monoton": 376, "0507": 380, "67326": 380, "sum_j": 383, "x_j": 383, "subclass": 392, "concept": 392, "mymlp": 392, "in_proj": 392, "involv": [394, 419], "subsequ": 394, "far": 394, "apply_gradi": 394, "rmsprop": 394, "adagrad": 394, "adafactor": 394, "adadelta": 394, "adam": [394, 400, 401, 410, 411], "adamw": [394, 401], "adamax": 394, "lion": 394, "cosine_decai": [394, 410], "exponential_decai": 394, "join_schedul": 394, "linear_schedul": [394, 410], "step_decai": 394, "rho": 395, "zeiler": 395, "2012": [395, 406], "adapt": [395, 396, 397], "1212": 395, "5701": 395, "v_": [395, 397, 398, 399, 400, 406, 407], "v_t": [395, 397, 398, 399, 400, 406, 407], "u_t": 395, "u_": 395, "w_t": [395, 397, 398, 399, 400, 401, 406, 407], "30": 396, "001": 396, "clip_threshold": 396, "decay_r": [396, 409, 412], "beta_1": [396, 398, 399, 400, 401], "weight_decai": [396, 399, 401, 407], "scale_paramet": 396, "relative_step": 396, "warmup_init": 396, "sublinear": 396, "epsilon_1": 396, "epsilon_2": 396, "parameter_scal": 396, "unscal": 396, "decai": [396, 399, 401, 407, 408, 409, 412], "duchi": 397, "hazan": 397, "singer": 397, "2011": 397, "subgradi": 397, "onlin": 397, "stochast": [397, 398, 400, 407, 422], "jmlr": 397, "999": [398, 399, 400], "omit": [398, 400], "estim": [398, 400], "kingma": [398, 400], "ba": [398, 400], "iclr": [398, 399, 400], "m_": [398, 399, 400, 401], "m_t": [398, 399, 400, 401], "beta_2": [398, 399, 400, 401], "contrast": 399, "loshchilov": 399, "hutter": 399, "decoupl": 399, "99": [401, 406], "tend": 401, "10x": 401, "strength": [401, 407], "wd": 401, "chen": 401, "symbol": 401, "discoveri": 401, "2302": 401, "06675": 401, "eta": 401, "opt": 402, "tieleman": 406, "hinton": 406, "lectur": 406, "coursera": 406, "dampen": 407, "nesterov": 407, "descent": [407, 419, 422], "mu": 407, "tau": 407, "penalti": 407, "decay_step": 408, "beyond": [408, 411], "lr_schedul": [408, 409, 410, 412], "1000": [408, 419], "0999961": 408, "06561": 409, "boundari": 410, "join": 410, "transit": 410, "warmup": [410, 411], "0999938": 410, "101": 411, "step_siz": 412, "081": 412, "basi": 414, "implicit": [416, 419, 420], "fine": [416, 422], "grain": 416, "control": [416, 422], "pseudo": 416, "altern": 416, "splittabl": 416, "threefri": 416, "counter": 416, "cycl": 418, "merg": 419, "fuse": 419, "big": 419, "awar": [419, 422], "36788": 419, "compiled_fun": 419, "code": [419, 422], "slow": 419, "rerun": [419, 422], "frequent": [419, 422], "destroi": 419, "anonym": 419, "unari": 419, "overhead": [419, 422, 426], "bandwidth": 419, "fusibl": 419, "consider": 419, "versu": 419, "timeit": [419, 420], "tic": 419, "perf_count": 419, "toc": 419, "tpi": 419, "1e3": 419, "4096": [419, 420, 426], "On": [419, 420, 422], "five": 419, "latest": 419, "won": 419, "placehold": 419, "insid": 419, "disable_compil": 419, "okai": [419, 422], "deal": 419, "pretti": [419, 422], "inconveni": 419, "functool": 419, "particularli": 419, "backward": [419, 420], "compiled_grad_fn": 419, "71828": 419, "opportun": 419, "idea": [420, 422], "behind": 420, "dfdx": [420, 421], "d2fdx2": 420, "zero_grad": 420, "detach": 420, "requires_grad": 420, "dloss_dw": 420, "dloss_dx": 420, "lot": 420, "redund": 420, "continu": 420, "suppos": [420, 426], "nice": [420, 422], "propag": [420, 421], "autom": 420, "contriv": [420, 426], "sake": 420, "clariti": 420, "quit": [420, 423], "difficult": 420, "primit": 420, "issu": [420, 423], "priorit": 420, "naive_add": 420, "vmap_add": 420, "total": 420, "390": 420, "wherea": 420, "025": 420, "ten": [420, 422], "Of": 420, "cours": 420, "better": [420, 426], "handi": 420, "ellipsi": 421, "mix": 421, "lack": 421, "extrem": [421, 422], "ineffici": [421, 422], "nonzero": 421, "dynam": 422, "easier": 422, "worri": 422, "fun1": 422, "expensive_fun": 422, "consum": 422, "eager": 422, "thank": 422, "weights_fp16": 422, "trade": 422, "bad": 422, "grow": 422, "computation": 422, "costli": 422, "luckili": 422, "wide": 422, "thousand": 422, "value_and_grad_fn": 422, "implicitli": 422, "anytim": 422, "memoryview": [422, 423], "perfectli": 422, "first_lay": 422, "second_layer_a": 422, "second_layer_b": 422, "protocol": 423, "pep": 423, "3118": 423, "a_view": 423, "owndata": 423, "extern": 423, "demonstr": 423, "x_view": 423, "modifi": 423, "df": 423, "x\u00b2": 423, "2x": 423, "indirectli": 423, "modif": 423, "seen": 423, "occur": 423, "incorpor": 423, "aris": 423, "incorrect": 423, "experiment": 423, "break": 423, "advis": 423, "intermedi": 423, "jnp": 423, "tf": 423, "page": 424, "composit": 424, "archiv": 425, "savez_compress": 425, "save_gguf": 425, "arr_0": 425, "advantag": 426, "parallel": 426, "race": 426, "interest": 426, "albeit": 426, "d1": 426, "d2": 426, "But": 426, "twice": 426, "measur": 426, "default_stream": 427, "default_devic": 427, "my_devic": 427}, "objects": {"": [[0, 0, 1, "_CPPv43absRK5array14StreamOrDevice", "abs"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::a"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::s"], [0, 0, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::a"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::b"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::s"], [0, 0, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::a"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::alpha"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::b"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::beta"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::c"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::s"], [0, 0, 1, "_CPPv43allRK5array14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::axes"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::axis"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::s"], [0, 0, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::a"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::atol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::b"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::equal_nan"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::rtol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::s"], [0, 0, 1, "_CPPv43anyRK5array14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::axes"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::axis"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::s"], [0, 0, 1, "_CPPv46aranged14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangei14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeii14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeiii14StreamOrDevice", "arange"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::stop"], [0, 0, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::a"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::s"], [0, 0, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::a"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::s"], [0, 0, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::a"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::s"], [0, 0, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::a"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::s"], [0, 0, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan"], [0, 0, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::a"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::b"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::s"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::a"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::s"], [0, 0, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::a"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::s"], [0, 0, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::axis"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::s"], [0, 0, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::axis"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::s"], [0, 0, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition"], [0, 0, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::axis"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::s"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::s"], [0, 0, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort"], [0, 0, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::axis"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::s"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::s"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::equal_nan"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::s"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::s"], [0, 0, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::a"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::offset"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::s"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::shape"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::strides"], [0, 0, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::a"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::dtype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::s"], [0, 0, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d"], [0, 0, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::s"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::s"], [0, 0, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d"], [0, 0, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::s"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::s"], [0, 0, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d"], [0, 0, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::s"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::s"], [0, 0, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::a"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::b"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::s"], [0, 0, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::a"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::b"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::s"], [0, 0, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::a"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::b"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::s"], [0, 0, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::a"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::b"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::block_size"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_lhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_out"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_rhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::s"], [0, 0, 1, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_sparse_mm"], [0, 1, 1, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_sparse_mm::a"], [0, 1, 1, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_sparse_mm::b"], [0, 1, 1, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_sparse_mm::lhs_indices"], [0, 1, 1, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_sparse_mm::rhs_indices"], [0, 1, 1, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_sparse_mm::s"], [0, 0, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::biases"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::bits"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::group_size"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::lhs_indices"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::rhs_indices"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::s"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::scales"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::transpose"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::w"], [0, 1, 1, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "block_sparse_qmm::x"], [0, 0, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::inputs"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::s"], [0, 0, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::a"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::s"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::shape"], [0, 0, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::a"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::s"], [0, 0, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_max"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_min"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::s"], [0, 0, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate"], [0, 0, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::axis"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::s"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::s"], [0, 0, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::a"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::s"], [0, 0, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::dilation"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::groups"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::input"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::padding"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::s"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::stride"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::weight"], [0, 0, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::dilation"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::groups"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::input"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::padding"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::s"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::stride"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::weight"], [0, 0, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::dilation"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::groups"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::input"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::padding"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::s"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::stride"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::weight"], [0, 0, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 0, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_hi"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_lo"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 0, 1, "_CPPv44copy5array14StreamOrDevice", "copy"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::a"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::s"], [0, 0, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::a"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::s"], [0, 0, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::a"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::s"], [0, 0, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::a"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::axis"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::inclusive"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::reverse"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::s"], [0, 0, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::a"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::axis"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::inclusive"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::reverse"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::s"], [0, 0, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::a"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::axis"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::inclusive"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::reverse"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::s"], [0, 0, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::a"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::axis"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::inclusive"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::reverse"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::s"], [0, 0, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::a"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::s"], [0, 0, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::dependencies"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::inputs"], [0, 0, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::biases"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::bits"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::group_size"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::s"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::scales"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::w"], [0, 0, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::a"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::k"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::s"], [0, 0, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::a"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis1"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis2"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::offset"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::s"], [0, 0, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::a"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::b"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::s"], [0, 0, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::a"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::b"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::s"], [0, 0, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::a"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::b"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::s"], [0, 0, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::a"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::s"], [0, 0, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::a"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::s"], [0, 0, 1, "_CPPv43expRK5array14StreamOrDevice", "exp"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::a"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::s"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::axes"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::axis"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::s"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::s"], [0, 0, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::a"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::s"], [0, 0, 1, "_CPPv43eyei14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::s"], [0, 0, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten"], [0, 0, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::end_axis"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::start_axis"], [0, 0, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::a"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::s"], [0, 0, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::a"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::b"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::s"], [0, 0, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full"], [0, 0, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full"], [0, 2, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::T"], [0, 2, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::T"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::vals"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::vals"], [0, 0, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather"], [0, 0, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::axes"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::axis"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::slice_sizes"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::slice_sizes"], [0, 0, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::a"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::b"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::s"], [0, 0, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::a"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::b"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::s"], [0, 0, 1, "_CPPv48identityi14StreamOrDevice", "identity"], [0, 0, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::dtype"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::s"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::s"], [0, 0, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::a"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::b"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::s"], [0, 0, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::a"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::atol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::b"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::equal_nan"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::rtol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::s"], [0, 0, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::a"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::s"], [0, 0, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::a"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::s"], [0, 0, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::a"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::s"], [0, 0, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::a"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::s"], [0, 0, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::a"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::b"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::s"], [0, 0, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::a"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::b"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::s"], [0, 0, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::a"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::b"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::s"], [0, 0, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::dtype"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::num"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::s"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::start"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::stop"], [0, 0, 1, "_CPPv43logRK5array14StreamOrDevice", "log"], [0, 0, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::a"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::s"], [0, 0, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::a"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::s"], [0, 0, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::a"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::s"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::a"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::s"], [0, 0, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::a"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::b"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::s"], [0, 0, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::a"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::b"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::s"], [0, 0, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::a"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::s"], [0, 0, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::a"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::b"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::s"], [0, 0, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::axes"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::axis"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::s"], [0, 0, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::a"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::b"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::s"], [0, 0, 1, "_CPPv43maxRK5array14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::axes"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::axis"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::s"], [0, 0, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::a"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::b"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::s"], [0, 0, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::axes"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::axis"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::s"], [0, 0, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::arrays"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::indexing"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::s"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::sparse"], [0, 0, 1, "_CPPv43minRK5array14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::axes"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::axis"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::s"], [0, 0, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::a"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::b"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::s"], [0, 0, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::a"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::destination"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::s"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::source"], [0, 0, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::a"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::b"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::s"], [0, 0, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::a"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::s"], [0, 0, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::a"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::b"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::s"], [0, 0, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::a"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::axes"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::dtype"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::inverted"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::s"], [0, 0, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones"], [0, 0, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::dtype"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones::shape"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::shape"], [0, 0, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::a"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::s"], [0, 0, 1, "_CPPv4I0Ene5array1TRK5array", "operator!="], [0, 0, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!="], [0, 0, 1, "_CPPv4neRK5arrayRK5array", "operator!="], [0, 2, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::T"], [0, 2, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::T"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::a"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::b"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::b"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::b"], [0, 0, 1, "_CPPv4I0Erm5array1TRK5array", "operator%"], [0, 0, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%"], [0, 0, 1, "_CPPv4rmRK5arrayRK5array", "operator%"], [0, 2, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::T"], [0, 2, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::T"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::a"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::b"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::b"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::b"], [0, 0, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;"], [0, 0, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::a"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::b"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::a"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::b"], [0, 0, 1, "_CPPv4I0Eml5array1TRK5array", "operator*"], [0, 0, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*"], [0, 0, 1, "_CPPv4mlRK5arrayRK5array", "operator*"], [0, 2, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::T"], [0, 2, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::T"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::a"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::b"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::b"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::b"], [0, 0, 1, "_CPPv4I0Epl5array1TRK5array", "operator+"], [0, 0, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+"], [0, 0, 1, "_CPPv4plRK5arrayRK5array", "operator+"], [0, 2, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::T"], [0, 2, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::T"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::a"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::b"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::b"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::b"], [0, 0, 1, "_CPPv4I0Emi5array1TRK5array", "operator-"], [0, 0, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-"], [0, 0, 1, "_CPPv4miRK5array", "operator-"], [0, 0, 1, "_CPPv4miRK5arrayRK5array", "operator-"], [0, 2, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::T"], [0, 2, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::T"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::a"], [0, 1, 1, "_CPPv4miRK5array", "operator-::a"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::b"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::b"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::b"], [0, 0, 1, "_CPPv4dvRK5arrayRK5array", "operator/"], [0, 0, 1, "_CPPv4dvRK5arrayd", "operator/"], [0, 0, 1, "_CPPv4dvdRK5array", "operator/"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::a"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::b"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::b"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::b"], [0, 0, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;"], [0, 0, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;"], [0, 0, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;"], [0, 2, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::T"], [0, 2, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::T"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::a"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::b"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::b"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::b"], [0, 0, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::a"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::b"], [0, 0, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;="], [0, 0, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;="], [0, 0, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;="], [0, 2, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::T"], [0, 2, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::T"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::a"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::b"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::b"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::b"], [0, 0, 1, "_CPPv4I0Eeq5array1TRK5array", "operator=="], [0, 0, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator=="], [0, 0, 1, "_CPPv4eqRK5arrayRK5array", "operator=="], [0, 2, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::T"], [0, 2, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::T"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::a"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::b"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::b"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::b"], [0, 0, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;"], [0, 0, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;"], [0, 0, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;"], [0, 2, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::T"], [0, 2, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::T"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::a"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::b"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::b"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::b"], [0, 0, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;="], [0, 0, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;="], [0, 0, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;="], [0, 2, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::T"], [0, 2, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::T"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::a"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::b"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::b"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::b"], [0, 0, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::a"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::b"], [0, 0, 1, "_CPPv4eoRK5arrayRK5array", "operator^"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::a"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::b"], [0, 0, 1, "_CPPv4orRK5arrayRK5array", "operator|"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::a"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::b"], [0, 0, 1, "_CPPv4ooRK5arrayRK5array", "operator||"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::a"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::b"], [0, 0, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::a"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::b"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::s"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::axes"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::high_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::low_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::s"], [0, 0, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition"], [0, 0, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::axis"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::s"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::s"], [0, 0, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::a"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::b"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::s"], [0, 0, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::axes"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::axis"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::s"], [0, 0, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::bits"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::group_size"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::s"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::w"], [0, 0, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::biases"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::bits"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::group_size"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::s"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::scales"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::transpose"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::w"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::x"], [0, 0, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::a"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::s"], [0, 0, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::a"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::s"], [0, 0, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::a"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::b"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::s"], [0, 0, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat"], [0, 0, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::axis"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::s"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::s"], [0, 0, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::a"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::s"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::shape"], [0, 0, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::a"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::b"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::s"], [0, 0, 1, "_CPPv45roundRK5array14StreamOrDevice", "round"], [0, 0, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::decimals"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::s"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::s"], [0, 0, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::a"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::s"], [0, 0, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter"], [0, 0, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::axes"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::axis"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::updates"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::updates"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::axes"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::axis"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::updates"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::updates"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::axes"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::axis"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::updates"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::updates"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::axes"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::axis"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::updates"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::updates"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::axes"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::axis"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::updates"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::updates"], [0, 0, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::a"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::s"], [0, 0, 1, "_CPPv44signRK5array14StreamOrDevice", "sign"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::a"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::s"], [0, 0, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::a"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::s"], [0, 0, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::a"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::s"], [0, 0, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::strides"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::strides"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 0, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::axes"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::axis"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::s"], [0, 0, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort"], [0, 0, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::axis"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::s"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::s"], [0, 0, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::s"], [0, 0, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::a"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::s"], [0, 0, 1, "_CPPv46squareRK5array14StreamOrDevice", "square"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::a"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::s"], [0, 0, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::axes"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::axis"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::s"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::axis"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::s"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::s"], [0, 0, 1, "_CPPv4StRK5array14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::axes"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::axis"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::s"], [0, 0, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::a"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::s"], [0, 0, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::a"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::b"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::s"], [0, 0, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::axes"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::axis"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::s"], [0, 0, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::a"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis1"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis2"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::s"], [0, 0, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::s"], [0, 0, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::a"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::indices"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::s"], [0, 0, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::a"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::s"], [0, 0, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::a"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::s"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::axis"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::s"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::s"], [0, 0, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::arr"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::reps"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::s"], [0, 0, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk"], [0, 0, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::axis"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::s"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::s"], [0, 0, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::s"], [0, 0, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri"], [0, 0, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::k"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::m"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::type"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::type"], [0, 0, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::k"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::s"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::x"], [0, 0, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::k"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::s"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::x"], [0, 0, 1, "_CPPv43varRK5array14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::axes"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::axis"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::s"], [0, 0, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::condition"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::s"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::x"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::y"], [0, 0, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros"], [0, 0, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::dtype"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros::shape"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::shape"], [0, 0, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::a"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::s"]], "mlx.core": [[8, 3, 1, "", "Device"], [9, 3, 1, "", "Dtype"], [10, 3, 1, "", "DtypeCategory"], [279, 3, 1, "", "Stream"], [11, 5, 1, "", "abs"], [12, 5, 1, "", "add"], [13, 5, 1, "", "addmm"], [14, 5, 1, "", "all"], [15, 5, 1, "", "allclose"], [16, 5, 1, "", "any"], [17, 5, 1, "", "arange"], [18, 5, 1, "", "arccos"], [19, 5, 1, "", "arccosh"], [20, 5, 1, "", "arcsin"], [21, 5, 1, "", "arcsinh"], [22, 5, 1, "", "arctan"], [23, 5, 1, "", "arctan2"], [24, 5, 1, "", "arctanh"], [25, 5, 1, "", "argmax"], [26, 5, 1, "", "argmin"], [27, 5, 1, "", "argpartition"], [28, 5, 1, "", "argsort"], [29, 3, 1, "", "array"], [78, 5, 1, "", "array_equal"], [79, 5, 1, "", "as_strided"], [80, 5, 1, "", "atleast_1d"], [81, 5, 1, "", "atleast_2d"], [82, 5, 1, "", "atleast_3d"], [83, 5, 1, "", "bitwise_and"], [84, 5, 1, "", "bitwise_or"], [85, 5, 1, "", "bitwise_xor"], [86, 5, 1, "", "block_masked_mm"], [87, 5, 1, "", "block_sparse_mm"], [88, 5, 1, "", "broadcast_to"], [89, 5, 1, "", "ceil"], [90, 5, 1, "", "clip"], [91, 5, 1, "", "compile"], [92, 5, 1, "", "concatenate"], [93, 5, 1, "", "conj"], [94, 5, 1, "", "conjugate"], [95, 5, 1, "", "conv1d"], [96, 5, 1, "", "conv2d"], [97, 5, 1, "", "conv_general"], [98, 5, 1, "", "convolve"], [99, 5, 1, "", "cos"], [100, 5, 1, "", "cosh"], [101, 5, 1, "", "cummax"], [102, 5, 1, "", "cummin"], [103, 5, 1, "", "cumprod"], [104, 5, 1, "", "cumsum"], [105, 5, 1, "", "default_device"], [106, 5, 1, "", "default_stream"], [107, 5, 1, "", "degrees"], [108, 5, 1, "", "dequantize"], [109, 5, 1, "", "diag"], [110, 5, 1, "", "diagonal"], [111, 5, 1, "", "disable_compile"], [112, 5, 1, "", "divide"], [113, 5, 1, "", "divmod"], [114, 5, 1, "", "enable_compile"], [115, 5, 1, "", "equal"], [116, 5, 1, "", "erf"], [117, 5, 1, "", "erfinv"], [118, 5, 1, "", "eval"], [119, 5, 1, "", "exp"], [120, 5, 1, "", "expand_dims"], [121, 5, 1, "", "expm1"], [122, 5, 1, "", "eye"], [139, 5, 1, "", "flatten"], [140, 5, 1, "", "floor"], [141, 5, 1, "", "floor_divide"], [142, 5, 1, "", "full"], [143, 5, 1, "", "gather_mm"], [144, 5, 1, "", "gather_qmm"], [145, 5, 1, "", "grad"], [146, 5, 1, "", "greater"], [147, 5, 1, "", "greater_equal"], [148, 5, 1, "", "identity"], [149, 5, 1, "", "inner"], [150, 5, 1, "", "isclose"], [151, 5, 1, "", "isinf"], [152, 5, 1, "", "isnan"], [153, 5, 1, "", "isneginf"], [154, 5, 1, "", "isposinf"], [155, 5, 1, "", "issubdtype"], [156, 5, 1, "", "jvp"], [157, 5, 1, "", "left_shift"], [158, 5, 1, "", "less"], [159, 5, 1, "", "less_equal"], [165, 5, 1, "", "linspace"], [166, 5, 1, "", "load"], [167, 5, 1, "", "log"], [168, 5, 1, "", "log10"], [169, 5, 1, "", "log1p"], [170, 5, 1, "", "log2"], [171, 5, 1, "", "logaddexp"], [172, 5, 1, "", "logical_and"], [173, 5, 1, "", "logical_not"], [174, 5, 1, "", "logical_or"], [175, 5, 1, "", "logsumexp"], [176, 5, 1, "", "matmul"], [177, 5, 1, "", "max"], [178, 5, 1, "", "maximum"], [179, 5, 1, "", "mean"], [180, 5, 1, "", "meshgrid"], [192, 5, 1, "", "min"], [193, 5, 1, "", "minimum"], [194, 5, 1, "", "moveaxis"], [195, 5, 1, "", "multiply"], [196, 5, 1, "", "negative"], [197, 5, 1, "", "new_stream"], [198, 5, 1, "", "not_equal"], [199, 5, 1, "", "ones"], [200, 5, 1, "", "ones_like"], [201, 5, 1, "", "outer"], [202, 5, 1, "", "pad"], [203, 5, 1, "", "partition"], [204, 5, 1, "", "power"], [205, 5, 1, "", "prod"], [206, 5, 1, "", "quantize"], [207, 5, 1, "", "quantized_matmul"], [208, 5, 1, "", "radians"], [220, 5, 1, "", "reciprocal"], [221, 5, 1, "", "remainder"], [222, 5, 1, "", "repeat"], [223, 5, 1, "", "reshape"], [224, 5, 1, "", "right_shift"], [225, 5, 1, "", "round"], [226, 5, 1, "", "rsqrt"], [227, 5, 1, "", "save"], [228, 5, 1, "", "save_gguf"], [229, 5, 1, "", "save_safetensors"], [230, 5, 1, "", "savez"], [231, 5, 1, "", "savez_compressed"], [232, 5, 1, "", "set_default_device"], [233, 5, 1, "", "set_default_stream"], [234, 5, 1, "", "sigmoid"], [235, 5, 1, "", "sign"], [236, 5, 1, "", "sin"], [237, 5, 1, "", "sinh"], [238, 5, 1, "", "softmax"], [239, 5, 1, "", "sort"], [240, 5, 1, "", "split"], [241, 5, 1, "", "sqrt"], [242, 5, 1, "", "square"], [243, 5, 1, "", "squeeze"], [244, 5, 1, "", "stack"], [245, 5, 1, "", "std"], [246, 5, 1, "", "stop_gradient"], [247, 5, 1, "", "stream"], [248, 5, 1, "", "subtract"], [249, 5, 1, "", "sum"], [250, 5, 1, "", "swapaxes"], [251, 5, 1, "", "synchronize"], [252, 5, 1, "", "take"], [253, 5, 1, "", "take_along_axis"], [254, 5, 1, "", "tan"], [255, 5, 1, "", "tanh"], [256, 5, 1, "", "tensordot"], [257, 5, 1, "", "tile"], [258, 5, 1, "", "topk"], [259, 5, 1, "", "trace"], [260, 5, 1, "", "transpose"], [261, 5, 1, "", "tri"], [262, 5, 1, "", "tril"], [263, 5, 1, "", "triu"], [264, 5, 1, "", "value_and_grad"], [265, 5, 1, "", "var"], [266, 5, 1, "", "vjp"], [267, 5, 1, "", "vmap"], [268, 5, 1, "", "where"], [269, 5, 1, "", "zeros"], [270, 5, 1, "", "zeros_like"]], "mlx.core.Device": [[8, 4, 1, "", "__init__"]], "mlx.core.Dtype": [[9, 4, 1, "", "__init__"]], "mlx.core.DtypeCategory": [[10, 4, 1, "", "__init__"]], "mlx.core.Stream": [[279, 4, 1, "", "__init__"]], "mlx.core.array": [[30, 6, 1, "", "T"], [29, 4, 1, "", "__init__"], [31, 4, 1, "", "abs"], [32, 4, 1, "", "all"], [33, 4, 1, "", "any"], [34, 4, 1, "", "argmax"], [35, 4, 1, "", "argmin"], [36, 4, 1, "", "astype"], [37, 6, 1, "", "at"], [38, 4, 1, "", "cos"], [39, 4, 1, "", "cummax"], [40, 4, 1, "", "cummin"], [41, 4, 1, "", "cumprod"], [42, 4, 1, "", "cumsum"], [43, 4, 1, "", "diag"], [44, 4, 1, "", "diagonal"], [45, 6, 1, "", "dtype"], [46, 4, 1, "", "exp"], [47, 4, 1, "", "flatten"], [48, 4, 1, "", "item"], [49, 6, 1, "", "itemsize"], [50, 4, 1, "", "log"], [51, 4, 1, "", "log10"], [52, 4, 1, "", "log1p"], [53, 4, 1, "", "log2"], [54, 4, 1, "", "logsumexp"], [55, 4, 1, "", "max"], [56, 4, 1, "", "mean"], [57, 4, 1, "", "min"], [58, 4, 1, "", "moveaxis"], [59, 6, 1, "", "nbytes"], [60, 6, 1, "", "ndim"], [61, 4, 1, "", "prod"], [62, 4, 1, "", "reciprocal"], [63, 4, 1, "", "reshape"], [64, 4, 1, "", "round"], [65, 4, 1, "", "rsqrt"], [66, 6, 1, "", "shape"], [67, 4, 1, "", "sin"], [68, 6, 1, "", "size"], [69, 4, 1, "", "split"], [70, 4, 1, "", "sqrt"], [71, 4, 1, "", "square"], [72, 4, 1, "", "squeeze"], [73, 4, 1, "", "sum"], [74, 4, 1, "", "swapaxes"], [75, 4, 1, "", "tolist"], [76, 4, 1, "", "transpose"], [77, 4, 1, "", "var"]], "mlx.core.fast": [[123, 5, 1, "", "layer_norm"], [124, 5, 1, "", "rms_norm"], [125, 5, 1, "", "rope"], [126, 5, 1, "", "scaled_dot_product_attention"]], "mlx.core.fft": [[127, 5, 1, "", "fft"], [128, 5, 1, "", "fft2"], [129, 5, 1, "", "fftn"], [130, 5, 1, "", "ifft"], [131, 5, 1, "", "ifft2"], [132, 5, 1, "", "ifftn"], [133, 5, 1, "", "irfft"], [134, 5, 1, "", "irfft2"], [135, 5, 1, "", "irfftn"], [136, 5, 1, "", "rfft"], [137, 5, 1, "", "rfft2"], [138, 5, 1, "", "rfftn"]], "mlx.core.linalg": [[160, 5, 1, "", "cholesky"], [161, 5, 1, "", "inv"], [162, 5, 1, "", "norm"], [163, 5, 1, "", "qr"], [164, 5, 1, "", "svd"]], "mlx.core.metal": [[181, 5, 1, "", "clear_cache"], [182, 5, 1, "", "device_info"], [183, 5, 1, "", "get_active_memory"], [184, 5, 1, "", "get_cache_memory"], [185, 5, 1, "", "get_peak_memory"], [186, 5, 1, "", "is_available"], [187, 5, 1, "", "reset_peak_memory"], [188, 5, 1, "", "set_cache_limit"], [189, 5, 1, "", "set_memory_limit"], [190, 5, 1, "", "start_capture"], [191, 5, 1, "", "stop_capture"]], "mlx.core.random": [[209, 5, 1, "", "bernoulli"], [210, 5, 1, "", "categorical"], [211, 5, 1, "", "gumbel"], [212, 5, 1, "", "key"], [213, 5, 1, "", "multivariate_normal"], [214, 5, 1, "", "normal"], [215, 5, 1, "", "randint"], [216, 5, 1, "", "seed"], [217, 5, 1, "", "split"], [218, 5, 1, "", "truncated_normal"], [219, 5, 1, "", "uniform"]], "mlx.nn": [[288, 3, 1, "", "ALiBi"], [289, 3, 1, "", "AvgPool1d"], [290, 3, 1, "", "AvgPool2d"], [291, 3, 1, "", "BatchNorm"], [292, 3, 1, "", "Conv1d"], [293, 3, 1, "", "Conv2d"], [294, 3, 1, "", "Conv3d"], [295, 3, 1, "", "Dropout"], [296, 3, 1, "", "Dropout2d"], [297, 3, 1, "", "Dropout3d"], [298, 3, 1, "", "Embedding"], [299, 3, 1, "", "GELU"], [300, 3, 1, "", "GRU"], [301, 3, 1, "", "GroupNorm"], [302, 3, 1, "", "InstanceNorm"], [303, 3, 1, "", "LSTM"], [304, 3, 1, "", "LayerNorm"], [305, 3, 1, "", "Linear"], [306, 3, 1, "", "MaxPool1d"], [307, 3, 1, "", "MaxPool2d"], [308, 3, 1, "", "Mish"], [392, 3, 1, "", "Module"], [329, 3, 1, "", "MultiHeadAttention"], [330, 3, 1, "", "PReLU"], [331, 3, 1, "", "QuantizedEmbedding"], [332, 3, 1, "", "QuantizedLinear"], [333, 3, 1, "", "RMSNorm"], [334, 3, 1, "", "RNN"], [335, 3, 1, "", "ReLU"], [336, 3, 1, "", "RoPE"], [337, 3, 1, "", "SELU"], [338, 3, 1, "", "Sequential"], [339, 3, 1, "", "SiLU"], [340, 3, 1, "", "SinusoidalPositionalEncoding"], [341, 3, 1, "", "Softshrink"], [342, 3, 1, "", "Step"], [343, 3, 1, "", "Transformer"], [344, 3, 1, "", "Upsample"], [353, 3, 1, "", "elu"], [354, 3, 1, "", "gelu"], [355, 3, 1, "", "gelu_approx"], [356, 3, 1, "", "gelu_fast_approx"], [357, 3, 1, "", "glu"], [358, 3, 1, "", "hardswish"], [359, 3, 1, "", "leaky_relu"], [360, 3, 1, "", "log_sigmoid"], [361, 3, 1, "", "log_softmax"], [376, 3, 1, "", "mish"], [377, 3, 1, "", "prelu"], [271, 5, 1, "", "quantize"], [378, 3, 1, "", "relu"], [379, 3, 1, "", "relu6"], [380, 3, 1, "", "selu"], [381, 3, 1, "", "sigmoid"], [382, 3, 1, "", "silu"], [383, 3, 1, "", "softmax"], [384, 3, 1, "", "softplus"], [385, 3, 1, "", "softshrink"], [386, 3, 1, "", "step"], [387, 3, 1, "", "tanh"], [272, 5, 1, "", "value_and_grad"]], "mlx.nn.Module": [[309, 4, 1, "", "apply"], [310, 4, 1, "", "apply_to_modules"], [311, 4, 1, "", "children"], [312, 4, 1, "", "eval"], [313, 4, 1, "", "filter_and_map"], [314, 4, 1, "", "freeze"], [315, 4, 1, "", "leaf_modules"], [316, 4, 1, "", "load_weights"], [317, 4, 1, "", "modules"], [318, 4, 1, "", "named_modules"], [319, 4, 1, "", "parameters"], [320, 4, 1, "", "save_weights"], [321, 4, 1, "", "set_dtype"], [322, 6, 1, "", "state"], [323, 4, 1, "", "train"], [324, 4, 1, "", "trainable_parameters"], [325, 6, 1, "", "training"], [326, 4, 1, "", "unfreeze"], [327, 4, 1, "", "update"], [328, 4, 1, "", "update_modules"]], "mlx.nn.init": [[345, 5, 1, "", "constant"], [346, 5, 1, "", "glorot_normal"], [347, 5, 1, "", "glorot_uniform"], [348, 5, 1, "", "he_normal"], [349, 5, 1, "", "he_uniform"], [350, 5, 1, "", "identity"], [351, 5, 1, "", "normal"], [352, 5, 1, "", "uniform"]], "mlx.nn.losses": [[362, 3, 1, "", "binary_cross_entropy"], [363, 3, 1, "", "cosine_similarity_loss"], [364, 3, 1, "", "cross_entropy"], [365, 3, 1, "", "gaussian_nll_loss"], [366, 3, 1, "", "hinge_loss"], [367, 3, 1, "", "huber_loss"], [368, 3, 1, "", "kl_div_loss"], [369, 3, 1, "", "l1_loss"], [370, 3, 1, "", "log_cosh_loss"], [371, 3, 1, "", "margin_ranking_loss"], [372, 3, 1, "", "mse_loss"], [373, 3, 1, "", "nll_loss"], [374, 3, 1, "", "smooth_l1_loss"], [375, 3, 1, "", "triplet_loss"]], "mlx.optimizers": [[395, 3, 1, "", "AdaDelta"], [396, 3, 1, "", "Adafactor"], [397, 3, 1, "", "Adagrad"], [398, 3, 1, "", "Adam"], [399, 3, 1, "", "AdamW"], [400, 3, 1, "", "Adamax"], [401, 3, 1, "", "Lion"], [414, 3, 1, "", "Optimizer"], [406, 3, 1, "", "RMSprop"], [407, 3, 1, "", "SGD"], [273, 5, 1, "", "clip_grad_norm"], [408, 5, 1, "", "cosine_decay"], [409, 5, 1, "", "exponential_decay"], [410, 5, 1, "", "join_schedules"], [411, 5, 1, "", "linear_schedule"], [412, 5, 1, "", "step_decay"]], "mlx.optimizers.Optimizer": [[402, 4, 1, "", "apply_gradients"], [403, 4, 1, "", "init"], [404, 6, 1, "", "state"], [405, 4, 1, "", "update"]], "mlx.utils": [[274, 5, 1, "", "tree_flatten"], [275, 5, 1, "", "tree_map"], [276, 5, 1, "", "tree_map_with_path"], [277, 5, 1, "", "tree_reduce"], [278, 5, 1, "", "tree_unflatten"]]}, "objtypes": {"0": "cpp:function", "1": "cpp:functionParam", "2": "cpp:templateParam", "3": "py:class", "4": "py:method", "5": "py:function", "6": "py:property"}, "objnames": {"0": ["cpp", "function", "C++ function"], "1": ["cpp", "functionParam", "C++ function parameter"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "titleterms": {"oper": [0, 1, 393], "custom": 1, "extens": 1, "mlx": [1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "introduc": 1, "exampl": [1, 6, 419, 426], "primit": 1, "us": [1, 422, 427], "implement": [1, 4], "cpu": 1, "back": 1, "end": 1, "gpu": 1, "transform": [1, 343, 417, 419, 420, 422, 424], "build": [1, 7], "bind": 1, "python": [1, 6, 7], "cmake": 1, "setuptool": 1, "usag": [1, 6], "result": 1, "script": [1, 4], "download": [1, 4], "code": [1, 4], "metal": [2, 7, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 286], "debugg": 2, "xcode": 2, "workflow": 2, "linear": [3, 285, 305], "regress": 3, "llm": 4, "infer": 4, "model": 4, "attent": 4, "layer": [4, 5, 390], "encod": 4, "full": [4, 142], "gener": 4, "put": 4, "all": [4, 14, 32], "togeth": 4, "convert": 4, "weight": 4, "load": [4, 166, 425], "benchmark": 4, "multi": 5, "perceptron": 5, "instal": [6, 7], "api": [6, 7], "refer": 6, "c": [6, 7], "further": 6, "read": 6, "troubleshoot": 7, "from": [7, 421], "sourc": 7, "requir": 7, "option": 7, "binari": 7, "size": [7, 68], "minim": 7, "found": 7, "x86": 7, "shell": 7, "core": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 279], "devic": [8, 282], "dtype": [9, 45], "dtypecategori": 10, "ab": [11, 31], "add": 12, "addmm": 13, "allclos": 15, "ani": [16, 33], "arang": 17, "arcco": 18, "arccosh": 19, "arcsin": 20, "arcsinh": 21, "arctan": 22, "arctan2": 23, "arctanh": 24, "argmax": [25, 34], "argmin": [26, 35], "argpartit": 27, "argsort": 28, "arrai": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 280, 421, 425], "t": 30, "astyp": 36, "co": [38, 99], "cummax": [39, 101], "cummin": [40, 102], "cumprod": [41, 103], "cumsum": [42, 104], "diag": [43, 109], "diagon": [44, 110], "exp": [46, 119], "flatten": [47, 139], "item": 48, "items": 49, "log": [50, 167], "log10": [51, 168], "log1p": [52, 169], "log2": [53, 170], "logsumexp": [54, 175], "max": [55, 177], "mean": [56, 179], "min": [57, 192], "moveaxi": [58, 194], "nbyte": 59, "ndim": 60, "prod": [61, 205], "reciproc": [62, 220], "reshap": [63, 223], "round": [64, 225], "rsqrt": [65, 226], "shape": 66, "sin": [67, 236], "split": [69, 217, 240], "sqrt": [70, 241], "squar": [71, 242], "squeez": [72, 243], "sum": [73, 249], "swapax": [74, 250], "tolist": 75, "transpos": [76, 260], "var": [77, 265], "array_equ": 78, "as_strid": 79, "atleast_1d": 80, "atleast_2d": 81, "atleast_3d": 82, "bitwise_and": 83, "bitwise_or": 84, "bitwise_xor": 85, "block_masked_mm": 86, "block_sparse_mm": 87, "broadcast_to": 88, "ceil": 89, "clip": 90, "compil": [91, 419], "concaten": 92, "conj": 93, "conjug": 94, "conv1d": [95, 292], "conv2d": [96, 293], "conv_gener": 97, "convolv": 98, "cosh": 100, "default_devic": 105, "default_stream": 106, "degre": 107, "dequant": 108, "disable_compil": 111, "divid": 112, "divmod": 113, "enable_compil": 114, "equal": 115, "erf": 116, "erfinv": 117, "eval": [118, 312], "expand_dim": 120, "expm1": 121, "ey": 122, "fast": [123, 124, 125, 126, 283], "layer_norm": 123, "rms_norm": 124, "rope": [125, 336], "scaled_dot_product_attent": 126, "fft": [127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 284], "fft2": 128, "fftn": 129, "ifft": 130, "ifft2": 131, "ifftn": 132, "irfft": 133, "irfft2": 134, "irfftn": 135, "rfft": 136, "rfft2": 137, "rfftn": 138, "floor": 140, "floor_divid": 141, "gather_mm": 143, "gather_qmm": 144, "grad": [145, 287], "greater": 146, "greater_equ": 147, "ident": [148, 350], "inner": 149, "isclos": 150, "isinf": 151, "isnan": 152, "isneginf": 153, "isposinf": 154, "issubdtyp": 155, "jvp": 156, "left_shift": 157, "less": 158, "less_equ": 159, "linalg": [160, 161, 162, 163, 164], "choleski": 160, "inv": 161, "norm": 162, "qr": 163, "svd": 164, "linspac": 165, "logaddexp": 171, "logical_and": 172, "logical_not": 173, "logical_or": 174, "matmul": 176, "maximum": 178, "meshgrid": 180, "clear_cach": 181, "device_info": 182, "get_active_memori": 183, "get_cache_memori": 184, "get_peak_memori": 185, "is_avail": 186, "reset_peak_memori": 187, "set_cache_limit": 188, "set_memory_limit": 189, "start_captur": 190, "stop_captur": 191, "minimum": 193, "multipli": 195, "neg": 196, "new_stream": 197, "not_equ": 198, "ones": 199, "ones_lik": 200, "outer": 201, "pad": 202, "partit": 203, "power": 204, "quantiz": [206, 271], "quantized_matmul": 207, "radian": 208, "random": [209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 416], "bernoulli": 209, "categor": 210, "gumbel": 211, "kei": 212, "multivariate_norm": 213, "normal": [214, 351], "randint": 215, "seed": 216, "truncated_norm": 218, "uniform": [219, 352], "remaind": 221, "repeat": 222, "right_shift": 224, "save": [227, 425], "save_gguf": 228, "save_safetensor": 229, "savez": 230, "savez_compress": 231, "set_default_devic": 232, "set_default_stream": 233, "sigmoid": [234, 381], "sign": 235, "sinh": 237, "softmax": [238, 383], "sort": 239, "stack": 244, "std": 245, "stop_gradi": 246, "stream": [247, 279, 282, 427], "subtract": 248, "synchron": 251, "take": 252, "take_along_axi": 253, "tan": 254, "tanh": [255, 387], "tensordot": 256, "tile": 257, "topk": 258, "trace": 259, "tri": 261, "tril": 262, "triu": 263, "value_and_grad": [264, 272], "vjp": 266, "vmap": 267, "where": 268, "zero": 269, "zeros_lik": 270, "nn": [271, 272, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387], "optim": [273, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414], "clip_grad_norm": 273, "util": [274, 275, 276, 277, 278, 418], "tree_flatten": 274, "tree_map": 275, "tree_map_with_path": 276, "tree_reduc": 277, "tree_unflatten": 278, "data": 281, "type": 281, "support": 281, "algebra": 285, "neural": 287, "network": 287, "quick": [287, 424], "start": [287, 424], "The": 287, "modul": [287, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 392], "class": 287, "paramet": [287, 319], "updat": [287, 327, 405, 421], "inspect": 287, "valu": 287, "alibi": 288, "avgpool1d": 289, "avgpool2d": 290, "batchnorm": 291, "conv3d": 294, "dropout": 295, "dropout2d": 296, "dropout3d": 297, "embed": 298, "gelu": [299, 354], "gru": 300, "groupnorm": 301, "instancenorm": 302, "lstm": 303, "layernorm": 304, "maxpool1d": 306, "maxpool2d": 307, "mish": [308, 376], "appli": 309, "apply_to_modul": 310, "children": 311, "filter_and_map": 313, "freez": 314, "leaf_modul": 315, "load_weight": 316, "named_modul": 318, "save_weight": 320, "set_dtyp": 321, "state": [322, 404], "train": [323, 325, 419], "trainable_paramet": 324, "unfreez": 326, "update_modul": 328, "multiheadattent": 329, "prelu": [330, 377], "quantizedembed": 331, "quantizedlinear": 332, "rmsnorm": 333, "rnn": 334, "relu": [335, 378], "selu": [337, 380], "sequenti": 338, "silu": [339, 382], "sinusoidalpositionalencod": 340, "softshrink": [341, 385], "step": [342, 386], "upsampl": 344, "init": [345, 346, 347, 348, 349, 350, 351, 352, 403], "constant": 345, "glorot_norm": 346, "glorot_uniform": 347, "he_norm": 348, "he_uniform": 349, "elu": 353, "gelu_approx": 355, "gelu_fast_approx": 356, "glu": 357, "hardswish": 358, "leaky_relu": 359, "log_sigmoid": 360, "log_softmax": 361, "loss": [362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 391], "binary_cross_entropi": 362, "cosine_similarity_loss": 363, "cross_entropi": 364, "gaussian_nll_loss": 365, "hinge_loss": 366, "huber_loss": 367, "kl_div_loss": 368, "l1_loss": 369, "log_cosh_loss": 370, "margin_ranking_loss": 371, "mse_loss": 372, "nll_loss": 373, "smooth_l1_loss": 374, "triplet_loss": 375, "relu6": 379, "softplu": 384, "function": [388, 391, 419, 420, 424], "initi": 389, "adadelta": 395, "adafactor": 396, "adagrad": 397, "adam": 398, "adamw": 399, "adamax": 400, "lion": 401, "apply_gradi": 402, "rmsprop": 406, "sgd": 407, "cosine_decai": 408, "exponential_decai": 409, "join_schedul": 410, "linear_schedul": 411, "step_decai": 412, "common": 413, "schedul": 415, "tree": 418, "basic": [419, 424], "speedup": 419, "debug": 419, "pure": 419, "graph": [419, 422, 424], "automat": 420, "differenti": 420, "vector": 420, "index": 421, "differ": 421, "numpi": [421, 423], "In": 421, "place": 421, "lazi": 422, "evalu": 422, "why": 422, "comput": 422, "onli": 422, "what": 422, "you": 422, "when": 422, "convers": 423, "other": 423, "framework": 423, "pytorch": 423, "jax": 423, "tensorflow": 423, "guid": 424, "serial": 425, "format": 425, "unifi": 426, "memori": 426, "A": 426, "simpl": 426, "specifi": 427}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Operations": [[0, "operations"], [1, "operations"], [393, "operations"]], "Custom Extensions in MLX": [[1, "custom-extensions-in-mlx"]], "Introducing the Example": [[1, "introducing-the-example"]], "Operations and Primitives": [[1, "operations-and-primitives"]], "Primitives": [[1, "primitives"]], "Using the Primitive": [[1, "using-the-primitive"]], "Implementing the Primitive": [[1, "implementing-the-primitive"]], "Implementing the CPU Back-end": [[1, "implementing-the-cpu-back-end"]], "Implementing the GPU Back-end": [[1, "implementing-the-gpu-back-end"]], "Primitive Transforms": [[1, "primitive-transforms"]], "Building and Binding": [[1, "building-and-binding"]], "Binding to Python": [[1, "binding-to-python"]], "Building with CMake": [[1, "building-with-cmake"]], "Building with setuptools": [[1, "building-with-setuptools"]], "Usage": [[1, "usage"], [6, null]], "Results": [[1, "results"]], "Scripts": [[1, "scripts"], [4, "scripts"]], "Download the code": [[1, null], [4, null]], "Metal Debugger": [[2, "metal-debugger"]], "Xcode Workflow": [[2, "xcode-workflow"]], "Linear Regression": [[3, "linear-regression"]], "LLM inference": [[4, "llm-inference"]], "Implementing the model": [[4, "implementing-the-model"]], "Attention layer": [[4, "attention-layer"]], "Encoder layer": [[4, "encoder-layer"]], "Full model": [[4, "full-model"]], "Generation": [[4, "generation"]], "Putting it all together": [[4, "putting-it-all-together"]], "Converting the weights": [[4, "converting-the-weights"]], "Weight loading and benchmarking": [[4, "weight-loading-and-benchmarking"]], "Multi-Layer Perceptron": [[5, "multi-layer-perceptron"]], "MLX": [[6, "mlx"]], "Install": [[6, null]], "Examples": [[6, null]], "Python API Reference": [[6, null]], "C++ API Reference": [[6, null]], "Further Reading": [[6, null]], "Build and Install": [[7, "build-and-install"]], "Python Installation": [[7, "python-installation"]], "Troubleshooting": [[7, "troubleshooting"], [7, "id2"]], "Build from source": [[7, "build-from-source"]], "Build Requirements": [[7, "build-requirements"]], "Python API": [[7, "python-api"]], "C++ API": [[7, "c-api"]], "Build Options": [[7, "id3"]], "Binary Size Minimization": [[7, "binary-size-minimization"]], "Metal not found": [[7, "metal-not-found"]], "x86 Shell": [[7, "x86-shell"]], "mlx.core.Device": [[8, "mlx-core-device"]], "mlx.core.Dtype": [[9, "mlx-core-dtype"]], "mlx.core.DtypeCategory": [[10, "mlx-core-dtypecategory"]], "mlx.core.abs": [[11, "mlx-core-abs"]], "mlx.core.add": [[12, "mlx-core-add"]], "mlx.core.addmm": [[13, "mlx-core-addmm"]], "mlx.core.all": [[14, "mlx-core-all"]], "mlx.core.allclose": [[15, "mlx-core-allclose"]], "mlx.core.any": [[16, "mlx-core-any"]], "mlx.core.arange": [[17, "mlx-core-arange"]], "mlx.core.arccos": [[18, "mlx-core-arccos"]], "mlx.core.arccosh": [[19, "mlx-core-arccosh"]], "mlx.core.arcsin": [[20, "mlx-core-arcsin"]], "mlx.core.arcsinh": [[21, "mlx-core-arcsinh"]], "mlx.core.arctan": [[22, "mlx-core-arctan"]], "mlx.core.arctan2": [[23, "mlx-core-arctan2"]], "mlx.core.arctanh": [[24, "mlx-core-arctanh"]], "mlx.core.argmax": [[25, "mlx-core-argmax"]], "mlx.core.argmin": [[26, "mlx-core-argmin"]], "mlx.core.argpartition": [[27, "mlx-core-argpartition"]], "mlx.core.argsort": [[28, "mlx-core-argsort"]], "mlx.core.array": [[29, "mlx-core-array"]], "mlx.core.array.T": [[30, "mlx-core-array-t"]], "mlx.core.array.abs": [[31, "mlx-core-array-abs"]], "mlx.core.array.all": [[32, "mlx-core-array-all"]], "mlx.core.array.any": [[33, "mlx-core-array-any"]], "mlx.core.array.argmax": [[34, "mlx-core-array-argmax"]], "mlx.core.array.argmin": [[35, "mlx-core-array-argmin"]], "mlx.core.array.astype": [[36, "mlx-core-array-astype"]], "mlx.core.array.at": [[37, "mlx-core-array-at"]], "mlx.core.array.cos": [[38, "mlx-core-array-cos"]], "mlx.core.array.cummax": [[39, "mlx-core-array-cummax"]], "mlx.core.array.cummin": [[40, "mlx-core-array-cummin"]], "mlx.core.array.cumprod": [[41, "mlx-core-array-cumprod"]], "mlx.core.array.cumsum": [[42, "mlx-core-array-cumsum"]], "mlx.core.array.diag": [[43, "mlx-core-array-diag"]], "mlx.core.array.diagonal": [[44, "mlx-core-array-diagonal"]], "mlx.core.array.dtype": [[45, "mlx-core-array-dtype"]], "mlx.core.array.exp": [[46, "mlx-core-array-exp"]], "mlx.core.array.flatten": [[47, "mlx-core-array-flatten"]], "mlx.core.array.item": [[48, "mlx-core-array-item"]], "mlx.core.array.itemsize": [[49, "mlx-core-array-itemsize"]], "mlx.core.array.log": [[50, "mlx-core-array-log"]], "mlx.core.array.log10": [[51, "mlx-core-array-log10"]], "mlx.core.array.log1p": [[52, "mlx-core-array-log1p"]], "mlx.core.array.log2": [[53, "mlx-core-array-log2"]], "mlx.core.array.logsumexp": [[54, "mlx-core-array-logsumexp"]], "mlx.core.array.max": [[55, "mlx-core-array-max"]], "mlx.core.array.mean": [[56, "mlx-core-array-mean"]], "mlx.core.array.min": [[57, "mlx-core-array-min"]], "mlx.core.array.moveaxis": [[58, "mlx-core-array-moveaxis"]], "mlx.core.array.nbytes": [[59, "mlx-core-array-nbytes"]], "mlx.core.array.ndim": [[60, "mlx-core-array-ndim"]], "mlx.core.array.prod": [[61, "mlx-core-array-prod"]], "mlx.core.array.reciprocal": [[62, "mlx-core-array-reciprocal"]], "mlx.core.array.reshape": [[63, "mlx-core-array-reshape"]], "mlx.core.array.round": [[64, "mlx-core-array-round"]], "mlx.core.array.rsqrt": [[65, "mlx-core-array-rsqrt"]], "mlx.core.array.shape": [[66, "mlx-core-array-shape"]], "mlx.core.array.sin": [[67, "mlx-core-array-sin"]], "mlx.core.array.size": [[68, "mlx-core-array-size"]], "mlx.core.array.split": [[69, "mlx-core-array-split"]], "mlx.core.array.sqrt": [[70, "mlx-core-array-sqrt"]], "mlx.core.array.square": [[71, "mlx-core-array-square"]], "mlx.core.array.squeeze": [[72, "mlx-core-array-squeeze"]], "mlx.core.array.sum": [[73, "mlx-core-array-sum"]], "mlx.core.array.swapaxes": [[74, "mlx-core-array-swapaxes"]], "mlx.core.array.tolist": [[75, "mlx-core-array-tolist"]], "mlx.core.array.transpose": [[76, "mlx-core-array-transpose"]], "mlx.core.array.var": [[77, "mlx-core-array-var"]], "mlx.core.array_equal": [[78, "mlx-core-array-equal"]], "mlx.core.as_strided": [[79, "mlx-core-as-strided"]], "mlx.core.atleast_1d": [[80, "mlx-core-atleast-1d"]], "mlx.core.atleast_2d": [[81, "mlx-core-atleast-2d"]], "mlx.core.atleast_3d": [[82, "mlx-core-atleast-3d"]], "mlx.core.bitwise_and": [[83, "mlx-core-bitwise-and"]], "mlx.core.bitwise_or": [[84, "mlx-core-bitwise-or"]], "mlx.core.bitwise_xor": [[85, "mlx-core-bitwise-xor"]], "mlx.core.block_masked_mm": [[86, "mlx-core-block-masked-mm"]], "mlx.core.block_sparse_mm": [[87, "mlx-core-block-sparse-mm"]], "mlx.core.broadcast_to": [[88, "mlx-core-broadcast-to"]], "mlx.core.ceil": [[89, "mlx-core-ceil"]], "mlx.core.clip": [[90, "mlx-core-clip"]], "mlx.core.compile": [[91, "mlx-core-compile"]], "mlx.core.concatenate": [[92, "mlx-core-concatenate"]], "mlx.core.conj": [[93, "mlx-core-conj"]], "mlx.core.conjugate": [[94, "mlx-core-conjugate"]], "mlx.core.conv1d": [[95, "mlx-core-conv1d"]], "mlx.core.conv2d": [[96, "mlx-core-conv2d"]], "mlx.core.conv_general": [[97, "mlx-core-conv-general"]], "mlx.core.convolve": [[98, "mlx-core-convolve"]], "mlx.core.cos": [[99, "mlx-core-cos"]], "mlx.core.cosh": [[100, "mlx-core-cosh"]], "mlx.core.cummax": [[101, "mlx-core-cummax"]], "mlx.core.cummin": [[102, "mlx-core-cummin"]], "mlx.core.cumprod": [[103, "mlx-core-cumprod"]], "mlx.core.cumsum": [[104, "mlx-core-cumsum"]], "mlx.core.default_device": [[105, "mlx-core-default-device"]], "mlx.core.default_stream": [[106, "mlx-core-default-stream"]], "mlx.core.degrees": [[107, "mlx-core-degrees"]], "mlx.core.dequantize": [[108, "mlx-core-dequantize"]], "mlx.core.diag": [[109, "mlx-core-diag"]], "mlx.core.diagonal": [[110, "mlx-core-diagonal"]], "mlx.core.disable_compile": [[111, "mlx-core-disable-compile"]], "mlx.core.divide": [[112, "mlx-core-divide"]], "mlx.core.divmod": [[113, "mlx-core-divmod"]], "mlx.core.enable_compile": [[114, "mlx-core-enable-compile"]], "mlx.core.equal": [[115, "mlx-core-equal"]], "mlx.core.erf": [[116, "mlx-core-erf"]], "mlx.core.erfinv": [[117, "mlx-core-erfinv"]], "mlx.core.eval": [[118, "mlx-core-eval"]], "mlx.core.exp": [[119, "mlx-core-exp"]], "mlx.core.expand_dims": [[120, "mlx-core-expand-dims"]], "mlx.core.expm1": [[121, "mlx-core-expm1"]], "mlx.core.eye": [[122, "mlx-core-eye"]], "mlx.core.fast.layer_norm": [[123, "mlx-core-fast-layer-norm"]], "mlx.core.fast.rms_norm": [[124, "mlx-core-fast-rms-norm"]], "mlx.core.fast.rope": [[125, "mlx-core-fast-rope"]], "mlx.core.fast.scaled_dot_product_attention": [[126, "mlx-core-fast-scaled-dot-product-attention"]], "mlx.core.fft.fft": [[127, "mlx-core-fft-fft"]], "mlx.core.fft.fft2": [[128, "mlx-core-fft-fft2"]], "mlx.core.fft.fftn": [[129, "mlx-core-fft-fftn"]], "mlx.core.fft.ifft": [[130, "mlx-core-fft-ifft"]], "mlx.core.fft.ifft2": [[131, "mlx-core-fft-ifft2"]], "mlx.core.fft.ifftn": [[132, "mlx-core-fft-ifftn"]], "mlx.core.fft.irfft": [[133, "mlx-core-fft-irfft"]], "mlx.core.fft.irfft2": [[134, "mlx-core-fft-irfft2"]], "mlx.core.fft.irfftn": [[135, "mlx-core-fft-irfftn"]], "mlx.core.fft.rfft": [[136, "mlx-core-fft-rfft"]], "mlx.core.fft.rfft2": [[137, "mlx-core-fft-rfft2"]], "mlx.core.fft.rfftn": [[138, "mlx-core-fft-rfftn"]], "mlx.core.flatten": [[139, "mlx-core-flatten"]], "mlx.core.floor": [[140, "mlx-core-floor"]], "mlx.core.floor_divide": [[141, "mlx-core-floor-divide"]], "mlx.core.full": [[142, "mlx-core-full"]], "mlx.core.gather_mm": [[143, "mlx-core-gather-mm"]], "mlx.core.gather_qmm": [[144, "mlx-core-gather-qmm"]], "mlx.core.grad": [[145, "mlx-core-grad"]], "mlx.core.greater": [[146, "mlx-core-greater"]], "mlx.core.greater_equal": [[147, "mlx-core-greater-equal"]], "mlx.core.identity": [[148, "mlx-core-identity"]], "mlx.core.inner": [[149, "mlx-core-inner"]], "mlx.core.isclose": [[150, "mlx-core-isclose"]], "mlx.core.isinf": [[151, "mlx-core-isinf"]], "mlx.core.isnan": [[152, "mlx-core-isnan"]], "mlx.core.isneginf": [[153, "mlx-core-isneginf"]], "mlx.core.isposinf": [[154, "mlx-core-isposinf"]], "mlx.core.issubdtype": [[155, "mlx-core-issubdtype"]], "mlx.core.jvp": [[156, "mlx-core-jvp"]], "mlx.core.left_shift": [[157, "mlx-core-left-shift"]], "mlx.core.less": [[158, "mlx-core-less"]], "mlx.core.less_equal": [[159, "mlx-core-less-equal"]], "mlx.core.linalg.cholesky": [[160, "mlx-core-linalg-cholesky"]], "mlx.core.linalg.inv": [[161, "mlx-core-linalg-inv"]], "mlx.core.linalg.norm": [[162, "mlx-core-linalg-norm"]], "mlx.core.linalg.qr": [[163, "mlx-core-linalg-qr"]], "mlx.core.linalg.svd": [[164, "mlx-core-linalg-svd"]], "mlx.core.linspace": [[165, "mlx-core-linspace"]], "mlx.core.load": [[166, "mlx-core-load"]], "mlx.core.log": [[167, "mlx-core-log"]], "mlx.core.log10": [[168, "mlx-core-log10"]], "mlx.core.log1p": [[169, "mlx-core-log1p"]], "mlx.core.log2": [[170, "mlx-core-log2"]], "mlx.core.logaddexp": [[171, "mlx-core-logaddexp"]], "mlx.core.logical_and": [[172, "mlx-core-logical-and"]], "mlx.core.logical_not": [[173, "mlx-core-logical-not"]], "mlx.core.logical_or": [[174, "mlx-core-logical-or"]], "mlx.core.logsumexp": [[175, "mlx-core-logsumexp"]], "mlx.core.matmul": [[176, "mlx-core-matmul"]], "mlx.core.max": [[177, "mlx-core-max"]], "mlx.core.maximum": [[178, "mlx-core-maximum"]], "mlx.core.mean": [[179, "mlx-core-mean"]], "mlx.core.meshgrid": [[180, "mlx-core-meshgrid"]], "mlx.core.metal.clear_cache": [[181, "mlx-core-metal-clear-cache"]], "mlx.core.metal.device_info": [[182, "mlx-core-metal-device-info"]], "mlx.core.metal.get_active_memory": [[183, "mlx-core-metal-get-active-memory"]], "mlx.core.metal.get_cache_memory": [[184, "mlx-core-metal-get-cache-memory"]], "mlx.core.metal.get_peak_memory": [[185, "mlx-core-metal-get-peak-memory"]], "mlx.core.metal.is_available": [[186, "mlx-core-metal-is-available"]], "mlx.core.metal.reset_peak_memory": [[187, "mlx-core-metal-reset-peak-memory"]], "mlx.core.metal.set_cache_limit": [[188, "mlx-core-metal-set-cache-limit"]], "mlx.core.metal.set_memory_limit": [[189, "mlx-core-metal-set-memory-limit"]], "mlx.core.metal.start_capture": [[190, "mlx-core-metal-start-capture"]], "mlx.core.metal.stop_capture": [[191, "mlx-core-metal-stop-capture"]], "mlx.core.min": [[192, "mlx-core-min"]], "mlx.core.minimum": [[193, "mlx-core-minimum"]], "mlx.core.moveaxis": [[194, "mlx-core-moveaxis"]], "mlx.core.multiply": [[195, "mlx-core-multiply"]], "mlx.core.negative": [[196, "mlx-core-negative"]], "mlx.core.new_stream": [[197, "mlx-core-new-stream"]], "mlx.core.not_equal": [[198, "mlx-core-not-equal"]], "mlx.core.ones": [[199, "mlx-core-ones"]], "mlx.core.ones_like": [[200, "mlx-core-ones-like"]], "mlx.core.outer": [[201, "mlx-core-outer"]], "mlx.core.pad": [[202, "mlx-core-pad"]], "mlx.core.partition": [[203, "mlx-core-partition"]], "mlx.core.power": [[204, "mlx-core-power"]], "mlx.core.prod": [[205, "mlx-core-prod"]], "mlx.core.quantize": [[206, "mlx-core-quantize"]], "mlx.core.quantized_matmul": [[207, "mlx-core-quantized-matmul"]], "mlx.core.radians": [[208, "mlx-core-radians"]], "mlx.core.random.bernoulli": [[209, "mlx-core-random-bernoulli"]], "mlx.core.random.categorical": [[210, "mlx-core-random-categorical"]], "mlx.core.random.gumbel": [[211, "mlx-core-random-gumbel"]], "mlx.core.random.key": [[212, "mlx-core-random-key"]], "mlx.core.random.multivariate_normal": [[213, "mlx-core-random-multivariate-normal"]], "mlx.core.random.normal": [[214, "mlx-core-random-normal"]], "mlx.core.random.randint": [[215, "mlx-core-random-randint"]], "mlx.core.random.seed": [[216, "mlx-core-random-seed"]], "mlx.core.random.split": [[217, "mlx-core-random-split"]], "mlx.core.random.truncated_normal": [[218, "mlx-core-random-truncated-normal"]], "mlx.core.random.uniform": [[219, "mlx-core-random-uniform"]], "mlx.core.reciprocal": [[220, "mlx-core-reciprocal"]], "mlx.core.remainder": [[221, "mlx-core-remainder"]], "mlx.core.repeat": [[222, "mlx-core-repeat"]], "mlx.core.reshape": [[223, "mlx-core-reshape"]], "mlx.core.right_shift": [[224, "mlx-core-right-shift"]], "mlx.core.round": [[225, "mlx-core-round"]], "mlx.core.rsqrt": [[226, "mlx-core-rsqrt"]], "mlx.core.save": [[227, "mlx-core-save"]], "mlx.core.save_gguf": [[228, "mlx-core-save-gguf"]], "mlx.core.save_safetensors": [[229, "mlx-core-save-safetensors"]], "mlx.core.savez": [[230, "mlx-core-savez"]], "mlx.core.savez_compressed": [[231, "mlx-core-savez-compressed"]], "mlx.core.set_default_device": [[232, "mlx-core-set-default-device"]], "mlx.core.set_default_stream": [[233, "mlx-core-set-default-stream"]], "mlx.core.sigmoid": [[234, "mlx-core-sigmoid"]], "mlx.core.sign": [[235, "mlx-core-sign"]], "mlx.core.sin": [[236, "mlx-core-sin"]], "mlx.core.sinh": [[237, "mlx-core-sinh"]], "mlx.core.softmax": [[238, "mlx-core-softmax"]], "mlx.core.sort": [[239, "mlx-core-sort"]], "mlx.core.split": [[240, "mlx-core-split"]], "mlx.core.sqrt": [[241, "mlx-core-sqrt"]], "mlx.core.square": [[242, "mlx-core-square"]], "mlx.core.squeeze": [[243, "mlx-core-squeeze"]], "mlx.core.stack": [[244, "mlx-core-stack"]], "mlx.core.std": [[245, "mlx-core-std"]], "mlx.core.stop_gradient": [[246, "mlx-core-stop-gradient"]], "mlx.core.stream": [[247, "mlx-core-stream"]], "mlx.core.subtract": [[248, "mlx-core-subtract"]], "mlx.core.sum": [[249, "mlx-core-sum"]], "mlx.core.swapaxes": [[250, "mlx-core-swapaxes"]], "mlx.core.synchronize": [[251, "mlx-core-synchronize"]], "mlx.core.take": [[252, "mlx-core-take"]], "mlx.core.take_along_axis": [[253, "mlx-core-take-along-axis"]], "mlx.core.tan": [[254, "mlx-core-tan"]], "mlx.core.tanh": [[255, "mlx-core-tanh"]], "mlx.core.tensordot": [[256, "mlx-core-tensordot"]], "mlx.core.tile": [[257, "mlx-core-tile"]], "mlx.core.topk": [[258, "mlx-core-topk"]], "mlx.core.trace": [[259, "mlx-core-trace"]], "mlx.core.transpose": [[260, "mlx-core-transpose"]], "mlx.core.tri": [[261, "mlx-core-tri"]], "mlx.core.tril": [[262, "mlx-core-tril"]], "mlx.core.triu": [[263, "mlx-core-triu"]], "mlx.core.value_and_grad": [[264, "mlx-core-value-and-grad"]], "mlx.core.var": [[265, "mlx-core-var"]], "mlx.core.vjp": [[266, "mlx-core-vjp"]], "mlx.core.vmap": [[267, "mlx-core-vmap"]], "mlx.core.where": [[268, "mlx-core-where"]], "mlx.core.zeros": [[269, "mlx-core-zeros"]], "mlx.core.zeros_like": [[270, "mlx-core-zeros-like"]], "mlx.nn.quantize": [[271, "mlx-nn-quantize"]], "mlx.nn.value_and_grad": [[272, "mlx-nn-value-and-grad"]], "mlx.optimizers.clip_grad_norm": [[273, "mlx-optimizers-clip-grad-norm"]], "mlx.utils.tree_flatten": [[274, "mlx-utils-tree-flatten"]], "mlx.utils.tree_map": [[275, "mlx-utils-tree-map"]], "mlx.utils.tree_map_with_path": [[276, "mlx-utils-tree-map-with-path"]], "mlx.utils.tree_reduce": [[277, "mlx-utils-tree-reduce"]], "mlx.utils.tree_unflatten": [[278, "mlx-utils-tree-unflatten"]], "mlx.core.Stream": [[279, "mlx-core-stream"]], "Array": [[280, "array"]], "Data Types": [[281, "data-types"]], "Supported Data Types": [[281, "id2"]], "Devices and Streams": [[282, "devices-and-streams"]], "Fast": [[283, "fast"]], "FFT": [[284, "fft"]], "Linear Algebra": [[285, "linear-algebra"]], "Metal": [[286, "metal"]], "Neural Networks": [[287, "neural-networks"]], "Quick Start with Neural Networks": [[287, "quick-start-with-neural-networks"]], "The Module Class": [[287, "the-module-class"]], "Parameters": [[287, "parameters"]], "Updating the Parameters": [[287, "updating-the-parameters"]], "Inspecting Modules": [[287, "inspecting-modules"]], "Value and Grad": [[287, "value-and-grad"]], "mlx.nn.ALiBi": [[288, "mlx-nn-alibi"]], "mlx.nn.AvgPool1d": [[289, "mlx-nn-avgpool1d"]], "mlx.nn.AvgPool2d": [[290, "mlx-nn-avgpool2d"]], "mlx.nn.BatchNorm": [[291, "mlx-nn-batchnorm"]], "mlx.nn.Conv1d": [[292, "mlx-nn-conv1d"]], "mlx.nn.Conv2d": [[293, "mlx-nn-conv2d"]], "mlx.nn.Conv3d": [[294, "mlx-nn-conv3d"]], "mlx.nn.Dropout": [[295, "mlx-nn-dropout"]], "mlx.nn.Dropout2d": [[296, "mlx-nn-dropout2d"]], "mlx.nn.Dropout3d": [[297, "mlx-nn-dropout3d"]], "mlx.nn.Embedding": [[298, "mlx-nn-embedding"]], "mlx.nn.GELU": [[299, "mlx-nn-gelu"]], "mlx.nn.GRU": [[300, "mlx-nn-gru"]], "mlx.nn.GroupNorm": [[301, "mlx-nn-groupnorm"]], "mlx.nn.InstanceNorm": [[302, "mlx-nn-instancenorm"]], "mlx.nn.LSTM": [[303, "mlx-nn-lstm"]], "mlx.nn.LayerNorm": [[304, "mlx-nn-layernorm"]], "mlx.nn.Linear": [[305, "mlx-nn-linear"]], "mlx.nn.MaxPool1d": [[306, "mlx-nn-maxpool1d"]], "mlx.nn.MaxPool2d": [[307, "mlx-nn-maxpool2d"]], "mlx.nn.Mish": [[308, "mlx-nn-mish"]], "mlx.nn.Module.apply": [[309, "mlx-nn-module-apply"]], "mlx.nn.Module.apply_to_modules": [[310, "mlx-nn-module-apply-to-modules"]], "mlx.nn.Module.children": [[311, "mlx-nn-module-children"]], "mlx.nn.Module.eval": [[312, "mlx-nn-module-eval"]], "mlx.nn.Module.filter_and_map": [[313, "mlx-nn-module-filter-and-map"]], "mlx.nn.Module.freeze": [[314, "mlx-nn-module-freeze"]], "mlx.nn.Module.leaf_modules": [[315, "mlx-nn-module-leaf-modules"]], "mlx.nn.Module.load_weights": [[316, "mlx-nn-module-load-weights"]], "mlx.nn.Module.modules": [[317, "mlx-nn-module-modules"]], "mlx.nn.Module.named_modules": [[318, "mlx-nn-module-named-modules"]], "mlx.nn.Module.parameters": [[319, "mlx-nn-module-parameters"]], "mlx.nn.Module.save_weights": [[320, "mlx-nn-module-save-weights"]], "mlx.nn.Module.set_dtype": [[321, "mlx-nn-module-set-dtype"]], "mlx.nn.Module.state": [[322, "mlx-nn-module-state"]], "mlx.nn.Module.train": [[323, "mlx-nn-module-train"]], "mlx.nn.Module.trainable_parameters": [[324, "mlx-nn-module-trainable-parameters"]], "mlx.nn.Module.training": [[325, "mlx-nn-module-training"]], "mlx.nn.Module.unfreeze": [[326, "mlx-nn-module-unfreeze"]], "mlx.nn.Module.update": [[327, "mlx-nn-module-update"]], "mlx.nn.Module.update_modules": [[328, "mlx-nn-module-update-modules"]], "mlx.nn.MultiHeadAttention": [[329, "mlx-nn-multiheadattention"]], "mlx.nn.PReLU": [[330, "mlx-nn-prelu"]], "mlx.nn.QuantizedEmbedding": [[331, "mlx-nn-quantizedembedding"]], "mlx.nn.QuantizedLinear": [[332, "mlx-nn-quantizedlinear"]], "mlx.nn.RMSNorm": [[333, "mlx-nn-rmsnorm"]], "mlx.nn.RNN": [[334, "mlx-nn-rnn"]], "mlx.nn.ReLU": [[335, "mlx-nn-relu"]], "mlx.nn.RoPE": [[336, "mlx-nn-rope"]], "mlx.nn.SELU": [[337, "mlx-nn-selu"]], "mlx.nn.Sequential": [[338, "mlx-nn-sequential"]], "mlx.nn.SiLU": [[339, "mlx-nn-silu"]], "mlx.nn.SinusoidalPositionalEncoding": [[340, "mlx-nn-sinusoidalpositionalencoding"]], "mlx.nn.Softshrink": [[341, "mlx-nn-softshrink"]], "mlx.nn.Step": [[342, "mlx-nn-step"]], "mlx.nn.Transformer": [[343, "mlx-nn-transformer"]], "mlx.nn.Upsample": [[344, "mlx-nn-upsample"]], "mlx.nn.init.constant": [[345, "mlx-nn-init-constant"]], "mlx.nn.init.glorot_normal": [[346, "mlx-nn-init-glorot-normal"]], "mlx.nn.init.glorot_uniform": [[347, "mlx-nn-init-glorot-uniform"]], "mlx.nn.init.he_normal": [[348, "mlx-nn-init-he-normal"]], "mlx.nn.init.he_uniform": [[349, "mlx-nn-init-he-uniform"]], "mlx.nn.init.identity": [[350, "mlx-nn-init-identity"]], "mlx.nn.init.normal": [[351, "mlx-nn-init-normal"]], "mlx.nn.init.uniform": [[352, "mlx-nn-init-uniform"]], "mlx.nn.elu": [[353, "mlx-nn-elu"]], "mlx.nn.gelu": [[354, "mlx-nn-gelu"]], "mlx.nn.gelu_approx": [[355, "mlx-nn-gelu-approx"]], "mlx.nn.gelu_fast_approx": [[356, "mlx-nn-gelu-fast-approx"]], "mlx.nn.glu": [[357, "mlx-nn-glu"]], "mlx.nn.hardswish": [[358, "mlx-nn-hardswish"]], "mlx.nn.leaky_relu": [[359, "mlx-nn-leaky-relu"]], "mlx.nn.log_sigmoid": [[360, "mlx-nn-log-sigmoid"]], "mlx.nn.log_softmax": [[361, "mlx-nn-log-softmax"]], "mlx.nn.losses.binary_cross_entropy": [[362, "mlx-nn-losses-binary-cross-entropy"]], "mlx.nn.losses.cosine_similarity_loss": [[363, "mlx-nn-losses-cosine-similarity-loss"]], "mlx.nn.losses.cross_entropy": [[364, "mlx-nn-losses-cross-entropy"]], "mlx.nn.losses.gaussian_nll_loss": [[365, "mlx-nn-losses-gaussian-nll-loss"]], "mlx.nn.losses.hinge_loss": [[366, "mlx-nn-losses-hinge-loss"]], "mlx.nn.losses.huber_loss": [[367, "mlx-nn-losses-huber-loss"]], "mlx.nn.losses.kl_div_loss": [[368, "mlx-nn-losses-kl-div-loss"]], "mlx.nn.losses.l1_loss": [[369, "mlx-nn-losses-l1-loss"]], "mlx.nn.losses.log_cosh_loss": [[370, "mlx-nn-losses-log-cosh-loss"]], "mlx.nn.losses.margin_ranking_loss": [[371, "mlx-nn-losses-margin-ranking-loss"]], "mlx.nn.losses.mse_loss": [[372, "mlx-nn-losses-mse-loss"]], "mlx.nn.losses.nll_loss": [[373, "mlx-nn-losses-nll-loss"]], "mlx.nn.losses.smooth_l1_loss": [[374, "mlx-nn-losses-smooth-l1-loss"]], "mlx.nn.losses.triplet_loss": [[375, "mlx-nn-losses-triplet-loss"]], "mlx.nn.mish": [[376, "mlx-nn-mish"]], "mlx.nn.prelu": [[377, "mlx-nn-prelu"]], "mlx.nn.relu": [[378, "mlx-nn-relu"]], "mlx.nn.relu6": [[379, "mlx-nn-relu6"]], "mlx.nn.selu": [[380, "mlx-nn-selu"]], "mlx.nn.sigmoid": [[381, "mlx-nn-sigmoid"]], "mlx.nn.silu": [[382, "mlx-nn-silu"]], "mlx.nn.softmax": [[383, "mlx-nn-softmax"]], "mlx.nn.softplus": [[384, "mlx-nn-softplus"]], "mlx.nn.softshrink": [[385, "mlx-nn-softshrink"]], "mlx.nn.step": [[386, "mlx-nn-step"]], "mlx.nn.tanh": [[387, "mlx-nn-tanh"]], "Functions": [[388, "functions"]], "Initializers": [[389, "initializers"]], "Layers": [[390, "layers"]], "Loss Functions": [[391, "loss-functions"]], "Module": [[392, "module"]], "Optimizers": [[394, "optimizers"]], "mlx.optimizers.AdaDelta": [[395, "mlx-optimizers-adadelta"]], "mlx.optimizers.Adafactor": [[396, "mlx-optimizers-adafactor"]], "mlx.optimizers.Adagrad": [[397, "mlx-optimizers-adagrad"]], "mlx.optimizers.Adam": [[398, "mlx-optimizers-adam"]], "mlx.optimizers.AdamW": [[399, "mlx-optimizers-adamw"]], "mlx.optimizers.Adamax": [[400, "mlx-optimizers-adamax"]], "mlx.optimizers.Lion": [[401, "mlx-optimizers-lion"]], "mlx.optimizers.Optimizer.apply_gradients": [[402, "mlx-optimizers-optimizer-apply-gradients"]], "mlx.optimizers.Optimizer.init": [[403, "mlx-optimizers-optimizer-init"]], "mlx.optimizers.Optimizer.state": [[404, "mlx-optimizers-optimizer-state"]], "mlx.optimizers.Optimizer.update": [[405, "mlx-optimizers-optimizer-update"]], "mlx.optimizers.RMSprop": [[406, "mlx-optimizers-rmsprop"]], "mlx.optimizers.SGD": [[407, "mlx-optimizers-sgd"]], "mlx.optimizers.cosine_decay": [[408, "mlx-optimizers-cosine-decay"]], "mlx.optimizers.exponential_decay": [[409, "mlx-optimizers-exponential-decay"]], "mlx.optimizers.join_schedules": [[410, "mlx-optimizers-join-schedules"]], "mlx.optimizers.linear_schedule": [[411, "mlx-optimizers-linear-schedule"]], "mlx.optimizers.step_decay": [[412, "mlx-optimizers-step-decay"]], "Common Optimizers": [[413, "common-optimizers"]], "Optimizer": [[414, "optimizer"]], "Schedulers": [[415, "schedulers"]], "Random": [[416, "random"]], "Transforms": [[417, "transforms"]], "Tree Utils": [[418, "tree-utils"]], "Compilation": [[419, "compilation"]], "Basics of Compile": [[419, "basics-of-compile"]], "Example Speedup": [[419, "example-speedup"]], "Debugging": [[419, "debugging"]], "Pure Functions": [[419, "pure-functions"]], "Compiling Training Graphs": [[419, "compiling-training-graphs"]], "Transformations with Compile": [[419, "transformations-with-compile"]], "Function Transforms": [[420, "function-transforms"]], "Automatic Differentiation": [[420, "automatic-differentiation"]], "Automatic Vectorization": [[420, "automatic-vectorization"]], "Indexing Arrays": [[421, "indexing-arrays"]], "Differences from NumPy": [[421, "differences-from-numpy"]], "In Place Updates": [[421, "in-place-updates"]], "Lazy Evaluation": [[422, "lazy-evaluation"]], "Why Lazy Evaluation": [[422, "why-lazy-evaluation"]], "Transforming Compute Graphs": [[422, "transforming-compute-graphs"]], "Only Compute What You Use": [[422, "only-compute-what-you-use"]], "When to Evaluate": [[422, "when-to-evaluate"]], "Conversion to NumPy and Other Frameworks": [[423, "conversion-to-numpy-and-other-frameworks"]], "PyTorch": [[423, "pytorch"]], "JAX": [[423, "jax"]], "TensorFlow": [[423, "tensorflow"]], "Quick Start Guide": [[424, "quick-start-guide"]], "Basics": [[424, "basics"]], "Function and Graph Transformations": [[424, "function-and-graph-transformations"]], "Saving and Loading Arrays": [[425, "saving-and-loading-arrays"]], "Serialization Formats": [[425, "id1"]], "Unified Memory": [[426, "unified-memory"]], "A Simple Example": [[426, "a-simple-example"]], "Using Streams": [[427, "using-streams"]], "Specifying the Stream": [[427, "specifying-the-stream"]]}, "indexentries": {"abs (c++ function)": [[0, "_CPPv43absRK5array14StreamOrDevice"]], "add (c++ function)": [[0, "_CPPv43addRK5arrayRK5array14StreamOrDevice"]], "addmm (c++ function)": [[0, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice"]], "all (c++ function)": [[0, "_CPPv43allRK5array14StreamOrDevice"], [0, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43allRK5arrayb14StreamOrDevice"], [0, "_CPPv43allRK5arrayib14StreamOrDevice"]], "allclose (c++ function)": [[0, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice"]], "any (c++ function)": [[0, "_CPPv43anyRK5array14StreamOrDevice"], [0, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43anyRK5arrayb14StreamOrDevice"], [0, "_CPPv43anyRK5arrayib14StreamOrDevice"]], "arange (c++ function)": [[0, "_CPPv46aranged14StreamOrDevice"], [0, "_CPPv46aranged5Dtype14StreamOrDevice"], [0, "_CPPv46arangedd14StreamOrDevice"], [0, "_CPPv46arangedd5Dtype14StreamOrDevice"], [0, "_CPPv46arangeddd14StreamOrDevice"], [0, "_CPPv46arangeddd5Dtype14StreamOrDevice"], [0, "_CPPv46arangei14StreamOrDevice"], [0, "_CPPv46arangeii14StreamOrDevice"], [0, "_CPPv46arangeiii14StreamOrDevice"]], "arccos (c++ function)": [[0, "_CPPv46arccosRK5array14StreamOrDevice"]], "arccosh (c++ function)": [[0, "_CPPv47arccoshRK5array14StreamOrDevice"]], "arcsin (c++ function)": [[0, "_CPPv46arcsinRK5array14StreamOrDevice"]], "arcsinh (c++ function)": [[0, "_CPPv47arcsinhRK5array14StreamOrDevice"]], "arctan (c++ function)": [[0, "_CPPv46arctanRK5array14StreamOrDevice"]], "arctan2 (c++ function)": [[0, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice"]], "arctanh (c++ function)": [[0, "_CPPv47arctanhRK5array14StreamOrDevice"]], "argmax (c++ function)": [[0, "_CPPv46argmaxRK5array14StreamOrDevice"], [0, "_CPPv46argmaxRK5arrayb14StreamOrDevice"], [0, "_CPPv46argmaxRK5arrayib14StreamOrDevice"]], "argmin (c++ function)": [[0, "_CPPv46argminRK5array14StreamOrDevice"], [0, "_CPPv46argminRK5arrayb14StreamOrDevice"], [0, "_CPPv46argminRK5arrayib14StreamOrDevice"]], "argpartition (c++ function)": [[0, "_CPPv412argpartitionRK5arrayi14StreamOrDevice"], [0, "_CPPv412argpartitionRK5arrayii14StreamOrDevice"]], "argsort (c++ function)": [[0, "_CPPv47argsortRK5array14StreamOrDevice"], [0, "_CPPv47argsortRK5arrayi14StreamOrDevice"]], "array_equal (c++ function)": [[0, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice"], [0, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice"]], "as_strided (c++ function)": [[0, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice"]], "astype (c++ function)": [[0, "_CPPv46astype5array5Dtype14StreamOrDevice"]], "atleast_1d (c++ function)": [[0, "_CPPv410atleast_1dRK5array14StreamOrDevice"], [0, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice"]], "atleast_2d (c++ function)": [[0, "_CPPv410atleast_2dRK5array14StreamOrDevice"], [0, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice"]], "atleast_3d (c++ function)": [[0, "_CPPv410atleast_3dRK5array14StreamOrDevice"], [0, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice"]], "bitwise_and (c++ function)": [[0, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice"]], "bitwise_or (c++ function)": [[0, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice"]], "bitwise_xor (c++ function)": [[0, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice"]], "block_masked_mm (c++ function)": [[0, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice"]], "block_sparse_mm (c++ function)": [[0, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice"]], "block_sparse_qmm (c++ function)": [[0, "_CPPv416block_sparse_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice"]], "broadcast_arrays (c++ function)": [[0, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice"]], "broadcast_to (c++ function)": [[0, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "ceil (c++ function)": [[0, "_CPPv44ceilRK5array14StreamOrDevice"]], "clip (c++ function)": [[0, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice"]], "concatenate (c++ function)": [[0, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice"], [0, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice"]], "conjugate (c++ function)": [[0, "_CPPv49conjugateRK5array14StreamOrDevice"]], "conv1d (c++ function)": [[0, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice"]], "conv2d (c++ function)": [[0, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice"]], "conv3d (c++ function)": [[0, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice"]], "conv_general (c++ function)": [[0, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice"], [0, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice"]], "copy (c++ function)": [[0, "_CPPv44copy5array14StreamOrDevice"]], "cos (c++ function)": [[0, "_CPPv43cosRK5array14StreamOrDevice"]], "cosh (c++ function)": [[0, "_CPPv44coshRK5array14StreamOrDevice"]], "cummax (c++ function)": [[0, "_CPPv46cummaxRK5arrayibb14StreamOrDevice"]], "cummin (c++ function)": [[0, "_CPPv46cumminRK5arrayibb14StreamOrDevice"]], "cumprod (c++ function)": [[0, "_CPPv47cumprodRK5arrayibb14StreamOrDevice"]], "cumsum (c++ function)": [[0, "_CPPv46cumsumRK5arrayibb14StreamOrDevice"]], "degrees (c++ function)": [[0, "_CPPv47degreesRK5array14StreamOrDevice"]], "depends (c++ function)": [[0, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE"]], "dequantize (c++ function)": [[0, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice"]], "diag (c++ function)": [[0, "_CPPv44diagRK5arrayi14StreamOrDevice"]], "diagonal (c++ function)": [[0, "_CPPv48diagonalRK5arrayiii14StreamOrDevice"]], "divide (c++ function)": [[0, "_CPPv46divideRK5arrayRK5array14StreamOrDevice"]], "divmod (c++ function)": [[0, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice"]], "equal (c++ function)": [[0, "_CPPv45equalRK5arrayRK5array14StreamOrDevice"]], "erf (c++ function)": [[0, "_CPPv43erfRK5array14StreamOrDevice"]], "erfinv (c++ function)": [[0, "_CPPv46erfinvRK5array14StreamOrDevice"]], "exp (c++ function)": [[0, "_CPPv43expRK5array14StreamOrDevice"]], "expand_dims (c++ function)": [[0, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice"]], "expm1 (c++ function)": [[0, "_CPPv45expm1RK5array14StreamOrDevice"]], "eye (c++ function)": [[0, "_CPPv43eyei14StreamOrDevice"], [0, "_CPPv43eyei5Dtype14StreamOrDevice"], [0, "_CPPv43eyeii14StreamOrDevice"], [0, "_CPPv43eyeiii14StreamOrDevice"], [0, "_CPPv43eyeiii5Dtype14StreamOrDevice"]], "flatten (c++ function)": [[0, "_CPPv47flattenRK5array14StreamOrDevice"], [0, "_CPPv47flattenRK5arrayii14StreamOrDevice"]], "floor (c++ function)": [[0, "_CPPv45floorRK5array14StreamOrDevice"]], "floor_divide (c++ function)": [[0, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice"]], "full (c++ function)": [[0, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice"], [0, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice"], [0, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice"], [0, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice"]], "gather (c++ function)": [[0, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice"]], "greater (c++ function)": [[0, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice"]], "greater_equal (c++ function)": [[0, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice"]], "identity (c++ function)": [[0, "_CPPv48identityi14StreamOrDevice"], [0, "_CPPv48identityi5Dtype14StreamOrDevice"]], "inner (c++ function)": [[0, "_CPPv45innerRK5arrayRK5array14StreamOrDevice"]], "isclose (c++ function)": [[0, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice"]], "isinf (c++ function)": [[0, "_CPPv45isinfRK5array14StreamOrDevice"]], "isnan (c++ function)": [[0, "_CPPv45isnanRK5array14StreamOrDevice"]], "isneginf (c++ function)": [[0, "_CPPv48isneginfRK5array14StreamOrDevice"]], "isposinf (c++ function)": [[0, "_CPPv48isposinfRK5array14StreamOrDevice"]], "left_shift (c++ function)": [[0, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice"]], "less (c++ function)": [[0, "_CPPv44lessRK5arrayRK5array14StreamOrDevice"]], "less_equal (c++ function)": [[0, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice"]], "linspace (c++ function)": [[0, "_CPPv48linspaceddi5Dtype14StreamOrDevice"]], "log (c++ function)": [[0, "_CPPv43logRK5array14StreamOrDevice"]], "log10 (c++ function)": [[0, "_CPPv45log10RK5array14StreamOrDevice"]], "log1p (c++ function)": [[0, "_CPPv45log1pRK5array14StreamOrDevice"]], "log2 (c++ function)": [[0, "_CPPv44log2RK5array14StreamOrDevice"]], "logaddexp (c++ function)": [[0, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice"]], "logical_and (c++ function)": [[0, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice"]], "logical_not (c++ function)": [[0, "_CPPv411logical_notRK5array14StreamOrDevice"]], "logical_or (c++ function)": [[0, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice"]], "logsumexp (c++ function)": [[0, "_CPPv49logsumexpRK5array14StreamOrDevice"], [0, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv49logsumexpRK5arrayb14StreamOrDevice"], [0, "_CPPv49logsumexpRK5arrayib14StreamOrDevice"]], "matmul (c++ function)": [[0, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice"]], "max (c++ function)": [[0, "_CPPv43maxRK5array14StreamOrDevice"], [0, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43maxRK5arrayb14StreamOrDevice"], [0, "_CPPv43maxRK5arrayib14StreamOrDevice"]], "maximum (c++ function)": [[0, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice"]], "mean (c++ function)": [[0, "_CPPv44meanRK5array14StreamOrDevice"], [0, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv44meanRK5arrayb14StreamOrDevice"], [0, "_CPPv44meanRK5arrayib14StreamOrDevice"]], "meshgrid (c++ function)": [[0, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice"]], "min (c++ function)": [[0, "_CPPv43minRK5array14StreamOrDevice"], [0, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43minRK5arrayb14StreamOrDevice"], [0, "_CPPv43minRK5arrayib14StreamOrDevice"]], "minimum (c++ function)": [[0, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice"]], "moveaxis (c++ function)": [[0, "_CPPv48moveaxisRK5arrayii14StreamOrDevice"]], "multiply (c++ function)": [[0, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice"]], "negative (c++ function)": [[0, "_CPPv48negativeRK5array14StreamOrDevice"]], "not_equal (c++ function)": [[0, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice"]], "number_of_elements (c++ function)": [[0, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice"]], "ones (c++ function)": [[0, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice"]], "ones_like (c++ function)": [[0, "_CPPv49ones_likeRK5array14StreamOrDevice"]], "operator!= (c++ function)": [[0, "_CPPv4I0Ene5array1TRK5array"], [0, "_CPPv4I0Ene5arrayRK5array1T"], [0, "_CPPv4neRK5arrayRK5array"]], "operator% (c++ function)": [[0, "_CPPv4I0Erm5array1TRK5array"], [0, "_CPPv4I0Erm5arrayRK5array1T"], [0, "_CPPv4rmRK5arrayRK5array"]], "operator& (c++ function)": [[0, "_CPPv4anRK5arrayRK5array"]], "operator&& (c++ function)": [[0, "_CPPv4aaRK5arrayRK5array"]], "operator* (c++ function)": [[0, "_CPPv4I0Eml5array1TRK5array"], [0, "_CPPv4I0Eml5arrayRK5array1T"], [0, "_CPPv4mlRK5arrayRK5array"]], "operator+ (c++ function)": [[0, "_CPPv4I0Epl5array1TRK5array"], [0, "_CPPv4I0Epl5arrayRK5array1T"], [0, "_CPPv4plRK5arrayRK5array"]], "operator- (c++ function)": [[0, "_CPPv4I0Emi5array1TRK5array"], [0, "_CPPv4I0Emi5arrayRK5array1T"], [0, "_CPPv4miRK5array"], [0, "_CPPv4miRK5arrayRK5array"]], "operator/ (c++ function)": [[0, "_CPPv4dvRK5arrayRK5array"], [0, "_CPPv4dvRK5arrayd"], [0, "_CPPv4dvdRK5array"]], "operator< (c++ function)": [[0, "_CPPv4I0Elt5array1TRK5array"], [0, "_CPPv4I0Elt5arrayRK5array1T"], [0, "_CPPv4ltRK5arrayRK5array"]], "operator<< (c++ function)": [[0, "_CPPv4lsRK5arrayRK5array"]], "operator<= (c++ function)": [[0, "_CPPv4I0Ele5array1TRK5array"], [0, "_CPPv4I0Ele5arrayRK5array1T"], [0, "_CPPv4leRK5arrayRK5array"]], "operator== (c++ function)": [[0, "_CPPv4I0Eeq5array1TRK5array"], [0, "_CPPv4I0Eeq5arrayRK5array1T"], [0, "_CPPv4eqRK5arrayRK5array"]], "operator> (c++ function)": [[0, "_CPPv4I0Egt5array1TRK5array"], [0, "_CPPv4I0Egt5arrayRK5array1T"], [0, "_CPPv4gtRK5arrayRK5array"]], "operator>= (c++ function)": [[0, "_CPPv4I0Ege5array1TRK5array"], [0, "_CPPv4I0Ege5arrayRK5array1T"], [0, "_CPPv4geRK5arrayRK5array"]], "operator>> (c++ function)": [[0, "_CPPv4rsRK5arrayRK5array"]], "operator^ (c++ function)": [[0, "_CPPv4eoRK5arrayRK5array"]], "operator| (c++ function)": [[0, "_CPPv4orRK5arrayRK5array"]], "operator|| (c++ function)": [[0, "_CPPv4ooRK5arrayRK5array"]], "outer (c++ function)": [[0, "_CPPv45outerRK5arrayRK5array14StreamOrDevice"]], "pad (c++ function)": [[0, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice"], [0, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice"], [0, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice"], [0, "_CPPv43padRK5arrayiRK5array14StreamOrDevice"]], "partition (c++ function)": [[0, "_CPPv49partitionRK5arrayi14StreamOrDevice"], [0, "_CPPv49partitionRK5arrayii14StreamOrDevice"]], "power (c++ function)": [[0, "_CPPv45powerRK5arrayRK5array14StreamOrDevice"]], "prod (c++ function)": [[0, "_CPPv44prodRK5array14StreamOrDevice"], [0, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv44prodRK5arrayb14StreamOrDevice"], [0, "_CPPv44prodRK5arrayib14StreamOrDevice"]], "quantize (c++ function)": [[0, "_CPPv48quantizeRK5arrayii14StreamOrDevice"]], "quantized_matmul (c++ function)": [[0, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice"]], "radians (c++ function)": [[0, "_CPPv47radiansRK5array14StreamOrDevice"]], "reciprocal (c++ function)": [[0, "_CPPv410reciprocalRK5array14StreamOrDevice"]], "remainder (c++ function)": [[0, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice"]], "repeat (c++ function)": [[0, "_CPPv46repeatRK5arrayi14StreamOrDevice"], [0, "_CPPv46repeatRK5arrayii14StreamOrDevice"]], "reshape (c++ function)": [[0, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice"]], "right_shift (c++ function)": [[0, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice"]], "round (c++ function)": [[0, "_CPPv45roundRK5array14StreamOrDevice"], [0, "_CPPv45roundRK5arrayi14StreamOrDevice"]], "rsqrt (c++ function)": [[0, "_CPPv45rsqrtRK5array14StreamOrDevice"]], "scatter (c++ function)": [[0, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_add (c++ function)": [[0, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_max (c++ function)": [[0, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_min (c++ function)": [[0, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_prod (c++ function)": [[0, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "sigmoid (c++ function)": [[0, "_CPPv47sigmoidRK5array14StreamOrDevice"]], "sign (c++ function)": [[0, "_CPPv44signRK5array14StreamOrDevice"]], "sin (c++ function)": [[0, "_CPPv43sinRK5array14StreamOrDevice"]], "sinh (c++ function)": [[0, "_CPPv44sinhRK5array14StreamOrDevice"]], "slice (c++ function)": [[0, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice"]], "slice_update (c++ function)": [[0, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"]], "softmax (c++ function)": [[0, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv47softmaxRK5arrayb14StreamOrDevice"], [0, "_CPPv47softmaxRK5arrayib14StreamOrDevice"]], "sort (c++ function)": [[0, "_CPPv44sortRK5array14StreamOrDevice"], [0, "_CPPv44sortRK5arrayi14StreamOrDevice"]], "split (c++ function)": [[0, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice"], [0, "_CPPv45splitRK5arrayi14StreamOrDevice"], [0, "_CPPv45splitRK5arrayii14StreamOrDevice"]], "sqrt (c++ function)": [[0, "_CPPv44sqrtRK5array14StreamOrDevice"]], "square (c++ function)": [[0, "_CPPv46squareRK5array14StreamOrDevice"]], "squeeze (c++ function)": [[0, "_CPPv47squeezeRK5array14StreamOrDevice"], [0, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv47squeezeRK5arrayi14StreamOrDevice"]], "stack (c++ function)": [[0, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice"], [0, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice"]], "std (c++ function)": [[0, "_CPPv4StRK5array14StreamOrDevice"], [0, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice"], [0, "_CPPv4StRK5arraybi14StreamOrDevice"], [0, "_CPPv4StRK5arrayibi14StreamOrDevice"]], "stop_gradient (c++ function)": [[0, "_CPPv413stop_gradientRK5array14StreamOrDevice"]], "subtract (c++ function)": [[0, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice"]], "sum (c++ function)": [[0, "_CPPv43sumRK5array14StreamOrDevice"], [0, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43sumRK5arrayb14StreamOrDevice"], [0, "_CPPv43sumRK5arrayib14StreamOrDevice"]], "swapaxes (c++ function)": [[0, "_CPPv48swapaxesRK5arrayii14StreamOrDevice"]], "take (c++ function)": [[0, "_CPPv44takeRK5arrayRK5array14StreamOrDevice"], [0, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice"]], "take_along_axis (c++ function)": [[0, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice"]], "tan (c++ function)": [[0, "_CPPv43tanRK5array14StreamOrDevice"]], "tanh (c++ function)": [[0, "_CPPv44tanhRK5array14StreamOrDevice"]], "tensordot (c++ function)": [[0, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice"], [0, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice"]], "tile (c++ function)": [[0, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice"]], "topk (c++ function)": [[0, "_CPPv44topkRK5arrayi14StreamOrDevice"], [0, "_CPPv44topkRK5arrayii14StreamOrDevice"]], "transpose (c++ function)": [[0, "_CPPv49transposeRK5array14StreamOrDevice"], [0, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice"], [0, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice"]], "tri (c++ function)": [[0, "_CPPv43trii5Dtype14StreamOrDevice"], [0, "_CPPv43triiii5Dtype14StreamOrDevice"]], "tril (c++ function)": [[0, "_CPPv44tril5arrayi14StreamOrDevice"]], "triu (c++ function)": [[0, "_CPPv44triu5arrayi14StreamOrDevice"]], "var (c++ function)": [[0, "_CPPv43varRK5array14StreamOrDevice"], [0, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice"], [0, "_CPPv43varRK5arraybi14StreamOrDevice"], [0, "_CPPv43varRK5arrayibi14StreamOrDevice"]], "where (c++ function)": [[0, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice"]], "zeros (c++ function)": [[0, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice"]], "zeros_like (c++ function)": [[0, "_CPPv410zeros_likeRK5array14StreamOrDevice"]], "device (class in mlx.core)": [[8, "mlx.core.Device"]], "__init__() (device method)": [[8, "mlx.core.Device.__init__"]], "dtype (class in mlx.core)": [[9, "mlx.core.Dtype"]], "__init__() (dtype method)": [[9, "mlx.core.Dtype.__init__"]], "dtypecategory (class in mlx.core)": [[10, "mlx.core.DtypeCategory"]], "__init__() (dtypecategory method)": [[10, "mlx.core.DtypeCategory.__init__"]], "abs() (in module mlx.core)": [[11, "mlx.core.abs"]], "add() (in module mlx.core)": [[12, "mlx.core.add"]], "addmm() (in module mlx.core)": [[13, "mlx.core.addmm"]], "all() (in module mlx.core)": [[14, "mlx.core.all"]], "allclose() (in module mlx.core)": [[15, "mlx.core.allclose"]], "any() (in module mlx.core)": [[16, "mlx.core.any"]], "arange() (in module mlx.core)": [[17, "mlx.core.arange"]], "arccos() (in module mlx.core)": [[18, "mlx.core.arccos"]], "arccosh() (in module mlx.core)": [[19, "mlx.core.arccosh"]], "arcsin() (in module mlx.core)": [[20, "mlx.core.arcsin"]], "arcsinh() (in module mlx.core)": [[21, "mlx.core.arcsinh"]], "arctan() (in module mlx.core)": [[22, "mlx.core.arctan"]], "arctan2() (in module mlx.core)": [[23, "mlx.core.arctan2"]], "arctanh() (in module mlx.core)": [[24, "mlx.core.arctanh"]], "argmax() (in module mlx.core)": [[25, "mlx.core.argmax"]], "argmin() (in module mlx.core)": [[26, "mlx.core.argmin"]], "argpartition() (in module mlx.core)": [[27, "mlx.core.argpartition"]], "argsort() (in module mlx.core)": [[28, "mlx.core.argsort"]], "__init__() (array method)": [[29, "mlx.core.array.__init__"]], "array (class in mlx.core)": [[29, "mlx.core.array"]], "t (array property)": [[30, "mlx.core.array.T"]], "abs() (array method)": [[31, "mlx.core.array.abs"]], "all() (array method)": [[32, "mlx.core.array.all"]], "any() (array method)": [[33, "mlx.core.array.any"]], "argmax() (array method)": [[34, "mlx.core.array.argmax"]], "argmin() (array method)": [[35, "mlx.core.array.argmin"]], "astype() (array method)": [[36, "mlx.core.array.astype"]], "at (array property)": [[37, "mlx.core.array.at"]], "cos() (array method)": [[38, "mlx.core.array.cos"]], "cummax() (array method)": [[39, "mlx.core.array.cummax"]], "cummin() (array method)": [[40, "mlx.core.array.cummin"]], "cumprod() (array method)": [[41, "mlx.core.array.cumprod"]], "cumsum() (array method)": [[42, "mlx.core.array.cumsum"]], "diag() (array method)": [[43, "mlx.core.array.diag"]], "diagonal() (array method)": [[44, "mlx.core.array.diagonal"]], "dtype (array property)": [[45, "mlx.core.array.dtype"]], "exp() (array method)": [[46, "mlx.core.array.exp"]], "flatten() (array method)": [[47, "mlx.core.array.flatten"]], "item() (array method)": [[48, "mlx.core.array.item"]], "itemsize (array property)": [[49, "mlx.core.array.itemsize"]], "log() (array method)": [[50, "mlx.core.array.log"]], "log10() (array method)": [[51, "mlx.core.array.log10"]], "log1p() (array method)": [[52, "mlx.core.array.log1p"]], "log2() (array method)": [[53, "mlx.core.array.log2"]], "logsumexp() (array method)": [[54, "mlx.core.array.logsumexp"]], "max() (array method)": [[55, "mlx.core.array.max"]], "mean() (array method)": [[56, "mlx.core.array.mean"]], "min() (array method)": [[57, "mlx.core.array.min"]], "moveaxis() (array method)": [[58, "mlx.core.array.moveaxis"]], "nbytes (array property)": [[59, "mlx.core.array.nbytes"]], "ndim (array property)": [[60, "mlx.core.array.ndim"]], "prod() (array method)": [[61, "mlx.core.array.prod"]], "reciprocal() (array method)": [[62, "mlx.core.array.reciprocal"]], "reshape() (array method)": [[63, "mlx.core.array.reshape"]], "round() (array method)": [[64, "mlx.core.array.round"]], "rsqrt() (array method)": [[65, "mlx.core.array.rsqrt"]], "shape (array property)": [[66, "mlx.core.array.shape"]], "sin() (array method)": [[67, "mlx.core.array.sin"]], "size (array property)": [[68, "mlx.core.array.size"]], "split() (array method)": [[69, "mlx.core.array.split"]], "sqrt() (array method)": [[70, "mlx.core.array.sqrt"]], "square() (array method)": [[71, "mlx.core.array.square"]], "squeeze() (array method)": [[72, "mlx.core.array.squeeze"]], "sum() (array method)": [[73, "mlx.core.array.sum"]], "swapaxes() (array method)": [[74, "mlx.core.array.swapaxes"]], "tolist() (array method)": [[75, "mlx.core.array.tolist"]], "transpose() (array method)": [[76, "mlx.core.array.transpose"]], "var() (array method)": [[77, "mlx.core.array.var"]], "array_equal() (in module mlx.core)": [[78, "mlx.core.array_equal"]], "as_strided() (in module mlx.core)": [[79, "mlx.core.as_strided"]], "atleast_1d() (in module mlx.core)": [[80, "mlx.core.atleast_1d"]], "atleast_2d() (in module mlx.core)": [[81, "mlx.core.atleast_2d"]], "atleast_3d() (in module mlx.core)": [[82, "mlx.core.atleast_3d"]], "bitwise_and() (in module mlx.core)": [[83, "mlx.core.bitwise_and"]], "bitwise_or() (in module mlx.core)": [[84, "mlx.core.bitwise_or"]], "bitwise_xor() (in module mlx.core)": [[85, "mlx.core.bitwise_xor"]], "block_masked_mm() (in module mlx.core)": [[86, "mlx.core.block_masked_mm"]], "block_sparse_mm() (in module mlx.core)": [[87, "mlx.core.block_sparse_mm"]], "broadcast_to() (in module mlx.core)": [[88, "mlx.core.broadcast_to"]], "ceil() (in module mlx.core)": [[89, "mlx.core.ceil"]], "clip() (in module mlx.core)": [[90, "mlx.core.clip"]], "compile() (in module mlx.core)": [[91, "mlx.core.compile"]], "concatenate() (in module mlx.core)": [[92, "mlx.core.concatenate"]], "conj() (in module mlx.core)": [[93, "mlx.core.conj"]], "conjugate() (in module mlx.core)": [[94, "mlx.core.conjugate"]], "conv1d() (in module mlx.core)": [[95, "mlx.core.conv1d"]], "conv2d() (in module mlx.core)": [[96, "mlx.core.conv2d"]], "conv_general() (in module mlx.core)": [[97, "mlx.core.conv_general"]], "convolve() (in module mlx.core)": [[98, "mlx.core.convolve"]], "cos() (in module mlx.core)": [[99, "mlx.core.cos"]], "cosh() (in module mlx.core)": [[100, "mlx.core.cosh"]], "cummax() (in module mlx.core)": [[101, "mlx.core.cummax"]], "cummin() (in module mlx.core)": [[102, "mlx.core.cummin"]], "cumprod() (in module mlx.core)": [[103, "mlx.core.cumprod"]], "cumsum() (in module mlx.core)": [[104, "mlx.core.cumsum"]], "default_device() (in module mlx.core)": [[105, "mlx.core.default_device"]], "default_stream() (in module mlx.core)": [[106, "mlx.core.default_stream"]], "degrees() (in module mlx.core)": [[107, "mlx.core.degrees"]], "dequantize() (in module mlx.core)": [[108, "mlx.core.dequantize"]], "diag() (in module mlx.core)": [[109, "mlx.core.diag"]], "diagonal() (in module mlx.core)": [[110, "mlx.core.diagonal"]], "disable_compile() (in module mlx.core)": [[111, "mlx.core.disable_compile"]], "divide() (in module mlx.core)": [[112, "mlx.core.divide"]], "divmod() (in module mlx.core)": [[113, "mlx.core.divmod"]], "enable_compile() (in module mlx.core)": [[114, "mlx.core.enable_compile"]], "equal() (in module mlx.core)": [[115, "mlx.core.equal"]], "erf() (in module mlx.core)": [[116, "mlx.core.erf"]], "erfinv() (in module mlx.core)": [[117, "mlx.core.erfinv"]], "eval() (in module mlx.core)": [[118, "mlx.core.eval"]], "exp() (in module mlx.core)": [[119, "mlx.core.exp"]], "expand_dims() (in module mlx.core)": [[120, "mlx.core.expand_dims"]], "expm1() (in module mlx.core)": [[121, "mlx.core.expm1"]], "eye() (in module mlx.core)": [[122, "mlx.core.eye"]], "layer_norm() (in module mlx.core.fast)": [[123, "mlx.core.fast.layer_norm"]], "rms_norm() (in module mlx.core.fast)": [[124, "mlx.core.fast.rms_norm"]], "rope() (in module mlx.core.fast)": [[125, "mlx.core.fast.rope"]], "scaled_dot_product_attention() (in module mlx.core.fast)": [[126, "mlx.core.fast.scaled_dot_product_attention"]], "fft() (in module mlx.core.fft)": [[127, "mlx.core.fft.fft"]], "fft2() (in module mlx.core.fft)": [[128, "mlx.core.fft.fft2"]], "fftn() (in module mlx.core.fft)": [[129, "mlx.core.fft.fftn"]], "ifft() (in module mlx.core.fft)": [[130, "mlx.core.fft.ifft"]], "ifft2() (in module mlx.core.fft)": [[131, "mlx.core.fft.ifft2"]], "ifftn() (in module mlx.core.fft)": [[132, "mlx.core.fft.ifftn"]], "irfft() (in module mlx.core.fft)": [[133, "mlx.core.fft.irfft"]], "irfft2() (in module mlx.core.fft)": [[134, "mlx.core.fft.irfft2"]], "irfftn() (in module mlx.core.fft)": [[135, "mlx.core.fft.irfftn"]], "rfft() (in module mlx.core.fft)": [[136, "mlx.core.fft.rfft"]], "rfft2() (in module mlx.core.fft)": [[137, "mlx.core.fft.rfft2"]], "rfftn() (in module mlx.core.fft)": [[138, "mlx.core.fft.rfftn"]], "flatten() (in module mlx.core)": [[139, "mlx.core.flatten"]], "floor() (in module mlx.core)": [[140, "mlx.core.floor"]], "floor_divide() (in module mlx.core)": [[141, "mlx.core.floor_divide"]], "full() (in module mlx.core)": [[142, "mlx.core.full"]], "gather_mm() (in module mlx.core)": [[143, "mlx.core.gather_mm"]], "gather_qmm() (in module mlx.core)": [[144, "mlx.core.gather_qmm"]], "grad() (in module mlx.core)": [[145, "mlx.core.grad"]], "greater() (in module mlx.core)": [[146, "mlx.core.greater"]], "greater_equal() (in module mlx.core)": [[147, "mlx.core.greater_equal"]], "identity() (in module mlx.core)": [[148, "mlx.core.identity"]], "inner() (in module mlx.core)": [[149, "mlx.core.inner"]], "isclose() (in module mlx.core)": [[150, "mlx.core.isclose"]], "isinf() (in module mlx.core)": [[151, "mlx.core.isinf"]], "isnan() (in module mlx.core)": [[152, "mlx.core.isnan"]], "isneginf() (in module mlx.core)": [[153, "mlx.core.isneginf"]], "isposinf() (in module mlx.core)": [[154, "mlx.core.isposinf"]], "issubdtype() (in module mlx.core)": [[155, "mlx.core.issubdtype"]], "jvp() (in module mlx.core)": [[156, "mlx.core.jvp"]], "left_shift() (in module mlx.core)": [[157, "mlx.core.left_shift"]], "less() (in module mlx.core)": [[158, "mlx.core.less"]], "less_equal() (in module mlx.core)": [[159, "mlx.core.less_equal"]], "cholesky() (in module mlx.core.linalg)": [[160, "mlx.core.linalg.cholesky"]], "inv() (in module mlx.core.linalg)": [[161, "mlx.core.linalg.inv"]], "norm() (in module mlx.core.linalg)": [[162, "mlx.core.linalg.norm"]], "qr() (in module mlx.core.linalg)": [[163, "mlx.core.linalg.qr"]], "svd() (in module mlx.core.linalg)": [[164, "mlx.core.linalg.svd"]], "linspace() (in module mlx.core)": [[165, "mlx.core.linspace"]], "load() (in module mlx.core)": [[166, "mlx.core.load"]], "log() (in module mlx.core)": [[167, "mlx.core.log"]], "log10() (in module mlx.core)": [[168, "mlx.core.log10"]], "log1p() (in module mlx.core)": [[169, "mlx.core.log1p"]], "log2() (in module mlx.core)": [[170, "mlx.core.log2"]], "logaddexp() (in module mlx.core)": [[171, "mlx.core.logaddexp"]], "logical_and() (in module mlx.core)": [[172, "mlx.core.logical_and"]], "logical_not() (in module mlx.core)": [[173, "mlx.core.logical_not"]], "logical_or() (in module mlx.core)": [[174, "mlx.core.logical_or"]], "logsumexp() (in module mlx.core)": [[175, "mlx.core.logsumexp"]], "matmul() (in module mlx.core)": [[176, "mlx.core.matmul"]], "max() (in module mlx.core)": [[177, "mlx.core.max"]], "maximum() (in module mlx.core)": [[178, "mlx.core.maximum"]], "mean() (in module mlx.core)": [[179, "mlx.core.mean"]], "meshgrid() (in module mlx.core)": [[180, "mlx.core.meshgrid"]], "clear_cache() (in module mlx.core.metal)": [[181, "mlx.core.metal.clear_cache"]], "device_info() (in module mlx.core.metal)": [[182, "mlx.core.metal.device_info"]], "get_active_memory() (in module mlx.core.metal)": [[183, "mlx.core.metal.get_active_memory"]], "get_cache_memory() (in module mlx.core.metal)": [[184, "mlx.core.metal.get_cache_memory"]], "get_peak_memory() (in module mlx.core.metal)": [[185, "mlx.core.metal.get_peak_memory"]], "is_available() (in module mlx.core.metal)": [[186, "mlx.core.metal.is_available"]], "reset_peak_memory() (in module mlx.core.metal)": [[187, "mlx.core.metal.reset_peak_memory"]], "set_cache_limit() (in module mlx.core.metal)": [[188, "mlx.core.metal.set_cache_limit"]], "set_memory_limit() (in module mlx.core.metal)": [[189, "mlx.core.metal.set_memory_limit"]], "start_capture() (in module mlx.core.metal)": [[190, "mlx.core.metal.start_capture"]], "stop_capture() (in module mlx.core.metal)": [[191, "mlx.core.metal.stop_capture"]], "min() (in module mlx.core)": [[192, "mlx.core.min"]], "minimum() (in module mlx.core)": [[193, "mlx.core.minimum"]], "moveaxis() (in module mlx.core)": [[194, "mlx.core.moveaxis"]], "multiply() (in module mlx.core)": [[195, "mlx.core.multiply"]], "negative() (in module mlx.core)": [[196, "mlx.core.negative"]], "new_stream() (in module mlx.core)": [[197, "mlx.core.new_stream"]], "not_equal() (in module mlx.core)": [[198, "mlx.core.not_equal"]], "ones() (in module mlx.core)": [[199, "mlx.core.ones"]], "ones_like() (in module mlx.core)": [[200, "mlx.core.ones_like"]], "outer() (in module mlx.core)": [[201, "mlx.core.outer"]], "pad() (in module mlx.core)": [[202, "mlx.core.pad"]], "partition() (in module mlx.core)": [[203, "mlx.core.partition"]], "power() (in module mlx.core)": [[204, "mlx.core.power"]], "prod() (in module mlx.core)": [[205, "mlx.core.prod"]], "quantize() (in module mlx.core)": [[206, "mlx.core.quantize"]], "quantized_matmul() (in module mlx.core)": [[207, "mlx.core.quantized_matmul"]], "radians() (in module mlx.core)": [[208, "mlx.core.radians"]], "bernoulli() (in module mlx.core.random)": [[209, "mlx.core.random.bernoulli"]], "categorical() (in module mlx.core.random)": [[210, "mlx.core.random.categorical"]], "gumbel() (in module mlx.core.random)": [[211, "mlx.core.random.gumbel"]], "key() (in module mlx.core.random)": [[212, "mlx.core.random.key"]], "multivariate_normal() (in module mlx.core.random)": [[213, "mlx.core.random.multivariate_normal"]], "normal() (in module mlx.core.random)": [[214, "mlx.core.random.normal"]], "randint() (in module mlx.core.random)": [[215, "mlx.core.random.randint"]], "seed() (in module mlx.core.random)": [[216, "mlx.core.random.seed"]], "split() (in module mlx.core.random)": [[217, "mlx.core.random.split"]], "truncated_normal() (in module mlx.core.random)": [[218, "mlx.core.random.truncated_normal"]], "uniform() (in module mlx.core.random)": [[219, "mlx.core.random.uniform"]], "reciprocal() (in module mlx.core)": [[220, "mlx.core.reciprocal"]], "remainder() (in module mlx.core)": [[221, "mlx.core.remainder"]], "repeat() (in module mlx.core)": [[222, "mlx.core.repeat"]], "reshape() (in module mlx.core)": [[223, "mlx.core.reshape"]], "right_shift() (in module mlx.core)": [[224, "mlx.core.right_shift"]], "round() (in module mlx.core)": [[225, "mlx.core.round"]], "rsqrt() (in module mlx.core)": [[226, "mlx.core.rsqrt"]], "save() (in module mlx.core)": [[227, "mlx.core.save"]], "save_gguf() (in module mlx.core)": [[228, "mlx.core.save_gguf"]], "save_safetensors() (in module mlx.core)": [[229, "mlx.core.save_safetensors"]], "savez() (in module mlx.core)": [[230, "mlx.core.savez"]], "savez_compressed() (in module mlx.core)": [[231, "mlx.core.savez_compressed"]], "set_default_device() (in module mlx.core)": [[232, "mlx.core.set_default_device"]], "set_default_stream() (in module mlx.core)": [[233, "mlx.core.set_default_stream"]], "sigmoid() (in module mlx.core)": [[234, "mlx.core.sigmoid"]], "sign() (in module mlx.core)": [[235, "mlx.core.sign"]], "sin() (in module mlx.core)": [[236, "mlx.core.sin"]], "sinh() (in module mlx.core)": [[237, "mlx.core.sinh"]], "softmax() (in module mlx.core)": [[238, "mlx.core.softmax"]], "sort() (in module mlx.core)": [[239, "mlx.core.sort"]], "split() (in module mlx.core)": [[240, "mlx.core.split"]], "sqrt() (in module mlx.core)": [[241, "mlx.core.sqrt"]], "square() (in module mlx.core)": [[242, "mlx.core.square"]], "squeeze() (in module mlx.core)": [[243, "mlx.core.squeeze"]], "stack() (in module mlx.core)": [[244, "mlx.core.stack"]], "std() (in module mlx.core)": [[245, "mlx.core.std"]], "stop_gradient() (in module mlx.core)": [[246, "mlx.core.stop_gradient"]], "stream() (in module mlx.core)": [[247, "mlx.core.stream"]], "subtract() (in module mlx.core)": [[248, "mlx.core.subtract"]], "sum() (in module mlx.core)": [[249, "mlx.core.sum"]], "swapaxes() (in module mlx.core)": [[250, "mlx.core.swapaxes"]], "synchronize() (in module mlx.core)": [[251, "mlx.core.synchronize"]], "take() (in module mlx.core)": [[252, "mlx.core.take"]], "take_along_axis() (in module mlx.core)": [[253, "mlx.core.take_along_axis"]], "tan() (in module mlx.core)": [[254, "mlx.core.tan"]], "tanh() (in module mlx.core)": [[255, "mlx.core.tanh"]], "tensordot() (in module mlx.core)": [[256, "mlx.core.tensordot"]], "tile() (in module mlx.core)": [[257, "mlx.core.tile"]], "topk() (in module mlx.core)": [[258, "mlx.core.topk"]], "trace() (in module mlx.core)": [[259, "mlx.core.trace"]], "transpose() (in module mlx.core)": [[260, "mlx.core.transpose"]], "tri() (in module mlx.core)": [[261, "mlx.core.tri"]], "tril() (in module mlx.core)": [[262, "mlx.core.tril"]], "triu() (in module mlx.core)": [[263, "mlx.core.triu"]], "value_and_grad() (in module mlx.core)": [[264, "mlx.core.value_and_grad"]], "var() (in module mlx.core)": [[265, "mlx.core.var"]], "vjp() (in module mlx.core)": [[266, "mlx.core.vjp"]], "vmap() (in module mlx.core)": [[267, "mlx.core.vmap"]], "where() (in module mlx.core)": [[268, "mlx.core.where"]], "zeros() (in module mlx.core)": [[269, "mlx.core.zeros"]], "zeros_like() (in module mlx.core)": [[270, "mlx.core.zeros_like"]], "quantize() (in module mlx.nn)": [[271, "mlx.nn.quantize"]], "value_and_grad() (in module mlx.nn)": [[272, "mlx.nn.value_and_grad"]], "clip_grad_norm() (in module mlx.optimizers)": [[273, "mlx.optimizers.clip_grad_norm"]], "tree_flatten() (in module mlx.utils)": [[274, "mlx.utils.tree_flatten"]], "tree_map() (in module mlx.utils)": [[275, "mlx.utils.tree_map"]], "tree_map_with_path() (in module mlx.utils)": [[276, "mlx.utils.tree_map_with_path"]], "tree_reduce() (in module mlx.utils)": [[277, "mlx.utils.tree_reduce"]], "tree_unflatten() (in module mlx.utils)": [[278, "mlx.utils.tree_unflatten"]], "stream (class in mlx.core)": [[279, "mlx.core.Stream"]], "__init__() (stream method)": [[279, "mlx.core.Stream.__init__"]], "alibi (class in mlx.nn)": [[288, "mlx.nn.ALiBi"]], "avgpool1d (class in mlx.nn)": [[289, "mlx.nn.AvgPool1d"]], "avgpool2d (class in mlx.nn)": [[290, "mlx.nn.AvgPool2d"]], "batchnorm (class in mlx.nn)": [[291, "mlx.nn.BatchNorm"]], "conv1d (class in mlx.nn)": [[292, "mlx.nn.Conv1d"]], "conv2d (class in mlx.nn)": [[293, "mlx.nn.Conv2d"]], "conv3d (class in mlx.nn)": [[294, "mlx.nn.Conv3d"]], "dropout (class in mlx.nn)": [[295, "mlx.nn.Dropout"]], "dropout2d (class in mlx.nn)": [[296, "mlx.nn.Dropout2d"]], "dropout3d (class in mlx.nn)": [[297, "mlx.nn.Dropout3d"]], "embedding (class in mlx.nn)": [[298, "mlx.nn.Embedding"]], "gelu (class in mlx.nn)": [[299, "mlx.nn.GELU"], [354, "mlx.nn.gelu"]], "gru (class in mlx.nn)": [[300, "mlx.nn.GRU"]], "groupnorm (class in mlx.nn)": [[301, "mlx.nn.GroupNorm"]], "instancenorm (class in mlx.nn)": [[302, "mlx.nn.InstanceNorm"]], "lstm (class in mlx.nn)": [[303, "mlx.nn.LSTM"]], "layernorm (class in mlx.nn)": [[304, "mlx.nn.LayerNorm"]], "linear (class in mlx.nn)": [[305, "mlx.nn.Linear"]], "maxpool1d (class in mlx.nn)": [[306, "mlx.nn.MaxPool1d"]], "maxpool2d (class in mlx.nn)": [[307, "mlx.nn.MaxPool2d"]], "mish (class in mlx.nn)": [[308, "mlx.nn.Mish"], [376, "mlx.nn.mish"]], "apply() (module method)": [[309, "mlx.nn.Module.apply"]], "apply_to_modules() (module method)": [[310, "mlx.nn.Module.apply_to_modules"]], "children() (module method)": [[311, "mlx.nn.Module.children"]], "eval() (module method)": [[312, "mlx.nn.Module.eval"]], "filter_and_map() (module method)": [[313, "mlx.nn.Module.filter_and_map"]], "freeze() (module method)": [[314, "mlx.nn.Module.freeze"]], "leaf_modules() (module method)": [[315, "mlx.nn.Module.leaf_modules"]], "load_weights() (module method)": [[316, "mlx.nn.Module.load_weights"]], "modules() (module method)": [[317, "mlx.nn.Module.modules"]], "named_modules() (module method)": [[318, "mlx.nn.Module.named_modules"]], "parameters() (module method)": [[319, "mlx.nn.Module.parameters"]], "save_weights() (module method)": [[320, "mlx.nn.Module.save_weights"]], "set_dtype() (module method)": [[321, "mlx.nn.Module.set_dtype"]], "state (module property)": [[322, "mlx.nn.Module.state"]], "train() (module method)": [[323, "mlx.nn.Module.train"]], "trainable_parameters() (module method)": [[324, "mlx.nn.Module.trainable_parameters"]], "training (module property)": [[325, "mlx.nn.Module.training"]], "unfreeze() (module method)": [[326, "mlx.nn.Module.unfreeze"]], "update() (module method)": [[327, "mlx.nn.Module.update"]], "update_modules() (module method)": [[328, "mlx.nn.Module.update_modules"]], "multiheadattention (class in mlx.nn)": [[329, "mlx.nn.MultiHeadAttention"]], "prelu (class in mlx.nn)": [[330, "mlx.nn.PReLU"], [377, "mlx.nn.prelu"]], "quantizedembedding (class in mlx.nn)": [[331, "mlx.nn.QuantizedEmbedding"]], "quantizedlinear (class in mlx.nn)": [[332, "mlx.nn.QuantizedLinear"]], "rmsnorm (class in mlx.nn)": [[333, "mlx.nn.RMSNorm"]], "rnn (class in mlx.nn)": [[334, "mlx.nn.RNN"]], "relu (class in mlx.nn)": [[335, "mlx.nn.ReLU"], [378, "mlx.nn.relu"]], "rope (class in mlx.nn)": [[336, "mlx.nn.RoPE"]], "selu (class in mlx.nn)": [[337, "mlx.nn.SELU"], [380, "mlx.nn.selu"]], "sequential (class in mlx.nn)": [[338, "mlx.nn.Sequential"]], "silu (class in mlx.nn)": [[339, "mlx.nn.SiLU"], [382, "mlx.nn.silu"]], "sinusoidalpositionalencoding (class in mlx.nn)": [[340, "mlx.nn.SinusoidalPositionalEncoding"]], "softshrink (class in mlx.nn)": [[341, "mlx.nn.Softshrink"], [385, "mlx.nn.softshrink"]], "step (class in mlx.nn)": [[342, "mlx.nn.Step"], [386, "mlx.nn.step"]], "transformer (class in mlx.nn)": [[343, "mlx.nn.Transformer"]], "upsample (class in mlx.nn)": [[344, "mlx.nn.Upsample"]], "constant() (in module mlx.nn.init)": [[345, "mlx.nn.init.constant"]], "glorot_normal() (in module mlx.nn.init)": [[346, "mlx.nn.init.glorot_normal"]], "glorot_uniform() (in module mlx.nn.init)": [[347, "mlx.nn.init.glorot_uniform"]], "he_normal() (in module mlx.nn.init)": [[348, "mlx.nn.init.he_normal"]], "he_uniform() (in module mlx.nn.init)": [[349, "mlx.nn.init.he_uniform"]], "identity() (in module mlx.nn.init)": [[350, "mlx.nn.init.identity"]], "normal() (in module mlx.nn.init)": [[351, "mlx.nn.init.normal"]], "uniform() (in module mlx.nn.init)": [[352, "mlx.nn.init.uniform"]], "elu (class in mlx.nn)": [[353, "mlx.nn.elu"]], "gelu_approx (class in mlx.nn)": [[355, "mlx.nn.gelu_approx"]], "gelu_fast_approx (class in mlx.nn)": [[356, "mlx.nn.gelu_fast_approx"]], "glu (class in mlx.nn)": [[357, "mlx.nn.glu"]], "hardswish (class in mlx.nn)": [[358, "mlx.nn.hardswish"]], "leaky_relu (class in mlx.nn)": [[359, "mlx.nn.leaky_relu"]], "log_sigmoid (class in mlx.nn)": [[360, "mlx.nn.log_sigmoid"]], "log_softmax (class in mlx.nn)": [[361, "mlx.nn.log_softmax"]], "binary_cross_entropy (class in mlx.nn.losses)": [[362, "mlx.nn.losses.binary_cross_entropy"]], "cosine_similarity_loss (class in mlx.nn.losses)": [[363, "mlx.nn.losses.cosine_similarity_loss"]], "cross_entropy (class in mlx.nn.losses)": [[364, "mlx.nn.losses.cross_entropy"]], "gaussian_nll_loss (class in mlx.nn.losses)": [[365, "mlx.nn.losses.gaussian_nll_loss"]], "hinge_loss (class in mlx.nn.losses)": [[366, "mlx.nn.losses.hinge_loss"]], "huber_loss (class in mlx.nn.losses)": [[367, "mlx.nn.losses.huber_loss"]], "kl_div_loss (class in mlx.nn.losses)": [[368, "mlx.nn.losses.kl_div_loss"]], "l1_loss (class in mlx.nn.losses)": [[369, "mlx.nn.losses.l1_loss"]], "log_cosh_loss (class in mlx.nn.losses)": [[370, "mlx.nn.losses.log_cosh_loss"]], "margin_ranking_loss (class in mlx.nn.losses)": [[371, "mlx.nn.losses.margin_ranking_loss"]], "mse_loss (class in mlx.nn.losses)": [[372, "mlx.nn.losses.mse_loss"]], "nll_loss (class in mlx.nn.losses)": [[373, "mlx.nn.losses.nll_loss"]], "smooth_l1_loss (class in mlx.nn.losses)": [[374, "mlx.nn.losses.smooth_l1_loss"]], "triplet_loss (class in mlx.nn.losses)": [[375, "mlx.nn.losses.triplet_loss"]], "relu6 (class in mlx.nn)": [[379, "mlx.nn.relu6"]], "sigmoid (class in mlx.nn)": [[381, "mlx.nn.sigmoid"]], "softmax (class in mlx.nn)": [[383, "mlx.nn.softmax"]], "softplus (class in mlx.nn)": [[384, "mlx.nn.softplus"]], "tanh (class in mlx.nn)": [[387, "mlx.nn.tanh"]], "module (class in mlx.nn)": [[392, "mlx.nn.Module"]], "adadelta (class in mlx.optimizers)": [[395, "mlx.optimizers.AdaDelta"]], "adafactor (class in mlx.optimizers)": [[396, "mlx.optimizers.Adafactor"]], "adagrad (class in mlx.optimizers)": [[397, "mlx.optimizers.Adagrad"]], "adam (class in mlx.optimizers)": [[398, "mlx.optimizers.Adam"]], "adamw (class in mlx.optimizers)": [[399, "mlx.optimizers.AdamW"]], "adamax (class in mlx.optimizers)": [[400, "mlx.optimizers.Adamax"]], "lion (class in mlx.optimizers)": [[401, "mlx.optimizers.Lion"]], "apply_gradients() (optimizer method)": [[402, "mlx.optimizers.Optimizer.apply_gradients"]], "init() (optimizer method)": [[403, "mlx.optimizers.Optimizer.init"]], "state (optimizer property)": [[404, "mlx.optimizers.Optimizer.state"]], "update() (optimizer method)": [[405, "mlx.optimizers.Optimizer.update"]], "rmsprop (class in mlx.optimizers)": [[406, "mlx.optimizers.RMSprop"]], "sgd (class in mlx.optimizers)": [[407, "mlx.optimizers.SGD"]], "cosine_decay() (in module mlx.optimizers)": [[408, "mlx.optimizers.cosine_decay"]], "exponential_decay() (in module mlx.optimizers)": [[409, "mlx.optimizers.exponential_decay"]], "join_schedules() (in module mlx.optimizers)": [[410, "mlx.optimizers.join_schedules"]], "linear_schedule() (in module mlx.optimizers)": [[411, "mlx.optimizers.linear_schedule"]], "step_decay() (in module mlx.optimizers)": [[412, "mlx.optimizers.step_decay"]], "optimizer (class in mlx.optimizers)": [[414, "mlx.optimizers.Optimizer"]]}})