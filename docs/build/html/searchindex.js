Search.setIndex({"docnames": ["cpp/ops", "dev/extensions", "dev/metal_debugger", "examples/linear_regression", "examples/llama-inference", "examples/mlp", "index", "install", "python/_autosummary/mlx.core.Device", "python/_autosummary/mlx.core.Dtype", "python/_autosummary/mlx.core.DtypeCategory", "python/_autosummary/mlx.core.abs", "python/_autosummary/mlx.core.add", "python/_autosummary/mlx.core.addmm", "python/_autosummary/mlx.core.all", "python/_autosummary/mlx.core.allclose", "python/_autosummary/mlx.core.any", "python/_autosummary/mlx.core.arange", "python/_autosummary/mlx.core.arccos", "python/_autosummary/mlx.core.arccosh", "python/_autosummary/mlx.core.arcsin", "python/_autosummary/mlx.core.arcsinh", "python/_autosummary/mlx.core.arctan", "python/_autosummary/mlx.core.arctan2", "python/_autosummary/mlx.core.arctanh", "python/_autosummary/mlx.core.argmax", "python/_autosummary/mlx.core.argmin", "python/_autosummary/mlx.core.argpartition", "python/_autosummary/mlx.core.argsort", "python/_autosummary/mlx.core.array", "python/_autosummary/mlx.core.array.T", "python/_autosummary/mlx.core.array.abs", "python/_autosummary/mlx.core.array.all", "python/_autosummary/mlx.core.array.any", "python/_autosummary/mlx.core.array.argmax", "python/_autosummary/mlx.core.array.argmin", "python/_autosummary/mlx.core.array.astype", "python/_autosummary/mlx.core.array.at", "python/_autosummary/mlx.core.array.cos", "python/_autosummary/mlx.core.array.cummax", "python/_autosummary/mlx.core.array.cummin", "python/_autosummary/mlx.core.array.cumprod", "python/_autosummary/mlx.core.array.cumsum", "python/_autosummary/mlx.core.array.diag", "python/_autosummary/mlx.core.array.diagonal", "python/_autosummary/mlx.core.array.dtype", "python/_autosummary/mlx.core.array.exp", "python/_autosummary/mlx.core.array.flatten", "python/_autosummary/mlx.core.array.item", "python/_autosummary/mlx.core.array.itemsize", "python/_autosummary/mlx.core.array.log", "python/_autosummary/mlx.core.array.log10", "python/_autosummary/mlx.core.array.log1p", "python/_autosummary/mlx.core.array.log2", "python/_autosummary/mlx.core.array.logsumexp", "python/_autosummary/mlx.core.array.max", "python/_autosummary/mlx.core.array.mean", "python/_autosummary/mlx.core.array.min", "python/_autosummary/mlx.core.array.moveaxis", "python/_autosummary/mlx.core.array.nbytes", "python/_autosummary/mlx.core.array.ndim", "python/_autosummary/mlx.core.array.prod", "python/_autosummary/mlx.core.array.reciprocal", "python/_autosummary/mlx.core.array.reshape", "python/_autosummary/mlx.core.array.round", "python/_autosummary/mlx.core.array.rsqrt", "python/_autosummary/mlx.core.array.shape", "python/_autosummary/mlx.core.array.sin", "python/_autosummary/mlx.core.array.size", "python/_autosummary/mlx.core.array.split", "python/_autosummary/mlx.core.array.sqrt", "python/_autosummary/mlx.core.array.square", "python/_autosummary/mlx.core.array.squeeze", "python/_autosummary/mlx.core.array.sum", "python/_autosummary/mlx.core.array.swapaxes", "python/_autosummary/mlx.core.array.tolist", "python/_autosummary/mlx.core.array.transpose", "python/_autosummary/mlx.core.array.var", "python/_autosummary/mlx.core.array_equal", "python/_autosummary/mlx.core.as_strided", "python/_autosummary/mlx.core.atleast_1d", "python/_autosummary/mlx.core.atleast_2d", "python/_autosummary/mlx.core.atleast_3d", "python/_autosummary/mlx.core.bitwise_and", "python/_autosummary/mlx.core.bitwise_or", "python/_autosummary/mlx.core.bitwise_xor", "python/_autosummary/mlx.core.block_masked_mm", "python/_autosummary/mlx.core.broadcast_to", "python/_autosummary/mlx.core.ceil", "python/_autosummary/mlx.core.clip", "python/_autosummary/mlx.core.compile", "python/_autosummary/mlx.core.concatenate", "python/_autosummary/mlx.core.conj", "python/_autosummary/mlx.core.conjugate", "python/_autosummary/mlx.core.conv1d", "python/_autosummary/mlx.core.conv2d", "python/_autosummary/mlx.core.conv_general", "python/_autosummary/mlx.core.convolve", "python/_autosummary/mlx.core.cos", "python/_autosummary/mlx.core.cosh", "python/_autosummary/mlx.core.cummax", "python/_autosummary/mlx.core.cummin", "python/_autosummary/mlx.core.cumprod", "python/_autosummary/mlx.core.cumsum", "python/_autosummary/mlx.core.default_device", "python/_autosummary/mlx.core.default_stream", "python/_autosummary/mlx.core.degrees", "python/_autosummary/mlx.core.dequantize", "python/_autosummary/mlx.core.diag", "python/_autosummary/mlx.core.diagonal", "python/_autosummary/mlx.core.disable_compile", "python/_autosummary/mlx.core.distributed.Group", "python/_autosummary/mlx.core.distributed.all_gather", "python/_autosummary/mlx.core.distributed.all_sum", "python/_autosummary/mlx.core.distributed.init", "python/_autosummary/mlx.core.distributed.is_available", "python/_autosummary/mlx.core.divide", "python/_autosummary/mlx.core.divmod", "python/_autosummary/mlx.core.enable_compile", "python/_autosummary/mlx.core.equal", "python/_autosummary/mlx.core.erf", "python/_autosummary/mlx.core.erfinv", "python/_autosummary/mlx.core.eval", "python/_autosummary/mlx.core.exp", "python/_autosummary/mlx.core.expand_dims", "python/_autosummary/mlx.core.expm1", "python/_autosummary/mlx.core.eye", "python/_autosummary/mlx.core.fast.layer_norm", "python/_autosummary/mlx.core.fast.rms_norm", "python/_autosummary/mlx.core.fast.rope", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention", "python/_autosummary/mlx.core.fft.fft", "python/_autosummary/mlx.core.fft.fft2", "python/_autosummary/mlx.core.fft.fftn", "python/_autosummary/mlx.core.fft.ifft", "python/_autosummary/mlx.core.fft.ifft2", "python/_autosummary/mlx.core.fft.ifftn", "python/_autosummary/mlx.core.fft.irfft", "python/_autosummary/mlx.core.fft.irfft2", "python/_autosummary/mlx.core.fft.irfftn", "python/_autosummary/mlx.core.fft.rfft", "python/_autosummary/mlx.core.fft.rfft2", "python/_autosummary/mlx.core.fft.rfftn", "python/_autosummary/mlx.core.flatten", "python/_autosummary/mlx.core.floor", "python/_autosummary/mlx.core.floor_divide", "python/_autosummary/mlx.core.full", "python/_autosummary/mlx.core.gather_mm", "python/_autosummary/mlx.core.gather_qmm", "python/_autosummary/mlx.core.grad", "python/_autosummary/mlx.core.greater", "python/_autosummary/mlx.core.greater_equal", "python/_autosummary/mlx.core.identity", "python/_autosummary/mlx.core.inner", "python/_autosummary/mlx.core.isclose", "python/_autosummary/mlx.core.isinf", "python/_autosummary/mlx.core.isnan", "python/_autosummary/mlx.core.isneginf", "python/_autosummary/mlx.core.isposinf", "python/_autosummary/mlx.core.issubdtype", "python/_autosummary/mlx.core.jvp", "python/_autosummary/mlx.core.left_shift", "python/_autosummary/mlx.core.less", "python/_autosummary/mlx.core.less_equal", "python/_autosummary/mlx.core.linalg.cholesky", "python/_autosummary/mlx.core.linalg.inv", "python/_autosummary/mlx.core.linalg.norm", "python/_autosummary/mlx.core.linalg.qr", "python/_autosummary/mlx.core.linalg.svd", "python/_autosummary/mlx.core.linspace", "python/_autosummary/mlx.core.load", "python/_autosummary/mlx.core.log", "python/_autosummary/mlx.core.log10", "python/_autosummary/mlx.core.log1p", "python/_autosummary/mlx.core.log2", "python/_autosummary/mlx.core.logaddexp", "python/_autosummary/mlx.core.logical_and", "python/_autosummary/mlx.core.logical_not", "python/_autosummary/mlx.core.logical_or", "python/_autosummary/mlx.core.logsumexp", "python/_autosummary/mlx.core.matmul", "python/_autosummary/mlx.core.max", "python/_autosummary/mlx.core.maximum", "python/_autosummary/mlx.core.mean", "python/_autosummary/mlx.core.meshgrid", "python/_autosummary/mlx.core.metal.clear_cache", "python/_autosummary/mlx.core.metal.device_info", "python/_autosummary/mlx.core.metal.get_active_memory", "python/_autosummary/mlx.core.metal.get_cache_memory", "python/_autosummary/mlx.core.metal.get_peak_memory", "python/_autosummary/mlx.core.metal.is_available", "python/_autosummary/mlx.core.metal.reset_peak_memory", "python/_autosummary/mlx.core.metal.set_cache_limit", "python/_autosummary/mlx.core.metal.set_memory_limit", "python/_autosummary/mlx.core.metal.start_capture", "python/_autosummary/mlx.core.metal.stop_capture", "python/_autosummary/mlx.core.min", "python/_autosummary/mlx.core.minimum", "python/_autosummary/mlx.core.moveaxis", "python/_autosummary/mlx.core.multiply", "python/_autosummary/mlx.core.negative", "python/_autosummary/mlx.core.new_stream", "python/_autosummary/mlx.core.not_equal", "python/_autosummary/mlx.core.ones", "python/_autosummary/mlx.core.ones_like", "python/_autosummary/mlx.core.outer", "python/_autosummary/mlx.core.pad", "python/_autosummary/mlx.core.partition", "python/_autosummary/mlx.core.power", "python/_autosummary/mlx.core.prod", "python/_autosummary/mlx.core.quantize", "python/_autosummary/mlx.core.quantized_matmul", "python/_autosummary/mlx.core.radians", "python/_autosummary/mlx.core.random.bernoulli", "python/_autosummary/mlx.core.random.categorical", "python/_autosummary/mlx.core.random.gumbel", "python/_autosummary/mlx.core.random.key", "python/_autosummary/mlx.core.random.multivariate_normal", "python/_autosummary/mlx.core.random.normal", "python/_autosummary/mlx.core.random.randint", "python/_autosummary/mlx.core.random.seed", "python/_autosummary/mlx.core.random.split", "python/_autosummary/mlx.core.random.truncated_normal", "python/_autosummary/mlx.core.random.uniform", "python/_autosummary/mlx.core.reciprocal", "python/_autosummary/mlx.core.remainder", "python/_autosummary/mlx.core.repeat", "python/_autosummary/mlx.core.reshape", "python/_autosummary/mlx.core.right_shift", "python/_autosummary/mlx.core.round", "python/_autosummary/mlx.core.rsqrt", "python/_autosummary/mlx.core.save", "python/_autosummary/mlx.core.save_gguf", "python/_autosummary/mlx.core.save_safetensors", "python/_autosummary/mlx.core.savez", "python/_autosummary/mlx.core.savez_compressed", "python/_autosummary/mlx.core.set_default_device", "python/_autosummary/mlx.core.set_default_stream", "python/_autosummary/mlx.core.sigmoid", "python/_autosummary/mlx.core.sign", "python/_autosummary/mlx.core.sin", "python/_autosummary/mlx.core.sinh", "python/_autosummary/mlx.core.softmax", "python/_autosummary/mlx.core.sort", "python/_autosummary/mlx.core.split", "python/_autosummary/mlx.core.sqrt", "python/_autosummary/mlx.core.square", "python/_autosummary/mlx.core.squeeze", "python/_autosummary/mlx.core.stack", "python/_autosummary/mlx.core.std", "python/_autosummary/mlx.core.stop_gradient", "python/_autosummary/mlx.core.stream", "python/_autosummary/mlx.core.subtract", "python/_autosummary/mlx.core.sum", "python/_autosummary/mlx.core.swapaxes", "python/_autosummary/mlx.core.synchronize", "python/_autosummary/mlx.core.take", "python/_autosummary/mlx.core.take_along_axis", "python/_autosummary/mlx.core.tan", "python/_autosummary/mlx.core.tanh", "python/_autosummary/mlx.core.tensordot", "python/_autosummary/mlx.core.tile", "python/_autosummary/mlx.core.topk", "python/_autosummary/mlx.core.trace", "python/_autosummary/mlx.core.transpose", "python/_autosummary/mlx.core.tri", "python/_autosummary/mlx.core.tril", "python/_autosummary/mlx.core.triu", "python/_autosummary/mlx.core.value_and_grad", "python/_autosummary/mlx.core.var", "python/_autosummary/mlx.core.view", "python/_autosummary/mlx.core.vjp", "python/_autosummary/mlx.core.vmap", "python/_autosummary/mlx.core.where", "python/_autosummary/mlx.core.zeros", "python/_autosummary/mlx.core.zeros_like", "python/_autosummary/mlx.nn.quantize", "python/_autosummary/mlx.nn.value_and_grad", "python/_autosummary/mlx.optimizers.clip_grad_norm", "python/_autosummary/mlx.utils.tree_flatten", "python/_autosummary/mlx.utils.tree_map", "python/_autosummary/mlx.utils.tree_map_with_path", "python/_autosummary/mlx.utils.tree_reduce", "python/_autosummary/mlx.utils.tree_unflatten", "python/_autosummary/stream_class", "python/array", "python/data_types", "python/devices_and_streams", "python/distributed", "python/fast", "python/fft", "python/linalg", "python/metal", "python/nn", "python/nn/_autosummary/mlx.nn.ALiBi", "python/nn/_autosummary/mlx.nn.AvgPool1d", "python/nn/_autosummary/mlx.nn.AvgPool2d", "python/nn/_autosummary/mlx.nn.BatchNorm", "python/nn/_autosummary/mlx.nn.Conv1d", "python/nn/_autosummary/mlx.nn.Conv2d", "python/nn/_autosummary/mlx.nn.Conv3d", "python/nn/_autosummary/mlx.nn.Dropout", "python/nn/_autosummary/mlx.nn.Dropout2d", "python/nn/_autosummary/mlx.nn.Dropout3d", "python/nn/_autosummary/mlx.nn.Embedding", "python/nn/_autosummary/mlx.nn.GELU", "python/nn/_autosummary/mlx.nn.GLU", "python/nn/_autosummary/mlx.nn.GRU", "python/nn/_autosummary/mlx.nn.GroupNorm", "python/nn/_autosummary/mlx.nn.HardShrink", "python/nn/_autosummary/mlx.nn.HardTanh", "python/nn/_autosummary/mlx.nn.Hardswish", "python/nn/_autosummary/mlx.nn.InstanceNorm", "python/nn/_autosummary/mlx.nn.LSTM", "python/nn/_autosummary/mlx.nn.LayerNorm", "python/nn/_autosummary/mlx.nn.LeakyReLU", "python/nn/_autosummary/mlx.nn.Linear", "python/nn/_autosummary/mlx.nn.MaxPool1d", "python/nn/_autosummary/mlx.nn.MaxPool2d", "python/nn/_autosummary/mlx.nn.Mish", "python/nn/_autosummary/mlx.nn.Module.apply", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules", "python/nn/_autosummary/mlx.nn.Module.children", "python/nn/_autosummary/mlx.nn.Module.eval", "python/nn/_autosummary/mlx.nn.Module.filter_and_map", "python/nn/_autosummary/mlx.nn.Module.freeze", "python/nn/_autosummary/mlx.nn.Module.leaf_modules", "python/nn/_autosummary/mlx.nn.Module.load_weights", "python/nn/_autosummary/mlx.nn.Module.modules", "python/nn/_autosummary/mlx.nn.Module.named_modules", "python/nn/_autosummary/mlx.nn.Module.parameters", "python/nn/_autosummary/mlx.nn.Module.save_weights", "python/nn/_autosummary/mlx.nn.Module.set_dtype", "python/nn/_autosummary/mlx.nn.Module.state", "python/nn/_autosummary/mlx.nn.Module.train", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters", "python/nn/_autosummary/mlx.nn.Module.training", "python/nn/_autosummary/mlx.nn.Module.unfreeze", "python/nn/_autosummary/mlx.nn.Module.update", "python/nn/_autosummary/mlx.nn.Module.update_modules", "python/nn/_autosummary/mlx.nn.MultiHeadAttention", "python/nn/_autosummary/mlx.nn.PReLU", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding", "python/nn/_autosummary/mlx.nn.QuantizedLinear", "python/nn/_autosummary/mlx.nn.RMSNorm", "python/nn/_autosummary/mlx.nn.RNN", "python/nn/_autosummary/mlx.nn.ReLU", "python/nn/_autosummary/mlx.nn.ReLU6", "python/nn/_autosummary/mlx.nn.RoPE", "python/nn/_autosummary/mlx.nn.SELU", "python/nn/_autosummary/mlx.nn.Sequential", "python/nn/_autosummary/mlx.nn.SiLU", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding", "python/nn/_autosummary/mlx.nn.Softmax", "python/nn/_autosummary/mlx.nn.Softmin", "python/nn/_autosummary/mlx.nn.Softplus", "python/nn/_autosummary/mlx.nn.Softshrink", "python/nn/_autosummary/mlx.nn.Softsign", "python/nn/_autosummary/mlx.nn.Step", "python/nn/_autosummary/mlx.nn.Tanh", "python/nn/_autosummary/mlx.nn.Transformer", "python/nn/_autosummary/mlx.nn.Upsample", "python/nn/_autosummary/mlx.nn.init.constant", "python/nn/_autosummary/mlx.nn.init.glorot_normal", "python/nn/_autosummary/mlx.nn.init.glorot_uniform", "python/nn/_autosummary/mlx.nn.init.he_normal", "python/nn/_autosummary/mlx.nn.init.he_uniform", "python/nn/_autosummary/mlx.nn.init.identity", "python/nn/_autosummary/mlx.nn.init.normal", "python/nn/_autosummary/mlx.nn.init.uniform", "python/nn/_autosummary_functions/mlx.nn.elu", "python/nn/_autosummary_functions/mlx.nn.gelu", "python/nn/_autosummary_functions/mlx.nn.gelu_approx", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx", "python/nn/_autosummary_functions/mlx.nn.glu", "python/nn/_autosummary_functions/mlx.nn.hard_shrink", "python/nn/_autosummary_functions/mlx.nn.hard_tanh", "python/nn/_autosummary_functions/mlx.nn.hardswish", "python/nn/_autosummary_functions/mlx.nn.leaky_relu", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid", "python/nn/_autosummary_functions/mlx.nn.log_softmax", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss", "python/nn/_autosummary_functions/mlx.nn.mish", "python/nn/_autosummary_functions/mlx.nn.prelu", "python/nn/_autosummary_functions/mlx.nn.relu", "python/nn/_autosummary_functions/mlx.nn.relu6", "python/nn/_autosummary_functions/mlx.nn.selu", "python/nn/_autosummary_functions/mlx.nn.sigmoid", "python/nn/_autosummary_functions/mlx.nn.silu", "python/nn/_autosummary_functions/mlx.nn.softmax", "python/nn/_autosummary_functions/mlx.nn.softmin", "python/nn/_autosummary_functions/mlx.nn.softplus", "python/nn/_autosummary_functions/mlx.nn.softshrink", "python/nn/_autosummary_functions/mlx.nn.step", "python/nn/_autosummary_functions/mlx.nn.tanh", "python/nn/functions", "python/nn/init", "python/nn/layers", "python/nn/losses", "python/nn/module", "python/ops", "python/optimizers", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta", "python/optimizers/_autosummary/mlx.optimizers.Adafactor", "python/optimizers/_autosummary/mlx.optimizers.Adagrad", "python/optimizers/_autosummary/mlx.optimizers.Adam", "python/optimizers/_autosummary/mlx.optimizers.AdamW", "python/optimizers/_autosummary/mlx.optimizers.Adamax", "python/optimizers/_autosummary/mlx.optimizers.Lion", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update", "python/optimizers/_autosummary/mlx.optimizers.RMSprop", "python/optimizers/_autosummary/mlx.optimizers.SGD", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay", "python/optimizers/_autosummary/mlx.optimizers.join_schedules", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule", "python/optimizers/_autosummary/mlx.optimizers.step_decay", "python/optimizers/common_optimizers", "python/optimizers/optimizer", "python/optimizers/schedulers", "python/random", "python/transforms", "python/tree_utils", "usage/compile", "usage/distributed", "usage/function_transforms", "usage/indexing", "usage/lazy_evaluation", "usage/numpy", "usage/quick_start", "usage/saving_and_loading", "usage/unified_memory", "usage/using_streams"], "filenames": ["cpp/ops.rst", "dev/extensions.rst", "dev/metal_debugger.rst", "examples/linear_regression.rst", "examples/llama-inference.rst", "examples/mlp.rst", "index.rst", "install.rst", "python/_autosummary/mlx.core.Device.rst", "python/_autosummary/mlx.core.Dtype.rst", "python/_autosummary/mlx.core.DtypeCategory.rst", "python/_autosummary/mlx.core.abs.rst", "python/_autosummary/mlx.core.add.rst", "python/_autosummary/mlx.core.addmm.rst", "python/_autosummary/mlx.core.all.rst", "python/_autosummary/mlx.core.allclose.rst", "python/_autosummary/mlx.core.any.rst", "python/_autosummary/mlx.core.arange.rst", "python/_autosummary/mlx.core.arccos.rst", "python/_autosummary/mlx.core.arccosh.rst", "python/_autosummary/mlx.core.arcsin.rst", "python/_autosummary/mlx.core.arcsinh.rst", "python/_autosummary/mlx.core.arctan.rst", "python/_autosummary/mlx.core.arctan2.rst", "python/_autosummary/mlx.core.arctanh.rst", "python/_autosummary/mlx.core.argmax.rst", "python/_autosummary/mlx.core.argmin.rst", "python/_autosummary/mlx.core.argpartition.rst", "python/_autosummary/mlx.core.argsort.rst", "python/_autosummary/mlx.core.array.rst", "python/_autosummary/mlx.core.array.T.rst", "python/_autosummary/mlx.core.array.abs.rst", "python/_autosummary/mlx.core.array.all.rst", "python/_autosummary/mlx.core.array.any.rst", "python/_autosummary/mlx.core.array.argmax.rst", "python/_autosummary/mlx.core.array.argmin.rst", "python/_autosummary/mlx.core.array.astype.rst", "python/_autosummary/mlx.core.array.at.rst", "python/_autosummary/mlx.core.array.cos.rst", "python/_autosummary/mlx.core.array.cummax.rst", "python/_autosummary/mlx.core.array.cummin.rst", "python/_autosummary/mlx.core.array.cumprod.rst", "python/_autosummary/mlx.core.array.cumsum.rst", "python/_autosummary/mlx.core.array.diag.rst", "python/_autosummary/mlx.core.array.diagonal.rst", "python/_autosummary/mlx.core.array.dtype.rst", "python/_autosummary/mlx.core.array.exp.rst", "python/_autosummary/mlx.core.array.flatten.rst", "python/_autosummary/mlx.core.array.item.rst", "python/_autosummary/mlx.core.array.itemsize.rst", "python/_autosummary/mlx.core.array.log.rst", "python/_autosummary/mlx.core.array.log10.rst", "python/_autosummary/mlx.core.array.log1p.rst", "python/_autosummary/mlx.core.array.log2.rst", "python/_autosummary/mlx.core.array.logsumexp.rst", "python/_autosummary/mlx.core.array.max.rst", "python/_autosummary/mlx.core.array.mean.rst", "python/_autosummary/mlx.core.array.min.rst", "python/_autosummary/mlx.core.array.moveaxis.rst", "python/_autosummary/mlx.core.array.nbytes.rst", "python/_autosummary/mlx.core.array.ndim.rst", "python/_autosummary/mlx.core.array.prod.rst", "python/_autosummary/mlx.core.array.reciprocal.rst", "python/_autosummary/mlx.core.array.reshape.rst", "python/_autosummary/mlx.core.array.round.rst", "python/_autosummary/mlx.core.array.rsqrt.rst", "python/_autosummary/mlx.core.array.shape.rst", "python/_autosummary/mlx.core.array.sin.rst", "python/_autosummary/mlx.core.array.size.rst", "python/_autosummary/mlx.core.array.split.rst", "python/_autosummary/mlx.core.array.sqrt.rst", "python/_autosummary/mlx.core.array.square.rst", "python/_autosummary/mlx.core.array.squeeze.rst", "python/_autosummary/mlx.core.array.sum.rst", "python/_autosummary/mlx.core.array.swapaxes.rst", "python/_autosummary/mlx.core.array.tolist.rst", "python/_autosummary/mlx.core.array.transpose.rst", "python/_autosummary/mlx.core.array.var.rst", "python/_autosummary/mlx.core.array_equal.rst", "python/_autosummary/mlx.core.as_strided.rst", "python/_autosummary/mlx.core.atleast_1d.rst", "python/_autosummary/mlx.core.atleast_2d.rst", "python/_autosummary/mlx.core.atleast_3d.rst", "python/_autosummary/mlx.core.bitwise_and.rst", "python/_autosummary/mlx.core.bitwise_or.rst", "python/_autosummary/mlx.core.bitwise_xor.rst", "python/_autosummary/mlx.core.block_masked_mm.rst", "python/_autosummary/mlx.core.broadcast_to.rst", "python/_autosummary/mlx.core.ceil.rst", "python/_autosummary/mlx.core.clip.rst", "python/_autosummary/mlx.core.compile.rst", "python/_autosummary/mlx.core.concatenate.rst", "python/_autosummary/mlx.core.conj.rst", "python/_autosummary/mlx.core.conjugate.rst", "python/_autosummary/mlx.core.conv1d.rst", "python/_autosummary/mlx.core.conv2d.rst", "python/_autosummary/mlx.core.conv_general.rst", "python/_autosummary/mlx.core.convolve.rst", "python/_autosummary/mlx.core.cos.rst", "python/_autosummary/mlx.core.cosh.rst", "python/_autosummary/mlx.core.cummax.rst", "python/_autosummary/mlx.core.cummin.rst", "python/_autosummary/mlx.core.cumprod.rst", "python/_autosummary/mlx.core.cumsum.rst", "python/_autosummary/mlx.core.default_device.rst", "python/_autosummary/mlx.core.default_stream.rst", "python/_autosummary/mlx.core.degrees.rst", "python/_autosummary/mlx.core.dequantize.rst", "python/_autosummary/mlx.core.diag.rst", "python/_autosummary/mlx.core.diagonal.rst", "python/_autosummary/mlx.core.disable_compile.rst", "python/_autosummary/mlx.core.distributed.Group.rst", "python/_autosummary/mlx.core.distributed.all_gather.rst", "python/_autosummary/mlx.core.distributed.all_sum.rst", "python/_autosummary/mlx.core.distributed.init.rst", "python/_autosummary/mlx.core.distributed.is_available.rst", "python/_autosummary/mlx.core.divide.rst", "python/_autosummary/mlx.core.divmod.rst", "python/_autosummary/mlx.core.enable_compile.rst", "python/_autosummary/mlx.core.equal.rst", "python/_autosummary/mlx.core.erf.rst", "python/_autosummary/mlx.core.erfinv.rst", "python/_autosummary/mlx.core.eval.rst", "python/_autosummary/mlx.core.exp.rst", "python/_autosummary/mlx.core.expand_dims.rst", "python/_autosummary/mlx.core.expm1.rst", "python/_autosummary/mlx.core.eye.rst", "python/_autosummary/mlx.core.fast.layer_norm.rst", "python/_autosummary/mlx.core.fast.rms_norm.rst", "python/_autosummary/mlx.core.fast.rope.rst", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention.rst", "python/_autosummary/mlx.core.fft.fft.rst", "python/_autosummary/mlx.core.fft.fft2.rst", "python/_autosummary/mlx.core.fft.fftn.rst", "python/_autosummary/mlx.core.fft.ifft.rst", "python/_autosummary/mlx.core.fft.ifft2.rst", "python/_autosummary/mlx.core.fft.ifftn.rst", "python/_autosummary/mlx.core.fft.irfft.rst", "python/_autosummary/mlx.core.fft.irfft2.rst", "python/_autosummary/mlx.core.fft.irfftn.rst", "python/_autosummary/mlx.core.fft.rfft.rst", "python/_autosummary/mlx.core.fft.rfft2.rst", "python/_autosummary/mlx.core.fft.rfftn.rst", "python/_autosummary/mlx.core.flatten.rst", "python/_autosummary/mlx.core.floor.rst", "python/_autosummary/mlx.core.floor_divide.rst", "python/_autosummary/mlx.core.full.rst", "python/_autosummary/mlx.core.gather_mm.rst", "python/_autosummary/mlx.core.gather_qmm.rst", "python/_autosummary/mlx.core.grad.rst", "python/_autosummary/mlx.core.greater.rst", "python/_autosummary/mlx.core.greater_equal.rst", "python/_autosummary/mlx.core.identity.rst", "python/_autosummary/mlx.core.inner.rst", "python/_autosummary/mlx.core.isclose.rst", "python/_autosummary/mlx.core.isinf.rst", "python/_autosummary/mlx.core.isnan.rst", "python/_autosummary/mlx.core.isneginf.rst", "python/_autosummary/mlx.core.isposinf.rst", "python/_autosummary/mlx.core.issubdtype.rst", "python/_autosummary/mlx.core.jvp.rst", "python/_autosummary/mlx.core.left_shift.rst", "python/_autosummary/mlx.core.less.rst", "python/_autosummary/mlx.core.less_equal.rst", "python/_autosummary/mlx.core.linalg.cholesky.rst", "python/_autosummary/mlx.core.linalg.inv.rst", "python/_autosummary/mlx.core.linalg.norm.rst", "python/_autosummary/mlx.core.linalg.qr.rst", "python/_autosummary/mlx.core.linalg.svd.rst", "python/_autosummary/mlx.core.linspace.rst", "python/_autosummary/mlx.core.load.rst", "python/_autosummary/mlx.core.log.rst", "python/_autosummary/mlx.core.log10.rst", "python/_autosummary/mlx.core.log1p.rst", "python/_autosummary/mlx.core.log2.rst", "python/_autosummary/mlx.core.logaddexp.rst", "python/_autosummary/mlx.core.logical_and.rst", "python/_autosummary/mlx.core.logical_not.rst", "python/_autosummary/mlx.core.logical_or.rst", "python/_autosummary/mlx.core.logsumexp.rst", "python/_autosummary/mlx.core.matmul.rst", "python/_autosummary/mlx.core.max.rst", "python/_autosummary/mlx.core.maximum.rst", "python/_autosummary/mlx.core.mean.rst", "python/_autosummary/mlx.core.meshgrid.rst", "python/_autosummary/mlx.core.metal.clear_cache.rst", "python/_autosummary/mlx.core.metal.device_info.rst", "python/_autosummary/mlx.core.metal.get_active_memory.rst", "python/_autosummary/mlx.core.metal.get_cache_memory.rst", "python/_autosummary/mlx.core.metal.get_peak_memory.rst", "python/_autosummary/mlx.core.metal.is_available.rst", "python/_autosummary/mlx.core.metal.reset_peak_memory.rst", "python/_autosummary/mlx.core.metal.set_cache_limit.rst", "python/_autosummary/mlx.core.metal.set_memory_limit.rst", "python/_autosummary/mlx.core.metal.start_capture.rst", "python/_autosummary/mlx.core.metal.stop_capture.rst", "python/_autosummary/mlx.core.min.rst", "python/_autosummary/mlx.core.minimum.rst", "python/_autosummary/mlx.core.moveaxis.rst", "python/_autosummary/mlx.core.multiply.rst", "python/_autosummary/mlx.core.negative.rst", "python/_autosummary/mlx.core.new_stream.rst", "python/_autosummary/mlx.core.not_equal.rst", "python/_autosummary/mlx.core.ones.rst", "python/_autosummary/mlx.core.ones_like.rst", "python/_autosummary/mlx.core.outer.rst", "python/_autosummary/mlx.core.pad.rst", "python/_autosummary/mlx.core.partition.rst", "python/_autosummary/mlx.core.power.rst", "python/_autosummary/mlx.core.prod.rst", "python/_autosummary/mlx.core.quantize.rst", "python/_autosummary/mlx.core.quantized_matmul.rst", "python/_autosummary/mlx.core.radians.rst", "python/_autosummary/mlx.core.random.bernoulli.rst", "python/_autosummary/mlx.core.random.categorical.rst", "python/_autosummary/mlx.core.random.gumbel.rst", "python/_autosummary/mlx.core.random.key.rst", "python/_autosummary/mlx.core.random.multivariate_normal.rst", "python/_autosummary/mlx.core.random.normal.rst", "python/_autosummary/mlx.core.random.randint.rst", "python/_autosummary/mlx.core.random.seed.rst", "python/_autosummary/mlx.core.random.split.rst", "python/_autosummary/mlx.core.random.truncated_normal.rst", "python/_autosummary/mlx.core.random.uniform.rst", "python/_autosummary/mlx.core.reciprocal.rst", "python/_autosummary/mlx.core.remainder.rst", "python/_autosummary/mlx.core.repeat.rst", "python/_autosummary/mlx.core.reshape.rst", "python/_autosummary/mlx.core.right_shift.rst", "python/_autosummary/mlx.core.round.rst", "python/_autosummary/mlx.core.rsqrt.rst", "python/_autosummary/mlx.core.save.rst", "python/_autosummary/mlx.core.save_gguf.rst", "python/_autosummary/mlx.core.save_safetensors.rst", "python/_autosummary/mlx.core.savez.rst", "python/_autosummary/mlx.core.savez_compressed.rst", "python/_autosummary/mlx.core.set_default_device.rst", "python/_autosummary/mlx.core.set_default_stream.rst", "python/_autosummary/mlx.core.sigmoid.rst", "python/_autosummary/mlx.core.sign.rst", "python/_autosummary/mlx.core.sin.rst", "python/_autosummary/mlx.core.sinh.rst", "python/_autosummary/mlx.core.softmax.rst", "python/_autosummary/mlx.core.sort.rst", "python/_autosummary/mlx.core.split.rst", "python/_autosummary/mlx.core.sqrt.rst", "python/_autosummary/mlx.core.square.rst", "python/_autosummary/mlx.core.squeeze.rst", "python/_autosummary/mlx.core.stack.rst", "python/_autosummary/mlx.core.std.rst", "python/_autosummary/mlx.core.stop_gradient.rst", "python/_autosummary/mlx.core.stream.rst", "python/_autosummary/mlx.core.subtract.rst", "python/_autosummary/mlx.core.sum.rst", "python/_autosummary/mlx.core.swapaxes.rst", "python/_autosummary/mlx.core.synchronize.rst", "python/_autosummary/mlx.core.take.rst", "python/_autosummary/mlx.core.take_along_axis.rst", "python/_autosummary/mlx.core.tan.rst", "python/_autosummary/mlx.core.tanh.rst", "python/_autosummary/mlx.core.tensordot.rst", "python/_autosummary/mlx.core.tile.rst", "python/_autosummary/mlx.core.topk.rst", "python/_autosummary/mlx.core.trace.rst", "python/_autosummary/mlx.core.transpose.rst", "python/_autosummary/mlx.core.tri.rst", "python/_autosummary/mlx.core.tril.rst", "python/_autosummary/mlx.core.triu.rst", "python/_autosummary/mlx.core.value_and_grad.rst", "python/_autosummary/mlx.core.var.rst", "python/_autosummary/mlx.core.view.rst", "python/_autosummary/mlx.core.vjp.rst", "python/_autosummary/mlx.core.vmap.rst", "python/_autosummary/mlx.core.where.rst", "python/_autosummary/mlx.core.zeros.rst", "python/_autosummary/mlx.core.zeros_like.rst", "python/_autosummary/mlx.nn.quantize.rst", "python/_autosummary/mlx.nn.value_and_grad.rst", "python/_autosummary/mlx.optimizers.clip_grad_norm.rst", "python/_autosummary/mlx.utils.tree_flatten.rst", "python/_autosummary/mlx.utils.tree_map.rst", "python/_autosummary/mlx.utils.tree_map_with_path.rst", "python/_autosummary/mlx.utils.tree_reduce.rst", "python/_autosummary/mlx.utils.tree_unflatten.rst", "python/_autosummary/stream_class.rst", "python/array.rst", "python/data_types.rst", "python/devices_and_streams.rst", "python/distributed.rst", "python/fast.rst", "python/fft.rst", "python/linalg.rst", "python/metal.rst", "python/nn.rst", "python/nn/_autosummary/mlx.nn.ALiBi.rst", "python/nn/_autosummary/mlx.nn.AvgPool1d.rst", "python/nn/_autosummary/mlx.nn.AvgPool2d.rst", "python/nn/_autosummary/mlx.nn.BatchNorm.rst", "python/nn/_autosummary/mlx.nn.Conv1d.rst", "python/nn/_autosummary/mlx.nn.Conv2d.rst", "python/nn/_autosummary/mlx.nn.Conv3d.rst", "python/nn/_autosummary/mlx.nn.Dropout.rst", "python/nn/_autosummary/mlx.nn.Dropout2d.rst", "python/nn/_autosummary/mlx.nn.Dropout3d.rst", "python/nn/_autosummary/mlx.nn.Embedding.rst", "python/nn/_autosummary/mlx.nn.GELU.rst", "python/nn/_autosummary/mlx.nn.GLU.rst", "python/nn/_autosummary/mlx.nn.GRU.rst", "python/nn/_autosummary/mlx.nn.GroupNorm.rst", "python/nn/_autosummary/mlx.nn.HardShrink.rst", "python/nn/_autosummary/mlx.nn.HardTanh.rst", "python/nn/_autosummary/mlx.nn.Hardswish.rst", "python/nn/_autosummary/mlx.nn.InstanceNorm.rst", "python/nn/_autosummary/mlx.nn.LSTM.rst", "python/nn/_autosummary/mlx.nn.LayerNorm.rst", "python/nn/_autosummary/mlx.nn.LeakyReLU.rst", "python/nn/_autosummary/mlx.nn.Linear.rst", "python/nn/_autosummary/mlx.nn.MaxPool1d.rst", "python/nn/_autosummary/mlx.nn.MaxPool2d.rst", "python/nn/_autosummary/mlx.nn.Mish.rst", "python/nn/_autosummary/mlx.nn.Module.apply.rst", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules.rst", "python/nn/_autosummary/mlx.nn.Module.children.rst", "python/nn/_autosummary/mlx.nn.Module.eval.rst", "python/nn/_autosummary/mlx.nn.Module.filter_and_map.rst", "python/nn/_autosummary/mlx.nn.Module.freeze.rst", "python/nn/_autosummary/mlx.nn.Module.leaf_modules.rst", "python/nn/_autosummary/mlx.nn.Module.load_weights.rst", "python/nn/_autosummary/mlx.nn.Module.modules.rst", "python/nn/_autosummary/mlx.nn.Module.named_modules.rst", "python/nn/_autosummary/mlx.nn.Module.parameters.rst", "python/nn/_autosummary/mlx.nn.Module.save_weights.rst", "python/nn/_autosummary/mlx.nn.Module.set_dtype.rst", "python/nn/_autosummary/mlx.nn.Module.state.rst", "python/nn/_autosummary/mlx.nn.Module.train.rst", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters.rst", "python/nn/_autosummary/mlx.nn.Module.training.rst", "python/nn/_autosummary/mlx.nn.Module.unfreeze.rst", "python/nn/_autosummary/mlx.nn.Module.update.rst", "python/nn/_autosummary/mlx.nn.Module.update_modules.rst", "python/nn/_autosummary/mlx.nn.MultiHeadAttention.rst", "python/nn/_autosummary/mlx.nn.PReLU.rst", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding.rst", "python/nn/_autosummary/mlx.nn.QuantizedLinear.rst", "python/nn/_autosummary/mlx.nn.RMSNorm.rst", "python/nn/_autosummary/mlx.nn.RNN.rst", "python/nn/_autosummary/mlx.nn.ReLU.rst", "python/nn/_autosummary/mlx.nn.ReLU6.rst", "python/nn/_autosummary/mlx.nn.RoPE.rst", "python/nn/_autosummary/mlx.nn.SELU.rst", "python/nn/_autosummary/mlx.nn.Sequential.rst", "python/nn/_autosummary/mlx.nn.SiLU.rst", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding.rst", "python/nn/_autosummary/mlx.nn.Softmax.rst", "python/nn/_autosummary/mlx.nn.Softmin.rst", "python/nn/_autosummary/mlx.nn.Softplus.rst", "python/nn/_autosummary/mlx.nn.Softshrink.rst", "python/nn/_autosummary/mlx.nn.Softsign.rst", "python/nn/_autosummary/mlx.nn.Step.rst", "python/nn/_autosummary/mlx.nn.Tanh.rst", "python/nn/_autosummary/mlx.nn.Transformer.rst", "python/nn/_autosummary/mlx.nn.Upsample.rst", "python/nn/_autosummary/mlx.nn.init.constant.rst", "python/nn/_autosummary/mlx.nn.init.glorot_normal.rst", "python/nn/_autosummary/mlx.nn.init.glorot_uniform.rst", "python/nn/_autosummary/mlx.nn.init.he_normal.rst", "python/nn/_autosummary/mlx.nn.init.he_uniform.rst", "python/nn/_autosummary/mlx.nn.init.identity.rst", "python/nn/_autosummary/mlx.nn.init.normal.rst", "python/nn/_autosummary/mlx.nn.init.uniform.rst", "python/nn/_autosummary_functions/mlx.nn.elu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_approx.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx.rst", "python/nn/_autosummary_functions/mlx.nn.glu.rst", "python/nn/_autosummary_functions/mlx.nn.hard_shrink.rst", "python/nn/_autosummary_functions/mlx.nn.hard_tanh.rst", "python/nn/_autosummary_functions/mlx.nn.hardswish.rst", "python/nn/_autosummary_functions/mlx.nn.leaky_relu.rst", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.log_softmax.rst", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss.rst", "python/nn/_autosummary_functions/mlx.nn.mish.rst", "python/nn/_autosummary_functions/mlx.nn.prelu.rst", "python/nn/_autosummary_functions/mlx.nn.relu.rst", "python/nn/_autosummary_functions/mlx.nn.relu6.rst", "python/nn/_autosummary_functions/mlx.nn.selu.rst", "python/nn/_autosummary_functions/mlx.nn.sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.silu.rst", "python/nn/_autosummary_functions/mlx.nn.softmax.rst", "python/nn/_autosummary_functions/mlx.nn.softmin.rst", "python/nn/_autosummary_functions/mlx.nn.softplus.rst", "python/nn/_autosummary_functions/mlx.nn.softshrink.rst", "python/nn/_autosummary_functions/mlx.nn.step.rst", "python/nn/_autosummary_functions/mlx.nn.tanh.rst", "python/nn/functions.rst", "python/nn/init.rst", "python/nn/layers.rst", "python/nn/losses.rst", "python/nn/module.rst", "python/ops.rst", "python/optimizers.rst", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta.rst", "python/optimizers/_autosummary/mlx.optimizers.Adafactor.rst", "python/optimizers/_autosummary/mlx.optimizers.Adagrad.rst", "python/optimizers/_autosummary/mlx.optimizers.Adam.rst", "python/optimizers/_autosummary/mlx.optimizers.AdamW.rst", "python/optimizers/_autosummary/mlx.optimizers.Adamax.rst", "python/optimizers/_autosummary/mlx.optimizers.Lion.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update.rst", "python/optimizers/_autosummary/mlx.optimizers.RMSprop.rst", "python/optimizers/_autosummary/mlx.optimizers.SGD.rst", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.join_schedules.rst", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule.rst", "python/optimizers/_autosummary/mlx.optimizers.step_decay.rst", "python/optimizers/common_optimizers.rst", "python/optimizers/optimizer.rst", "python/optimizers/schedulers.rst", "python/random.rst", "python/transforms.rst", "python/tree_utils.rst", "usage/compile.rst", "usage/distributed.rst", "usage/function_transforms.rst", "usage/indexing.rst", "usage/lazy_evaluation.rst", "usage/numpy.rst", "usage/quick_start.rst", "usage/saving_and_loading.rst", "usage/unified_memory.rst", "usage/using_streams.rst"], "titles": ["Operations", "Custom Extensions in MLX", "Metal Debugger", "Linear Regression", "LLM inference", "Multi-Layer Perceptron", "MLX", "Build and Install", "mlx.core.Device", "mlx.core.Dtype", "mlx.core.DtypeCategory", "mlx.core.abs", "mlx.core.add", "mlx.core.addmm", "mlx.core.all", "mlx.core.allclose", "mlx.core.any", "mlx.core.arange", "mlx.core.arccos", "mlx.core.arccosh", "mlx.core.arcsin", "mlx.core.arcsinh", "mlx.core.arctan", "mlx.core.arctan2", "mlx.core.arctanh", "mlx.core.argmax", "mlx.core.argmin", "mlx.core.argpartition", "mlx.core.argsort", "mlx.core.array", "mlx.core.array.T", "mlx.core.array.abs", "mlx.core.array.all", "mlx.core.array.any", "mlx.core.array.argmax", "mlx.core.array.argmin", "mlx.core.array.astype", "mlx.core.array.at", "mlx.core.array.cos", "mlx.core.array.cummax", "mlx.core.array.cummin", "mlx.core.array.cumprod", "mlx.core.array.cumsum", "mlx.core.array.diag", "mlx.core.array.diagonal", "mlx.core.array.dtype", "mlx.core.array.exp", "mlx.core.array.flatten", "mlx.core.array.item", "mlx.core.array.itemsize", "mlx.core.array.log", "mlx.core.array.log10", "mlx.core.array.log1p", "mlx.core.array.log2", "mlx.core.array.logsumexp", "mlx.core.array.max", "mlx.core.array.mean", "mlx.core.array.min", "mlx.core.array.moveaxis", "mlx.core.array.nbytes", "mlx.core.array.ndim", "mlx.core.array.prod", "mlx.core.array.reciprocal", "mlx.core.array.reshape", "mlx.core.array.round", "mlx.core.array.rsqrt", "mlx.core.array.shape", "mlx.core.array.sin", "mlx.core.array.size", "mlx.core.array.split", "mlx.core.array.sqrt", "mlx.core.array.square", "mlx.core.array.squeeze", "mlx.core.array.sum", "mlx.core.array.swapaxes", "mlx.core.array.tolist", "mlx.core.array.transpose", "mlx.core.array.var", "mlx.core.array_equal", "mlx.core.as_strided", "mlx.core.atleast_1d", "mlx.core.atleast_2d", "mlx.core.atleast_3d", "mlx.core.bitwise_and", "mlx.core.bitwise_or", "mlx.core.bitwise_xor", "mlx.core.block_masked_mm", "mlx.core.broadcast_to", "mlx.core.ceil", "mlx.core.clip", "mlx.core.compile", "mlx.core.concatenate", "mlx.core.conj", "mlx.core.conjugate", "mlx.core.conv1d", "mlx.core.conv2d", "mlx.core.conv_general", "mlx.core.convolve", "mlx.core.cos", "mlx.core.cosh", "mlx.core.cummax", "mlx.core.cummin", "mlx.core.cumprod", "mlx.core.cumsum", "mlx.core.default_device", "mlx.core.default_stream", "mlx.core.degrees", "mlx.core.dequantize", "mlx.core.diag", "mlx.core.diagonal", "mlx.core.disable_compile", "mlx.core.distributed.Group", "mlx.core.distributed.all_gather", "mlx.core.distributed.all_sum", "mlx.core.distributed.init", "mlx.core.distributed.is_available", "mlx.core.divide", "mlx.core.divmod", "mlx.core.enable_compile", "mlx.core.equal", "mlx.core.erf", "mlx.core.erfinv", "mlx.core.eval", "mlx.core.exp", "mlx.core.expand_dims", "mlx.core.expm1", "mlx.core.eye", "mlx.core.fast.layer_norm", "mlx.core.fast.rms_norm", "mlx.core.fast.rope", "mlx.core.fast.scaled_dot_product_attention", "mlx.core.fft.fft", "mlx.core.fft.fft2", "mlx.core.fft.fftn", "mlx.core.fft.ifft", "mlx.core.fft.ifft2", "mlx.core.fft.ifftn", "mlx.core.fft.irfft", "mlx.core.fft.irfft2", "mlx.core.fft.irfftn", "mlx.core.fft.rfft", "mlx.core.fft.rfft2", "mlx.core.fft.rfftn", "mlx.core.flatten", "mlx.core.floor", "mlx.core.floor_divide", "mlx.core.full", "mlx.core.gather_mm", "mlx.core.gather_qmm", "mlx.core.grad", "mlx.core.greater", "mlx.core.greater_equal", "mlx.core.identity", "mlx.core.inner", "mlx.core.isclose", "mlx.core.isinf", "mlx.core.isnan", "mlx.core.isneginf", "mlx.core.isposinf", "mlx.core.issubdtype", "mlx.core.jvp", "mlx.core.left_shift", "mlx.core.less", "mlx.core.less_equal", "mlx.core.linalg.cholesky", "mlx.core.linalg.inv", "mlx.core.linalg.norm", "mlx.core.linalg.qr", "mlx.core.linalg.svd", "mlx.core.linspace", "mlx.core.load", "mlx.core.log", "mlx.core.log10", "mlx.core.log1p", "mlx.core.log2", "mlx.core.logaddexp", "mlx.core.logical_and", "mlx.core.logical_not", "mlx.core.logical_or", "mlx.core.logsumexp", "mlx.core.matmul", "mlx.core.max", "mlx.core.maximum", "mlx.core.mean", "mlx.core.meshgrid", "mlx.core.metal.clear_cache", "mlx.core.metal.device_info", "mlx.core.metal.get_active_memory", "mlx.core.metal.get_cache_memory", "mlx.core.metal.get_peak_memory", "mlx.core.metal.is_available", "mlx.core.metal.reset_peak_memory", "mlx.core.metal.set_cache_limit", "mlx.core.metal.set_memory_limit", "mlx.core.metal.start_capture", "mlx.core.metal.stop_capture", "mlx.core.min", "mlx.core.minimum", "mlx.core.moveaxis", "mlx.core.multiply", "mlx.core.negative", "mlx.core.new_stream", "mlx.core.not_equal", "mlx.core.ones", "mlx.core.ones_like", "mlx.core.outer", "mlx.core.pad", "mlx.core.partition", "mlx.core.power", "mlx.core.prod", "mlx.core.quantize", "mlx.core.quantized_matmul", "mlx.core.radians", "mlx.core.random.bernoulli", "mlx.core.random.categorical", "mlx.core.random.gumbel", "mlx.core.random.key", "mlx.core.random.multivariate_normal", "mlx.core.random.normal", "mlx.core.random.randint", "mlx.core.random.seed", "mlx.core.random.split", "mlx.core.random.truncated_normal", "mlx.core.random.uniform", "mlx.core.reciprocal", "mlx.core.remainder", "mlx.core.repeat", "mlx.core.reshape", "mlx.core.right_shift", "mlx.core.round", "mlx.core.rsqrt", "mlx.core.save", "mlx.core.save_gguf", "mlx.core.save_safetensors", "mlx.core.savez", "mlx.core.savez_compressed", "mlx.core.set_default_device", "mlx.core.set_default_stream", "mlx.core.sigmoid", "mlx.core.sign", "mlx.core.sin", "mlx.core.sinh", "mlx.core.softmax", "mlx.core.sort", "mlx.core.split", "mlx.core.sqrt", "mlx.core.square", "mlx.core.squeeze", "mlx.core.stack", "mlx.core.std", "mlx.core.stop_gradient", "mlx.core.stream", "mlx.core.subtract", "mlx.core.sum", "mlx.core.swapaxes", "mlx.core.synchronize", "mlx.core.take", "mlx.core.take_along_axis", "mlx.core.tan", "mlx.core.tanh", "mlx.core.tensordot", "mlx.core.tile", "mlx.core.topk", "mlx.core.trace", "mlx.core.transpose", "mlx.core.tri", "mlx.core.tril", "mlx.core.triu", "mlx.core.value_and_grad", "mlx.core.var", "mlx.core.view", "mlx.core.vjp", "mlx.core.vmap", "mlx.core.where", "mlx.core.zeros", "mlx.core.zeros_like", "mlx.nn.quantize", "mlx.nn.value_and_grad", "mlx.optimizers.clip_grad_norm", "mlx.utils.tree_flatten", "mlx.utils.tree_map", "mlx.utils.tree_map_with_path", "mlx.utils.tree_reduce", "mlx.utils.tree_unflatten", "mlx.core.Stream", "Array", "Data Types", "Devices and Streams", "Distributed Communication", "Fast", "FFT", "Linear Algebra", "Metal", "Neural Networks", "mlx.nn.ALiBi", "mlx.nn.AvgPool1d", "mlx.nn.AvgPool2d", "mlx.nn.BatchNorm", "mlx.nn.Conv1d", "mlx.nn.Conv2d", "mlx.nn.Conv3d", "mlx.nn.Dropout", "mlx.nn.Dropout2d", "mlx.nn.Dropout3d", "mlx.nn.Embedding", "mlx.nn.GELU", "mlx.nn.GLU", "mlx.nn.GRU", "mlx.nn.GroupNorm", "mlx.nn.HardShrink", "mlx.nn.HardTanh", "mlx.nn.Hardswish", "mlx.nn.InstanceNorm", "mlx.nn.LSTM", "mlx.nn.LayerNorm", "mlx.nn.LeakyReLU", "mlx.nn.Linear", "mlx.nn.MaxPool1d", "mlx.nn.MaxPool2d", "mlx.nn.Mish", "mlx.nn.Module.apply", "mlx.nn.Module.apply_to_modules", "mlx.nn.Module.children", "mlx.nn.Module.eval", "mlx.nn.Module.filter_and_map", "mlx.nn.Module.freeze", "mlx.nn.Module.leaf_modules", "mlx.nn.Module.load_weights", "mlx.nn.Module.modules", "mlx.nn.Module.named_modules", "mlx.nn.Module.parameters", "mlx.nn.Module.save_weights", "mlx.nn.Module.set_dtype", "mlx.nn.Module.state", "mlx.nn.Module.train", "mlx.nn.Module.trainable_parameters", "mlx.nn.Module.training", "mlx.nn.Module.unfreeze", "mlx.nn.Module.update", "mlx.nn.Module.update_modules", "mlx.nn.MultiHeadAttention", "mlx.nn.PReLU", "mlx.nn.QuantizedEmbedding", "mlx.nn.QuantizedLinear", "mlx.nn.RMSNorm", "mlx.nn.RNN", "mlx.nn.ReLU", "mlx.nn.ReLU6", "mlx.nn.RoPE", "mlx.nn.SELU", "mlx.nn.Sequential", "mlx.nn.SiLU", "mlx.nn.SinusoidalPositionalEncoding", "mlx.nn.Softmax", "mlx.nn.Softmin", "mlx.nn.Softplus", "mlx.nn.Softshrink", "mlx.nn.Softsign", "mlx.nn.Step", "mlx.nn.Tanh", "mlx.nn.Transformer", "mlx.nn.Upsample", "mlx.nn.init.constant", "mlx.nn.init.glorot_normal", "mlx.nn.init.glorot_uniform", "mlx.nn.init.he_normal", "mlx.nn.init.he_uniform", "mlx.nn.init.identity", "mlx.nn.init.normal", "mlx.nn.init.uniform", "mlx.nn.elu", "mlx.nn.gelu", "mlx.nn.gelu_approx", "mlx.nn.gelu_fast_approx", "mlx.nn.glu", "mlx.nn.hard_shrink", "mlx.nn.hard_tanh", "mlx.nn.hardswish", "mlx.nn.leaky_relu", "mlx.nn.log_sigmoid", "mlx.nn.log_softmax", "mlx.nn.losses.binary_cross_entropy", "mlx.nn.losses.cosine_similarity_loss", "mlx.nn.losses.cross_entropy", "mlx.nn.losses.gaussian_nll_loss", "mlx.nn.losses.hinge_loss", "mlx.nn.losses.huber_loss", "mlx.nn.losses.kl_div_loss", "mlx.nn.losses.l1_loss", "mlx.nn.losses.log_cosh_loss", "mlx.nn.losses.margin_ranking_loss", "mlx.nn.losses.mse_loss", "mlx.nn.losses.nll_loss", "mlx.nn.losses.smooth_l1_loss", "mlx.nn.losses.triplet_loss", "mlx.nn.mish", "mlx.nn.prelu", "mlx.nn.relu", "mlx.nn.relu6", "mlx.nn.selu", "mlx.nn.sigmoid", "mlx.nn.silu", "mlx.nn.softmax", "mlx.nn.softmin", "mlx.nn.softplus", "mlx.nn.softshrink", "mlx.nn.step", "mlx.nn.tanh", "Functions", "Initializers", "Layers", "Loss Functions", "Module", "Operations", "Optimizers", "mlx.optimizers.AdaDelta", "mlx.optimizers.Adafactor", "mlx.optimizers.Adagrad", "mlx.optimizers.Adam", "mlx.optimizers.AdamW", "mlx.optimizers.Adamax", "mlx.optimizers.Lion", "mlx.optimizers.Optimizer.apply_gradients", "mlx.optimizers.Optimizer.init", "mlx.optimizers.Optimizer.state", "mlx.optimizers.Optimizer.update", "mlx.optimizers.RMSprop", "mlx.optimizers.SGD", "mlx.optimizers.cosine_decay", "mlx.optimizers.exponential_decay", "mlx.optimizers.join_schedules", "mlx.optimizers.linear_schedule", "mlx.optimizers.step_decay", "Common Optimizers", "Optimizer", "Schedulers", "Random", "Transforms", "Tree Utils", "Compilation", "Distributed Communication", "Function Transforms", "Indexing Arrays", "Lazy Evaluation", "Conversion to NumPy and Other Frameworks", "Quick Start Guide", "Saving and Loading Arrays", "Unified Memory", "Using Streams"], "terms": {"arrai": [0, 1, 4, 5, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 112, 113, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 293, 297, 313, 320, 327, 330, 335, 341, 361, 362, 363, 364, 365, 366, 367, 368, 369, 374, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 406, 409, 412, 415, 416, 417, 418, 419, 420, 421, 426, 427, 428, 429, 430, 431, 432, 439, 440, 441, 443, 444, 445, 447], "arang": [0, 166, 286, 361, 442, 444], "doubl": [0, 4], "start": [0, 1, 3, 4, 6, 7, 17, 129, 169, 194, 244, 282, 439, 442, 447], "stop": [0, 1, 4, 17, 169, 195, 250, 441, 442], "step": [0, 2, 4, 5, 17, 293, 307, 313, 345, 416, 423, 428, 430, 431, 432, 439, 440], "dtype": [0, 1, 4, 10, 17, 29, 36, 37, 75, 126, 143, 146, 152, 159, 166, 167, 169, 203, 215, 217, 218, 219, 222, 223, 263, 265, 270, 274, 286, 332, 361, 362, 363, 364, 365, 366, 367, 368, 369, 381, 383, 390, 428, 429, 430, 431, 432, 439, 440, 441, 442, 444, 445, 446], "streamordevic": [0, 1], "": [0, 1, 3, 4, 5, 45, 49, 60, 90, 105, 107, 132, 133, 135, 136, 138, 139, 141, 142, 149, 166, 168, 170, 183, 205, 210, 214, 229, 232, 233, 249, 251, 268, 269, 270, 272, 277, 293, 296, 307, 313, 318, 324, 325, 327, 331, 332, 333, 337, 345, 414, 423, 424, 436, 439, 441, 443, 444, 445, 446, 447], "A": [0, 1, 4, 6, 7, 8, 66, 78, 90, 127, 128, 130, 149, 160, 166, 167, 168, 170, 179, 180, 181, 186, 196, 210, 213, 214, 215, 217, 218, 219, 222, 223, 244, 248, 251, 268, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 293, 297, 302, 307, 308, 312, 314, 324, 328, 329, 332, 338, 339, 344, 350, 352, 360, 363, 364, 366, 373, 394, 395, 412, 414, 418, 420, 422, 423, 425, 430, 439, 440, 441, 443, 444], "1d": [0, 94, 97, 232, 257], "number": [0, 1, 10, 17, 59, 68, 90, 95, 96, 107, 126, 148, 149, 152, 160, 169, 206, 210, 211, 214, 218, 221, 223, 226, 229, 260, 261, 265, 268, 271, 272, 276, 293, 297, 298, 299, 300, 302, 303, 308, 312, 340, 341, 360, 361, 363, 364, 365, 366, 428, 430, 431, 436, 439, 441, 448], "option": [0, 2, 4, 13, 14, 16, 17, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 86, 90, 91, 94, 95, 96, 97, 100, 101, 102, 103, 107, 108, 109, 114, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 152, 157, 158, 164, 165, 166, 167, 168, 169, 170, 179, 181, 183, 184, 193, 196, 203, 206, 207, 209, 210, 211, 213, 214, 215, 217, 218, 219, 221, 222, 223, 226, 227, 242, 243, 244, 247, 248, 249, 253, 255, 256, 260, 262, 263, 264, 265, 266, 267, 268, 269, 272, 274, 276, 279, 280, 281, 282, 295, 296, 297, 298, 299, 300, 307, 313, 316, 317, 318, 320, 324, 325, 327, 332, 337, 340, 342, 343, 345, 348, 352, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 415, 416, 417, 418, 419, 420, 421, 423, 426, 427, 428, 436, 439, 446, 448], "int": [0, 1, 4, 5, 8, 14, 16, 17, 25, 26, 27, 28, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 47, 54, 55, 56, 57, 58, 61, 64, 66, 69, 72, 73, 74, 75, 77, 79, 86, 87, 91, 94, 95, 96, 100, 101, 102, 103, 107, 108, 109, 124, 126, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 149, 152, 159, 166, 169, 179, 181, 183, 186, 187, 188, 189, 192, 193, 196, 198, 203, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 229, 242, 243, 244, 247, 248, 249, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 274, 276, 284, 293, 295, 296, 297, 298, 299, 300, 304, 306, 307, 308, 312, 313, 314, 316, 317, 318, 340, 342, 343, 344, 345, 348, 352, 360, 374, 382, 383, 387, 392, 394, 412, 428, 430, 431, 432], "linspac": 0, "num": [0, 4, 169, 221], "50": [0, 169], "float32": [0, 1, 10, 17, 126, 130, 152, 159, 166, 167, 169, 203, 215, 217, 218, 222, 223, 265, 274, 286, 361, 362, 363, 364, 365, 366, 367, 368, 369, 381, 383, 390, 428, 429, 430, 431, 432, 439, 440, 441, 442, 443, 444, 445, 446], "evenli": [0, 169], "space": [0, 1, 169, 392], "rang": [0, 1, 2, 3, 4, 5, 7, 17, 143, 147, 169, 364, 366, 372, 373, 414, 428, 429, 430, 431, 432, 436, 439, 441, 443, 447], "astyp": [0, 1, 4, 320, 444], "convert": [0, 1, 75, 80, 81, 82, 106, 143, 212, 342, 343, 443, 444, 445], "an": [0, 1, 2, 4, 5, 7, 9, 14, 16, 29, 80, 81, 82, 87, 94, 95, 96, 111, 122, 126, 127, 130, 143, 146, 152, 164, 166, 170, 193, 198, 203, 204, 206, 209, 210, 211, 226, 227, 229, 244, 247, 254, 256, 257, 260, 261, 265, 272, 274, 275, 279, 280, 281, 282, 293, 295, 296, 301, 308, 313, 314, 316, 317, 318, 320, 340, 341, 343, 345, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 396, 409, 415, 425, 429, 434, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448], "given": [0, 1, 7, 14, 16, 27, 37, 79, 87, 89, 91, 100, 101, 102, 103, 107, 109, 122, 124, 131, 132, 133, 134, 135, 136, 140, 141, 142, 146, 147, 166, 179, 181, 183, 192, 196, 201, 209, 217, 219, 229, 237, 242, 244, 249, 253, 255, 261, 262, 263, 265, 266, 267, 269, 284, 295, 296, 301, 317, 318, 324, 340, 382, 384, 390], "data": [0, 1, 5, 6, 9, 17, 126, 140, 141, 146, 152, 169, 203, 222, 263, 265, 270, 274, 303, 362, 363, 364, 365, 366, 367, 368, 369, 439, 440, 442, 444], "type": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 66, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 106, 107, 108, 109, 112, 113, 114, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 192, 193, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 282, 293, 332, 360, 362, 363, 364, 365, 366, 367, 368, 369, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 439, 442], "as_strid": 0, "std": [0, 1, 368], "vector": [0, 1, 3, 6, 153, 160, 166, 256, 271, 272, 304, 383, 445], "shape": [0, 1, 2, 4, 5, 63, 78, 79, 86, 87, 90, 94, 95, 96, 109, 112, 130, 131, 134, 137, 140, 141, 142, 146, 147, 160, 165, 180, 203, 204, 213, 214, 215, 217, 218, 219, 222, 223, 227, 257, 270, 271, 273, 274, 275, 293, 295, 296, 297, 298, 299, 300, 302, 303, 307, 312, 313, 316, 317, 318, 327, 345, 362, 363, 364, 365, 366, 367, 368, 369, 383, 394, 414, 439, 441, 442, 445, 447], "size_t": [0, 1], "stride": [0, 1, 79, 94, 95, 96, 295, 296, 298, 299, 300, 317, 318, 348, 442], "offset": [0, 1, 4, 44, 79, 109, 127, 129, 263], "creat": [0, 1, 4, 7, 79, 114, 126, 152, 251, 293, 412, 414, 430, 439, 442, 444], "view": [0, 2, 79, 444], "copi": [0, 1, 4, 6, 207, 243, 444], "anoth": [0, 89, 159, 180, 252, 273, 286, 293, 320, 439, 441, 442, 447], "full": [0, 1, 5, 63, 76, 97, 242, 338, 339, 384, 439, 440, 443], "val": [0, 29, 146], "fill": [0, 1, 146, 204, 265, 275, 362, 363, 364, 365, 366, 368, 369], "valu": [0, 3, 4, 11, 15, 17, 25, 26, 48, 75, 78, 89, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 154, 166, 168, 169, 186, 206, 213, 214, 215, 217, 218, 219, 222, 223, 232, 256, 257, 268, 272, 277, 279, 280, 281, 282, 286, 296, 301, 302, 303, 309, 312, 316, 318, 324, 340, 341, 356, 358, 360, 362, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 406, 412, 416, 419, 428, 429, 431, 432, 441], "templat": [0, 1], "typenam": [0, 1], "t": [0, 1, 4, 7, 120, 130, 148, 164, 211, 268, 293, 295, 307, 313, 317, 345, 415, 416, 417, 418, 419, 420, 421, 426, 427, 439, 441, 447], "zero": [0, 126, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 184, 191, 265, 266, 267, 275, 293, 295, 296, 301, 302, 303, 327, 362, 363, 364, 365, 366, 367, 368, 369, 409, 416, 442], "const": [0, 1, 384], "inlin": 0, "zeros_lik": 0, "ones": [0, 1, 4, 204, 234, 265, 338, 339, 440, 442], "ones_lik": 0, "ey": [0, 4, 165], "n": [0, 1, 4, 29, 86, 94, 95, 96, 126, 131, 133, 134, 136, 137, 140, 142, 152, 217, 249, 265, 269, 295, 296, 297, 298, 299, 300, 302, 303, 307, 313, 317, 318, 345, 361, 389, 394, 440], "m": [0, 1, 4, 7, 86, 126, 147, 166, 265, 295, 296, 317, 318, 415, 439], "k": [0, 4, 43, 86, 108, 126, 130, 147, 262, 265, 266, 267, 295, 316, 317, 325], "specifi": [0, 1, 17, 36, 95, 96, 109, 138, 139, 146, 149, 166, 169, 198, 203, 214, 226, 254, 256, 257, 260, 263, 264, 268, 272, 274, 297, 358, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 406, 440, 441, 447], "diagon": [0, 43, 108, 126, 263, 265, 266, 267], "everywher": 0, "els": [0, 1, 4, 293, 325, 440, 443], "ident": [0, 126, 250, 293, 334], "squar": [0, 3, 4, 128, 152, 165, 230, 245, 268, 280, 293, 344, 391, 393, 415, 416, 418, 419, 420, 441, 444], "matrix": [0, 3, 13, 43, 86, 107, 108, 126, 147, 148, 152, 164, 165, 166, 167, 168, 180, 184, 210, 211, 217, 342, 343, 367, 409], "major": [0, 1], "tri": 0, "tril": 0, "x": [0, 1, 3, 4, 5, 37, 86, 112, 113, 120, 125, 127, 128, 148, 152, 166, 211, 215, 229, 234, 238, 266, 267, 273, 280, 282, 293, 295, 296, 297, 305, 306, 308, 312, 314, 315, 316, 317, 318, 319, 320, 341, 344, 346, 352, 358, 361, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 412, 414, 421, 439, 440, 441, 442, 443, 444, 445, 447], "0": [0, 1, 3, 4, 5, 7, 8, 13, 17, 37, 43, 44, 47, 64, 69, 77, 79, 91, 94, 95, 96, 108, 109, 126, 130, 143, 147, 149, 165, 166, 167, 185, 192, 206, 213, 218, 223, 226, 229, 244, 248, 249, 263, 265, 266, 267, 268, 269, 272, 278, 279, 281, 282, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 308, 309, 312, 314, 315, 317, 318, 341, 346, 348, 352, 356, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 381, 383, 385, 386, 390, 393, 394, 396, 397, 398, 399, 405, 406, 409, 412, 415, 416, 418, 419, 420, 421, 423, 426, 427, 428, 429, 430, 431, 432, 436, 439, 440, 441, 442, 443, 444, 445, 446], "triu": 0, "reshap": [0, 4, 166, 361, 442], "flatten": [0, 27, 28, 100, 101, 102, 103, 166, 205, 207, 226, 243, 256, 257, 262, 279], "start_axi": [0, 47, 143], "end_axi": [0, 47, 143], "1": [0, 1, 2, 4, 5, 13, 17, 27, 28, 37, 44, 47, 94, 95, 96, 108, 109, 125, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 142, 143, 153, 159, 166, 167, 180, 184, 193, 205, 207, 210, 214, 217, 218, 223, 238, 243, 256, 262, 263, 268, 278, 281, 282, 286, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 312, 313, 314, 316, 317, 318, 341, 344, 345, 348, 352, 358, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 392, 393, 394, 399, 400, 402, 403, 404, 406, 409, 412, 414, 415, 416, 417, 418, 419, 420, 421, 423, 426, 427, 428, 429, 430, 431, 432, 439, 440, 441, 442, 444, 445, 446, 447], "dimens": [0, 1, 4, 14, 16, 25, 26, 60, 66, 75, 80, 81, 82, 90, 95, 96, 109, 124, 129, 138, 139, 141, 142, 143, 147, 148, 153, 164, 165, 166, 167, 168, 179, 180, 181, 183, 196, 209, 210, 214, 221, 249, 253, 257, 260, 264, 269, 297, 298, 299, 300, 302, 303, 306, 307, 308, 312, 313, 314, 340, 344, 345, 348, 360, 361, 374, 383, 439, 441], "squeez": [0, 361, 439], "ax": [0, 1, 14, 16, 25, 26, 76, 124, 132, 133, 135, 136, 138, 139, 141, 142, 143, 153, 166, 179, 181, 183, 196, 206, 209, 242, 247, 249, 253, 254, 260, 264, 269, 441], "remov": [0, 109, 180, 214, 247, 383], "singleton": [0, 14, 16, 25, 26, 114, 179, 180, 181, 183, 196, 209, 249, 253, 269], "axi": [0, 1, 4, 5, 14, 16, 25, 26, 27, 28, 32, 33, 34, 35, 39, 40, 41, 42, 54, 55, 56, 57, 61, 69, 72, 73, 77, 91, 100, 101, 102, 103, 109, 112, 124, 127, 128, 131, 134, 137, 138, 139, 140, 141, 142, 143, 166, 179, 181, 183, 196, 198, 206, 207, 209, 214, 226, 242, 243, 244, 247, 248, 249, 253, 254, 256, 257, 261, 262, 263, 264, 269, 270, 272, 295, 296, 306, 317, 318, 345, 374, 380, 382, 383, 387, 392, 394, 402, 403, 442], "all": [0, 1, 2, 5, 7, 15, 27, 37, 80, 81, 82, 90, 95, 96, 112, 113, 114, 126, 133, 136, 139, 142, 147, 148, 168, 180, 206, 207, 247, 276, 293, 320, 321, 325, 328, 329, 330, 335, 337, 340, 352, 360, 361, 409, 412, 434, 436, 439, 442, 443, 445, 448], "expand_dim": 0, "add": [0, 1, 2, 4, 13, 37, 124, 175, 206, 210, 298, 299, 300, 441, 447], "slice": [0, 442], "each": [0, 1, 66, 107, 122, 129, 148, 159, 164, 165, 168, 180, 184, 206, 210, 211, 214, 226, 234, 235, 244, 261, 264, 270, 272, 273, 302, 303, 304, 307, 308, 313, 345, 348, 360, 381, 383, 436, 439, 440, 443], "slice_upd": 0, "src": 0, "updat": [0, 1, 3, 4, 5, 37, 90, 276, 280, 282, 297, 320, 321, 327, 332, 333, 334, 339, 414, 416, 419, 421, 422, 423, 427, 428, 429, 430, 431, 432, 439, 440, 443], "from": [0, 1, 4, 5, 6, 79, 106, 107, 109, 112, 113, 138, 139, 141, 142, 146, 147, 166, 170, 180, 184, 189, 192, 204, 210, 212, 213, 214, 215, 216, 219, 222, 234, 247, 250, 252, 256, 257, 262, 263, 273, 275, 279, 280, 281, 282, 283, 293, 316, 325, 327, 340, 363, 364, 365, 366, 368, 369, 384, 393, 409, 438, 439, 440, 441, 443, 444, 445, 446, 447], "sourc": [0, 1, 2, 58, 198, 264, 440], "split": [0, 306, 308, 374], "num_split": 0, "sub": [0, 5, 109, 221, 263, 276], "along": [0, 1, 25, 26, 90, 91, 100, 101, 102, 103, 112, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 148, 166, 226, 242, 244, 248, 256, 257, 260, 261, 262, 263, 270, 293, 306, 345, 374], "indic": [0, 1, 15, 25, 26, 27, 28, 37, 147, 148, 149, 154, 155, 156, 157, 158, 168, 244, 256, 257, 268, 334, 336, 383, 390, 430, 442], "meshgrid": 0, "bool": [0, 1, 14, 15, 16, 25, 26, 32, 33, 34, 35, 39, 40, 41, 42, 54, 55, 56, 57, 61, 73, 75, 77, 78, 90, 96, 100, 101, 102, 103, 114, 115, 129, 148, 154, 159, 164, 166, 170, 179, 181, 183, 184, 190, 193, 196, 209, 211, 249, 253, 269, 297, 298, 299, 300, 307, 308, 312, 313, 314, 316, 320, 324, 325, 327, 332, 334, 337, 340, 343, 345, 348, 352, 360, 361, 381, 384, 416, 427], "spars": [0, 184], "fals": [0, 1, 4, 14, 15, 16, 25, 26, 32, 33, 34, 35, 39, 40, 41, 42, 54, 55, 56, 57, 61, 73, 77, 78, 90, 96, 100, 101, 102, 103, 114, 154, 159, 164, 166, 170, 179, 181, 183, 184, 193, 196, 209, 249, 253, 269, 273, 276, 279, 280, 281, 282, 286, 308, 312, 314, 316, 325, 327, 337, 340, 343, 348, 352, 360, 361, 381, 384, 416, 427, 444], "string": [0, 1, 186, 444, 446], "index": [0, 1, 6, 8, 27, 37, 124, 126, 149, 184, 207, 256, 257, 268, 284], "xy": [0, 184], "coordin": [0, 184], "clip": [0, 278, 416], "a_min": [0, 89], "nullopt": 0, "a_max": [0, 89], "limit": [0, 1, 89, 192, 193, 442], "concaten": [0, 4, 112], "stack": [0, 439], "new": [0, 1, 5, 87, 109, 198, 201, 227, 248, 264, 270, 280, 281, 332, 340, 412, 414, 425, 430, 439, 442, 443, 444], "repeat": [0, 261], "arr": [0, 231, 442], "tile": [0, 130], "rep": [0, 261], "transpos": [0, 4, 30, 148, 211], "permut": [0, 5], "accord": [0, 215, 273, 276, 340, 363, 364, 365, 366], "initializer_list": 0, "swapax": 0, "axis1": [0, 44, 74, 109, 254, 263], "axis2": [0, 44, 74, 109, 254, 263], "swap": [0, 97, 193, 254, 339], "two": [0, 1, 12, 13, 15, 23, 78, 81, 83, 84, 85, 86, 109, 116, 119, 132, 135, 141, 147, 148, 150, 151, 154, 162, 163, 164, 165, 167, 168, 175, 180, 182, 197, 199, 202, 205, 254, 282, 296, 306, 313, 318, 374, 382, 439, 440, 441, 442, 447], "moveaxi": 0, "destin": [0, 1, 58, 198], "move": [0, 1, 198, 447], "pad": [0, 94, 95, 96, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 295, 296, 298, 299, 300, 317, 318], "low_pad_s": 0, "high_pad_s": 0, "pad_valu": 0, "constant": [0, 1, 4, 7, 127, 128, 206, 293, 297, 308, 314, 344, 384, 394, 426, 428, 439, 444], "pair": [0, 1, 206, 327, 348], "pad_width": [0, 206], "revers": [0, 1, 39, 40, 41, 42, 79, 100, 101, 102, 103, 264, 352], "order": [0, 27, 79, 96, 166, 207, 210, 262, 293, 308, 338, 350, 423, 439, 441], "broadcast_to": 0, "broadcast": [0, 1, 12, 15, 83, 84, 85, 87, 89, 116, 117, 119, 146, 150, 151, 154, 161, 162, 163, 175, 180, 182, 197, 199, 202, 208, 213, 214, 217, 222, 223, 225, 228, 252, 257, 273, 340], "broadcast_arrai": [0, 1], "input": [0, 1, 3, 4, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 112, 113, 116, 117, 119, 120, 121, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 221, 224, 225, 226, 227, 228, 229, 230, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 273, 275, 295, 296, 297, 298, 299, 300, 302, 303, 304, 306, 307, 308, 312, 313, 314, 316, 317, 318, 340, 343, 344, 345, 348, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 374, 381, 382, 384, 385, 386, 387, 389, 390, 392, 394, 406, 409, 439, 441, 442, 445, 446], "against": 0, "one": [0, 1, 4, 7, 37, 75, 80, 89, 95, 96, 124, 126, 127, 128, 166, 173, 180, 211, 214, 247, 252, 286, 337, 361, 383, 440, 447], "equal": [0, 15, 27, 78, 126, 151, 154, 163, 202, 207, 219, 244, 312, 316], "b": [0, 1, 2, 4, 12, 13, 15, 23, 78, 83, 84, 85, 86, 116, 117, 119, 145, 147, 150, 151, 153, 154, 161, 162, 163, 166, 175, 176, 178, 180, 182, 197, 199, 202, 205, 208, 210, 225, 228, 252, 260, 268, 281, 282, 306, 316, 345, 361, 374, 441, 442, 443, 444, 445, 446, 447], "return": [0, 1, 3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 48, 66, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 112, 113, 114, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 192, 193, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 293, 307, 313, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 334, 335, 337, 338, 339, 345, 362, 363, 364, 365, 366, 367, 368, 369, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 409, 412, 422, 438, 439, 440, 441, 442, 443, 444, 446, 447], "element": [0, 1, 11, 12, 18, 19, 20, 21, 22, 23, 24, 27, 68, 79, 83, 84, 85, 88, 98, 99, 100, 101, 102, 103, 107, 116, 117, 119, 120, 121, 123, 125, 126, 144, 145, 148, 150, 151, 154, 155, 156, 157, 158, 161, 162, 163, 171, 172, 173, 174, 175, 176, 177, 178, 182, 184, 197, 199, 200, 202, 207, 208, 210, 211, 224, 225, 226, 228, 230, 238, 239, 240, 241, 245, 246, 252, 256, 258, 259, 262, 268, 270, 273, 301, 302, 303, 307, 311, 313, 319, 341, 345, 348, 376, 377, 379, 380, 395, 396, 398, 401, 402, 403, 404, 439, 441], "wise": [0, 1, 11, 12, 18, 19, 20, 21, 22, 23, 24, 83, 84, 85, 88, 98, 99, 116, 117, 119, 120, 121, 123, 125, 144, 145, 150, 151, 154, 161, 162, 163, 171, 172, 173, 174, 175, 176, 177, 178, 182, 197, 199, 200, 202, 208, 224, 225, 228, 230, 238, 239, 240, 241, 245, 246, 252, 258, 259, 302, 303, 311, 319, 341, 376, 377, 379, 380, 395, 396, 398, 401, 402, 403, 404, 439], "not_equ": 0, "greater": [0, 4, 27, 125, 151, 207, 278, 358, 406], "greater_equ": 0, "less": [0, 4, 27, 163, 207, 348, 393], "less_equ": 0, "array_equ": [0, 15, 154], "equal_nan": [0, 15, 78, 154], "true": [0, 1, 3, 4, 15, 39, 40, 41, 42, 78, 90, 100, 101, 102, 103, 129, 148, 154, 159, 164, 166, 170, 184, 193, 211, 242, 273, 276, 279, 280, 281, 282, 286, 293, 297, 298, 299, 300, 307, 308, 312, 313, 314, 316, 324, 325, 327, 334, 337, 343, 345, 348, 352, 360, 361, 381, 389, 416], "have": [0, 1, 4, 7, 15, 78, 80, 81, 82, 86, 112, 138, 139, 141, 142, 148, 154, 180, 194, 214, 270, 279, 313, 340, 350, 421, 423, 438, 439, 440, 442, 443, 447], "same": [0, 1, 4, 7, 15, 37, 78, 87, 90, 95, 96, 97, 112, 127, 128, 137, 140, 141, 142, 148, 149, 154, 160, 206, 214, 229, 270, 271, 273, 281, 293, 296, 297, 301, 308, 312, 318, 342, 362, 363, 364, 365, 366, 367, 368, 369, 383, 394, 412, 422, 436, 439, 440, 442, 447], "isnan": 0, "isinf": 0, "isposinf": 0, "isneginf": 0, "where": [0, 5, 126, 154, 210, 268, 272, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 307, 308, 312, 313, 314, 316, 317, 318, 324, 341, 344, 345, 358, 365, 366, 370, 371, 373, 384, 390, 396, 399, 401, 406, 423, 440, 441, 442], "condit": [0, 1, 273, 447], "y": [0, 1, 3, 4, 5, 37, 273, 293, 297, 302, 308, 312, 314, 316, 344, 385, 390, 393, 414, 417, 439, 440, 441, 443, 444], "select": [0, 2, 7, 262, 273, 320, 324, 332], "depend": [0, 1, 2, 3, 7, 75, 166, 307, 313, 345, 440, 442, 446, 447], "keepdim": [0, 14, 16, 25, 26, 32, 33, 34, 35, 54, 55, 56, 57, 61, 73, 77, 166, 179, 181, 183, 196, 209, 242, 249, 253, 269], "ar": [0, 1, 3, 4, 5, 6, 7, 15, 17, 78, 86, 87, 89, 90, 96, 97, 109, 122, 126, 132, 133, 135, 136, 138, 139, 141, 142, 143, 148, 149, 154, 155, 156, 157, 158, 159, 160, 166, 167, 170, 180, 193, 205, 206, 207, 210, 211, 213, 214, 215, 219, 222, 223, 234, 235, 247, 248, 256, 268, 271, 272, 276, 279, 280, 286, 297, 298, 299, 300, 301, 302, 303, 308, 312, 314, 316, 327, 340, 343, 361, 381, 383, 384, 408, 412, 421, 423, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447], "non": [0, 1, 7, 184, 335, 345, 395, 412], "allclos": 0, "rtol": [0, 15, 154], "1e": [0, 3, 5, 15, 154, 297, 308, 312, 314, 315, 344, 382, 384, 394, 415, 416, 417, 418, 419, 420, 423, 426, 428, 429, 430, 431, 432], "5": [0, 1, 3, 4, 7, 166, 193, 213, 282, 295, 297, 301, 302, 303, 305, 309, 312, 317, 356, 361, 362, 365, 366, 372, 375, 393, 405, 409, 426, 428, 429, 439, 441, 442], "atol": [0, 15, 154], "8": [0, 1, 4, 7, 166, 210, 286, 296, 312, 318, 360, 382, 415, 416, 417, 418, 419, 420, 426, 439, 442, 445, 447], "within": [0, 2, 27, 154], "toler": [0, 15, 154], "isclos": 0, "boolean": [0, 15, 78, 154, 155, 156, 157, 158, 176, 177, 178, 286, 336, 442], "reduc": [0, 7, 14, 16, 25, 26, 113, 179, 181, 183, 196, 209, 249, 253, 269, 282, 297, 360, 389], "output": [0, 1, 4, 7, 14, 15, 16, 17, 27, 79, 86, 87, 90, 100, 101, 102, 103, 126, 127, 128, 129, 130, 137, 140, 141, 142, 146, 149, 152, 154, 166, 169, 179, 181, 183, 184, 196, 203, 204, 207, 209, 213, 214, 215, 217, 218, 219, 222, 223, 234, 235, 242, 247, 249, 253, 257, 263, 265, 268, 269, 270, 271, 272, 273, 274, 275, 295, 296, 297, 298, 299, 300, 312, 316, 317, 318, 340, 343, 358, 360, 361, 363, 364, 365, 366, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 406, 409, 439, 440, 441, 442, 443, 444, 445, 446, 447], "i": [0, 1, 2, 4, 5, 6, 7, 15, 17, 27, 36, 75, 79, 89, 95, 96, 97, 100, 101, 102, 103, 108, 109, 112, 113, 115, 117, 122, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 154, 159, 160, 164, 165, 166, 167, 168, 170, 175, 179, 180, 184, 190, 193, 206, 207, 210, 211, 213, 214, 217, 218, 221, 222, 223, 227, 231, 232, 233, 238, 242, 244, 249, 250, 255, 256, 257, 260, 263, 264, 268, 269, 270, 271, 272, 273, 276, 278, 279, 280, 281, 282, 286, 288, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 307, 308, 312, 313, 314, 316, 317, 318, 324, 325, 331, 333, 334, 336, 337, 339, 340, 341, 343, 344, 345, 348, 352, 358, 360, 361, 365, 366, 371, 373, 381, 382, 384, 389, 390, 393, 394, 396, 401, 406, 412, 416, 419, 421, 422, 423, 428, 430, 431, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448], "correspond": [0, 1, 14, 16, 75, 89, 107, 109, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 179, 181, 196, 209, 253, 260, 272, 280, 441], "ani": [0, 1, 4, 6, 17, 90, 279, 280, 281, 282, 283, 293, 305, 320, 321, 324, 333, 343, 360, 361, 409, 431, 438, 439, 441, 443, 445, 446, 447], "sum": [0, 1, 3, 12, 103, 113, 153, 166, 179, 242, 260, 263, 293, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 440, 442, 444], "mean": [0, 3, 4, 5, 128, 217, 218, 268, 293, 297, 308, 325, 344, 368, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 439, 441, 444], "comput": [0, 1, 3, 4, 5, 6, 7, 100, 101, 102, 103, 107, 125, 129, 149, 160, 164, 165, 166, 175, 183, 205, 210, 225, 242, 249, 250, 260, 268, 269, 271, 277, 293, 297, 307, 308, 312, 313, 314, 325, 338, 343, 344, 348, 360, 363, 364, 365, 366, 372, 373, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 414, 415, 416, 418, 419, 420, 421, 425, 439, 440, 441, 445, 447], "var": [0, 297, 308, 312, 314, 384], "ddof": [0, 77, 249, 269], "varianc": [0, 249, 269, 297, 308, 384], "standard": [0, 5, 48, 75, 180, 215, 218, 249, 360, 363, 365, 368, 440, 445], "deviat": [0, 218, 249, 363, 365, 368], "deviatoin": 0, "prod": 0, "The": [0, 1, 2, 4, 5, 6, 7, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 45, 49, 59, 60, 66, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 112, 113, 114, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 232, 233, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 288, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 312, 313, 314, 316, 317, 318, 320, 321, 325, 327, 331, 332, 333, 334, 337, 338, 339, 340, 342, 343, 344, 345, 348, 350, 352, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 374, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 406, 409, 412, 414, 415, 416, 417, 418, 419, 420, 421, 424, 426, 427, 428, 431, 434, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448], "product": [0, 1, 13, 79, 102, 153, 160, 180, 205, 209, 260, 271, 340, 445], "max": [0, 1, 166, 182, 317, 318, 341, 376, 377, 382, 384, 385, 390, 394, 396, 398, 416, 420, 439, 441, 447], "maximum": [0, 5, 25, 37, 89, 100, 189, 193, 278, 293, 315, 346, 352, 372, 373, 378, 397, 412, 443], "min": [0, 1, 166, 197, 341, 376, 377, 396, 398], "minimum": [0, 26, 37, 89, 101, 352, 382], "argmin": 0, "argmax": [0, 5], "sort": [0, 27, 28, 207, 262], "argsort": 0, "partit": [0, 27], "kth": [0, 27, 207], "smaller": [0, 7, 207, 421, 439], "first": [0, 1, 2, 3, 4, 5, 7, 109, 112, 143, 149, 161, 168, 176, 178, 180, 207, 221, 228, 254, 260, 263, 268, 279, 281, 282, 293, 296, 308, 318, 361, 382, 390, 416, 418, 419, 420, 423, 439, 441, 444, 447], "argpartit": 0, "topk": 0, "logsumexp": 0, "ab": [0, 15, 154, 166, 268, 308, 312, 314, 319, 344, 373, 395, 439], "absolut": [0, 11, 15, 154, 372, 373, 393], "neg": [0, 109, 143, 157, 263, 315, 317, 318, 340, 384, 392, 394, 442], "negat": [0, 200], "sign": [0, 15, 154, 286, 421], "logical_not": 0, "logic": [0, 1, 176, 177, 178], "logical_and": 0, "logical_or": 0, "reciproc": [0, 230], "subtract": [0, 37], "multipli": [0, 1, 37, 148, 210, 211, 301, 352, 361], "divid": [0, 1, 37, 145, 210, 225, 440], "divmod": 0, "quotient": [0, 116, 117, 145], "remaind": [0, 117], "floor_divid": 0, "integ": [0, 10, 145, 147, 148, 159, 166, 186, 206, 210, 211, 213, 219, 244, 260, 272, 286, 304, 332, 430, 442], "divis": [0, 116, 145, 210, 225], "equival": [0, 1, 30, 63, 76, 117, 145, 148, 256, 305, 309, 310, 311, 339, 341, 343, 346, 347, 349, 351, 353, 354, 355, 356, 357, 359], "do": [0, 1, 4, 7, 270, 293, 326, 337, 409, 412, 419, 439, 440, 441, 443], "floor": [0, 145], "between": [0, 1, 6, 89, 143, 360, 382, 385, 386, 389, 430, 440, 443, 444, 447], "ceil": 0, "exp": [0, 125, 175, 179, 215, 242, 370, 387, 399, 400, 404, 439, 447], "exponenti": [0, 123, 125, 349, 370, 399, 429], "sin": [0, 352, 441, 445], "sine": [0, 20, 21, 240, 241, 441], "co": [0, 1, 352, 441], "cosin": [0, 18, 19, 98, 99, 382, 428, 430, 441], "tan": 0, "tangent": [0, 1, 22, 23, 24, 160, 258, 259, 359, 407], "arcsin": 0, "arc": 0, "arcco": 0, "arctan": 0, "arctan2": 0, "invers": [0, 18, 19, 20, 21, 22, 23, 24, 121, 134, 135, 136, 137, 138, 139, 165], "ratio": [0, 23], "sinh": 0, "hyperbol": [0, 19, 21, 24, 99, 241, 259, 359, 407], "cosh": [0, 389], "tanh": [0, 293, 305, 307, 313, 319, 345, 372, 395], "arcsinh": 0, "arccosh": 0, "arctanh": 0, "degre": [0, 212, 394], "radian": [0, 106], "log": [0, 173, 175, 179, 379, 380, 384, 387, 389, 392, 404], "natur": [0, 171, 173, 443], "logarithm": [0, 171, 172, 173, 174], "log2": 0, "base": [0, 1, 129, 166, 172, 174, 208, 348, 360, 412, 414, 420, 434, 436, 439, 442], "2": [0, 1, 3, 4, 5, 37, 95, 108, 109, 120, 132, 135, 137, 138, 139, 140, 141, 142, 143, 159, 164, 165, 166, 167, 168, 174, 180, 210, 217, 221, 260, 263, 265, 266, 267, 278, 282, 286, 293, 295, 296, 299, 305, 315, 317, 318, 344, 352, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 383, 384, 386, 393, 394, 409, 412, 415, 417, 418, 419, 423, 426, 439, 440, 441, 442, 443, 444, 445, 446, 447], "log10": 0, "10": [0, 2, 4, 5, 172, 229, 234, 280, 293, 327, 409, 430, 432, 439, 440, 442], "log1p": 0, "plu": [0, 173], "logaddexp": 0, "sigmoid": [0, 4, 293, 351, 373, 379, 401], "logist": [0, 3, 238, 373, 401], "erf": [0, 121, 439], "error": [0, 1, 7, 114, 120, 121, 193, 244, 305, 371, 372, 373, 389, 391, 441, 444], "function": [0, 1, 2, 3, 4, 5, 6, 15, 79, 90, 117, 120, 121, 149, 154, 160, 164, 165, 166, 167, 168, 180, 238, 268, 271, 272, 277, 278, 280, 281, 282, 293, 305, 306, 309, 310, 311, 319, 321, 325, 332, 337, 341, 345, 346, 347, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 371, 372, 373, 374, 375, 376, 377, 379, 380, 395, 400, 402, 403, 404, 405, 406, 407, 409, 414, 423, 436, 438, 440, 442, 443, 444, 446], "erfinv": 0, "expm1": 0, "stop_gradi": [0, 441], "flow": [0, 250, 443], "gradient": [0, 3, 5, 149, 250, 268, 277, 278, 293, 325, 338, 343, 360, 389, 412, 414, 415, 416, 418, 419, 420, 421, 422, 425, 427, 439, 440, 441, 442, 443, 444, 445], "round": [0, 210], "decim": [0, 64, 229], "float": [0, 1, 10, 13, 15, 17, 75, 127, 128, 129, 130, 145, 146, 154, 159, 166, 211, 213, 218, 278, 286, 297, 301, 302, 303, 308, 312, 314, 320, 332, 344, 348, 352, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 382, 383, 384, 386, 390, 393, 394, 405, 406, 415, 416, 417, 418, 419, 420, 421, 426, 427, 428, 429, 431, 432], "point": [0, 1, 3, 4, 7, 79, 145, 211, 286], "matmul": [0, 147, 447], "multipl": [0, 7, 13, 86, 127, 128, 147, 148, 180, 199, 210, 211, 340, 352, 429, 430, 432, 439, 443, 446], "gather": [0, 112, 147, 148], "slice_s": 0, "entri": [0, 302, 303], "take": [0, 1, 4, 5, 83, 84, 85, 90, 147, 149, 160, 182, 197, 204, 211, 257, 268, 271, 272, 275, 281, 282, 340, 436, 440, 441, 442, 446, 447, 448], "treat": [0, 1, 138, 139, 141, 142, 256, 361, 439], "take_along_axi": [0, 442], "scatter": 0, "paramet": [0, 1, 3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 320, 321, 324, 325, 327, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 350, 352, 356, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 374, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 406, 408, 409, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 439, 440, 441, 443], "determin": [0, 1, 109, 217, 282, 286, 331, 446], "locat": [0, 1, 79, 338, 339, 440, 447], "assum": [0, 1, 4, 86, 167, 280, 293, 295, 296, 308, 317, 318], "d": [0, 1, 4, 108, 109, 153, 166, 180, 184, 205, 256, 263, 265, 266, 267, 283, 300, 303, 307, 313, 345, 415, 418, 420, 447], "simplic": 0, "which": [0, 1, 4, 5, 6, 7, 17, 36, 79, 90, 96, 109, 122, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 149, 155, 156, 157, 158, 160, 164, 165, 166, 167, 168, 170, 184, 194, 210, 214, 215, 226, 227, 231, 232, 233, 234, 235, 247, 248, 256, 263, 268, 271, 272, 276, 296, 302, 303, 305, 318, 320, 324, 348, 383, 386, 390, 393, 409, 422, 423, 436, 439, 440, 441, 442, 443, 447, 448], "appli": [0, 37, 129, 130, 147, 168, 280, 281, 282, 293, 295, 296, 297, 298, 299, 300, 302, 303, 305, 306, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 321, 334, 341, 343, 344, 345, 346, 347, 349, 351, 353, 354, 355, 356, 357, 358, 359, 361, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 422, 425, 431, 434, 439, 440], "note": [0, 1, 4, 7, 15, 79, 86, 90, 130, 138, 139, 148, 154, 166, 187, 210, 214, 270, 276, 293, 344, 361, 444, 446], "assign": [0, 1, 37, 412], "henc": [0, 1, 210, 439], "size": [0, 1, 4, 5, 49, 66, 86, 95, 107, 124, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 148, 152, 159, 166, 188, 193, 210, 211, 214, 227, 244, 247, 270, 276, 293, 295, 296, 298, 299, 300, 304, 312, 317, 318, 342, 343, 361, 416, 440, 443, 444], "If": [0, 1, 4, 7, 14, 15, 16, 17, 25, 26, 27, 28, 75, 78, 79, 89, 91, 97, 100, 101, 102, 103, 108, 109, 112, 113, 114, 122, 127, 129, 140, 141, 142, 145, 146, 149, 154, 164, 166, 170, 179, 180, 181, 183, 184, 192, 193, 196, 203, 206, 207, 209, 214, 217, 226, 242, 243, 244, 249, 253, 255, 256, 257, 260, 262, 263, 268, 269, 272, 274, 276, 280, 282, 297, 298, 299, 300, 308, 314, 316, 325, 327, 337, 343, 345, 348, 350, 352, 361, 381, 383, 394, 416, 439, 440, 441, 443, 446, 447, 448], "provid": [0, 1, 4, 79, 107, 149, 260, 268, 280, 282, 288, 293, 320, 325, 327, 337, 338, 339, 342, 343, 360, 361, 408, 412, 440, 446, 448], "rank": [0, 390, 440], "must": [0, 1, 2, 7, 86, 89, 146, 148, 166, 213, 214, 217, 219, 222, 223, 273, 361, 444], "In": [0, 1, 4, 5, 37, 180, 210, 280, 293, 302, 308, 412, 415, 417, 418, 420, 421, 422, 438, 439, 440, 441, 443, 446, 447], "other": [0, 1, 4, 6, 159, 166, 293, 326, 412, 421, 439, 440, 442, 443, 445], "word": 0, "ndim": [0, 1, 143, 166, 168, 361], "lead": [0, 17, 79, 439], "remain": [0, 4, 268, 281, 301, 302, 303, 440], "For": [0, 1, 4, 7, 37, 130, 147, 159, 166, 210, 283, 293, 297, 302, 320, 325, 334, 337, 343, 348, 352, 361, 363, 364, 365, 366, 409, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447], "exampl": [0, 2, 3, 4, 5, 7, 17, 37, 143, 166, 167, 251, 256, 278, 281, 282, 293, 295, 296, 297, 312, 317, 318, 325, 327, 334, 337, 361, 362, 363, 364, 365, 366, 367, 368, 369, 381, 383, 390, 409, 414, 423, 428, 429, 430, 431, 432, 436, 441, 442, 443, 444, 445, 446], "auto": [0, 1, 7], "4": [0, 1, 4, 107, 143, 148, 166, 210, 211, 234, 276, 282, 286, 295, 296, 297, 312, 317, 318, 342, 343, 360, 361, 363, 364, 365, 381, 439, 440, 442, 445, 447], "3": [0, 1, 4, 7, 143, 159, 166, 167, 278, 282, 300, 305, 361, 364, 366, 372, 377, 416, 421, 436, 439, 442, 444, 445], "out": [0, 1, 7, 86, 295, 296, 302, 303, 317, 318, 334, 439, 440, 441, 442], "produc": [0, 1, 7, 90, 340, 409], "thi": [0, 1, 4, 5, 7, 14, 15, 16, 17, 25, 26, 27, 28, 79, 118, 147, 148, 154, 160, 164, 165, 166, 167, 168, 175, 179, 180, 181, 183, 185, 187, 196, 207, 209, 214, 237, 242, 243, 244, 249, 253, 256, 262, 269, 278, 281, 282, 293, 301, 302, 303, 306, 307, 313, 321, 322, 324, 325, 328, 329, 330, 335, 337, 338, 339, 340, 343, 345, 358, 363, 364, 365, 366, 372, 373, 374, 389, 406, 412, 423, 438, 439, 440, 441, 443, 444, 446], "row": [0, 1, 79, 126, 152, 210, 265], "posit": [0, 4, 27, 109, 129, 143, 149, 158, 164, 198, 207, 217, 263, 268, 280, 293, 298, 299, 300, 340, 348, 352, 384, 394], "ad": [0, 1, 3, 7, 127, 312, 412, 415, 416, 417, 418, 419, 420, 426, 440, 443, 446], "we": [0, 1, 3, 4, 5, 107, 148, 210, 211, 293, 304, 342, 350, 419, 421, 436, 438, 439, 440, 441, 443, 447], "also": [0, 1, 4, 5, 6, 7, 10, 12, 83, 84, 85, 110, 116, 117, 119, 133, 136, 139, 142, 150, 151, 161, 162, 163, 175, 182, 197, 199, 202, 208, 210, 225, 228, 252, 276, 277, 288, 293, 324, 338, 340, 342, 343, 351, 371, 399, 401, 408, 414, 439, 440, 441, 442, 443, 444, 445, 448], "To": [0, 1, 2, 3, 4, 5, 7, 192, 293, 409, 439, 440, 441, 445], "control": [0, 315, 436, 443], "addit": [0, 1, 4, 7, 12, 13, 127, 128, 130, 170, 297, 308, 314, 340, 344, 412, 441], "item": [0, 1, 3, 4, 5, 280, 443, 444, 445], "togeth": [0, 1, 5, 210, 280, 281, 440], "doe": [0, 1, 2, 4, 7, 187, 270, 278, 293, 439, 442, 443, 444], "perform": [0, 1, 2, 4, 6, 13, 86, 96, 100, 101, 102, 103, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 148, 180, 211, 229, 242, 256, 293, 308, 360, 365, 366, 439, 440, 442, 443, 447], "bound": [0, 219, 222, 223, 305, 369, 439, 442, 447], "check": [0, 1, 7, 78, 115, 159, 190, 327, 441, 442], "access": [0, 4, 48, 293, 412, 423, 440, 443, 447], "undefin": [0, 27, 164, 207, 217, 442], "typic": [0, 130, 304, 414, 439, 443], "result": [0, 4, 13, 17, 37, 75, 79, 90, 127, 128, 148, 166, 180, 211, 217, 226, 248, 280, 281, 282, 352, 439, 441, 444], "unintend": 0, "invalid": [0, 79], "memori": [0, 1, 6, 79, 185, 187, 188, 189, 191, 192, 193, 360, 412, 416, 439, 443, 444], "write": [0, 1, 4, 293, 444], "scatter_add": 0, "scatter_prod": 0, "scatter_max": 0, "linear": [0, 1, 4, 5, 6, 276, 280, 293, 305, 306, 315, 327, 343, 345, 346, 347, 349, 351, 361, 370, 371, 372, 373, 374, 378, 397, 398, 399, 401, 409, 412, 423, 431, 439], "scatter_min": 0, "sqrt": [0, 4, 120, 130, 297, 305, 308, 312, 314, 316, 344, 352, 363, 364, 365, 366, 372, 415, 417, 418, 419, 426, 439], "root": [0, 4, 128, 230, 245, 344], "rsqrt": 0, "softmax": [0, 4, 130, 293, 380, 383], "precis": [0, 1, 4, 125, 130, 293, 305, 344, 422, 439], "power": [0, 441, 444], "rais": [0, 4, 166, 193, 208, 244, 327], "cumsum": 0, "inclus": [0, 39, 40, 41, 42, 100, 101, 102, 103, 143], "cumul": [0, 79, 100, 101, 102, 103], "cumprod": 0, "cummax": 0, "cummin": 0, "conv_gener": 0, "weight": [0, 3, 94, 95, 96, 127, 128, 280, 293, 327, 331, 342, 343, 381, 383, 412, 416, 419, 421, 423, 427, 441, 443], "padding_lo": 0, "padding_hi": 0, "kernel_dil": [0, 96], "input_dil": [0, 96], "group": [0, 94, 95, 96, 107, 112, 113, 114, 130, 148, 210, 211, 270, 276, 308, 342, 343, 440], "flip": [0, 96, 97], "gener": [0, 1, 2, 3, 10, 17, 96, 126, 138, 139, 169, 184, 213, 217, 218, 219, 222, 223, 360, 436, 439, 442, 443, 448], "convolut": [0, 94, 95, 96, 97, 298, 299, 300, 302, 303], "filter": [0, 97, 298, 299, 300, 320, 324], "conv1d": [0, 293], "dilat": [0, 94, 95, 96, 298, 299], "conv2d": [0, 293], "2d": [0, 95, 109, 210, 297, 302], "conv3d": [0, 293], "tupl": [0, 29, 63, 66, 76, 91, 95, 96, 117, 122, 124, 160, 166, 167, 168, 206, 210, 227, 247, 268, 271, 279, 280, 281, 282, 283, 295, 296, 299, 300, 317, 318, 327, 329, 350, 361, 416, 418, 419, 420, 421, 438, 441], "3d": [0, 1, 297, 303, 361], "quantized_matmul": 0, "w": [0, 3, 95, 107, 148, 210, 211, 268, 281, 296, 297, 299, 300, 302, 303, 316, 318, 427, 441], "scale": [0, 1, 4, 13, 107, 127, 128, 129, 130, 148, 210, 211, 218, 278, 302, 303, 314, 340, 348, 349, 352, 361, 399, 416], "bias": [0, 107, 148, 210, 211, 307, 313, 325, 337, 340], "group_siz": [0, 107, 148, 210, 211, 276, 342, 343], "64": [0, 86, 107, 148, 210, 211, 276, 286, 342, 343], "bit": [0, 107, 148, 161, 210, 211, 228, 276, 286, 320, 342, 343, 344], "quantiz": [0, 107, 148, 170, 211, 342, 343], "its": [0, 1, 7, 180, 207, 221, 265, 277, 283, 293, 343, 418, 419, 420, 440, 444, 447], "last": [0, 4, 28, 75, 127, 128, 133, 136, 138, 139, 141, 142, 143, 147, 148, 153, 164, 165, 167, 168, 180, 189, 214, 243, 260, 270, 298, 299, 300, 302, 303, 308, 361, 444], "dequant": [0, 210], "gather_qmm": 0, "lhs_indic": [0, 147, 148], "rhs_indic": [0, 147, 148], "level": [0, 147, 148, 365, 366], "tensordot": 0, "contract": 0, "over": [0, 1, 4, 5, 14, 16, 25, 26, 27, 28, 94, 95, 96, 100, 101, 102, 103, 133, 136, 139, 142, 153, 166, 168, 169, 179, 181, 183, 196, 207, 209, 230, 242, 243, 249, 253, 260, 262, 269, 297, 298, 299, 300, 308, 314, 344, 383, 428, 431, 440, 441], "axes_a": 0, "axes_b": 0, "outer": [0, 439, 443], "inner": [0, 439], "addmm": 0, "c": [0, 1, 4, 13, 166, 295, 296, 297, 298, 299, 300, 302, 303, 312, 313, 317, 318, 444, 445, 447], "alpha": [0, 1, 13, 210, 370, 394, 396, 399, 419, 426], "f": [0, 1, 3, 5, 166, 293, 313, 419, 439, 444], "beta": [0, 1, 13, 107, 210, 297, 308, 312, 314, 393, 418, 419, 420, 421], "block_masked_mm": 0, "block_siz": [0, 86], "mask_out": [0, 86], "mask_lh": [0, 86], "mask_rh": [0, 86], "block": [0, 1, 4, 86, 360], "mask": [0, 4, 86, 130, 334, 340, 442], "gather_mm": [0, 148], "extract": [0, 4, 43, 108, 109, 293, 324, 412, 440], "construct": [0, 1, 5, 43, 108, 146, 203, 261, 274], "diag": [0, 168], "trace": [0, 2, 439], "implement": [0, 3, 5, 129, 130, 166, 304, 324, 340, 348, 350, 352, 358, 360, 361, 406, 415, 416, 417, 418, 420, 421, 422, 434, 439, 441], "allow": [0, 1, 159, 278, 293, 339, 412, 434, 440, 442, 445], "inject": 0, "ensur": [0, 1, 7, 278, 389, 440], "been": [0, 1, 4, 188, 443], "when": [0, 1, 4, 6, 7, 90, 96, 164, 165, 166, 168, 170, 298, 299, 300, 361, 365, 366, 387, 393, 412, 430, 436, 439, 440, 447], "atleast_1d": 0, "atleast": 0, "atleast_2d": 0, "atleast_3d": 0, "number_of_el": 0, "invert": 0, "int32": [0, 10, 17, 37, 143, 159, 166, 219, 286, 361, 442, 445], "some": [0, 1, 3, 4, 5, 325, 337, 423, 439, 441, 443], "scalar": [0, 1, 12, 13, 15, 29, 48, 75, 78, 83, 84, 85, 86, 87, 89, 116, 117, 119, 145, 146, 149, 150, 151, 154, 161, 162, 163, 166, 169, 175, 176, 177, 178, 180, 182, 197, 199, 202, 206, 208, 213, 219, 222, 223, 225, 228, 232, 252, 268, 270, 273, 277, 394, 441, 443, 445], "us": [0, 2, 3, 4, 5, 6, 7, 17, 37, 79, 107, 110, 112, 113, 117, 129, 143, 148, 161, 164, 165, 166, 167, 168, 180, 187, 188, 189, 192, 210, 211, 226, 227, 228, 255, 279, 282, 286, 288, 293, 296, 302, 304, 305, 307, 313, 316, 318, 320, 324, 331, 338, 340, 342, 343, 345, 348, 352, 360, 361, 365, 366, 372, 373, 382, 409, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 436, 438, 439, 440, 441, 442, 445, 447], "shapeless": [0, 90], "compil": [0, 2, 6, 7, 110, 118, 440, 441, 443], "pun": 0, "intend": [0, 439], "conjug": [0, 92], "bitwise_and": 0, "bitwis": [0, 83, 84, 85, 161, 228], "bitwise_or": 0, "bitwise_xor": 0, "exclus": [0, 79, 85], "left_shift": 0, "shift": [0, 161, 228, 297], "left": [0, 4, 129, 161, 166, 210, 295, 296, 305, 317, 318, 348, 361, 372, 373, 384, 386, 394], "right_shift": 0, "right": [0, 1, 7, 210, 228, 295, 296, 305, 317, 318, 361, 372, 373, 384, 386, 394], "you": [1, 2, 4, 5, 6, 7, 293, 352, 360, 409, 436, 439, 440, 441, 442, 444, 446, 447], "can": [1, 2, 4, 6, 7, 12, 17, 63, 76, 79, 83, 84, 85, 90, 109, 110, 111, 116, 117, 119, 122, 150, 151, 161, 162, 163, 166, 175, 182, 197, 199, 202, 208, 213, 214, 219, 222, 223, 225, 228, 232, 252, 263, 268, 282, 293, 296, 304, 318, 324, 337, 342, 350, 361, 383, 409, 412, 414, 422, 423, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448], "extend": [1, 206], "guid": [1, 6], "explain": 1, "how": [1, 4, 5, 293, 295, 296, 298, 299, 300, 304, 317, 318, 342, 361, 422, 439, 442, 447], "simpl": [1, 4, 5, 293, 304, 408, 439, 440, 441, 443], "let": [1, 3, 4, 439, 441, 443, 444], "sai": [1, 4, 409, 443], "would": [1, 4, 361, 440, 442, 443, 444, 447], "like": [1, 4, 6, 159, 204, 275, 303, 389, 423, 425, 439, 440, 441, 443, 444, 445, 447], "them": [1, 4, 112, 293, 325, 337, 440, 447], "both": [1, 12, 83, 84, 85, 116, 117, 119, 150, 151, 159, 161, 162, 163, 166, 175, 182, 197, 199, 202, 208, 214, 225, 228, 252, 276, 295, 296, 312, 313, 317, 318, 414, 439, 440, 441, 445, 447], "coeffici": [1, 415, 416, 418, 419, 420, 421], "respect": [1, 3, 5, 127, 128, 147, 148, 149, 210, 268, 280, 293, 297, 305, 308, 312, 314, 412, 441, 445], "get": [1, 3, 5, 7, 95, 96, 104, 105, 186, 187, 188, 189, 216, 293, 439, 441, 443, 447], "z": [1, 307, 439, 443], "directli": [1, 4, 79], "import": [1, 2, 3, 4, 5, 7, 166, 234, 268, 279, 280, 281, 282, 283, 293, 295, 296, 297, 312, 317, 318, 327, 361, 381, 383, 390, 409, 412, 439, 440, 441, 442, 443, 444, 445], "core": [1, 2, 3, 4, 5, 276, 293, 295, 296, 297, 312, 317, 318, 327, 330, 332, 335, 361, 362, 363, 364, 365, 366, 367, 368, 369, 381, 383, 390, 409, 412, 414, 439, 440, 444, 445], "mx": [1, 2, 3, 4, 5, 37, 92, 93, 114, 143, 159, 166, 167, 170, 234, 268, 278, 293, 295, 296, 297, 312, 315, 317, 318, 320, 327, 331, 346, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 378, 381, 382, 383, 387, 390, 397, 407, 409, 412, 414, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448], "def": [1, 3, 4, 5, 268, 293, 412, 439, 440, 441, 442, 443, 444, 447], "simple_axpbi": 1, "while": [1, 2, 4, 7, 227, 348, 443, 444], "leav": [1, 122, 280, 281, 282], "howev": [1, 293, 305, 308, 423, 436, 439, 440, 443, 444], "mai": [1, 166, 276, 302, 440, 441, 442], "need": [1, 4, 5, 6, 7, 78, 210, 293, 338, 339, 352, 360, 436, 440, 441, 443, 444, 445, 447], "underli": [1, 270], "perhap": [1, 4], "make": [1, 2, 4, 5, 7, 180, 201, 237, 293, 428, 429, 431, 432, 439, 443, 445, 447], "faster": [1, 117, 371, 439, 441], "differenti": [1, 6], "tutori": 1, "go": [1, 4, 441], "through": [1, 250, 360, 421, 439, 441, 444], "It": [1, 4, 7, 149, 237, 268, 278, 282, 293, 339, 343, 422, 434, 444, 446], "cover": 1, "structur": [1, 422, 441], "librari": [1, 7, 288, 293], "redirect": 1, "acceler": [1, 297], "appropri": [1, 439], "metal": [1, 6], "vjp": [1, 445], "jvp": [1, 445], "graph": [1, 4, 5, 6, 441], "rule": 1, "evalu": [1, 4, 5, 6, 122, 160, 271, 293, 323, 334, 412, 414, 439, 445], "discuss": 1, "more": [1, 2, 5, 9, 75, 109, 147, 164, 165, 168, 180, 192, 193, 232, 233, 286, 293, 297, 302, 348, 352, 360, 361, 363, 364, 365, 366, 436, 439, 440, 441, 442, 445, 447], "detail": [1, 9, 192, 293, 302, 348, 352, 361, 363, 364, 365, 366, 415, 417, 418, 420, 421, 442, 445], "front": 1, "thei": [1, 3, 4, 7, 15, 97, 148, 154, 350, 385, 412, 421, 438, 439, 440, 443, 445, 446, 447], "defin": [1, 3, 4, 5, 7, 148, 166, 211, 276, 279, 444], "api": [1, 440, 441], "axpbi": 1, "follow": [1, 4, 5, 6, 7, 17, 97, 107, 147, 166, 210, 281, 293, 372, 373, 387, 415, 416, 417, 418, 419, 420, 421, 427, 436, 439, 440, 441, 447], "numpi": [1, 4, 5, 6, 12, 15, 17, 83, 84, 85, 87, 116, 117, 119, 150, 151, 154, 161, 162, 163, 175, 180, 182, 197, 199, 202, 208, 225, 228, 252, 443, 445, 446], "style": [1, 12, 15, 83, 84, 85, 116, 117, 119, 150, 151, 154, 161, 162, 163, 175, 180, 182, 197, 199, 202, 208, 225, 228, 252], "upcast": 1, "factor": [1, 13, 164, 167, 361, 383, 429, 432], "stream": [1, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 273, 274, 275, 440, 447], "schedul": [1, 193, 414, 428, 429, 430, 431, 432, 434, 447], "simplest": [1, 293, 440], "wai": [1, 4, 7, 293, 361, 439, 440, 441, 442], "term": [1, 384, 415, 416, 417, 418, 419, 420, 426], "exist": [1, 2, 4, 325, 337], "themselv": [1, 439], "contain": [1, 4, 7, 27, 28, 66, 90, 109, 137, 138, 139, 147, 148, 166, 176, 177, 178, 210, 244, 273, 278, 293, 324, 326, 327, 333, 360, 390, 409, 412, 439, 440, 441], "act": [1, 389], "nor": [1, 149, 268], "rather": [1, 441, 447], "easi": [1, 293, 440], "interfac": 1, "part": [1, 441, 442], "further": [1, 7, 441], "ha": [1, 2, 4, 5, 6, 7, 75, 90, 109, 137, 138, 140, 141, 142, 149, 164, 165, 168, 184, 188, 214, 297, 307, 313, 316, 345, 412, 414, 439, 442, 443, 445, 447], "method": [1, 4, 8, 9, 10, 29, 111, 276, 284, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 331, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 412, 415, 416, 417, 418, 419, 420, 421, 423, 426, 427, 434], "run": [1, 2, 4, 5, 6, 7, 8, 205, 284, 297, 320, 415, 416, 418, 419, 420, 439, 440, 443, 447, 448], "our": [1, 4, 5, 350, 415, 416, 417, 418, 420, 421, 440], "concret": [1, 307, 313, 316, 345, 443, 447], "class": [1, 4, 5, 8, 9, 10, 29, 111, 284, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 412, 415, 416, 417, 418, 419, 420, 421, 426, 427, 434], "public": [1, 293], "explicit": [1, 423, 436, 444], "alpha_": 1, "beta_": 1, "know": [1, 4], "itself": [1, 276, 423], "popul": 1, "avoid": [1, 332, 439], "unnecessari": [1, 4], "alloc": [1, 188, 192, 193, 412], "respons": 1, "void": 1, "eval_cpu": 1, "overrid": [1, 118], "eval_gpu": 1, "jacobian": [1, 160, 271, 445], "primal": [1, 160, 271], "argnum": [1, 149, 268, 441], "cotan": 1, "across": [1, 308, 440], "repres": [1, 4, 111, 114, 148, 390, 394, 444], "virtual": 1, "vmap": [1, 441, 443, 445], "print": [1, 3, 4, 5, 7, 278, 279, 280, 281, 283, 293, 436, 439, 440, 441, 442, 443, 444, 445], "ostream": 1, "o": [1, 7, 130, 313], "is_equival": 1, "privat": 1, "fall": 1, "eval": [1, 2, 3, 4, 5, 293, 412, 414, 439, 440, 441, 443, 445], "deriv": [1, 441, 443], "pass": [1, 4, 5, 63, 76, 205, 206, 268, 277, 279, 280, 281, 293, 325, 337, 338, 339, 350, 439, 440, 443], "reimplement": 1, "now": [1, 4, 7, 343, 439, 440, 444], "promot": 1, "promoted_dtyp": 1, "promote_typ": 1, "out_dtyp": 1, "is_floating_point": 1, "cast": [1, 36, 140, 141, 142, 170, 320, 332, 444], "up": [1, 4, 439], "x_cast": 1, "y_cast": 1, "broadcasted_input": 1, "out_shap": 1, "unique_ptr": 1, "make_shar": 1, "to_stream": 1, "handl": [1, 293, 439], "resolv": 1, "No": [1, 4], "happen": [1, 4, 127, 360, 414, 439, 443], "call": [1, 2, 4, 5, 30, 145, 185, 189, 293, 304, 325, 337, 342, 350, 412, 414, 423, 439, 440, 441, 443], "alon": [1, 444], "onli": [1, 4, 6, 7, 78, 86, 95, 96, 166, 210, 217, 270, 293, 324, 325, 327, 332, 334, 337, 338, 339, 412, 439, 440, 441, 446, 447], "execut": [1, 7, 80, 81, 82, 189, 444, 447], "devic": [1, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 273, 274, 275, 284, 447, 448], "user": [1, 4, 293], "naiv": [1, 441], "version": [1, 7, 107, 175, 179, 210, 242, 272, 436, 441, 442], "declar": 1, "member": [1, 293, 330, 335], "earlier": 1, "find": [1, 3, 7, 440], "captur": [1, 2, 90, 194, 195, 293, 439], "axpby_impl": 1, "readi": 1, "malloc_or_wait": 1, "synchron": [1, 439], "avail": [1, 3, 4, 5, 7, 9, 115, 190, 288, 447], "There": [1, 293, 361, 439], "wait": [1, 4, 193], "here": [1, 4, 439, 441, 443, 446, 447], "request": 1, "under": [1, 166], "pressur": 1, "set_data": 1, "nbyte": 1, "collect": [1, 280, 281, 438], "pointer": 1, "x_ptr": 1, "y_ptr": 1, "out_ptr": 1, "relev": 1, "static_cast": 1, "out_idx": 1, "map": [1, 5, 37, 170, 280, 304, 320], "x_offset": 1, "elem_to_loc": 1, "y_offset": 1, "contigu": [1, 79], "regularli": 1, "default": [1, 7, 13, 14, 15, 16, 17, 25, 26, 27, 28, 78, 79, 86, 90, 91, 94, 95, 96, 104, 105, 107, 108, 109, 112, 113, 114, 126, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 148, 149, 152, 154, 164, 165, 166, 167, 168, 169, 170, 179, 181, 183, 184, 192, 193, 196, 203, 207, 209, 210, 211, 213, 214, 215, 217, 218, 219, 221, 222, 223, 226, 227, 229, 236, 237, 243, 244, 247, 248, 249, 251, 253, 255, 260, 262, 263, 264, 265, 266, 267, 268, 269, 272, 274, 276, 286, 295, 296, 297, 298, 299, 300, 306, 307, 309, 312, 313, 315, 316, 317, 318, 320, 325, 327, 332, 334, 337, 340, 341, 342, 343, 345, 348, 352, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 374, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 412, 415, 416, 417, 418, 419, 420, 421, 426, 427, 428, 436, 438, 439, 441, 444, 446, 448], "doesn": [1, 293], "should": [1, 3, 4, 5, 7, 79, 109, 112, 127, 128, 130, 160, 185, 194, 210, 257, 263, 268, 271, 276, 279, 293, 298, 299, 300, 302, 303, 334, 340, 350, 383, 385, 390, 412, 438, 439, 440, 441, 443, 444, 448], "work": [1, 2, 4, 7, 193, 439, 440, 441, 442, 443], "incom": 1, "accordingli": 1, "dispatch": 1, "float16": [1, 10, 170, 286, 320, 443, 444], "bfloat16": [1, 10, 286, 444], "complex64": [1, 286], "throw": [1, 90, 114], "encount": [1, 441], "unexpect": [1, 17], "correct": [1, 7, 418, 419, 420, 442, 443], "float16_t": 1, "bfloat16_t": 1, "complex64_t": 1, "runtime_error": 1, "support": [1, 4, 6, 7, 15, 86, 130, 143, 154, 164, 165, 167, 168, 170, 180, 210, 217, 440, 441, 442, 444, 446], "good": [1, 7, 439, 440, 447], "fallback": 1, "routin": 1, "framework": [1, 6], "certain": [1, 334, 439], "case": [1, 4, 114, 133, 136, 137, 139, 140, 141, 142, 143, 164, 165, 167, 168, 180, 227, 247, 296, 302, 318, 358, 375, 393, 399, 405, 406, 422, 423, 439, 441, 445, 446, 447, 448], "half": [1, 17, 219, 223, 348, 443], "fix": [1, 4, 7, 443], "direct": [1, 4, 322, 421, 447], "column": [1, 126, 152, 210], "place": [1, 4, 37, 229, 276, 440, 443, 444], "expect": [1, 4, 298, 299, 300, 301, 302, 303, 352, 360, 384, 439, 442], "catlas_saxpbi": 1, "axpby_impl_acceler": 1, "special": 1, "copy_inplac": 1, "copytyp": 1, "inplac": 1, "incx": 1, "inci": 1, "fit": [1, 210, 447], "criteria": 1, "With": 1, "mind": [1, 4], "finish": 1, "assert": 1, "singl": [1, 5, 122, 160, 170, 184, 206, 271, 296, 318, 439, 442, 446], "flag": [1, 7, 439, 444], "row_contigu": 1, "col_contigu": 1, "common": [1, 414, 439, 443], "just": [1, 5, 314, 439, 442], "much": [1, 4, 295, 296, 317, 318, 439, 443], "enough": [1, 443], "plan": [1, 439], "enjoi": 1, "speed": 1, "appl": [1, 4, 6, 7, 447], "silicon": [1, 4, 6, 7, 447], "address": 1, "shade": 1, "languag": 1, "kernel": [1, 7, 94, 95, 96, 295, 296, 317, 318, 439, 442], "written": 1, "help": [1, 4, 439, 447], "resourc": 1, "walkthrough": 1, "pipelin": 1, "document": [1, 2, 63, 76, 232, 233, 286, 439, 441, 442], "specif": [1, 7, 440, 441], "cpp": 1, "keep": [1, 14, 16, 25, 26, 179, 181, 183, 196, 209, 249, 253, 269, 293, 324, 441, 443], "launch": [1, 114, 440, 442], "exactli": [1, 4, 327, 441], "mani": [1, 79, 244, 298, 299, 300, 304, 342, 439, 440, 443], "thread": 1, "pick": 1, "axpby_gener": 1, "buffer": [1, 187, 444], "x_stride": 1, "6": [1, 4, 166, 234, 347, 360, 364, 372, 373, 377, 384, 394, 398, 426, 439, 442, 445], "y_stride": 1, "7": [1, 4, 166, 210, 442], "uint": 1, "thread_position_in_grid": 1, "instanti": [1, 5, 443], "give": [1, 4, 5, 27, 439], "uniqu": [1, 436], "host": 1, "name": [1, 148, 170, 210, 211, 232, 233, 234, 235, 293, 308, 324, 327, 329, 440, 442, 446], "so": [1, 4, 7, 149, 268, 301, 361, 414, 439, 440, 443, 447], "identifi": [1, 279, 438], "instantiate_axpbi": 1, "type_nam": 1, "host_nam": 1, "axpby_general_": 1, "set": [1, 4, 5, 7, 90, 110, 112, 113, 114, 118, 127, 129, 186, 192, 193, 236, 237, 251, 305, 314, 316, 323, 325, 332, 333, 334, 337, 338, 343, 348, 358, 382, 394, 406, 412, 416, 423, 436, 441, 443], "grid": [1, 184], "shown": 1, "below": [1, 7, 166, 265, 267, 286, 361, 443], "prepar": [1, 4], "carri": 1, "ostringstream": 1, "kname": 1, "axpby_": 1, "general_": 1, "type_to_nam": 1, "sure": [1, 2, 4, 7, 293, 439], "look": [1, 4, 440], "folder": 1, "register_librari": 1, "mlx_ext": 1, "get_colocated_mtllib_path": 1, "get_kernel": 1, "str": [1, 97, 149, 166, 170, 184, 186, 194, 231, 232, 233, 234, 235, 268, 279, 283, 320, 321, 324, 325, 327, 329, 331, 337, 361, 365, 366, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], "encod": [1, 129, 348, 352, 360, 383], "compute_encod": 1, "get_command_encod": 1, "setcomputepipelinest": 1, "regist": [1, 5], "those": [1, 4, 293], "nelem": 1, "set_input_arrai": 1, "set_output_arrai": 1, "setbyt": 1, "sizeof": 1, "threadgroup": 1, "higher": [1, 153, 390, 441], "than": [1, 4, 75, 97, 109, 117, 129, 147, 150, 151, 162, 163, 164, 165, 168, 180, 192, 278, 280, 348, 358, 361, 390, 393, 406, 416, 421, 439, 441, 447], "tgp_size": 1, "maxtotalthreadsperthreadgroup": 1, "mtl": 1, "group_dim": 1, "grid_dim": 1, "among": 1, "dispatchthread": 1, "few": [1, 4, 5, 6, 7, 440, 443, 445], "thing": [1, 4, 440], "about": [1, 4, 5, 186, 443, 447], "befor": [1, 4, 7, 27, 207, 324, 360, 423, 440, 442, 443], "track": [1, 293, 297], "activ": [1, 7, 187, 302, 358, 360, 375, 395, 405, 406, 408, 439], "command_buff": 1, "mtlcommandbuff": 1, "associ": [1, 234, 235, 443], "reli": 1, "u": [1, 164, 168, 316, 339, 434, 443], "command": [1, 2, 7, 440], "instead": [1, 7, 293, 339, 352, 440, 441, 443], "end_encod": 1, "until": [1, 443, 445], "hit": 1, "flush": 1, "next": [1, 4, 5, 192], "These": [1, 90, 257, 383, 447], "built": [1, 7, 443], "top": [1, 262, 316, 361], "includ": [1, 100, 101, 102, 103, 187, 188, 193, 314, 321, 333, 343, 384, 439, 441, 442, 445, 446, 448], "forward": [1, 268, 439, 443], "mode": [1, 97, 323, 334, 336, 361, 365, 366, 440], "diff": 1, "push": 1, "op": [1, 205, 270, 325, 443], "similarli": [1, 7, 180, 441, 443], "scale_arr": 1, "contribut": 1, "tangent_x": 1, "tangent_i": 1, "cotang": [1, 271], "unus": 1, "arg": [1, 4, 9, 10, 111, 122, 234, 235], "push_back": 1, "fulli": [1, 6, 439, 440, 444, 447], "overal": 1, "directori": [1, 4, 7], "h": [1, 94, 95, 166, 296, 297, 299, 300, 302, 303, 307, 313, 318, 345, 441, 443], "mlx_sample_extens": 1, "__init__": [1, 4, 5, 8, 9, 10, 29, 111, 284, 293, 412], "py": [1, 4, 7, 440], "cmakelist": 1, "txt": 1, "setup": [1, 3, 5, 7, 439], "packag": [1, 3, 5, 288, 409, 440], "hold": [1, 4, 9, 10, 166, 439], "instal": 1, "nanobind": [1, 7, 360], "sinc": [1, 4, 5, 148, 189, 412, 421, 430, 444, 447], "compon": [1, 4], "etc": [1, 210, 293, 361, 440], "alreadi": [1, 2, 4, 440], "nb_modul": 1, "_ext": 1, "doc": [1, 5, 440], "sampl": [1, 3, 4, 169, 213, 214, 215, 217, 219, 222, 223, 363, 364, 365, 366, 368, 369, 384, 390, 394, 436, 439], "_a": 1, "nb": 1, "kw_onli": 1, "none": [1, 4, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 191, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 279, 280, 281, 282, 284, 295, 296, 305, 317, 318, 320, 324, 325, 332, 337, 340, 345, 352, 360, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 416, 434, 442], "r": [1, 4, 167, 268, 302, 307], "most": [1, 214, 293, 425, 439, 440, 441, 442, 443], "complex": [1, 92, 93, 138, 139, 140, 141, 142, 279, 286, 293, 339, 439, 441], "abov": [1, 4, 210, 266, 293, 361, 419, 440, 441, 442, 443, 447], "come": [1, 4, 440, 441], "bell": 1, "whistl": 1, "liter": [1, 361, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], "modul": [1, 4, 5, 276, 277, 350, 360, 409, 425, 438, 439, 443], "caster": 1, "requir": [1, 4, 293, 440, 443, 444], "find_packag": 1, "config": [1, 440], "link": [1, 7], "your": [1, 4, 7, 412, 441, 443], "add_librari": 1, "target_sourc": 1, "cmake_current_list_dir": 1, "header": 1, "target_include_directori": 1, "target_link_librari": 1, "attach": 1, "conveni": [1, 5, 159], "mlx_build_metallib": 1, "metallib": [1, 7], "target": [1, 268, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 439], "automat": [1, 6, 170, 440, 445, 446, 447], "what": [1, 4, 280], "practic": [1, 439], "mlx_build_met": [1, 7], "mlx_ext_metallib": 1, "titl": 1, "include_dir": 1, "project_source_dir": 1, "mlx_include_dir": 1, "output_directori": 1, "cmake_library_output_directori": 1, "add_depend": 1, "endif": 1, "final": [1, 3, 4, 5, 428, 431], "nanobind_add_modul": 1, "nb_static": 1, "stable_abi": 1, "lto": 1, "nomins": 1, "nb_domain": 1, "build_shared_lib": [1, 7], "target_link_opt": 1, "wl": 1, "rpath": 1, "loader_path": 1, "onc": [1, 7, 439], "describ": [1, 443], "util": [1, 4, 6, 7, 234, 293, 440], "__name__": [1, 4], "__main__": [1, 4], "descript": [1, 4, 286], "ext_modul": 1, "cmakeextens": 1, "cmdclass": 1, "build_ext": 1, "cmakebuild": 1, "package_data": 1, "dylib": 1, "extras_requir": 1, "dev": [1, 7], "zip_saf": 1, "python_requir": 1, "even": [1, 4, 90, 439, 443, 444], "though": [1, 4, 439, 443, 444], "pip": [1, 7], "develop": [1, 7], "j8": 1, "libmlx_ext": 1, "cpython": 1, "3x": 1, "darwin": 1, "try": [1, 7], "after": [1, 4, 5, 27, 143, 145, 148, 185, 207, 210, 297, 308, 314, 320, 321, 325, 327, 334, 337, 338, 339, 340, 360, 393, 439, 447], "abl": [1, 210], "simpli": [1, 4, 7, 315, 346, 370, 378, 397, 407, 412, 439, 440, 441], "plai": [1, 4], "quick": [1, 6], "benchmark": [1, 439], "see": [1, 4, 5, 7, 9, 10, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 166, 192, 232, 233, 276, 286, 293, 297, 302, 305, 309, 310, 311, 323, 341, 342, 343, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 359, 361, 363, 364, 365, 366, 371, 372, 373, 399, 439, 440, 441, 442, 445, 447], "compar": [1, 78, 439], "time": [1, 4, 7, 193, 261, 293, 295, 296, 307, 313, 317, 318, 345, 439, 441, 443, 447], "set_default_devic": 1, "256": [1, 5], "512": [1, 2, 4, 360, 447], "random": [1, 2, 3, 4, 5, 6, 295, 296, 297, 312, 317, 318, 327, 334, 439, 441, 447, 448], "normal": [1, 3, 4, 127, 128, 217, 222, 293, 295, 296, 297, 308, 312, 314, 317, 318, 344, 360, 363, 365, 444, 447], "bench": 1, "warm": [1, 439], "100": [1, 3, 4, 431, 439, 441, 443, 447], "5000": 1, "e": [1, 5, 7, 120, 147, 148, 160, 238, 297, 298, 299, 300, 302, 303, 308, 312, 314, 325, 344, 379, 380, 402, 403, 408, 414, 417, 439, 443, 448], "simple_tim": 1, "custom_tim": 1, "3f": [1, 5, 439], "114": 1, "109": 1, "modest": 1, "improv": [1, 2, 4, 415, 416, 417, 418, 419, 420, 426, 439, 440], "awai": [1, 4], "nn": [1, 4, 5, 234, 280, 293, 409, 412, 414, 423, 425, 439, 443], "grad": [1, 3, 5, 268, 278, 414, 422, 439, 440, 441, 442, 443, 445], "profil": 2, "kei": [2, 4, 130, 186, 213, 214, 215, 217, 218, 219, 221, 222, 223, 279, 280, 324, 325, 337, 340, 423, 436, 438, 441], "optim": [2, 3, 5, 6, 338, 439, 440, 441, 443], "build": [2, 4, 6, 365, 412, 439], "mlx": [2, 3, 4, 5, 7, 288, 293, 409, 412, 414, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447], "mlx_metal_debug": [2, 7], "debug": [2, 440], "record": [2, 189, 443], "dure": [2, 90, 301, 302, 303, 361, 444], "later": [2, 7], "inspect": [2, 439, 445], "label": [2, 3, 383, 390], "object": [2, 9, 29, 48, 75, 90, 159, 234, 272, 279, 280, 281, 282, 286, 302, 360, 438], "queue": 2, "readabl": 2, "enabl": [2, 4, 7, 90, 118, 427], "python": [2, 4, 48, 66, 75, 122, 279, 280, 281, 282, 283, 412, 422, 423, 425, 438, 440, 441, 444], "prepend": [2, 180], "cmake_arg": 2, "dmlx_metal_debug": 2, "ON": [2, 7], "start_captur": 2, "initi": [2, 3, 4, 114, 282, 293, 297, 308, 312, 314, 316, 341, 344, 362, 363, 364, 365, 366, 367, 368, 369, 412, 423, 428, 429, 431, 432, 439, 440, 443], "gpu": [2, 6, 7, 186, 439, 442, 447], "applic": [2, 7], "mtl_capture_en": 2, "uniform": [2, 293, 316, 327, 364, 366, 409, 436, 439, 441, 447], "trace_fil": 2, "mlx_trace": 2, "gputrac": [2, 194], "path": [2, 7, 194, 234, 235, 276, 281, 327, 440], "_": [2, 3, 4, 281, 293, 428, 429, 430, 431, 432, 436, 439, 443, 447], "stop_captur": 2, "open": [2, 7, 17, 219, 223], "replai": 2, "great": 2, "overview": 2, "oper": [2, 4, 6, 8, 36, 80, 81, 82, 96, 130, 147, 148, 208, 242, 250, 257, 284, 293, 360, 421, 439, 440, 441, 442, 443, 444, 445, 447, 448], "checkout": [2, 439], "inform": [2, 4, 5, 7, 186, 232, 233, 286, 293, 297, 305, 340, 441, 447], "skip": [2, 79], "save": [2, 4, 6, 170, 194, 210, 232, 233, 234, 235, 331, 443], "project": [2, 4, 340], "cmake": [2, 7], "mkdir": [2, 7], "cd": [2, 7], "g": [2, 7, 166, 210, 313, 408, 426, 427, 443, 448], "xcodeproj": 2, "metal_captur": 2, "schema": 2, "basic": [3, 229, 441], "model": [3, 5, 6, 234, 276, 277, 280, 281, 293, 320, 323, 325, 327, 331, 334, 336, 337, 338, 340, 360, 409, 412, 414, 422, 423, 425, 439, 440, 443], "learn": [3, 5, 6, 297, 308, 312, 314, 341, 344, 415, 416, 417, 418, 419, 420, 421, 426, 427], "problem": [3, 5, 293], "metadata": [3, 170, 232, 233], "num_featur": [3, 297], "num_exampl": 3, "1_000": 3, "num_it": 3, "10_000": 3, "iter": [3, 5, 168, 280, 281, 436, 439, 443], "sgd": [3, 5, 414, 421, 423, 428, 429, 432, 439], "lr": [3, 421], "01": [3, 315, 378, 419], "rate": [3, 415, 416, 417, 418, 419, 420, 421, 426, 427], "ll": [3, 5, 386, 439, 441], "synthet": 3, "dataset": [3, 440, 443], "design": [3, 6, 436, 447], "ground": [3, 4, 383, 393], "truth": [3, 383, 393], "w_star": 3, "gaussian": [3, 305, 371, 372, 373, 384], "nois": 3, "noisi": 3, "ep": [3, 127, 128, 297, 308, 312, 314, 344, 382, 384, 394, 415, 416, 417, 418, 419, 420, 426], "loss": [3, 5, 268, 293, 414, 439, 440, 441, 443], "loss_fn": [3, 5, 414, 439, 441], "grad_fn": [3, 439, 441], "randomli": [3, 4, 301, 302, 303], "Then": [3, 7], "repeatedli": 3, "verifi": [3, 7], "close": [3, 6, 7, 15, 154], "error_norm": 3, "5f": 3, "someth": [3, 4, 442], "00005": 3, "00364": 3, "complet": [3, 4, 7, 193, 338, 339, 441, 447], "github": [3, 5, 7, 439], "repo": [3, 5, 7, 439], "effici": [4, 6, 147, 302, 348, 443, 445], "larg": [4, 293, 340, 389, 439, 440, 443], "ish": 4, "transform": [4, 6, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 277, 293, 297, 308, 314, 316, 324, 325, 337, 343, 348, 442], "without": [4, 6, 250, 340, 408, 438, 439, 440, 443, 444, 447], "compromis": 4, "eas": 4, "llama": 4, "famili": 4, "200": [4, 430], "line": [4, 440, 443, 444], "neural": [4, 6, 304, 363, 364, 395, 409, 412, 426], "network": [4, 6, 297, 302, 304, 363, 364, 409, 412, 426, 440], "concis": 4, "architectur": [4, 7, 186, 293, 339, 447], "notabl": [4, 6], "rope": [4, 293], "cach": [4, 7, 185, 187, 188, 192, 439], "llamaattent": 4, "self": [4, 5, 8, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 284, 293, 395, 412], "dim": [4, 129, 130, 304, 308, 312, 314, 340, 342, 344, 348, 352, 360], "num_head": [4, 340, 360], "super": [4, 5, 293, 412], "tradit": [4, 129, 302, 303, 348], "query_proj": 4, "bia": [4, 107, 127, 148, 210, 211, 280, 293, 298, 299, 300, 307, 313, 314, 316, 325, 327, 337, 340, 343, 345, 418, 419, 420, 423, 441], "key_proj": 4, "value_proj": 4, "out_proj": [4, 412], "__call__": [4, 5, 293, 412], "queri": [4, 130, 340], "l": [4, 5, 164, 293, 295, 297, 298, 307, 313, 317, 345, 393], "combin": [4, 168, 282], "key_cach": 4, "value_cach": 4, "math": [4, 394, 439], "score": [4, 130, 390], "values_hat": 4, "possibli": [4, 13, 86, 147, 180, 278], "rm": [4, 7, 128, 416], "swiglu": 4, "rmsnorm": [4, 293], "llamaencoderlay": 4, "mlp_dim": [4, 360], "norm1": 4, "norm2": 4, "linear1": 4, "linear2": 4, "linear3": 4, "instanc": [4, 37, 210, 283, 293, 312, 320, 321, 322, 325, 327, 328, 329, 334, 337, 338, 339, 350, 412, 444], "embed": [4, 276, 293, 342, 348, 352, 382], "emb": [4, 304, 342, 352], "token": [4, 304, 342], "num_lay": [4, 5, 414], "vocab_s": 4, "norm": [4, 128, 278, 308, 394, 420, 421], "multiheadattent": [4, 293], "create_additive_causal_mask": 4, "list": [4, 9, 14, 16, 29, 69, 75, 79, 80, 81, 82, 87, 90, 91, 96, 122, 132, 133, 135, 136, 138, 139, 141, 142, 146, 149, 160, 166, 179, 181, 183, 184, 196, 203, 206, 209, 213, 214, 215, 217, 218, 219, 222, 223, 232, 242, 244, 248, 249, 253, 260, 261, 264, 268, 269, 271, 274, 279, 282, 283, 293, 325, 327, 328, 329, 330, 335, 337, 338, 339, 412, 418, 419, 420, 421, 430, 438, 439, 440, 441, 443], "still": [4, 7, 166, 439, 443], "consid": [4, 15, 78, 154, 279, 280, 281, 308, 438], "train": [4, 5, 293, 297, 301, 302, 303, 323, 325, 337, 363, 364], "process": [4, 96, 97, 111, 112, 113, 114, 280, 281, 303, 304, 360, 438, 440], "ignor": [4, 37, 89, 90, 122, 416], "whatsoev": 4, "rest": [4, 129, 280, 281, 348], "subsect": 4, "prompt": 4, "autoregress": 4, "yield": [4, 5, 436], "temp": 4, "causal": 4, "append": [4, 180, 439, 443], "store": 4, "per": [4, 5, 107, 148, 210, 211, 276, 297, 308, 312, 314, 344, 434, 439, 440, 443], "care": [4, 443], "logit": [4, 214, 381, 383, 439], "categor": 4, "lazili": [4, 293], "noth": [4, 293, 443], "yet": [4, 166, 293, 412, 423, 441, 442, 443, 445], "forc": [4, 5, 293, 440, 445], "choos": [4, 129, 348], "pars": 4, "feed": 4, "back": [4, 190, 444], "loop": [4, 5, 439, 440, 441, 443], "unsqueez": 4, "sequenc": [4, 14, 16, 32, 33, 54, 55, 56, 57, 61, 69, 72, 73, 77, 79, 87, 96, 124, 132, 133, 135, 136, 138, 139, 141, 142, 146, 179, 181, 183, 196, 203, 209, 213, 214, 215, 217, 218, 219, 222, 223, 227, 242, 244, 247, 249, 253, 260, 261, 264, 269, 274, 297, 298, 307, 313, 345, 360, 436, 447], "length": [4, 247, 297, 298, 307, 313, 345, 430], "len": [4, 133, 136, 139, 142, 430], "overwrit": 4, "discard": [4, 279], "old": 4, "moment": [4, 416, 418, 419, 420], "anymor": 4, "everyth": [4, 440], "small": [4, 125, 127, 128, 297, 308, 314, 344, 384, 389, 394, 439, 440, 447], "12": [4, 430], "8192": 4, "1024": 4, "actual": [4, 17, 327, 412, 443], "materi": [4, 6], "could": [4, 293], "20_000": 4, "machin": [4, 6, 7, 426, 440], "8gb": 4, "ram": 4, "32": [4, 5, 86, 210, 211, 286, 296, 318, 344, 439], "44": 4, "bracket": 4, "becaus": [4, 187, 293, 443], "batch": [4, 13, 86, 147, 148, 180, 217, 297, 298, 299, 300, 302, 303, 307, 313, 340, 345, 361, 443], "zip": [4, 5], "haven": 4, "anyth": [4, 268, 443], "veri": [4, 340, 440, 443, 447], "similar": [4, 148, 159, 280, 338, 339, 340, 382, 444, 446], "runtim": [4, 114, 288, 439, 440], "section": [4, 7, 244, 394, 439, 440, 441], "origin": [4, 109, 278, 297, 333, 363, 364, 365, 366, 415, 416, 417, 418, 420, 421, 444], "sentencepiec": 4, "pytorch": [4, 6, 308, 441], "compat": [4, 214, 217, 446], "npz": [4, 170, 234, 235, 327, 331, 446], "file": [4, 7, 170, 231, 232, 233, 234, 235, 327, 331, 440, 441, 446], "argpars": 4, "itertool": [4, 280], "starmap": [4, 280], "np": [4, 5, 440, 444, 445], "torch": [4, 444], "map_torch_to_mlx": 4, "tok_embed": 4, "elif": 4, "replac": [4, 338, 339, 360, 393], "attention_norm": 4, "ffn_norm": 4, "wq": 4, "wk": 4, "wv": 4, "wo": 4, "w1": [4, 278], "w2": [4, 278], "w3": 4, "ffn": 4, "separ": [4, 63, 76, 308, 390], "submodul": [4, 5, 293, 321, 325, 326, 337, 339], "feed_forward": 4, "parser": 4, "argumentpars": 4, "add_argu": 4, "torch_weight": 4, "output_fil": 4, "parse_arg": 4, "state": [4, 5, 293, 307, 313, 345, 414, 423, 436, 439], "savez": [4, 331, 446], "v": [4, 97, 130, 293, 325, 444], "disk": 4, "text": [4, 295, 296, 305, 307, 313, 317, 318, 319, 345, 358, 363, 364, 365, 366, 372, 375, 376, 377, 384, 385, 386, 389, 390, 393, 395, 396, 399, 400, 405, 406, 416, 421], "format": [4, 170, 231, 232, 233, 234, 235, 444], "dictionari": [4, 90, 170, 186, 232, 233, 278, 279, 282, 293, 324, 333, 338, 339, 424, 438, 446], "represent": [4, 210, 270, 279, 283], "tree_unflatten": 4, "helper": [4, 439], "weight_fil": 4, "incur": [4, 7], "sever": [4, 7, 94, 95, 96, 234, 235, 439, 446], "futur": [4, 343, 442, 443], "pth": 4, "current": [4, 6, 7, 79, 86, 186, 188, 210, 282, 293, 416, 440, 443], "around": 4, "m1": [4, 439, 441, 447], "ultra": 4, "7b": 4, "me": 4, "ishmael": 4, "year": 4, "ago": 4, "never": [4, 443], "long": 4, "info": [4, 7], "247": 4, "press": [4, 166], "enter": 4, "littl": 4, "monei": 4, "my": [4, 7], "purs": 4, "consequ": 4, "walk": 4, "down": [4, 278], "gower": 4, "street": 4, "afternoon": 4, "heavi": 4, "rain": 4, "saw": [4, 441], "off": [4, 7, 443], "man": 4, "rag": 4, "who": 4, "sat": 4, "upon": [4, 280, 281], "hi": [4, 313], "bundl": 4, "hard": 4, "wet": 4, "he": [4, 365, 366], "were": [4, 447], "cry": 4, "watch": [4, 439], "him": 4, "observ": 4, "numer": [4, 127, 128, 166, 175, 179, 242, 297, 308, 312, 314, 344, 382, 384, 394, 415, 416, 417, 418, 419, 420, 426, 439, 443], "crowd": 4, "wa": [4, 79, 440, 443], "hurri": 4, "437": 4, "330": 4, "second": [4, 7, 109, 161, 176, 178, 180, 228, 254, 263, 268, 296, 318, 382, 390, 416, 418, 419, 420, 441, 447], "spent": 4, "amount": [4, 189, 295, 317], "39": 4, "By": [4, 276, 332, 441, 444], "bigger": [4, 416], "well": [4, 293, 325, 337, 340, 443], "almost": 4, "nobodi": 4, "took": 4, "least": [4, 80, 81, 82, 89, 164, 165, 167, 168, 210], "notic": [4, 441, 446], "distanc": [4, 394], "had": 4, "doubt": 4, "minut": 4, "straight": 4, "slowli": 4, "speak": [4, 166], "resum": 4, "postur": 4, "stood": 4, "feel": 4, "pain": 4, "heart": 4, "said": 4, "smile": 4, "face": 4, "am": 4, "someon": 4, "three": [4, 82, 361], "quarter": 4, "hour": 4, "made": [4, 288], "immedi": [4, 320], "repli": 4, "again": [4, 7, 293, 439], "hand": [4, 441, 443], "did": 4, "accustom": 4, "thu": [4, 293], "question": [4, 443], "reason": [4, 442], "tell": [4, 439, 444], "understand": [4, 363, 364], "579": 4, "690": 4, "500": [4, 447], "628": 4, "went": 4, "nervou": 4, "trembl": 4, "told": 4, "why": 4, "And": [4, 361], "surpris": 4, "matter": [4, 293], "shall": 4, "anyhow": 4, "friend": 4, "ye": 4, "slight": [4, 443], "kind": 4, "want": [4, 440, 441, 447], "longer": [4, 97, 441], "soon": 4, "unless": [4, 15, 154, 166, 412], "unlik": [4, 15, 154, 302, 303, 333], "strang": 4, "amus": 4, "That": 4, "secret": 4, "disappoint": 4, "mine": 4, "cannot": [4, 89, 442, 444], "happi": 4, "ask": [4, 440], "shop": 4, "bui": 4, "food": 4, "633": 4, "21": [4, 432], "475": 4, "su": 4, "j": [4, 7, 166, 302, 417, 418, 420], "lu": 4, "pan": 4, "murtadha": 4, "wen": 4, "liu": 4, "2021": 4, "roform": [4, 348], "enhanc": [4, 348, 443], "rotari": [4, 129, 348], "arxiv": [4, 308, 312, 314, 319, 344, 373, 395, 415, 421], "preprint": [4, 415, 421], "2104": 4, "09864": 4, "zhang": 4, "sennrich": 4, "2019": [4, 419], "advanc": [4, 439], "system": [4, 7, 186, 187, 188], "shazeer": 4, "2020": 4, "glu": [4, 293], "variant": [4, 393, 420], "2002": 4, "05202": 4, "classifi": 5, "mnist": 5, "As": [5, 37, 256, 293, 439], "mlp": [5, 293, 360, 414], "inherit": [5, 438], "idiom": [5, 439], "input_dim": [5, 293, 316, 343], "hidden_dim": [5, 412, 414], "output_dim": [5, 293, 316, 343], "layer_s": 5, "idim": 5, "odim": 5, "cross": [5, 96, 381, 383], "entropi": [5, 381, 383], "commonli": [5, 338, 409, 439], "cross_entropi": [5, 293], "accuraci": 5, "valid": [5, 97, 143, 272, 279, 325, 337, 438], "eval_fn": 5, "load": [5, 6, 288, 327, 440], "loader": 5, "num_class": [5, 414], "batch_siz": [5, 414], "num_epoch": [5, 414], "learning_r": [5, 414, 415, 416, 417, 418, 419, 420, 421, 423, 426, 427, 428, 429, 430, 431, 432, 439], "train_imag": [5, 414], "train_label": [5, 414], "test_imag": 5, "test_label": 5, "re": [5, 7, 409], "shuffl": 5, "minibatch": 5, "batch_iter": [5, 414], "perm": 5, "id": [5, 7], "put": [5, 439, 440], "trainabl": [5, 277, 293, 412], "loss_and_grad_fn": [5, 414, 439, 441], "value_and_grad": [5, 293, 338, 412, 414, 425, 439, 441, 444, 445], "epoch": 5, "test": [5, 7, 440], "confus": 5, "decent": 5, "95": 5, "flexibl": 6, "brought": 6, "research": 6, "except": [6, 126, 137, 138, 140, 141, 142, 308, 327, 442, 444], "featur": [6, 94, 95, 96, 129, 297, 307, 308, 312, 313, 314, 316, 343, 344, 345, 348, 360, 361, 439, 443], "main": [6, 109, 126, 263, 280, 281, 293, 440], "differ": [6, 159, 252, 270, 393, 441], "compos": [6, 293, 439, 441, 445], "lazi": [6, 412, 445], "multi": [6, 130, 298, 299, 300, 442, 444], "cpu": [6, 7, 167, 439, 447], "inspir": 6, "jax": [6, 436], "arrayfir": 6, "unifi": 6, "live": [6, 447], "share": [6, 107, 148, 210, 211, 270, 440], "convers": 6, "distribut": [6, 7, 213, 214, 215, 217, 218, 222, 223, 316, 363, 364, 365, 366, 368, 369, 384, 387, 392, 394, 409], "commun": [6, 111, 114, 115], "regress": [6, 389], "layer": [6, 127, 276, 293, 295, 296, 302, 303, 307, 308, 313, 314, 316, 317, 318, 334, 339, 342, 343, 345, 350, 360, 408, 412], "perceptron": 6, "llm": 6, "infer": [6, 146, 170, 263, 440], "fast": [6, 305, 373, 440, 447], "fft": 6, "algebra": 6, "tree": [6, 90, 122, 149, 268, 272, 279, 280, 281, 282, 283, 422, 423, 425, 434, 441], "custom": [6, 360], "extens": [6, 170, 194, 331, 446], "debugg": 6, "pypi": 7, "own": [7, 444], "meet": 7, "seri": 7, "chip": 7, "nativ": 7, "maco": 7, "13": 7, "highli": 7, "recommend": [7, 193, 421], "14": 7, "sonoma": 7, "conda": [7, 440], "forg": 7, "match": [7, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 187, 327, 361, 383, 440, 442, 444], "probabl": [7, 219, 301, 302, 303, 343, 381, 383, 387, 447], "platform": 7, "processor": 7, "arm": 7, "i386": 7, "switch": 7, "17": 7, "clang": 7, "24": 7, "xcode": 7, "15": [7, 166, 282, 439], "sdk": 7, "environ": [7, 110, 118, 440], "via": [7, 422, 425, 440, 443, 444], "rosetta": 7, "unam": 7, "p": [7, 213, 293, 301, 302, 303, 394, 418, 420], "clone": 7, "git": 7, "com": [7, 440], "ml": 7, "explor": 7, "http": [7, 308, 312, 314, 319, 344, 373, 395], "wjakob": 7, "2f04eac452a6d9142dedb957701bdb20125561e4": 7, "env": 7, "cmake_build_parallel_level": 7, "edit": [7, 339], "unittest": 7, "discov": 7, "stub": 7, "generate_stub": 7, "either": [7, 12, 63, 75, 76, 83, 84, 85, 89, 116, 117, 119, 145, 150, 151, 161, 162, 163, 166, 175, 180, 182, 197, 199, 202, 208, 225, 228, 252, 268, 296, 318, 350, 361, 365, 366, 444], "static": 7, "libmlx": 7, "preprocessor": 7, "metal_path": 7, "mlx_build_test": 7, "mlx_build_exampl": 7, "mlx_build_benchmark": 7, "mlx_build_cpu": 7, "mlx_build_python_bind": 7, "mlx_build_safetensor": 7, "mlx_build_gguf": 7, "mlx_metal_jit": 7, "wish": 7, "variabl": [7, 90, 110, 118, 149, 160, 268, 271, 272, 440], "export": 7, "developer_dir": 7, "app": 7, "content": [7, 324, 439], "xcrun": 7, "macosx": 7, "show": [7, 286, 439], "cmake_build_typ": 7, "minsizerel": 7, "don": [7, 439, 447], "backend": [7, 114, 115], "safetensor": [7, 170, 233, 327, 331, 443, 446], "gguf": [7, 170, 232, 446], "dcmake_build_typ": 7, "dbuild_shared_lib": 7, "dmlx_build_cpu": 7, "dmlx_build_safetensor": 7, "dmlx_build_gguf": 7, "dmlx_metal_jit": 7, "THE": 7, "pre": [7, 130], "substanti": 7, "cold": 7, "cost": [7, 416, 440, 443], "anwywher": 7, "hundr": 7, "millisecond": [7, 439, 447], "persist": 7, "accross": 7, "reboot": 7, "unabl": 7, "tool": 7, "sudo": 7, "ouptut": 7, "finder": 7, "iterm": 7, "termin": 7, "click": 7, "uncheck": 7, "window": [7, 295, 296, 317, 318], "restart": 7, "grep": 7, "cmake_host_system_processor": 7, "arm64": 7, "x86_64": 7, "wipe": 7, "cahc": 7, "rf": 7, "devicetyp": 8, "attribut": [8, 9, 29, 284, 333, 412, 434], "kwarg": [9, 10, 111, 234, 235, 448], "categori": [10, 286], "bool_": [10, 286], "unsignedinteg": 10, "uint8": [10, 286], "uint16": [10, 286], "uint32": [10, 25, 26, 27, 28, 214, 286], "uint64": [10, 286], "signedinteg": [10, 159], "int8": [10, 286], "int64": [10, 286], "inexact": [10, 159], "complexflo": 10, "complex128": 10, "issubdtyp": [10, 286], "semant": [12, 83, 84, 85, 87, 116, 117, 119, 150, 151, 161, 162, 163, 175, 180, 182, 197, 199, 202, 208, 225, 228, 252, 447], "reduct": [14, 16, 113, 179, 181, 196, 209, 282, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 440], "unspecifi": [14, 16, 17, 25, 26, 27, 28, 91, 100, 101, 102, 103, 146, 179, 181, 183, 196, 203, 207, 209, 226, 242, 243, 249, 253, 256, 262, 263, 269, 274, 448], "entir": [14, 16, 25, 26, 179, 181, 183, 196, 209, 249, 253, 269, 302, 303], "05": [15, 154, 297, 308, 312, 314, 344], "08": [15, 154, 382, 417, 418, 419, 420, 426], "approxim": [15, 305, 371, 372, 373], "comparison": [15, 119, 150, 151, 162, 163, 202], "infinit": [15, 154], "nan": [15, 78, 154, 156], "rel": [15, 154, 416, 439], "interv": [17, 169, 219, 223], "increment": 17, "otherwis": [17, 96, 114, 193, 276, 279, 280, 281, 282, 325, 327, 337, 358, 360, 361, 375, 381, 386, 393, 405, 406, 443, 444], "convent": [17, 97, 361, 419], "fraction": 17, "integr": [17, 256, 443], "dimension": [29, 127, 128, 131, 132, 133, 134, 135, 136, 140, 141, 142, 295, 296, 297, 298, 299, 300, 304, 316, 317, 318, 342, 343, 352, 442, 444], "ndarrai": [29, 442, 443, 445], "properti": [30, 37, 45, 49, 59, 60, 66, 68, 333, 336, 424, 441], "argument": [30, 63, 76, 90, 122, 149, 268, 280, 281, 282, 293, 361, 436, 440, 441, 446, 447, 448], "union": [31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 76, 77, 80, 81, 82, 86, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 157, 158, 186, 221, 222, 251, 263], "regular": [37, 302, 395, 419, 439, 442], "idx": [37, 442], "correctli": 37, "syntax": [37, 442], "datatyp": 49, "byte": [49, 59, 187, 188, 189, 192, 193, 286], "indices_or_sect": [69, 244], "nest": [75, 90, 282, 293, 412, 438, 441], "alwai": [79, 187, 279, 441], "regardless": [79, 130], "storag": 79, "caution": 79, "chang": [79, 90, 237, 270, 338, 343, 361, 386, 393, 439, 444], "crash": [79, 439], "begin": [79, 189, 210, 296, 307, 313, 318, 358, 375, 386, 393, 399, 405, 406], "ari": [80, 81, 82], "xor": 85, "lhs_mask": 86, "lceil": 86, "rceil": 86, "rhs_mask": 86, "out_mask": 86, "edg": [89, 206, 361, 439], "At": 89, "fun": [90, 149, 160, 268, 271, 272, 439, 442, 443, 447], "callabl": [90, 149, 160, 268, 271, 272, 276, 277, 279, 280, 281, 282, 320, 321, 324, 332, 345, 350, 360, 362, 363, 364, 365, 366, 367, 368, 369, 415, 416, 417, 418, 419, 420, 421, 426, 427, 428, 429, 430, 431, 432], "dict": [90, 122, 170, 186, 232, 233, 234, 278, 330, 335, 338, 339, 412, 422, 423, 425, 438, 441, 446], "arbitrarili": [90, 293, 438, 441, 445], "leaf": [90, 276, 279, 280, 281, 282, 324], "node": [90, 122, 272, 281, 282], "recompil": [90, 439], "Not": [90, 202, 439], "attempt": 90, "elementwis": [92, 93], "alia": [92, 93], "conj": 93, "channel": [94, 95, 96, 297, 298, 299, 300, 302, 303], "c_in": [94, 95, 96], "c_out": [94, 95, 96], "convolv": [94, 95, 96], "spatial": [95, 96, 295, 308, 317, 361], "symmetr": [95, 164], "correl": [96, 302], "discret": [97, 131, 132, 133, 134, 135, 136, 140, 141, 142, 304, 342], "conv": 97, "signal": [97, 361], "th": [100, 101, 102, 103, 108, 126, 430], "angl": [106, 212, 315], "configur": [107, 440], "formal": [107, 210], "notat": [107, 279, 329], "w_i": [107, 210], "hat": [107, 210], "occupi": [107, 148, 210, 211], "subarrai": [109, 244], "insert": [109, 124, 447], "end": [109, 190, 210, 296, 307, 313, 318, 358, 375, 386, 393, 399, 405, 406, 428, 431], "taken": [109, 256, 263], "global": [110, 112, 113, 114, 118, 220, 278, 436, 439], "disabl": [110, 192, 439], "mlx_disable_compil": [110, 118, 439], "independ": [111, 302, 303], "particip": [112, 113], "strict": [114, 150, 162, 325, 327, 337], "is_avail": 114, "fuction": 117, "mathrm": [120, 238, 312], "frac": [120, 210, 238, 295, 296, 297, 301, 302, 303, 308, 312, 314, 316, 317, 318, 344, 363, 364, 365, 366, 382, 384, 386, 389, 400, 402, 403, 415, 417, 418, 419, 420, 426], "pi": [120, 305, 352, 372, 441], "int_0": 120, "dt": 120, "minu": 125, "whose": [126, 276, 277], "translat": [127, 314], "stabil": [127, 128, 297, 308, 312, 314, 344, 382, 384, 415, 416, 417, 418, 419, 420, 426], "traditino": 129, "rotat": [129, 348], "larger": [129, 348, 421], "unchang": [129, 250, 348], "consecut": [129, 210, 348], "angular": [129, 348], "frequenc": [129, 348, 352], "q": [130, 167], "head": [130, 340, 360], "attent": [130, 325, 340, 352, 360], "One": [131, 134, 140, 230, 439, 441], "fourier": [131, 132, 133, 134, 135, 136, 140, 141, 142], "truncat": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 222], "dft": [131, 132, 133, 134, 135, 136, 140, 141, 142], "rfft": 137, "real": [137, 138, 139, 140, 141, 142, 164], "rfft2": 138, "rfftn": 139, "silent": [140, 141, 142], "outsid": 143, "clamp": 143, "operand": 147, "explicitli": [147, 293, 436], "flat": [147, 148, 279, 283], "a1": 147, "a2": 147, "AS": 147, "b1": 147, "b2": 147, "pack": [148, 210, 211], "unsign": [148, 210, 211, 286], "whether": [148, 211, 307, 313, 324, 340, 345, 381, 384, 390], "argnam": [149, 268], "neither": [149, 268], "keyword": [149, 234, 235, 268, 280, 293, 436, 446, 448], "ordinari": 153, "inifn": 155, "infin": [155, 157, 158, 317, 318, 420], "dtypecategori": [159, 286], "subtyp": [159, 286], "subdtyp": 159, "float64": 159, "too": [159, 439, 443], "upper": [164, 210, 219, 222, 223, 369], "decomposit": [164, 168], "semi": [164, 217], "definit": [164, 217], "behaviour": 164, "triangular": 164, "lower": [164, 210, 219, 222, 223, 265, 369], "trinagular": 164, "dot": [164, 165, 260, 279, 329, 340], "ainv": 165, "ord": 166, "tabl": [166, 286, 304], "frobeniu": 166, "matric": [166, 167, 168], "strictli": 166, "mathemat": 166, "variou": 166, "purpos": 166, "calcul": [166, 384, 390, 416], "fro": 166, "inf": [166, 340], "largest": [166, 262], "sing": 166, "smallest": 166, "singular": [166, 168], "nuclear": 166, "_f": 166, "sum_": [166, 295, 296, 389], "a_": 166, "valueerror": [166, 327, 441], "refer": [166, 312, 319, 333, 363, 364, 365, 366, 373, 395, 442], "golub": 166, "van": 166, "loan": 166, "baltimor": 166, "md": 166, "john": 166, "hopkin": 166, "univers": 166, "1985": 166, "pg": 166, "la": 166, "9": [166, 383, 415, 418, 419, 420, 421, 423, 429, 432, 444], "74597": 166, "20": 166, "84804": 166, "41421": 166, "23607": [166, 167], "74166": 166, "24264": 166, "11": 166, "225": 166, "894427": 167, "447214": 167, "57771": 167, "vt": 168, "return_metadata": 170, "binari": [170, 231, 232, 233, 234, 235, 270, 358, 381, 406, 439], "npy": [170, 231, 446], "matadata": 170, "unsupport": 170, "tensor": [170, 260, 295, 296, 317, 318, 394, 444], "stabl": [175, 179, 242, 389], "multidimension": 184, "dens": [184, 447], "cartesian": 184, "ij": 184, "clear": 185, "get_cache_memori": 185, "max_buffer_s": 186, "max_recommended_working_set_s": 186, "memory_s": 186, "report": [187, 193], "peak": [189, 191], "program": [189, 440], "reset_peak_memori": 189, "reset": 191, "free": 192, "reclaim": 192, "set_memory_limit": 192, "previou": [192, 193], "relax": 193, "task": [193, 389], "exceed": 193, "potenti": 193, "beforehand": 205, "pad_with": 206, "constant_valu": 206, "before_1": 206, "after_1": 206, "before_2": 206, "after_2": 206, "before_n": 206, "after_n": 206, "before_i": 206, "after_i": 206, "side": [206, 295, 296, 317, 318, 439], "everi": [210, 280, 432, 441], "particular": [210, 308], "w_1": 210, "w_g": 210, "align": [210, 296, 307, 313, 318], "max_i": 210, "min_i": 210, "textrm": [210, 305, 306, 371, 374], "1st": 210, "signific": 210, "2nd": 210, "w_q": 210, "prng": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 436], "num_sampl": 214, "unnorm": [214, 381, 383], "draw": 214, "cdf": [215, 305, 371], "seed": 216, "cov": 217, "jointli": 217, "covari": [217, 297], "behavior": [217, 389, 442, 443], "empti": 217, "loc": 218, "low": [219, 223, 369, 409], "high": [219, 223, 293, 304, 369, 409], "roadcast": 219, "domain": [222, 440], "uniformli": 223, "repetit": 226, "preserv": [227, 441], "obj": 232, "uncompress": 234, "my_path": 234, "tree_flatten": [234, 280, 283, 293], "transformerencod": 234, "128": [234, 293], "flat_param": 234, "compress": 235, "possibl": [244, 304, 342, 439, 440, 442, 447], "divisor": [249, 269], "being": [250, 293], "prevent": [250, 394, 444], "streamcontext": 251, "context": 251, "manag": [251, 436, 440, 447], "prior": [256, 257], "exclud": 257, "necessarili": 262, "elsewher": [265, 442], "col": 265, "triangl": 265, "mse": 268, "param": [268, 293, 409, 441], "lvalu": 268, "dlvalu": 268, "dparam": 268, "lasso": 268, "l1": [268, 386, 388, 389, 393], "impli": 270, "gaurante": 270, "in_ax": [272, 441], "out_ax": [272, 441], "prefix": [272, 279], "class_pred": 276, "predic": [276, 332], "to_quant": 276, "receiv": [276, 430, 444], "fn": [277, 280, 281, 282, 445], "wrt": 277, "max_norm": 278, "exce": 278, "proportion": 278, "clipped_grad": 278, "total_norm": 278, "rescal": 278, "is_leaf": [279, 280, 281, 282], "arbitrari": [279, 412], "depth": [279, 300, 303, 441], "hello": [279, 283], "charact": 279, "superset": [280, 422], "extra": [280, 281], "closer": 280, "decid": [280, 324], "constitut": 280, "dict_kei": [280, 423], "lambda": [280, 281, 282, 293, 309, 320, 325, 332, 356, 375, 399, 405, 415, 416, 417, 418, 419, 420, 421, 426, 427, 439, 440, 441], "tree_map": [281, 293, 440], "new_tre": 281, "accumul": [282, 344], "acc": 282, "recreat": 283, "world": [283, 440], "42": 283, "16": [286, 295, 312, 317, 320, 412], "int16": 286, "brain": 286, "e8": 286, "m7": 286, "ieee": 286, "e5": 286, "m10": 286, "hierarchi": 286, "mpi": 288, "done": [293, 301, 344, 439, 440, 443, 444], "manual": 293, "solv": 293, "intuit": 293, "freez": [293, 337, 412], "finetun": 293, "in_dim": [293, 412], "out_dim": [293, 412], "enumer": 293, "caus": [293, 439, 443], "local": [293, 302, 440], "scope": 293, "l2_loss": 293, "y_hat": 293, "trainable_paramet": [293, 324, 423], "loss_and_grad": 293, "workhors": 293, "Its": 293, "recurs": [293, 324, 325, 330, 335, 337, 412], "frozen": [293, 325, 335, 337, 343, 412], "individu": [293, 302, 303], "subset": [293, 324], "action": 293, "displai": 293, "count": [293, 430], "num_param": 293, "preclud": 293, "pure": [293, 414], "pattern": [293, 443], "achiev": [293, 440], "other_input": 293, "necessari": 293, "wrap": 293, "apply_to_modul": [293, 325], "children": 293, "filter_and_map": 293, "leaf_modul": 293, "load_weight": [293, 443], "named_modul": 293, "save_weight": 293, "set_dtyp": 293, "unfreez": [293, 325], "update_modul": 293, "alibi": 293, "avgpool1d": 293, "avgpool2d": 293, "batchnorm": 293, "dropout": [293, 302, 303, 334, 360, 439], "dropout2d": 293, "dropout3d": 293, "gelu": [293, 372, 373, 439], "groupnorm": 293, "gru": 293, "hardshrink": [293, 375], "hardtanh": [293, 376], "hardswish": 293, "instancenorm": 293, "layernorm": 293, "leakyrelu": 293, "lstm": 293, "maxpool1d": 293, "maxpool2d": 293, "mish": 293, "prelu": 293, "quantizedembed": 293, "quantizedlinear": 293, "relu": [293, 341, 360, 396, 409], "relu6": 293, "rnn": [293, 307], "selu": 293, "sequenti": [293, 409], "silu": 293, "sinusoidalpositionalencod": 293, "softmin": 293, "softshrink": 293, "softsign": 293, "softplu": [293, 319, 395], "upsampl": 293, "elu": [293, 399], "gelu_approx": [293, 305, 371], "gelu_fast_approx": [293, 305, 371], "hard_shrink": [293, 309], "hard_tanh": [293, 310], "leaky_relu": 293, "log_sigmoid": 293, "log_softmax": 293, "binary_cross_entropi": [293, 439], "cosine_similarity_loss": 293, "gaussian_nll_loss": 293, "hinge_loss": 293, "huber_loss": 293, "kl_div_loss": 293, "l1_loss": 293, "log_cosh_loss": 293, "margin_ranking_loss": 293, "mse_loss": 293, "nll_loss": 293, "smooth_l1_loss": 293, "triplet_loss": 293, "init": [293, 341, 409, 414, 428, 429, 431, 432, 440], "glorot_norm": 293, "glorot_uniform": 293, "he_norm": 293, "he_uniform": 293, "kernel_s": [295, 296, 298, 299, 300, 317, 318], "averag": [295, 296, 415, 416, 418, 419, 420, 440], "pool": [295, 296, 317, 318, 447], "l_": [295, 317, 386], "n_i": [295, 296, 317, 318], "c_j": [295, 296, 317, 318], "ldot": [295, 296, 317, 318], "lfloor": [295, 296, 317, 318], "_size": [295, 296, 317, 318], "rfloor": [295, 296, 317, 318], "k_h": [296, 318], "k_w": [296, 318], "h_": [296, 307, 313, 318, 345], "w_": [296, 307, 313, 318, 345, 415, 416, 417, 418, 419, 420, 421, 426, 427], "height": [296, 297, 299, 300, 302, 303, 318], "width": [296, 297, 299, 300, 302, 303, 318, 342, 343], "momentum": [297, 421, 423, 427, 439], "affin": [297, 308, 312, 314, 316, 343], "track_running_stat": 297, "epsilon": [297, 308, 312, 314, 344, 382, 384, 415, 417, 418, 419, 420, 426], "gamma": [297, 308, 312, 314, 344, 363, 364, 365, 366], "nc": 297, "nlc": [297, 298], "four": 297, "nhwc": [297, 299], "paper": [297, 352, 415, 416, 417, 418, 420, 421], "deep": [297, 363, 364, 365, 366], "intern": 297, "bn": 297, "in_channel": [298, 299, 300], "out_channel": [298, 299, 300], "learnabl": [298, 299, 300, 350], "imag": [299, 300, 302, 303, 361], "ndhwc": [300, 303], "portion": 301, "nwhc": 302, "whc": 302, "maintain": [302, 303, 421], "benefici": [302, 303, 443], "earli": 302, "adjac": 302, "pixel": 302, "effect": [302, 439, 443], "thompson": 302, "goroshin": 302, "jain": 302, "lecun": 302, "bregler": 302, "2015": [302, 418, 420], "cvpr": 302, "dhwc": 303, "often": 303, "medic": 303, "video": 303, "num_embed": [304, 342], "lookup": 304, "usual": [304, 342, 438, 443], "vocabulari": [304, 342], "approx": 305, "unit": [305, 306, 307, 315, 346, 347, 349, 351, 363, 364, 365, 366, 370, 371, 372, 373, 374, 378, 397, 398, 399, 401], "phi": [305, 371], "geluapprox": 305, "044715": [305, 372], "gelufast": 305, "sigma": [305, 306, 307, 313, 363, 364, 365, 366, 373, 374, 379, 400, 401], "773": 305, "regard": 305, "gate": [306, 307, 374], "halv": [306, 374], "input_s": [307, 313, 345], "hidden_s": [307, 313, 345], "recurr": [307, 313, 345], "nld": [307, 313, 345], "ld": [307, 313, 345], "r_t": 307, "xr": 307, "x_t": [307, 313, 345], "hr": 307, "h_t": [307, 313, 345], "b_": [307, 313], "z_t": 307, "xz": 307, "hz": 307, "n_t": 307, "xn": 307, "odot": [307, 313], "hn": 307, "hidden": [307, 313, 345, 360], "nh": [307, 313, 345], "nlh": [307, 313, 345], "lh": [307, 313, 345], "num_group": 308, "pytorch_compat": 308, "preced": 308, "org": [308, 312, 314, 319, 344, 373, 395], "1803": 308, "08494": 308, "lambd": [309, 356, 375, 405], "denomin": [312, 382, 415, 417, 418, 419, 420, 426], "inorm": 312, "1607": [312, 314], "08022": 312, "i_t": 313, "xi": 313, "f_t": 313, "xf": 313, "hf": 313, "g_t": [313, 415, 417, 418, 419, 420, 421, 426, 427], "xg": 313, "hg": 313, "o_t": 313, "xo": 313, "ho": 313, "c_": [313, 421], "c_t": [313, 421], "cell": 313, "06450": 314, "realli": 314, "negative_slop": [315, 378], "leaki": [315, 378], "rectifi": [315, 346, 347, 365, 366, 378, 397, 398], "slope": 315, "mathcal": 316, "d_i": 316, "max_": [317, 318], "1908": [319, 395], "08681": [319, 395], "map_fn": [320, 324], "filter_fn": [320, 324], "valid_parameter_filt": 320, "apply_fn": 321, "descend": 322, "is_leaf_fn": 324, "found": 324, "drop": 324, "idempot": [325, 337], "endswith": 325, "file_or_weight": 327, "miss": [327, 446], "ok": [327, 441], "save_safetensor": [331, 446], "reflect": [333, 439, 442, 444], "ie": [337, 440], "noop": 337, "unfrozen": 337, "tracer": 338, "partial": [338, 339, 439, 443], "child": 339, "flexibli": 339, "programmat": 339, "query_input_dim": 340, "key_input_dim": 340, "value_input_dim": 340, "value_dim": 340, "value_output_dim": 340, "aggreg": 340, "linearli": 340, "attend": 340, "num_paramet": 341, "25": [341, 361], "parametr": [341, 396], "from_embed": 342, "classmethod": [342, 343], "from_linear": 343, "1910": 344, "07467": 344, "nonlinear": [345, 439], "elman": 345, "ih": 345, "hh": 345, "func": 345, "10000": 348, "slightli": [348, 447], "plain": 350, "known": [351, 401], "swish": [351, 401], "min_freq": 352, "0001": 352, "max_freq": 352, "cos_first": 352, "full_turn": 352, "sinusoid": 352, "threshold": [358, 386, 393, 406], "geq": [358, 406], "num_encoder_lay": 360, "num_decoder_lay": 360, "nb_func": 360, "custom_encod": 360, "custom_decod": 360, "norm_first": 360, "checkpoint": 360, "decod": 360, "interact": 360, "mechan": 360, "chekpoint": 360, "usag": [360, 439], "expens": 360, "scale_factor": 361, "nearest": 361, "align_corn": 361, "audio": 361, "4d": 361, "forth": 361, "algorithm": [361, 421], "neighbor": 361, "interpol": 361, "cubic": 361, "bilinear": 361, "trilinear": 361, "bicub": 361, "corner": 361, "bottom": 361, "75": 361, "33333": 361, "66667": 361, "init_fn": [362, 363, 364, 365, 366, 367, 368, 369, 409], "glorot": [363, 364], "fan_in": [363, 364, 365, 366], "fan_out": [363, 364, 365, 366], "fan": [363, 364, 365, 366], "_in": [363, 364], "_out": [363, 364], "difficulti": [363, 364], "feedforward": [363, 364], "191107": 363, "61278": 363, "150594": 363, "363207": 363, "gain": [363, 364, 365, 366], "89613": 363, "53947": 363, "48095": 363, "995016": 363, "223404": 364, "890597": 364, "379159": 364, "776856": 364, "90041": 364, "02264": 364, "912766": 364, "12451": 364, "delv": [365, 366], "surpass": [365, 366], "human": [365, 366], "imagenet": [365, 366], "classif": [365, 366], "25211": 365, "458835": 365, "177208": 365, "0137595": 365, "6967": 365, "02765": 365, "15268": 365, "75787": 365, "kaim": 366, "0300242": 366, "0184009": 366, "793615": 366, "666329": 366, "64331": 366, "16506": 366, "08619": 366, "79854": 366, "982273": 368, "534422": 368, "380709": 368, "0645099": 368, "883935": 369, "863726": 369, "617261": 369, "417497": 369, "exact": [372, 373], "0005": 372, "015": 373, "702": 373, "cdot": [373, 382, 385, 401], "hendryck": 373, "1606": 373, "08415": 373, "min_val": 376, "max_val": 376, "_val": 376, "sum_i": 380, "x_i": [380, 402, 403], "with_logit": 381, "predict": [381, 384, 385, 386, 387, 388, 389, 391, 392, 393], "105361": 381, "223144": 381, "20397": 381, "916291": 381, "539245": 381, "prob": 381, "510826": 381, "x1": 382, "x2": 382, "x_1": [382, 390], "x_2": [382, 390], "label_smooth": 383, "hot": 383, "smooth": [383, 393, 426], "0485873": 383, "348587": 383, "06": [384, 394, 415], "likelihood": [384, 392], "nll": [384, 392], "hing": 385, "y_": [385, 389], "pred": [385, 389], "delta": [386, 415], "huber": 386, "leq": [386, 399], "l2": [386, 389, 427], "kullback": 387, "leibler": 387, "diverg": 387, "logcosh": 389, "sensit": 389, "outlier": 389, "dual": 389, "offer": 389, "balanc": 389, "robust": 389, "approach": [389, 441], "inputs1": 390, "inputs2": 390, "margin": [390, 394], "573409": 390, "765166": 390, "0638": 390, "75596": 390, "225763": 390, "256995": 390, "773433": 390, "formula": 393, "anchor": 394, "triplet": 394, "_p": 394, "pairwis": 394, "instabl": 394, "monoton": 395, "0507": 399, "67326": 399, "sum_j": [402, 403], "x_j": [402, 403], "subclass": 412, "concept": 412, "mymlp": 412, "in_proj": 412, "involv": [414, 439], "subsequ": 414, "far": 414, "apply_gradi": 414, "rmsprop": 414, "adagrad": 414, "adafactor": 414, "adadelta": 414, "adam": [414, 420, 421, 430, 431], "adamw": [414, 421], "adamax": 414, "lion": 414, "cosine_decai": [414, 430], "exponential_decai": 414, "join_schedul": 414, "linear_schedul": [414, 430], "step_decai": 414, "rho": 415, "zeiler": 415, "2012": [415, 426], "adapt": [415, 416, 417, 440], "1212": 415, "5701": 415, "v_": [415, 417, 418, 419, 420, 426, 427], "v_t": [415, 417, 418, 419, 420, 426, 427], "u_t": 415, "u_": 415, "w_t": [415, 417, 418, 419, 420, 421, 426, 427], "30": 416, "001": 416, "clip_threshold": 416, "decay_r": [416, 429, 432], "beta_1": [416, 418, 419, 420, 421], "weight_decai": [416, 419, 421, 427], "scale_paramet": 416, "relative_step": 416, "warmup_init": 416, "sublinear": 416, "epsilon_1": 416, "epsilon_2": 416, "parameter_scal": 416, "unscal": 416, "decai": [416, 419, 421, 427, 428, 429, 432], "duchi": 417, "hazan": 417, "singer": 417, "2011": 417, "subgradi": 417, "onlin": 417, "stochast": [417, 418, 420, 427, 443], "jmlr": 417, "999": [418, 419, 420], "omit": [418, 420, 440], "estim": [418, 420], "kingma": [418, 420], "ba": [418, 420], "iclr": [418, 419, 420], "m_": [418, 419, 420, 421], "m_t": [418, 419, 420, 421], "beta_2": [418, 419, 420, 421], "contrast": 419, "loshchilov": 419, "hutter": 419, "decoupl": 419, "99": [421, 426], "tend": 421, "10x": 421, "strength": [421, 427], "wd": 421, "chen": 421, "symbol": 421, "discoveri": 421, "2302": 421, "06675": 421, "eta": 421, "opt": [422, 440], "tieleman": 426, "hinton": 426, "lectur": 426, "coursera": 426, "dampen": 427, "nesterov": 427, "descent": [427, 439, 443], "mu": 427, "tau": 427, "penalti": 427, "decay_step": 428, "beyond": [428, 431], "lr_schedul": [428, 429, 430, 432], "1000": [428, 439], "0999961": 428, "06561": 429, "boundari": 430, "join": 430, "transit": 430, "warmup": [430, 431], "0999938": 430, "101": 431, "step_siz": 432, "081": 432, "basi": 434, "implicit": [436, 439, 441], "fine": [436, 443], "grain": 436, "pseudo": 436, "altern": 436, "splittabl": 436, "threefri": 436, "counter": 436, "cycl": 438, "merg": 439, "fuse": 439, "big": 439, "awar": [439, 443], "36788": 439, "compiled_fun": 439, "code": [439, 440, 443], "slow": 439, "rerun": [439, 443], "frequent": [439, 443], "destroi": 439, "anonym": 439, "unari": 439, "overhead": [439, 443, 447], "bandwidth": [439, 440], "fusibl": 439, "consider": 439, "versu": 439, "timeit": [439, 441], "tic": 439, "perf_count": 439, "toc": 439, "tpi": 439, "1e3": 439, "4096": [439, 441, 447], "On": [439, 441, 443], "five": 439, "latest": 439, "won": 439, "placehold": 439, "insid": 439, "disable_compil": 439, "okai": [439, 443], "deal": 439, "pretti": [439, 443], "inconveni": 439, "functool": 439, "particularli": 439, "backward": [439, 441], "compiled_grad_fn": 439, "71828": 439, "opportun": 439, "physic": 440, "lot": [440, 441], "figur": 440, "best": 440, "mac": 440, "abil": 440, "talk": 440, "minim": 440, "all_sum": 440, "mpirun": 440, "mpiexec": 440, "send": 440, "homebrew": 440, "anaconda": 440, "openmpi": 440, "libmpi": 440, "dyld": 440, "dyld_library_path": 440, "lib": 440, "connect": 440, "ssh": 440, "checklist": 440, "issu": [440, 441, 444], "hostnam": 440, "password": 440, "confirm": 440, "foo": 440, "bar": 440, "host1": 440, "host2": 440, "qualifi": 440, "ip": 440, "slot": 440, "hostfil": 440, "parallel": [440, 447], "snippet": 440, "loss_grad_fn": 440, "all_avg": 440, "all_reduce_grad": 440, "latenc": 440, "mca": 440, "btl_tcp_link": 440, "tcp": 440, "idea": [441, 443], "behind": 441, "dfdx": [441, 442], "d2fdx2": 441, "zero_grad": 441, "detach": 441, "requires_grad": 441, "dloss_dw": 441, "dloss_dx": 441, "redund": 441, "continu": 441, "suppos": [441, 447], "nice": [441, 443], "propag": [441, 442], "autom": 441, "contriv": [441, 447], "sake": 441, "clariti": 441, "quit": [441, 444], "difficult": 441, "primit": 441, "priorit": 441, "naive_add": 441, "vmap_add": 441, "total": 441, "390": 441, "wherea": 441, "025": 441, "ten": [441, 443], "Of": 441, "cours": 441, "better": [441, 447], "handi": 441, "ellipsi": 442, "mix": 442, "lack": 442, "extrem": [442, 443], "ineffici": [442, 443], "nonzero": 442, "dynam": 443, "easier": 443, "worri": 443, "fun1": 443, "expensive_fun": 443, "consum": 443, "eager": 443, "thank": 443, "weights_fp16": 443, "trade": 443, "bad": 443, "grow": 443, "computation": 443, "costli": 443, "luckili": 443, "wide": 443, "thousand": 443, "value_and_grad_fn": 443, "implicitli": 443, "anytim": 443, "memoryview": [443, 444], "perfectli": 443, "first_lay": 443, "second_layer_a": 443, "second_layer_b": 443, "protocol": 444, "dlpack": 444, "pep": 444, "3118": 444, "a_view": 444, "owndata": 444, "extern": 444, "demonstr": 444, "x_view": 444, "modifi": 444, "df": 444, "x\u00b2": 444, "2x": 444, "indirectli": 444, "modif": 444, "seen": 444, "occur": 444, "incorpor": 444, "aris": 444, "incorrect": 444, "experiment": 444, "break": 444, "advis": 444, "intermedi": 444, "jnp": 444, "tf": 444, "page": 445, "composit": 445, "archiv": 446, "savez_compress": 446, "save_gguf": 446, "arr_0": 446, "advantag": 447, "race": 447, "interest": 447, "albeit": 447, "d1": 447, "d2": 447, "But": 447, "twice": 447, "measur": 447, "default_stream": 448, "default_devic": 448, "my_devic": 448}, "objects": {"": [[0, 0, 1, "_CPPv43absRK5array14StreamOrDevice", "abs"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::a"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::s"], [0, 0, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::a"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::b"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::s"], [0, 0, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::a"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::alpha"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::b"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::beta"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::c"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::s"], [0, 0, 1, "_CPPv43allRK5array14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::axes"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::axis"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::s"], [0, 0, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::a"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::atol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::b"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::equal_nan"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::rtol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::s"], [0, 0, 1, "_CPPv43anyRK5array14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::axes"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::axis"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::s"], [0, 0, 1, "_CPPv46aranged14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangei14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeii14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeiii14StreamOrDevice", "arange"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::stop"], [0, 0, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::a"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::s"], [0, 0, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::a"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::s"], [0, 0, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::a"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::s"], [0, 0, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::a"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::s"], [0, 0, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan"], [0, 0, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::a"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::b"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::s"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::a"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::s"], [0, 0, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::a"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::s"], [0, 0, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::axis"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::s"], [0, 0, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::axis"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::s"], [0, 0, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition"], [0, 0, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::axis"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::s"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::s"], [0, 0, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort"], [0, 0, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::axis"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::s"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::s"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::equal_nan"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::s"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::s"], [0, 0, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::a"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::offset"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::s"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::shape"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::strides"], [0, 0, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::a"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::dtype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::s"], [0, 0, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d"], [0, 0, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::s"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::s"], [0, 0, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d"], [0, 0, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::s"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::s"], [0, 0, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d"], [0, 0, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::s"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::s"], [0, 0, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::a"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::b"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::s"], [0, 0, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::a"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::b"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::s"], [0, 0, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::a"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::b"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::s"], [0, 0, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::a"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::b"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::block_size"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_lhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_out"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_rhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::s"], [0, 0, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::inputs"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::s"], [0, 0, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::a"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::s"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::shape"], [0, 0, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::a"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::s"], [0, 0, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_max"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_min"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::s"], [0, 0, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate"], [0, 0, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::axis"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::s"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::s"], [0, 0, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::a"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::s"], [0, 0, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::dilation"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::groups"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::input"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::padding"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::s"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::stride"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::weight"], [0, 0, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::dilation"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::groups"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::input"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::padding"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::s"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::stride"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::weight"], [0, 0, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::dilation"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::groups"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::input"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::padding"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::s"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::stride"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::weight"], [0, 0, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 0, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_hi"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_lo"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 0, 1, "_CPPv44copy5array14StreamOrDevice", "copy"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::a"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::s"], [0, 0, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::a"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::s"], [0, 0, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::a"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::s"], [0, 0, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::a"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::axis"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::inclusive"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::reverse"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::s"], [0, 0, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::a"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::axis"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::inclusive"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::reverse"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::s"], [0, 0, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::a"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::axis"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::inclusive"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::reverse"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::s"], [0, 0, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::a"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::axis"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::inclusive"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::reverse"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::s"], [0, 0, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::a"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::s"], [0, 0, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::dependencies"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::inputs"], [0, 0, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::biases"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::bits"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::group_size"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::s"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::scales"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::w"], [0, 0, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::a"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::k"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::s"], [0, 0, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::a"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis1"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis2"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::offset"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::s"], [0, 0, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::a"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::b"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::s"], [0, 0, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::a"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::b"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::s"], [0, 0, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::a"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::b"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::s"], [0, 0, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::a"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::s"], [0, 0, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::a"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::s"], [0, 0, 1, "_CPPv43expRK5array14StreamOrDevice", "exp"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::a"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::s"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::axes"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::axis"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::s"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::s"], [0, 0, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::a"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::s"], [0, 0, 1, "_CPPv43eyei14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::s"], [0, 0, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten"], [0, 0, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::end_axis"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::start_axis"], [0, 0, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::a"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::s"], [0, 0, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::a"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::b"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::s"], [0, 0, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full"], [0, 0, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full"], [0, 2, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::T"], [0, 2, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::T"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::vals"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::vals"], [0, 0, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather"], [0, 0, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::axes"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::axis"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::slice_sizes"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::slice_sizes"], [0, 0, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::a"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::b"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::lhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::rhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::s"], [0, 0, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::biases"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::bits"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::group_size"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::lhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::rhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::s"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::scales"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::transpose"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::w"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::x"], [0, 0, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::a"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::b"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::s"], [0, 0, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::a"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::b"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::s"], [0, 0, 1, "_CPPv48identityi14StreamOrDevice", "identity"], [0, 0, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::dtype"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::s"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::s"], [0, 0, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::a"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::b"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::s"], [0, 0, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::a"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::atol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::b"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::equal_nan"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::rtol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::s"], [0, 0, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::a"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::s"], [0, 0, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::a"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::s"], [0, 0, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::a"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::s"], [0, 0, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::a"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::s"], [0, 0, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::a"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::b"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::s"], [0, 0, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::a"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::b"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::s"], [0, 0, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::a"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::b"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::s"], [0, 0, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::dtype"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::num"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::s"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::start"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::stop"], [0, 0, 1, "_CPPv43logRK5array14StreamOrDevice", "log"], [0, 0, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::a"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::s"], [0, 0, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::a"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::s"], [0, 0, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::a"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::s"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::a"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::s"], [0, 0, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::a"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::b"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::s"], [0, 0, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::a"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::b"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::s"], [0, 0, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::a"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::s"], [0, 0, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::a"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::b"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::s"], [0, 0, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::axes"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::axis"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::s"], [0, 0, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::a"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::b"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::s"], [0, 0, 1, "_CPPv43maxRK5array14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::axes"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::axis"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::s"], [0, 0, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::a"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::b"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::s"], [0, 0, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::axes"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::axis"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::s"], [0, 0, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::arrays"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::indexing"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::s"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::sparse"], [0, 0, 1, "_CPPv43minRK5array14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::axes"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::axis"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::s"], [0, 0, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::a"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::b"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::s"], [0, 0, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::a"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::destination"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::s"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::source"], [0, 0, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::a"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::b"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::s"], [0, 0, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::a"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::s"], [0, 0, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::a"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::b"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::s"], [0, 0, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::a"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::axes"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::dtype"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::inverted"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::s"], [0, 0, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones"], [0, 0, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::dtype"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones::shape"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::shape"], [0, 0, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::a"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::s"], [0, 0, 1, "_CPPv4I0Ene5array1TRK5array", "operator!="], [0, 0, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!="], [0, 0, 1, "_CPPv4neRK5arrayRK5array", "operator!="], [0, 2, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::T"], [0, 2, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::T"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::a"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::b"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::b"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::b"], [0, 0, 1, "_CPPv4I0Erm5array1TRK5array", "operator%"], [0, 0, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%"], [0, 0, 1, "_CPPv4rmRK5arrayRK5array", "operator%"], [0, 2, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::T"], [0, 2, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::T"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::a"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::b"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::b"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::b"], [0, 0, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;"], [0, 0, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::a"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::b"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::a"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::b"], [0, 0, 1, "_CPPv4I0Eml5array1TRK5array", "operator*"], [0, 0, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*"], [0, 0, 1, "_CPPv4mlRK5arrayRK5array", "operator*"], [0, 2, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::T"], [0, 2, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::T"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::a"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::b"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::b"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::b"], [0, 0, 1, "_CPPv4I0Epl5array1TRK5array", "operator+"], [0, 0, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+"], [0, 0, 1, "_CPPv4plRK5arrayRK5array", "operator+"], [0, 2, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::T"], [0, 2, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::T"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::a"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::b"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::b"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::b"], [0, 0, 1, "_CPPv4I0Emi5array1TRK5array", "operator-"], [0, 0, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-"], [0, 0, 1, "_CPPv4miRK5array", "operator-"], [0, 0, 1, "_CPPv4miRK5arrayRK5array", "operator-"], [0, 2, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::T"], [0, 2, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::T"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::a"], [0, 1, 1, "_CPPv4miRK5array", "operator-::a"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::b"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::b"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::b"], [0, 0, 1, "_CPPv4dvRK5arrayRK5array", "operator/"], [0, 0, 1, "_CPPv4dvRK5arrayd", "operator/"], [0, 0, 1, "_CPPv4dvdRK5array", "operator/"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::a"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::b"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::b"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::b"], [0, 0, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;"], [0, 0, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;"], [0, 0, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;"], [0, 2, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::T"], [0, 2, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::T"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::a"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::b"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::b"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::b"], [0, 0, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::a"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::b"], [0, 0, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;="], [0, 0, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;="], [0, 0, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;="], [0, 2, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::T"], [0, 2, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::T"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::a"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::b"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::b"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::b"], [0, 0, 1, "_CPPv4I0Eeq5array1TRK5array", "operator=="], [0, 0, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator=="], [0, 0, 1, "_CPPv4eqRK5arrayRK5array", "operator=="], [0, 2, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::T"], [0, 2, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::T"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::a"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::b"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::b"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::b"], [0, 0, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;"], [0, 0, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;"], [0, 0, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;"], [0, 2, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::T"], [0, 2, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::T"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::a"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::b"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::b"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::b"], [0, 0, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;="], [0, 0, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;="], [0, 0, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;="], [0, 2, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::T"], [0, 2, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::T"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::a"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::b"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::b"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::b"], [0, 0, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::a"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::b"], [0, 0, 1, "_CPPv4eoRK5arrayRK5array", "operator^"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::a"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::b"], [0, 0, 1, "_CPPv4orRK5arrayRK5array", "operator|"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::a"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::b"], [0, 0, 1, "_CPPv4ooRK5arrayRK5array", "operator||"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::a"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::b"], [0, 0, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::a"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::b"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::s"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::axes"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::high_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::low_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::s"], [0, 0, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition"], [0, 0, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::axis"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::s"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::s"], [0, 0, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::a"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::b"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::s"], [0, 0, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::axes"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::axis"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::s"], [0, 0, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::bits"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::group_size"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::s"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::w"], [0, 0, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::biases"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::bits"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::group_size"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::s"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::scales"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::transpose"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::w"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::x"], [0, 0, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::a"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::s"], [0, 0, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::a"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::s"], [0, 0, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::a"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::b"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::s"], [0, 0, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat"], [0, 0, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::axis"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::s"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::s"], [0, 0, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::a"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::s"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::shape"], [0, 0, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::a"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::b"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::s"], [0, 0, 1, "_CPPv45roundRK5array14StreamOrDevice", "round"], [0, 0, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::decimals"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::s"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::s"], [0, 0, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::a"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::s"], [0, 0, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter"], [0, 0, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::axes"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::axis"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::updates"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::updates"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::axes"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::axis"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::updates"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::updates"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::axes"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::axis"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::updates"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::updates"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::axes"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::axis"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::updates"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::updates"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::axes"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::axis"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::updates"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::updates"], [0, 0, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::a"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::s"], [0, 0, 1, "_CPPv44signRK5array14StreamOrDevice", "sign"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::a"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::s"], [0, 0, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::a"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::s"], [0, 0, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::a"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::s"], [0, 0, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::strides"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::strides"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 0, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::axes"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::axis"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::s"], [0, 0, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort"], [0, 0, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::axis"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::s"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::s"], [0, 0, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::s"], [0, 0, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::a"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::s"], [0, 0, 1, "_CPPv46squareRK5array14StreamOrDevice", "square"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::a"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::s"], [0, 0, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::axes"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::axis"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::s"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::axis"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::s"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::s"], [0, 0, 1, "_CPPv4StRK5array14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::axes"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::axis"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::s"], [0, 0, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::a"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::s"], [0, 0, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::a"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::b"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::s"], [0, 0, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::axes"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::axis"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::s"], [0, 0, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::a"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis1"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis2"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::s"], [0, 0, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::s"], [0, 0, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::a"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::indices"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::s"], [0, 0, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::a"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::s"], [0, 0, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::a"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::s"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::axis"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::s"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::s"], [0, 0, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::arr"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::reps"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::s"], [0, 0, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk"], [0, 0, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::axis"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::s"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::s"], [0, 0, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::dtype"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::s"], [0, 0, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::s"], [0, 0, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri"], [0, 0, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::k"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::m"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::type"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::type"], [0, 0, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::k"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::s"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::x"], [0, 0, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::k"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::s"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::x"], [0, 0, 1, "_CPPv43varRK5array14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::axes"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::axis"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::s"], [0, 0, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::a"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::dtype"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::s"], [0, 0, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::condition"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::s"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::x"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::y"], [0, 0, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros"], [0, 0, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::dtype"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros::shape"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::shape"], [0, 0, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::a"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::s"]], "mlx.core": [[8, 3, 1, "", "Device"], [9, 3, 1, "", "Dtype"], [10, 3, 1, "", "DtypeCategory"], [284, 3, 1, "", "Stream"], [11, 5, 1, "", "abs"], [12, 5, 1, "", "add"], [13, 5, 1, "", "addmm"], [14, 5, 1, "", "all"], [15, 5, 1, "", "allclose"], [16, 5, 1, "", "any"], [17, 5, 1, "", "arange"], [18, 5, 1, "", "arccos"], [19, 5, 1, "", "arccosh"], [20, 5, 1, "", "arcsin"], [21, 5, 1, "", "arcsinh"], [22, 5, 1, "", "arctan"], [23, 5, 1, "", "arctan2"], [24, 5, 1, "", "arctanh"], [25, 5, 1, "", "argmax"], [26, 5, 1, "", "argmin"], [27, 5, 1, "", "argpartition"], [28, 5, 1, "", "argsort"], [29, 3, 1, "", "array"], [78, 5, 1, "", "array_equal"], [79, 5, 1, "", "as_strided"], [80, 5, 1, "", "atleast_1d"], [81, 5, 1, "", "atleast_2d"], [82, 5, 1, "", "atleast_3d"], [83, 5, 1, "", "bitwise_and"], [84, 5, 1, "", "bitwise_or"], [85, 5, 1, "", "bitwise_xor"], [86, 5, 1, "", "block_masked_mm"], [87, 5, 1, "", "broadcast_to"], [88, 5, 1, "", "ceil"], [89, 5, 1, "", "clip"], [90, 5, 1, "", "compile"], [91, 5, 1, "", "concatenate"], [92, 5, 1, "", "conj"], [93, 5, 1, "", "conjugate"], [94, 5, 1, "", "conv1d"], [95, 5, 1, "", "conv2d"], [96, 5, 1, "", "conv_general"], [97, 5, 1, "", "convolve"], [98, 5, 1, "", "cos"], [99, 5, 1, "", "cosh"], [100, 5, 1, "", "cummax"], [101, 5, 1, "", "cummin"], [102, 5, 1, "", "cumprod"], [103, 5, 1, "", "cumsum"], [104, 5, 1, "", "default_device"], [105, 5, 1, "", "default_stream"], [106, 5, 1, "", "degrees"], [107, 5, 1, "", "dequantize"], [108, 5, 1, "", "diag"], [109, 5, 1, "", "diagonal"], [110, 5, 1, "", "disable_compile"], [116, 5, 1, "", "divide"], [117, 5, 1, "", "divmod"], [118, 5, 1, "", "enable_compile"], [119, 5, 1, "", "equal"], [120, 5, 1, "", "erf"], [121, 5, 1, "", "erfinv"], [122, 5, 1, "", "eval"], [123, 5, 1, "", "exp"], [124, 5, 1, "", "expand_dims"], [125, 5, 1, "", "expm1"], [126, 5, 1, "", "eye"], [143, 5, 1, "", "flatten"], [144, 5, 1, "", "floor"], [145, 5, 1, "", "floor_divide"], [146, 5, 1, "", "full"], [147, 5, 1, "", "gather_mm"], [148, 5, 1, "", "gather_qmm"], [149, 5, 1, "", "grad"], [150, 5, 1, "", "greater"], [151, 5, 1, "", "greater_equal"], [152, 5, 1, "", "identity"], [153, 5, 1, "", "inner"], [154, 5, 1, "", "isclose"], [155, 5, 1, "", "isinf"], [156, 5, 1, "", "isnan"], [157, 5, 1, "", "isneginf"], [158, 5, 1, "", "isposinf"], [159, 5, 1, "", "issubdtype"], [160, 5, 1, "", "jvp"], [161, 5, 1, "", "left_shift"], [162, 5, 1, "", "less"], [163, 5, 1, "", "less_equal"], [169, 5, 1, "", "linspace"], [170, 5, 1, "", "load"], [171, 5, 1, "", "log"], [172, 5, 1, "", "log10"], [173, 5, 1, "", "log1p"], [174, 5, 1, "", "log2"], [175, 5, 1, "", "logaddexp"], [176, 5, 1, "", "logical_and"], [177, 5, 1, "", "logical_not"], [178, 5, 1, "", "logical_or"], [179, 5, 1, "", "logsumexp"], [180, 5, 1, "", "matmul"], [181, 5, 1, "", "max"], [182, 5, 1, "", "maximum"], [183, 5, 1, "", "mean"], [184, 5, 1, "", "meshgrid"], [196, 5, 1, "", "min"], [197, 5, 1, "", "minimum"], [198, 5, 1, "", "moveaxis"], [199, 5, 1, "", "multiply"], [200, 5, 1, "", "negative"], [201, 5, 1, "", "new_stream"], [202, 5, 1, "", "not_equal"], [203, 5, 1, "", "ones"], [204, 5, 1, "", "ones_like"], [205, 5, 1, "", "outer"], [206, 5, 1, "", "pad"], [207, 5, 1, "", "partition"], [208, 5, 1, "", "power"], [209, 5, 1, "", "prod"], [210, 5, 1, "", "quantize"], [211, 5, 1, "", "quantized_matmul"], [212, 5, 1, "", "radians"], [224, 5, 1, "", "reciprocal"], [225, 5, 1, "", "remainder"], [226, 5, 1, "", "repeat"], [227, 5, 1, "", "reshape"], [228, 5, 1, "", "right_shift"], [229, 5, 1, "", "round"], [230, 5, 1, "", "rsqrt"], [231, 5, 1, "", "save"], [232, 5, 1, "", "save_gguf"], [233, 5, 1, "", "save_safetensors"], [234, 5, 1, "", "savez"], [235, 5, 1, "", "savez_compressed"], [236, 5, 1, "", "set_default_device"], [237, 5, 1, "", "set_default_stream"], [238, 5, 1, "", "sigmoid"], [239, 5, 1, "", "sign"], [240, 5, 1, "", "sin"], [241, 5, 1, "", "sinh"], [242, 5, 1, "", "softmax"], [243, 5, 1, "", "sort"], [244, 5, 1, "", "split"], [245, 5, 1, "", "sqrt"], [246, 5, 1, "", "square"], [247, 5, 1, "", "squeeze"], [248, 5, 1, "", "stack"], [249, 5, 1, "", "std"], [250, 5, 1, "", "stop_gradient"], [251, 5, 1, "", "stream"], [252, 5, 1, "", "subtract"], [253, 5, 1, "", "sum"], [254, 5, 1, "", "swapaxes"], [255, 5, 1, "", "synchronize"], [256, 5, 1, "", "take"], [257, 5, 1, "", "take_along_axis"], [258, 5, 1, "", "tan"], [259, 5, 1, "", "tanh"], [260, 5, 1, "", "tensordot"], [261, 5, 1, "", "tile"], [262, 5, 1, "", "topk"], [263, 5, 1, "", "trace"], [264, 5, 1, "", "transpose"], [265, 5, 1, "", "tri"], [266, 5, 1, "", "tril"], [267, 5, 1, "", "triu"], [268, 5, 1, "", "value_and_grad"], [269, 5, 1, "", "var"], [270, 5, 1, "", "view"], [271, 5, 1, "", "vjp"], [272, 5, 1, "", "vmap"], [273, 5, 1, "", "where"], [274, 5, 1, "", "zeros"], [275, 5, 1, "", "zeros_like"]], "mlx.core.Device": [[8, 4, 1, "", "__init__"]], "mlx.core.Dtype": [[9, 4, 1, "", "__init__"]], "mlx.core.DtypeCategory": [[10, 4, 1, "", "__init__"]], "mlx.core.Stream": [[284, 4, 1, "", "__init__"]], "mlx.core.array": [[30, 6, 1, "", "T"], [29, 4, 1, "", "__init__"], [31, 4, 1, "", "abs"], [32, 4, 1, "", "all"], [33, 4, 1, "", "any"], [34, 4, 1, "", "argmax"], [35, 4, 1, "", "argmin"], [36, 4, 1, "", "astype"], [37, 6, 1, "", "at"], [38, 4, 1, "", "cos"], [39, 4, 1, "", "cummax"], [40, 4, 1, "", "cummin"], [41, 4, 1, "", "cumprod"], [42, 4, 1, "", "cumsum"], [43, 4, 1, "", "diag"], [44, 4, 1, "", "diagonal"], [45, 6, 1, "", "dtype"], [46, 4, 1, "", "exp"], [47, 4, 1, "", "flatten"], [48, 4, 1, "", "item"], [49, 6, 1, "", "itemsize"], [50, 4, 1, "", "log"], [51, 4, 1, "", "log10"], [52, 4, 1, "", "log1p"], [53, 4, 1, "", "log2"], [54, 4, 1, "", "logsumexp"], [55, 4, 1, "", "max"], [56, 4, 1, "", "mean"], [57, 4, 1, "", "min"], [58, 4, 1, "", "moveaxis"], [59, 6, 1, "", "nbytes"], [60, 6, 1, "", "ndim"], [61, 4, 1, "", "prod"], [62, 4, 1, "", "reciprocal"], [63, 4, 1, "", "reshape"], [64, 4, 1, "", "round"], [65, 4, 1, "", "rsqrt"], [66, 6, 1, "", "shape"], [67, 4, 1, "", "sin"], [68, 6, 1, "", "size"], [69, 4, 1, "", "split"], [70, 4, 1, "", "sqrt"], [71, 4, 1, "", "square"], [72, 4, 1, "", "squeeze"], [73, 4, 1, "", "sum"], [74, 4, 1, "", "swapaxes"], [75, 4, 1, "", "tolist"], [76, 4, 1, "", "transpose"], [77, 4, 1, "", "var"]], "mlx.core.distributed": [[111, 3, 1, "", "Group"], [112, 5, 1, "", "all_gather"], [113, 5, 1, "", "all_sum"], [114, 5, 1, "", "init"], [115, 5, 1, "", "is_available"]], "mlx.core.distributed.Group": [[111, 4, 1, "", "__init__"]], "mlx.core.fast": [[127, 5, 1, "", "layer_norm"], [128, 5, 1, "", "rms_norm"], [129, 5, 1, "", "rope"], [130, 5, 1, "", "scaled_dot_product_attention"]], "mlx.core.fft": [[131, 5, 1, "", "fft"], [132, 5, 1, "", "fft2"], [133, 5, 1, "", "fftn"], [134, 5, 1, "", "ifft"], [135, 5, 1, "", "ifft2"], [136, 5, 1, "", "ifftn"], [137, 5, 1, "", "irfft"], [138, 5, 1, "", "irfft2"], [139, 5, 1, "", "irfftn"], [140, 5, 1, "", "rfft"], [141, 5, 1, "", "rfft2"], [142, 5, 1, "", "rfftn"]], "mlx.core.linalg": [[164, 5, 1, "", "cholesky"], [165, 5, 1, "", "inv"], [166, 5, 1, "", "norm"], [167, 5, 1, "", "qr"], [168, 5, 1, "", "svd"]], "mlx.core.metal": [[185, 5, 1, "", "clear_cache"], [186, 5, 1, "", "device_info"], [187, 5, 1, "", "get_active_memory"], [188, 5, 1, "", "get_cache_memory"], [189, 5, 1, "", "get_peak_memory"], [190, 5, 1, "", "is_available"], [191, 5, 1, "", "reset_peak_memory"], [192, 5, 1, "", "set_cache_limit"], [193, 5, 1, "", "set_memory_limit"], [194, 5, 1, "", "start_capture"], [195, 5, 1, "", "stop_capture"]], "mlx.core.random": [[213, 5, 1, "", "bernoulli"], [214, 5, 1, "", "categorical"], [215, 5, 1, "", "gumbel"], [216, 5, 1, "", "key"], [217, 5, 1, "", "multivariate_normal"], [218, 5, 1, "", "normal"], [219, 5, 1, "", "randint"], [220, 5, 1, "", "seed"], [221, 5, 1, "", "split"], [222, 5, 1, "", "truncated_normal"], [223, 5, 1, "", "uniform"]], "mlx.nn": [[294, 3, 1, "", "ALiBi"], [295, 3, 1, "", "AvgPool1d"], [296, 3, 1, "", "AvgPool2d"], [297, 3, 1, "", "BatchNorm"], [298, 3, 1, "", "Conv1d"], [299, 3, 1, "", "Conv2d"], [300, 3, 1, "", "Conv3d"], [301, 3, 1, "", "Dropout"], [302, 3, 1, "", "Dropout2d"], [303, 3, 1, "", "Dropout3d"], [304, 3, 1, "", "Embedding"], [305, 3, 1, "", "GELU"], [306, 3, 1, "", "GLU"], [307, 3, 1, "", "GRU"], [308, 3, 1, "", "GroupNorm"], [309, 3, 1, "", "HardShrink"], [310, 3, 1, "", "HardTanh"], [311, 3, 1, "", "Hardswish"], [312, 3, 1, "", "InstanceNorm"], [313, 3, 1, "", "LSTM"], [314, 3, 1, "", "LayerNorm"], [315, 3, 1, "", "LeakyReLU"], [316, 3, 1, "", "Linear"], [317, 3, 1, "", "MaxPool1d"], [318, 3, 1, "", "MaxPool2d"], [319, 3, 1, "", "Mish"], [412, 3, 1, "", "Module"], [340, 3, 1, "", "MultiHeadAttention"], [341, 3, 1, "", "PReLU"], [342, 3, 1, "", "QuantizedEmbedding"], [343, 3, 1, "", "QuantizedLinear"], [344, 3, 1, "", "RMSNorm"], [345, 3, 1, "", "RNN"], [346, 3, 1, "", "ReLU"], [347, 3, 1, "", "ReLU6"], [348, 3, 1, "", "RoPE"], [349, 3, 1, "", "SELU"], [350, 3, 1, "", "Sequential"], [351, 3, 1, "", "SiLU"], [352, 3, 1, "", "SinusoidalPositionalEncoding"], [353, 3, 1, "", "Softmax"], [354, 3, 1, "", "Softmin"], [355, 3, 1, "", "Softplus"], [356, 3, 1, "", "Softshrink"], [357, 3, 1, "", "Softsign"], [358, 3, 1, "", "Step"], [359, 3, 1, "", "Tanh"], [360, 3, 1, "", "Transformer"], [361, 3, 1, "", "Upsample"], [370, 3, 1, "", "elu"], [371, 3, 1, "", "gelu"], [372, 3, 1, "", "gelu_approx"], [373, 3, 1, "", "gelu_fast_approx"], [374, 3, 1, "", "glu"], [375, 3, 1, "", "hard_shrink"], [376, 3, 1, "", "hard_tanh"], [377, 3, 1, "", "hardswish"], [378, 3, 1, "", "leaky_relu"], [379, 3, 1, "", "log_sigmoid"], [380, 3, 1, "", "log_softmax"], [395, 3, 1, "", "mish"], [396, 3, 1, "", "prelu"], [276, 5, 1, "", "quantize"], [397, 3, 1, "", "relu"], [398, 3, 1, "", "relu6"], [399, 3, 1, "", "selu"], [400, 3, 1, "", "sigmoid"], [401, 3, 1, "", "silu"], [402, 3, 1, "", "softmax"], [403, 3, 1, "", "softmin"], [404, 3, 1, "", "softplus"], [405, 3, 1, "", "softshrink"], [406, 3, 1, "", "step"], [407, 3, 1, "", "tanh"], [277, 5, 1, "", "value_and_grad"]], "mlx.nn.Module": [[320, 4, 1, "", "apply"], [321, 4, 1, "", "apply_to_modules"], [322, 4, 1, "", "children"], [323, 4, 1, "", "eval"], [324, 4, 1, "", "filter_and_map"], [325, 4, 1, "", "freeze"], [326, 4, 1, "", "leaf_modules"], [327, 4, 1, "", "load_weights"], [328, 4, 1, "", "modules"], [329, 4, 1, "", "named_modules"], [330, 4, 1, "", "parameters"], [331, 4, 1, "", "save_weights"], [332, 4, 1, "", "set_dtype"], [333, 6, 1, "", "state"], [334, 4, 1, "", "train"], [335, 4, 1, "", "trainable_parameters"], [336, 6, 1, "", "training"], [337, 4, 1, "", "unfreeze"], [338, 4, 1, "", "update"], [339, 4, 1, "", "update_modules"]], "mlx.nn.init": [[362, 5, 1, "", "constant"], [363, 5, 1, "", "glorot_normal"], [364, 5, 1, "", "glorot_uniform"], [365, 5, 1, "", "he_normal"], [366, 5, 1, "", "he_uniform"], [367, 5, 1, "", "identity"], [368, 5, 1, "", "normal"], [369, 5, 1, "", "uniform"]], "mlx.nn.losses": [[381, 3, 1, "", "binary_cross_entropy"], [382, 3, 1, "", "cosine_similarity_loss"], [383, 3, 1, "", "cross_entropy"], [384, 3, 1, "", "gaussian_nll_loss"], [385, 3, 1, "", "hinge_loss"], [386, 3, 1, "", "huber_loss"], [387, 3, 1, "", "kl_div_loss"], [388, 3, 1, "", "l1_loss"], [389, 3, 1, "", "log_cosh_loss"], [390, 3, 1, "", "margin_ranking_loss"], [391, 3, 1, "", "mse_loss"], [392, 3, 1, "", "nll_loss"], [393, 3, 1, "", "smooth_l1_loss"], [394, 3, 1, "", "triplet_loss"]], "mlx.optimizers": [[415, 3, 1, "", "AdaDelta"], [416, 3, 1, "", "Adafactor"], [417, 3, 1, "", "Adagrad"], [418, 3, 1, "", "Adam"], [419, 3, 1, "", "AdamW"], [420, 3, 1, "", "Adamax"], [421, 3, 1, "", "Lion"], [434, 3, 1, "", "Optimizer"], [426, 3, 1, "", "RMSprop"], [427, 3, 1, "", "SGD"], [278, 5, 1, "", "clip_grad_norm"], [428, 5, 1, "", "cosine_decay"], [429, 5, 1, "", "exponential_decay"], [430, 5, 1, "", "join_schedules"], [431, 5, 1, "", "linear_schedule"], [432, 5, 1, "", "step_decay"]], "mlx.optimizers.Optimizer": [[422, 4, 1, "", "apply_gradients"], [423, 4, 1, "", "init"], [424, 6, 1, "", "state"], [425, 4, 1, "", "update"]], "mlx.utils": [[279, 5, 1, "", "tree_flatten"], [280, 5, 1, "", "tree_map"], [281, 5, 1, "", "tree_map_with_path"], [282, 5, 1, "", "tree_reduce"], [283, 5, 1, "", "tree_unflatten"]]}, "objtypes": {"0": "cpp:function", "1": "cpp:functionParam", "2": "cpp:templateParam", "3": "py:class", "4": "py:method", "5": "py:function", "6": "py:property"}, "objnames": {"0": ["cpp", "function", "C++ function"], "1": ["cpp", "functionParam", "C++ function parameter"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "titleterms": {"oper": [0, 1, 413], "custom": 1, "extens": 1, "mlx": [1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432], "introduc": 1, "exampl": [1, 6, 439, 440, 447], "primit": 1, "us": [1, 443, 448], "implement": [1, 4], "cpu": 1, "back": 1, "end": 1, "gpu": 1, "transform": [1, 360, 437, 439, 441, 443, 445], "build": [1, 7], "bind": 1, "python": [1, 6, 7], "cmake": 1, "setuptool": 1, "usag": [1, 6], "result": 1, "script": [1, 4], "download": [1, 4], "code": [1, 4], "metal": [2, 7, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 292], "debugg": 2, "xcode": 2, "workflow": 2, "linear": [3, 291, 316], "regress": 3, "llm": 4, "infer": 4, "model": 4, "attent": 4, "layer": [4, 5, 410], "encod": 4, "full": [4, 146], "gener": 4, "put": 4, "all": [4, 14, 32, 440], "togeth": 4, "convert": 4, "weight": 4, "load": [4, 170, 446], "benchmark": 4, "multi": 5, "perceptron": 5, "instal": [6, 7, 440], "api": [6, 7], "refer": 6, "c": [6, 7], "further": 6, "read": 6, "troubleshoot": 7, "from": [7, 442], "sourc": 7, "requir": 7, "option": 7, "binari": 7, "size": [7, 68], "minim": 7, "found": 7, "x86": 7, "shell": 7, "core": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 284], "devic": [8, 287], "dtype": [9, 45], "dtypecategori": 10, "ab": [11, 31], "add": 12, "addmm": 13, "allclos": 15, "ani": [16, 33], "arang": 17, "arcco": 18, "arccosh": 19, "arcsin": 20, "arcsinh": 21, "arctan": 22, "arctan2": 23, "arctanh": 24, "argmax": [25, 34], "argmin": [26, 35], "argpartit": 27, "argsort": 28, "arrai": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 285, 442, 446], "t": 30, "astyp": 36, "co": [38, 98], "cummax": [39, 100], "cummin": [40, 101], "cumprod": [41, 102], "cumsum": [42, 103], "diag": [43, 108], "diagon": [44, 109], "exp": [46, 123], "flatten": [47, 143], "item": 48, "items": 49, "log": [50, 171], "log10": [51, 172], "log1p": [52, 173], "log2": [53, 174], "logsumexp": [54, 179], "max": [55, 181], "mean": [56, 183], "min": [57, 196], "moveaxi": [58, 198], "nbyte": 59, "ndim": 60, "prod": [61, 209], "reciproc": [62, 224], "reshap": [63, 227], "round": [64, 229], "rsqrt": [65, 230], "shape": 66, "sin": [67, 240], "split": [69, 221, 244], "sqrt": [70, 245], "squar": [71, 246], "squeez": [72, 247], "sum": [73, 253], "swapax": [74, 254], "tolist": 75, "transpos": [76, 264], "var": [77, 269], "array_equ": 78, "as_strid": 79, "atleast_1d": 80, "atleast_2d": 81, "atleast_3d": 82, "bitwise_and": 83, "bitwise_or": 84, "bitwise_xor": 85, "block_masked_mm": 86, "broadcast_to": 87, "ceil": 88, "clip": 89, "compil": [90, 439], "concaten": 91, "conj": 92, "conjug": 93, "conv1d": [94, 298], "conv2d": [95, 299], "conv_gener": 96, "convolv": 97, "cosh": 99, "default_devic": 104, "default_stream": 105, "degre": 106, "dequant": 107, "disable_compil": 110, "distribut": [111, 112, 113, 114, 115, 288, 440], "group": 111, "all_gath": 112, "all_sum": 113, "init": [114, 362, 363, 364, 365, 366, 367, 368, 369, 423], "is_avail": [115, 190], "divid": 116, "divmod": 117, "enable_compil": 118, "equal": 119, "erf": 120, "erfinv": 121, "eval": [122, 323], "expand_dim": 124, "expm1": 125, "ey": 126, "fast": [127, 128, 129, 130, 289], "layer_norm": 127, "rms_norm": 128, "rope": [129, 348], "scaled_dot_product_attent": 130, "fft": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 290], "fft2": 132, "fftn": 133, "ifft": 134, "ifft2": 135, "ifftn": 136, "irfft": 137, "irfft2": 138, "irfftn": 139, "rfft": 140, "rfft2": 141, "rfftn": 142, "floor": 144, "floor_divid": 145, "gather_mm": 147, "gather_qmm": 148, "grad": [149, 293], "greater": 150, "greater_equ": 151, "ident": [152, 367], "inner": 153, "isclos": 154, "isinf": 155, "isnan": 156, "isneginf": 157, "isposinf": 158, "issubdtyp": 159, "jvp": 160, "left_shift": 161, "less": 162, "less_equ": 163, "linalg": [164, 165, 166, 167, 168], "choleski": 164, "inv": 165, "norm": 166, "qr": 167, "svd": 168, "linspac": 169, "logaddexp": 175, "logical_and": 176, "logical_not": 177, "logical_or": 178, "matmul": 180, "maximum": 182, "meshgrid": 184, "clear_cach": 185, "device_info": 186, "get_active_memori": 187, "get_cache_memori": 188, "get_peak_memori": 189, "reset_peak_memori": 191, "set_cache_limit": 192, "set_memory_limit": 193, "start_captur": 194, "stop_captur": 195, "minimum": 197, "multipli": 199, "neg": 200, "new_stream": 201, "not_equ": 202, "ones": 203, "ones_lik": 204, "outer": 205, "pad": 206, "partit": 207, "power": 208, "quantiz": [210, 276], "quantized_matmul": 211, "radian": 212, "random": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 436], "bernoulli": 213, "categor": 214, "gumbel": 215, "kei": 216, "multivariate_norm": 217, "normal": [218, 368], "randint": 219, "seed": 220, "truncated_norm": 222, "uniform": [223, 369], "remaind": 225, "repeat": 226, "right_shift": 228, "save": [231, 446], "save_gguf": 232, "save_safetensor": 233, "savez": 234, "savez_compress": 235, "set_default_devic": 236, "set_default_stream": 237, "sigmoid": [238, 400], "sign": 239, "sinh": 241, "softmax": [242, 353, 402], "sort": 243, "stack": 248, "std": 249, "stop_gradi": 250, "stream": [251, 284, 287, 448], "subtract": 252, "synchron": 255, "take": 256, "take_along_axi": 257, "tan": 258, "tanh": [259, 359, 407], "tensordot": 260, "tile": 261, "topk": 262, "trace": 263, "tri": 265, "tril": 266, "triu": 267, "value_and_grad": [268, 277], "view": 270, "vjp": 271, "vmap": 272, "where": 273, "zero": 274, "zeros_lik": 275, "nn": [276, 277, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407], "optim": [278, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434], "clip_grad_norm": 278, "util": [279, 280, 281, 282, 283, 438], "tree_flatten": 279, "tree_map": 280, "tree_map_with_path": 281, "tree_reduc": 282, "tree_unflatten": 283, "data": 286, "type": 286, "support": 286, "commun": [288, 440], "algebra": 291, "neural": 293, "network": 293, "quick": [293, 445], "start": [293, 440, 445], "The": 293, "modul": [293, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 412], "class": 293, "paramet": [293, 330], "updat": [293, 338, 425, 442], "inspect": 293, "valu": 293, "alibi": 294, "avgpool1d": 295, "avgpool2d": 296, "batchnorm": 297, "conv3d": 300, "dropout": 301, "dropout2d": 302, "dropout3d": 303, "embed": 304, "gelu": [305, 371], "glu": [306, 374], "gru": 307, "groupnorm": 308, "hardshrink": 309, "hardtanh": 310, "hardswish": [311, 377], "instancenorm": 312, "lstm": 313, "layernorm": 314, "leakyrelu": 315, "maxpool1d": 317, "maxpool2d": 318, "mish": [319, 395], "appli": 320, "apply_to_modul": 321, "children": 322, "filter_and_map": 324, "freez": 325, "leaf_modul": 326, "load_weight": 327, "named_modul": 329, "save_weight": 331, "set_dtyp": 332, "state": [333, 424], "train": [334, 336, 439, 440], "trainable_paramet": 335, "unfreez": 337, "update_modul": 339, "multiheadattent": 340, "prelu": [341, 396], "quantizedembed": 342, "quantizedlinear": 343, "rmsnorm": 344, "rnn": 345, "relu": [346, 397], "relu6": [347, 398], "selu": [349, 399], "sequenti": 350, "silu": [351, 401], "sinusoidalpositionalencod": 352, "softmin": [354, 403], "softplu": [355, 404], "softshrink": [356, 405], "softsign": 357, "step": [358, 406], "upsampl": 361, "constant": 362, "glorot_norm": 363, "glorot_uniform": 364, "he_norm": 365, "he_uniform": 366, "elu": 370, "gelu_approx": 372, "gelu_fast_approx": 373, "hard_shrink": 375, "hard_tanh": 376, "leaky_relu": 378, "log_sigmoid": 379, "log_softmax": 380, "loss": [381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 411], "binary_cross_entropi": 381, "cosine_similarity_loss": 382, "cross_entropi": 383, "gaussian_nll_loss": 384, "hinge_loss": 385, "huber_loss": 386, "kl_div_loss": 387, "l1_loss": 388, "log_cosh_loss": 389, "margin_ranking_loss": 390, "mse_loss": 391, "nll_loss": 392, "smooth_l1_loss": 393, "triplet_loss": 394, "function": [408, 411, 439, 441, 445], "initi": 409, "adadelta": 415, "adafactor": 416, "adagrad": 417, "adam": 418, "adamw": 419, "adamax": 420, "lion": 421, "apply_gradi": 422, "rmsprop": 426, "sgd": 427, "cosine_decai": 428, "exponential_decai": 429, "join_schedul": 430, "linear_schedul": 431, "step_decai": 432, "common": 433, "schedul": 435, "tree": 438, "basic": [439, 445], "speedup": 439, "debug": 439, "pure": 439, "graph": [439, 443, 445], "get": 440, "mpi": 440, "set": 440, "up": 440, "remot": 440, "host": 440, "tune": 440, "reduc": 440, "automat": 441, "differenti": 441, "vector": 441, "index": 442, "differ": 442, "numpi": [442, 444], "In": 442, "place": 442, "lazi": 443, "evalu": 443, "why": 443, "comput": 443, "onli": 443, "what": 443, "you": 443, "when": 443, "convers": 444, "other": 444, "framework": 444, "pytorch": 444, "jax": 444, "tensorflow": 444, "guid": 445, "serial": 446, "format": 446, "unifi": 447, "memori": 447, "A": 447, "simpl": 447, "specifi": 448}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Operations": [[0, "operations"], [1, "operations"], [413, "operations"]], "Custom Extensions in MLX": [[1, "custom-extensions-in-mlx"]], "Introducing the Example": [[1, "introducing-the-example"]], "Operations and Primitives": [[1, "operations-and-primitives"]], "Primitives": [[1, "primitives"]], "Using the Primitive": [[1, "using-the-primitive"]], "Implementing the Primitive": [[1, "implementing-the-primitive"]], "Implementing the CPU Back-end": [[1, "implementing-the-cpu-back-end"]], "Implementing the GPU Back-end": [[1, "implementing-the-gpu-back-end"]], "Primitive Transforms": [[1, "primitive-transforms"]], "Building and Binding": [[1, "building-and-binding"]], "Binding to Python": [[1, "binding-to-python"]], "Building with CMake": [[1, "building-with-cmake"]], "Building with setuptools": [[1, "building-with-setuptools"]], "Usage": [[1, "usage"], [6, null]], "Results": [[1, "results"]], "Scripts": [[1, "scripts"], [4, "scripts"]], "Download the code": [[1, null], [4, null]], "Metal Debugger": [[2, "metal-debugger"]], "Xcode Workflow": [[2, "xcode-workflow"]], "Linear Regression": [[3, "linear-regression"]], "LLM inference": [[4, "llm-inference"]], "Implementing the model": [[4, "implementing-the-model"]], "Attention layer": [[4, "attention-layer"]], "Encoder layer": [[4, "encoder-layer"]], "Full model": [[4, "full-model"]], "Generation": [[4, "generation"]], "Putting it all together": [[4, "putting-it-all-together"]], "Converting the weights": [[4, "converting-the-weights"]], "Weight loading and benchmarking": [[4, "weight-loading-and-benchmarking"]], "Multi-Layer Perceptron": [[5, "multi-layer-perceptron"]], "MLX": [[6, "mlx"]], "Install": [[6, null]], "Examples": [[6, null]], "Python API Reference": [[6, null]], "C++ API Reference": [[6, null]], "Further Reading": [[6, null]], "Build and Install": [[7, "build-and-install"]], "Python Installation": [[7, "python-installation"]], "Troubleshooting": [[7, "troubleshooting"], [7, "id2"]], "Build from source": [[7, "build-from-source"]], "Build Requirements": [[7, "build-requirements"]], "Python API": [[7, "python-api"]], "C++ API": [[7, "c-api"]], "Build Options": [[7, "id3"]], "Binary Size Minimization": [[7, "binary-size-minimization"]], "Metal not found": [[7, "metal-not-found"]], "x86 Shell": [[7, "x86-shell"]], "mlx.core.Device": [[8, "mlx-core-device"]], "mlx.core.Dtype": [[9, "mlx-core-dtype"]], "mlx.core.DtypeCategory": [[10, "mlx-core-dtypecategory"]], "mlx.core.abs": [[11, "mlx-core-abs"]], "mlx.core.add": [[12, "mlx-core-add"]], "mlx.core.addmm": [[13, "mlx-core-addmm"]], "mlx.core.all": [[14, "mlx-core-all"]], "mlx.core.allclose": [[15, "mlx-core-allclose"]], "mlx.core.any": [[16, "mlx-core-any"]], "mlx.core.arange": [[17, "mlx-core-arange"]], "mlx.core.arccos": [[18, "mlx-core-arccos"]], "mlx.core.arccosh": [[19, "mlx-core-arccosh"]], "mlx.core.arcsin": [[20, "mlx-core-arcsin"]], "mlx.core.arcsinh": [[21, "mlx-core-arcsinh"]], "mlx.core.arctan": [[22, "mlx-core-arctan"]], "mlx.core.arctan2": [[23, "mlx-core-arctan2"]], "mlx.core.arctanh": [[24, "mlx-core-arctanh"]], "mlx.core.argmax": [[25, "mlx-core-argmax"]], "mlx.core.argmin": [[26, "mlx-core-argmin"]], "mlx.core.argpartition": [[27, "mlx-core-argpartition"]], "mlx.core.argsort": [[28, "mlx-core-argsort"]], "mlx.core.array": [[29, "mlx-core-array"]], "mlx.core.array.T": [[30, "mlx-core-array-t"]], "mlx.core.array.abs": [[31, "mlx-core-array-abs"]], "mlx.core.array.all": [[32, "mlx-core-array-all"]], "mlx.core.array.any": [[33, "mlx-core-array-any"]], "mlx.core.array.argmax": [[34, "mlx-core-array-argmax"]], "mlx.core.array.argmin": [[35, "mlx-core-array-argmin"]], "mlx.core.array.astype": [[36, "mlx-core-array-astype"]], "mlx.core.array.at": [[37, "mlx-core-array-at"]], "mlx.core.array.cos": [[38, "mlx-core-array-cos"]], "mlx.core.array.cummax": [[39, "mlx-core-array-cummax"]], "mlx.core.array.cummin": [[40, "mlx-core-array-cummin"]], "mlx.core.array.cumprod": [[41, "mlx-core-array-cumprod"]], "mlx.core.array.cumsum": [[42, "mlx-core-array-cumsum"]], "mlx.core.array.diag": [[43, "mlx-core-array-diag"]], "mlx.core.array.diagonal": [[44, "mlx-core-array-diagonal"]], "mlx.core.array.dtype": [[45, "mlx-core-array-dtype"]], "mlx.core.array.exp": [[46, "mlx-core-array-exp"]], "mlx.core.array.flatten": [[47, "mlx-core-array-flatten"]], "mlx.core.array.item": [[48, "mlx-core-array-item"]], "mlx.core.array.itemsize": [[49, "mlx-core-array-itemsize"]], "mlx.core.array.log": [[50, "mlx-core-array-log"]], "mlx.core.array.log10": [[51, "mlx-core-array-log10"]], "mlx.core.array.log1p": [[52, "mlx-core-array-log1p"]], "mlx.core.array.log2": [[53, "mlx-core-array-log2"]], "mlx.core.array.logsumexp": [[54, "mlx-core-array-logsumexp"]], "mlx.core.array.max": [[55, "mlx-core-array-max"]], "mlx.core.array.mean": [[56, "mlx-core-array-mean"]], "mlx.core.array.min": [[57, "mlx-core-array-min"]], "mlx.core.array.moveaxis": [[58, "mlx-core-array-moveaxis"]], "mlx.core.array.nbytes": [[59, "mlx-core-array-nbytes"]], "mlx.core.array.ndim": [[60, "mlx-core-array-ndim"]], "mlx.core.array.prod": [[61, "mlx-core-array-prod"]], "mlx.core.array.reciprocal": [[62, "mlx-core-array-reciprocal"]], "mlx.core.array.reshape": [[63, "mlx-core-array-reshape"]], "mlx.core.array.round": [[64, "mlx-core-array-round"]], "mlx.core.array.rsqrt": [[65, "mlx-core-array-rsqrt"]], "mlx.core.array.shape": [[66, "mlx-core-array-shape"]], "mlx.core.array.sin": [[67, "mlx-core-array-sin"]], "mlx.core.array.size": [[68, "mlx-core-array-size"]], "mlx.core.array.split": [[69, "mlx-core-array-split"]], "mlx.core.array.sqrt": [[70, "mlx-core-array-sqrt"]], "mlx.core.array.square": [[71, "mlx-core-array-square"]], "mlx.core.array.squeeze": [[72, "mlx-core-array-squeeze"]], "mlx.core.array.sum": [[73, "mlx-core-array-sum"]], "mlx.core.array.swapaxes": [[74, "mlx-core-array-swapaxes"]], "mlx.core.array.tolist": [[75, "mlx-core-array-tolist"]], "mlx.core.array.transpose": [[76, "mlx-core-array-transpose"]], "mlx.core.array.var": [[77, "mlx-core-array-var"]], "mlx.core.array_equal": [[78, "mlx-core-array-equal"]], "mlx.core.as_strided": [[79, "mlx-core-as-strided"]], "mlx.core.atleast_1d": [[80, "mlx-core-atleast-1d"]], "mlx.core.atleast_2d": [[81, "mlx-core-atleast-2d"]], "mlx.core.atleast_3d": [[82, "mlx-core-atleast-3d"]], "mlx.core.bitwise_and": [[83, "mlx-core-bitwise-and"]], "mlx.core.bitwise_or": [[84, "mlx-core-bitwise-or"]], "mlx.core.bitwise_xor": [[85, "mlx-core-bitwise-xor"]], "mlx.core.block_masked_mm": [[86, "mlx-core-block-masked-mm"]], "mlx.core.broadcast_to": [[87, "mlx-core-broadcast-to"]], "mlx.core.ceil": [[88, "mlx-core-ceil"]], "mlx.core.clip": [[89, "mlx-core-clip"]], "mlx.core.compile": [[90, "mlx-core-compile"]], "mlx.core.concatenate": [[91, "mlx-core-concatenate"]], "mlx.core.conj": [[92, "mlx-core-conj"]], "mlx.core.conjugate": [[93, "mlx-core-conjugate"]], "mlx.core.conv1d": [[94, "mlx-core-conv1d"]], "mlx.core.conv2d": [[95, "mlx-core-conv2d"]], "mlx.core.conv_general": [[96, "mlx-core-conv-general"]], "mlx.core.convolve": [[97, "mlx-core-convolve"]], "mlx.core.cos": [[98, "mlx-core-cos"]], "mlx.core.cosh": [[99, "mlx-core-cosh"]], "mlx.core.cummax": [[100, "mlx-core-cummax"]], "mlx.core.cummin": [[101, "mlx-core-cummin"]], "mlx.core.cumprod": [[102, "mlx-core-cumprod"]], "mlx.core.cumsum": [[103, "mlx-core-cumsum"]], "mlx.core.default_device": [[104, "mlx-core-default-device"]], "mlx.core.default_stream": [[105, "mlx-core-default-stream"]], "mlx.core.degrees": [[106, "mlx-core-degrees"]], "mlx.core.dequantize": [[107, "mlx-core-dequantize"]], "mlx.core.diag": [[108, "mlx-core-diag"]], "mlx.core.diagonal": [[109, "mlx-core-diagonal"]], "mlx.core.disable_compile": [[110, "mlx-core-disable-compile"]], "mlx.core.distributed.Group": [[111, "mlx-core-distributed-group"]], "mlx.core.distributed.all_gather": [[112, "mlx-core-distributed-all-gather"]], "mlx.core.distributed.all_sum": [[113, "mlx-core-distributed-all-sum"]], "mlx.core.distributed.init": [[114, "mlx-core-distributed-init"]], "mlx.core.distributed.is_available": [[115, "mlx-core-distributed-is-available"]], "mlx.core.divide": [[116, "mlx-core-divide"]], "mlx.core.divmod": [[117, "mlx-core-divmod"]], "mlx.core.enable_compile": [[118, "mlx-core-enable-compile"]], "mlx.core.equal": [[119, "mlx-core-equal"]], "mlx.core.erf": [[120, "mlx-core-erf"]], "mlx.core.erfinv": [[121, "mlx-core-erfinv"]], "mlx.core.eval": [[122, "mlx-core-eval"]], "mlx.core.exp": [[123, "mlx-core-exp"]], "mlx.core.expand_dims": [[124, "mlx-core-expand-dims"]], "mlx.core.expm1": [[125, "mlx-core-expm1"]], "mlx.core.eye": [[126, "mlx-core-eye"]], "mlx.core.fast.layer_norm": [[127, "mlx-core-fast-layer-norm"]], "mlx.core.fast.rms_norm": [[128, "mlx-core-fast-rms-norm"]], "mlx.core.fast.rope": [[129, "mlx-core-fast-rope"]], "mlx.core.fast.scaled_dot_product_attention": [[130, "mlx-core-fast-scaled-dot-product-attention"]], "mlx.core.fft.fft": [[131, "mlx-core-fft-fft"]], "mlx.core.fft.fft2": [[132, "mlx-core-fft-fft2"]], "mlx.core.fft.fftn": [[133, "mlx-core-fft-fftn"]], "mlx.core.fft.ifft": [[134, "mlx-core-fft-ifft"]], "mlx.core.fft.ifft2": [[135, "mlx-core-fft-ifft2"]], "mlx.core.fft.ifftn": [[136, "mlx-core-fft-ifftn"]], "mlx.core.fft.irfft": [[137, "mlx-core-fft-irfft"]], "mlx.core.fft.irfft2": [[138, "mlx-core-fft-irfft2"]], "mlx.core.fft.irfftn": [[139, "mlx-core-fft-irfftn"]], "mlx.core.fft.rfft": [[140, "mlx-core-fft-rfft"]], "mlx.core.fft.rfft2": [[141, "mlx-core-fft-rfft2"]], "mlx.core.fft.rfftn": [[142, "mlx-core-fft-rfftn"]], "mlx.core.flatten": [[143, "mlx-core-flatten"]], "mlx.core.floor": [[144, "mlx-core-floor"]], "mlx.core.floor_divide": [[145, "mlx-core-floor-divide"]], "mlx.core.full": [[146, "mlx-core-full"]], "mlx.core.gather_mm": [[147, "mlx-core-gather-mm"]], "mlx.core.gather_qmm": [[148, "mlx-core-gather-qmm"]], "mlx.core.grad": [[149, "mlx-core-grad"]], "mlx.core.greater": [[150, "mlx-core-greater"]], "mlx.core.greater_equal": [[151, "mlx-core-greater-equal"]], "mlx.core.identity": [[152, "mlx-core-identity"]], "mlx.core.inner": [[153, "mlx-core-inner"]], "mlx.core.isclose": [[154, "mlx-core-isclose"]], "mlx.core.isinf": [[155, "mlx-core-isinf"]], "mlx.core.isnan": [[156, "mlx-core-isnan"]], "mlx.core.isneginf": [[157, "mlx-core-isneginf"]], "mlx.core.isposinf": [[158, "mlx-core-isposinf"]], "mlx.core.issubdtype": [[159, "mlx-core-issubdtype"]], "mlx.core.jvp": [[160, "mlx-core-jvp"]], "mlx.core.left_shift": [[161, "mlx-core-left-shift"]], "mlx.core.less": [[162, "mlx-core-less"]], "mlx.core.less_equal": [[163, "mlx-core-less-equal"]], "mlx.core.linalg.cholesky": [[164, "mlx-core-linalg-cholesky"]], "mlx.core.linalg.inv": [[165, "mlx-core-linalg-inv"]], "mlx.core.linalg.norm": [[166, "mlx-core-linalg-norm"]], "mlx.core.linalg.qr": [[167, "mlx-core-linalg-qr"]], "mlx.core.linalg.svd": [[168, "mlx-core-linalg-svd"]], "mlx.core.linspace": [[169, "mlx-core-linspace"]], "mlx.core.load": [[170, "mlx-core-load"]], "mlx.core.log": [[171, "mlx-core-log"]], "mlx.core.log10": [[172, "mlx-core-log10"]], "mlx.core.log1p": [[173, "mlx-core-log1p"]], "mlx.core.log2": [[174, "mlx-core-log2"]], "mlx.core.logaddexp": [[175, "mlx-core-logaddexp"]], "mlx.core.logical_and": [[176, "mlx-core-logical-and"]], "mlx.core.logical_not": [[177, "mlx-core-logical-not"]], "mlx.core.logical_or": [[178, "mlx-core-logical-or"]], "mlx.core.logsumexp": [[179, "mlx-core-logsumexp"]], "mlx.core.matmul": [[180, "mlx-core-matmul"]], "mlx.core.max": [[181, "mlx-core-max"]], "mlx.core.maximum": [[182, "mlx-core-maximum"]], "mlx.core.mean": [[183, "mlx-core-mean"]], "mlx.core.meshgrid": [[184, "mlx-core-meshgrid"]], "mlx.core.metal.clear_cache": [[185, "mlx-core-metal-clear-cache"]], "mlx.core.metal.device_info": [[186, "mlx-core-metal-device-info"]], "mlx.core.metal.get_active_memory": [[187, "mlx-core-metal-get-active-memory"]], "mlx.core.metal.get_cache_memory": [[188, "mlx-core-metal-get-cache-memory"]], "mlx.core.metal.get_peak_memory": [[189, "mlx-core-metal-get-peak-memory"]], "mlx.core.metal.is_available": [[190, "mlx-core-metal-is-available"]], "mlx.core.metal.reset_peak_memory": [[191, "mlx-core-metal-reset-peak-memory"]], "mlx.core.metal.set_cache_limit": [[192, "mlx-core-metal-set-cache-limit"]], "mlx.core.metal.set_memory_limit": [[193, "mlx-core-metal-set-memory-limit"]], "mlx.core.metal.start_capture": [[194, "mlx-core-metal-start-capture"]], "mlx.core.metal.stop_capture": [[195, "mlx-core-metal-stop-capture"]], "mlx.core.min": [[196, "mlx-core-min"]], "mlx.core.minimum": [[197, "mlx-core-minimum"]], "mlx.core.moveaxis": [[198, "mlx-core-moveaxis"]], "mlx.core.multiply": [[199, "mlx-core-multiply"]], "mlx.core.negative": [[200, "mlx-core-negative"]], "mlx.core.new_stream": [[201, "mlx-core-new-stream"]], "mlx.core.not_equal": [[202, "mlx-core-not-equal"]], "mlx.core.ones": [[203, "mlx-core-ones"]], "mlx.core.ones_like": [[204, "mlx-core-ones-like"]], "mlx.core.outer": [[205, "mlx-core-outer"]], "mlx.core.pad": [[206, "mlx-core-pad"]], "mlx.core.partition": [[207, "mlx-core-partition"]], "mlx.core.power": [[208, "mlx-core-power"]], "mlx.core.prod": [[209, "mlx-core-prod"]], "mlx.core.quantize": [[210, "mlx-core-quantize"]], "mlx.core.quantized_matmul": [[211, "mlx-core-quantized-matmul"]], "mlx.core.radians": [[212, "mlx-core-radians"]], "mlx.core.random.bernoulli": [[213, "mlx-core-random-bernoulli"]], "mlx.core.random.categorical": [[214, "mlx-core-random-categorical"]], "mlx.core.random.gumbel": [[215, "mlx-core-random-gumbel"]], "mlx.core.random.key": [[216, "mlx-core-random-key"]], "mlx.core.random.multivariate_normal": [[217, "mlx-core-random-multivariate-normal"]], "mlx.core.random.normal": [[218, "mlx-core-random-normal"]], "mlx.core.random.randint": [[219, "mlx-core-random-randint"]], "mlx.core.random.seed": [[220, "mlx-core-random-seed"]], "mlx.core.random.split": [[221, "mlx-core-random-split"]], "mlx.core.random.truncated_normal": [[222, "mlx-core-random-truncated-normal"]], "mlx.core.random.uniform": [[223, "mlx-core-random-uniform"]], "mlx.core.reciprocal": [[224, "mlx-core-reciprocal"]], "mlx.core.remainder": [[225, "mlx-core-remainder"]], "mlx.core.repeat": [[226, "mlx-core-repeat"]], "mlx.core.reshape": [[227, "mlx-core-reshape"]], "mlx.core.right_shift": [[228, "mlx-core-right-shift"]], "mlx.core.round": [[229, "mlx-core-round"]], "mlx.core.rsqrt": [[230, "mlx-core-rsqrt"]], "mlx.core.save": [[231, "mlx-core-save"]], "mlx.core.save_gguf": [[232, "mlx-core-save-gguf"]], "mlx.core.save_safetensors": [[233, "mlx-core-save-safetensors"]], "mlx.core.savez": [[234, "mlx-core-savez"]], "mlx.core.savez_compressed": [[235, "mlx-core-savez-compressed"]], "mlx.core.set_default_device": [[236, "mlx-core-set-default-device"]], "mlx.core.set_default_stream": [[237, "mlx-core-set-default-stream"]], "mlx.core.sigmoid": [[238, "mlx-core-sigmoid"]], "mlx.core.sign": [[239, "mlx-core-sign"]], "mlx.core.sin": [[240, "mlx-core-sin"]], "mlx.core.sinh": [[241, "mlx-core-sinh"]], "mlx.core.softmax": [[242, "mlx-core-softmax"]], "mlx.core.sort": [[243, "mlx-core-sort"]], "mlx.core.split": [[244, "mlx-core-split"]], "mlx.core.sqrt": [[245, "mlx-core-sqrt"]], "mlx.core.square": [[246, "mlx-core-square"]], "mlx.core.squeeze": [[247, "mlx-core-squeeze"]], "mlx.core.stack": [[248, "mlx-core-stack"]], "mlx.core.std": [[249, "mlx-core-std"]], "mlx.core.stop_gradient": [[250, "mlx-core-stop-gradient"]], "mlx.core.stream": [[251, "mlx-core-stream"]], "mlx.core.subtract": [[252, "mlx-core-subtract"]], "mlx.core.sum": [[253, "mlx-core-sum"]], "mlx.core.swapaxes": [[254, "mlx-core-swapaxes"]], "mlx.core.synchronize": [[255, "mlx-core-synchronize"]], "mlx.core.take": [[256, "mlx-core-take"]], "mlx.core.take_along_axis": [[257, "mlx-core-take-along-axis"]], "mlx.core.tan": [[258, "mlx-core-tan"]], "mlx.core.tanh": [[259, "mlx-core-tanh"]], "mlx.core.tensordot": [[260, "mlx-core-tensordot"]], "mlx.core.tile": [[261, "mlx-core-tile"]], "mlx.core.topk": [[262, "mlx-core-topk"]], "mlx.core.trace": [[263, "mlx-core-trace"]], "mlx.core.transpose": [[264, "mlx-core-transpose"]], "mlx.core.tri": [[265, "mlx-core-tri"]], "mlx.core.tril": [[266, "mlx-core-tril"]], "mlx.core.triu": [[267, "mlx-core-triu"]], "mlx.core.value_and_grad": [[268, "mlx-core-value-and-grad"]], "mlx.core.var": [[269, "mlx-core-var"]], "mlx.core.view": [[270, "mlx-core-view"]], "mlx.core.vjp": [[271, "mlx-core-vjp"]], "mlx.core.vmap": [[272, "mlx-core-vmap"]], "mlx.core.where": [[273, "mlx-core-where"]], "mlx.core.zeros": [[274, "mlx-core-zeros"]], "mlx.core.zeros_like": [[275, "mlx-core-zeros-like"]], "mlx.nn.quantize": [[276, "mlx-nn-quantize"]], "mlx.nn.value_and_grad": [[277, "mlx-nn-value-and-grad"]], "mlx.optimizers.clip_grad_norm": [[278, "mlx-optimizers-clip-grad-norm"]], "mlx.utils.tree_flatten": [[279, "mlx-utils-tree-flatten"]], "mlx.utils.tree_map": [[280, "mlx-utils-tree-map"]], "mlx.utils.tree_map_with_path": [[281, "mlx-utils-tree-map-with-path"]], "mlx.utils.tree_reduce": [[282, "mlx-utils-tree-reduce"]], "mlx.utils.tree_unflatten": [[283, "mlx-utils-tree-unflatten"]], "mlx.core.Stream": [[284, "mlx-core-stream"]], "Array": [[285, "array"]], "Data Types": [[286, "data-types"]], "Supported Data Types": [[286, "id2"]], "Devices and Streams": [[287, "devices-and-streams"]], "Distributed Communication": [[288, "distributed-communication"], [440, "distributed-communication"]], "Fast": [[289, "fast"]], "FFT": [[290, "fft"]], "Linear Algebra": [[291, "linear-algebra"]], "Metal": [[292, "metal"]], "Neural Networks": [[293, "neural-networks"]], "Quick Start with Neural Networks": [[293, "quick-start-with-neural-networks"]], "The Module Class": [[293, "the-module-class"]], "Parameters": [[293, "parameters"]], "Updating the Parameters": [[293, "updating-the-parameters"]], "Inspecting Modules": [[293, "inspecting-modules"]], "Value and Grad": [[293, "value-and-grad"]], "mlx.nn.ALiBi": [[294, "mlx-nn-alibi"]], "mlx.nn.AvgPool1d": [[295, "mlx-nn-avgpool1d"]], "mlx.nn.AvgPool2d": [[296, "mlx-nn-avgpool2d"]], "mlx.nn.BatchNorm": [[297, "mlx-nn-batchnorm"]], "mlx.nn.Conv1d": [[298, "mlx-nn-conv1d"]], "mlx.nn.Conv2d": [[299, "mlx-nn-conv2d"]], "mlx.nn.Conv3d": [[300, "mlx-nn-conv3d"]], "mlx.nn.Dropout": [[301, "mlx-nn-dropout"]], "mlx.nn.Dropout2d": [[302, "mlx-nn-dropout2d"]], "mlx.nn.Dropout3d": [[303, "mlx-nn-dropout3d"]], "mlx.nn.Embedding": [[304, "mlx-nn-embedding"]], "mlx.nn.GELU": [[305, "mlx-nn-gelu"]], "mlx.nn.GLU": [[306, "mlx-nn-glu"]], "mlx.nn.GRU": [[307, "mlx-nn-gru"]], "mlx.nn.GroupNorm": [[308, "mlx-nn-groupnorm"]], "mlx.nn.HardShrink": [[309, "mlx-nn-hardshrink"]], "mlx.nn.HardTanh": [[310, "mlx-nn-hardtanh"]], "mlx.nn.Hardswish": [[311, "mlx-nn-hardswish"]], "mlx.nn.InstanceNorm": [[312, "mlx-nn-instancenorm"]], "mlx.nn.LSTM": [[313, "mlx-nn-lstm"]], "mlx.nn.LayerNorm": [[314, "mlx-nn-layernorm"]], "mlx.nn.LeakyReLU": [[315, "mlx-nn-leakyrelu"]], "mlx.nn.Linear": [[316, "mlx-nn-linear"]], "mlx.nn.MaxPool1d": [[317, "mlx-nn-maxpool1d"]], "mlx.nn.MaxPool2d": [[318, "mlx-nn-maxpool2d"]], "mlx.nn.Mish": [[319, "mlx-nn-mish"]], "mlx.nn.Module.apply": [[320, "mlx-nn-module-apply"]], "mlx.nn.Module.apply_to_modules": [[321, "mlx-nn-module-apply-to-modules"]], "mlx.nn.Module.children": [[322, "mlx-nn-module-children"]], "mlx.nn.Module.eval": [[323, "mlx-nn-module-eval"]], "mlx.nn.Module.filter_and_map": [[324, "mlx-nn-module-filter-and-map"]], "mlx.nn.Module.freeze": [[325, "mlx-nn-module-freeze"]], "mlx.nn.Module.leaf_modules": [[326, "mlx-nn-module-leaf-modules"]], "mlx.nn.Module.load_weights": [[327, "mlx-nn-module-load-weights"]], "mlx.nn.Module.modules": [[328, "mlx-nn-module-modules"]], "mlx.nn.Module.named_modules": [[329, "mlx-nn-module-named-modules"]], "mlx.nn.Module.parameters": [[330, "mlx-nn-module-parameters"]], "mlx.nn.Module.save_weights": [[331, "mlx-nn-module-save-weights"]], "mlx.nn.Module.set_dtype": [[332, "mlx-nn-module-set-dtype"]], "mlx.nn.Module.state": [[333, "mlx-nn-module-state"]], "mlx.nn.Module.train": [[334, "mlx-nn-module-train"]], "mlx.nn.Module.trainable_parameters": [[335, "mlx-nn-module-trainable-parameters"]], "mlx.nn.Module.training": [[336, "mlx-nn-module-training"]], "mlx.nn.Module.unfreeze": [[337, "mlx-nn-module-unfreeze"]], "mlx.nn.Module.update": [[338, "mlx-nn-module-update"]], "mlx.nn.Module.update_modules": [[339, "mlx-nn-module-update-modules"]], "mlx.nn.MultiHeadAttention": [[340, "mlx-nn-multiheadattention"]], "mlx.nn.PReLU": [[341, "mlx-nn-prelu"]], "mlx.nn.QuantizedEmbedding": [[342, "mlx-nn-quantizedembedding"]], "mlx.nn.QuantizedLinear": [[343, "mlx-nn-quantizedlinear"]], "mlx.nn.RMSNorm": [[344, "mlx-nn-rmsnorm"]], "mlx.nn.RNN": [[345, "mlx-nn-rnn"]], "mlx.nn.ReLU": [[346, "mlx-nn-relu"]], "mlx.nn.ReLU6": [[347, "mlx-nn-relu6"]], "mlx.nn.RoPE": [[348, "mlx-nn-rope"]], "mlx.nn.SELU": [[349, "mlx-nn-selu"]], "mlx.nn.Sequential": [[350, "mlx-nn-sequential"]], "mlx.nn.SiLU": [[351, "mlx-nn-silu"]], "mlx.nn.SinusoidalPositionalEncoding": [[352, "mlx-nn-sinusoidalpositionalencoding"]], "mlx.nn.Softmax": [[353, "mlx-nn-softmax"]], "mlx.nn.Softmin": [[354, "mlx-nn-softmin"]], "mlx.nn.Softplus": [[355, "mlx-nn-softplus"]], "mlx.nn.Softshrink": [[356, "mlx-nn-softshrink"]], "mlx.nn.Softsign": [[357, "mlx-nn-softsign"]], "mlx.nn.Step": [[358, "mlx-nn-step"]], "mlx.nn.Tanh": [[359, "mlx-nn-tanh"]], "mlx.nn.Transformer": [[360, "mlx-nn-transformer"]], "mlx.nn.Upsample": [[361, "mlx-nn-upsample"]], "mlx.nn.init.constant": [[362, "mlx-nn-init-constant"]], "mlx.nn.init.glorot_normal": [[363, "mlx-nn-init-glorot-normal"]], "mlx.nn.init.glorot_uniform": [[364, "mlx-nn-init-glorot-uniform"]], "mlx.nn.init.he_normal": [[365, "mlx-nn-init-he-normal"]], "mlx.nn.init.he_uniform": [[366, "mlx-nn-init-he-uniform"]], "mlx.nn.init.identity": [[367, "mlx-nn-init-identity"]], "mlx.nn.init.normal": [[368, "mlx-nn-init-normal"]], "mlx.nn.init.uniform": [[369, "mlx-nn-init-uniform"]], "mlx.nn.elu": [[370, "mlx-nn-elu"]], "mlx.nn.gelu": [[371, "mlx-nn-gelu"]], "mlx.nn.gelu_approx": [[372, "mlx-nn-gelu-approx"]], "mlx.nn.gelu_fast_approx": [[373, "mlx-nn-gelu-fast-approx"]], "mlx.nn.glu": [[374, "mlx-nn-glu"]], "mlx.nn.hard_shrink": [[375, "mlx-nn-hard-shrink"]], "mlx.nn.hard_tanh": [[376, "mlx-nn-hard-tanh"]], "mlx.nn.hardswish": [[377, "mlx-nn-hardswish"]], "mlx.nn.leaky_relu": [[378, "mlx-nn-leaky-relu"]], "mlx.nn.log_sigmoid": [[379, "mlx-nn-log-sigmoid"]], "mlx.nn.log_softmax": [[380, "mlx-nn-log-softmax"]], "mlx.nn.losses.binary_cross_entropy": [[381, "mlx-nn-losses-binary-cross-entropy"]], "mlx.nn.losses.cosine_similarity_loss": [[382, "mlx-nn-losses-cosine-similarity-loss"]], "mlx.nn.losses.cross_entropy": [[383, "mlx-nn-losses-cross-entropy"]], "mlx.nn.losses.gaussian_nll_loss": [[384, "mlx-nn-losses-gaussian-nll-loss"]], "mlx.nn.losses.hinge_loss": [[385, "mlx-nn-losses-hinge-loss"]], "mlx.nn.losses.huber_loss": [[386, "mlx-nn-losses-huber-loss"]], "mlx.nn.losses.kl_div_loss": [[387, "mlx-nn-losses-kl-div-loss"]], "mlx.nn.losses.l1_loss": [[388, "mlx-nn-losses-l1-loss"]], "mlx.nn.losses.log_cosh_loss": [[389, "mlx-nn-losses-log-cosh-loss"]], "mlx.nn.losses.margin_ranking_loss": [[390, "mlx-nn-losses-margin-ranking-loss"]], "mlx.nn.losses.mse_loss": [[391, "mlx-nn-losses-mse-loss"]], "mlx.nn.losses.nll_loss": [[392, "mlx-nn-losses-nll-loss"]], "mlx.nn.losses.smooth_l1_loss": [[393, "mlx-nn-losses-smooth-l1-loss"]], "mlx.nn.losses.triplet_loss": [[394, "mlx-nn-losses-triplet-loss"]], "mlx.nn.mish": [[395, "mlx-nn-mish"]], "mlx.nn.prelu": [[396, "mlx-nn-prelu"]], "mlx.nn.relu": [[397, "mlx-nn-relu"]], "mlx.nn.relu6": [[398, "mlx-nn-relu6"]], "mlx.nn.selu": [[399, "mlx-nn-selu"]], "mlx.nn.sigmoid": [[400, "mlx-nn-sigmoid"]], "mlx.nn.silu": [[401, "mlx-nn-silu"]], "mlx.nn.softmax": [[402, "mlx-nn-softmax"]], "mlx.nn.softmin": [[403, "mlx-nn-softmin"]], "mlx.nn.softplus": [[404, "mlx-nn-softplus"]], "mlx.nn.softshrink": [[405, "mlx-nn-softshrink"]], "mlx.nn.step": [[406, "mlx-nn-step"]], "mlx.nn.tanh": [[407, "mlx-nn-tanh"]], "Functions": [[408, "functions"]], "Initializers": [[409, "initializers"]], "Layers": [[410, "layers"]], "Loss Functions": [[411, "loss-functions"]], "Module": [[412, "module"]], "Optimizers": [[414, "optimizers"]], "mlx.optimizers.AdaDelta": [[415, "mlx-optimizers-adadelta"]], "mlx.optimizers.Adafactor": [[416, "mlx-optimizers-adafactor"]], "mlx.optimizers.Adagrad": [[417, "mlx-optimizers-adagrad"]], "mlx.optimizers.Adam": [[418, "mlx-optimizers-adam"]], "mlx.optimizers.AdamW": [[419, "mlx-optimizers-adamw"]], "mlx.optimizers.Adamax": [[420, "mlx-optimizers-adamax"]], "mlx.optimizers.Lion": [[421, "mlx-optimizers-lion"]], "mlx.optimizers.Optimizer.apply_gradients": [[422, "mlx-optimizers-optimizer-apply-gradients"]], "mlx.optimizers.Optimizer.init": [[423, "mlx-optimizers-optimizer-init"]], "mlx.optimizers.Optimizer.state": [[424, "mlx-optimizers-optimizer-state"]], "mlx.optimizers.Optimizer.update": [[425, "mlx-optimizers-optimizer-update"]], "mlx.optimizers.RMSprop": [[426, "mlx-optimizers-rmsprop"]], "mlx.optimizers.SGD": [[427, "mlx-optimizers-sgd"]], "mlx.optimizers.cosine_decay": [[428, "mlx-optimizers-cosine-decay"]], "mlx.optimizers.exponential_decay": [[429, "mlx-optimizers-exponential-decay"]], "mlx.optimizers.join_schedules": [[430, "mlx-optimizers-join-schedules"]], "mlx.optimizers.linear_schedule": [[431, "mlx-optimizers-linear-schedule"]], "mlx.optimizers.step_decay": [[432, "mlx-optimizers-step-decay"]], "Common Optimizers": [[433, "common-optimizers"]], "Optimizer": [[434, "optimizer"]], "Schedulers": [[435, "schedulers"]], "Random": [[436, "random"]], "Transforms": [[437, "transforms"]], "Tree Utils": [[438, "tree-utils"]], "Compilation": [[439, "compilation"]], "Basics of Compile": [[439, "basics-of-compile"]], "Example Speedup": [[439, "example-speedup"]], "Debugging": [[439, "debugging"]], "Pure Functions": [[439, "pure-functions"]], "Compiling Training Graphs": [[439, "compiling-training-graphs"]], "Transformations with Compile": [[439, "transformations-with-compile"]], "Getting Started": [[440, "getting-started"]], "Installing MPI": [[440, "installing-mpi"]], "Setting up Remote Hosts": [[440, "setting-up-remote-hosts"]], "Training Example": [[440, "training-example"]], "Tuning All Reduce": [[440, "tuning-all-reduce"]], "Function Transforms": [[441, "function-transforms"]], "Automatic Differentiation": [[441, "automatic-differentiation"]], "Automatic Vectorization": [[441, "automatic-vectorization"]], "Indexing Arrays": [[442, "indexing-arrays"]], "Differences from NumPy": [[442, "differences-from-numpy"]], "In Place Updates": [[442, "in-place-updates"]], "Lazy Evaluation": [[443, "lazy-evaluation"]], "Why Lazy Evaluation": [[443, "why-lazy-evaluation"]], "Transforming Compute Graphs": [[443, "transforming-compute-graphs"]], "Only Compute What You Use": [[443, "only-compute-what-you-use"]], "When to Evaluate": [[443, "when-to-evaluate"]], "Conversion to NumPy and Other Frameworks": [[444, "conversion-to-numpy-and-other-frameworks"]], "PyTorch": [[444, "pytorch"]], "JAX": [[444, "jax"]], "TensorFlow": [[444, "tensorflow"]], "Quick Start Guide": [[445, "quick-start-guide"]], "Basics": [[445, "basics"]], "Function and Graph Transformations": [[445, "function-and-graph-transformations"]], "Saving and Loading Arrays": [[446, "saving-and-loading-arrays"]], "Serialization Formats": [[446, "id1"]], "Unified Memory": [[447, "unified-memory"]], "A Simple Example": [[447, "a-simple-example"]], "Using Streams": [[448, "using-streams"]], "Specifying the Stream": [[448, "specifying-the-stream"]]}, "indexentries": {"abs (c++ function)": [[0, "_CPPv43absRK5array14StreamOrDevice"]], "add (c++ function)": [[0, "_CPPv43addRK5arrayRK5array14StreamOrDevice"]], "addmm (c++ function)": [[0, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice"]], "all (c++ function)": [[0, "_CPPv43allRK5array14StreamOrDevice"], [0, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43allRK5arrayb14StreamOrDevice"], [0, "_CPPv43allRK5arrayib14StreamOrDevice"]], "allclose (c++ function)": [[0, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice"]], "any (c++ function)": [[0, "_CPPv43anyRK5array14StreamOrDevice"], [0, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43anyRK5arrayb14StreamOrDevice"], [0, "_CPPv43anyRK5arrayib14StreamOrDevice"]], "arange (c++ function)": [[0, "_CPPv46aranged14StreamOrDevice"], [0, "_CPPv46aranged5Dtype14StreamOrDevice"], [0, "_CPPv46arangedd14StreamOrDevice"], [0, "_CPPv46arangedd5Dtype14StreamOrDevice"], [0, "_CPPv46arangeddd14StreamOrDevice"], [0, "_CPPv46arangeddd5Dtype14StreamOrDevice"], [0, "_CPPv46arangei14StreamOrDevice"], [0, "_CPPv46arangeii14StreamOrDevice"], [0, "_CPPv46arangeiii14StreamOrDevice"]], "arccos (c++ function)": [[0, "_CPPv46arccosRK5array14StreamOrDevice"]], "arccosh (c++ function)": [[0, "_CPPv47arccoshRK5array14StreamOrDevice"]], "arcsin (c++ function)": [[0, "_CPPv46arcsinRK5array14StreamOrDevice"]], "arcsinh (c++ function)": [[0, "_CPPv47arcsinhRK5array14StreamOrDevice"]], "arctan (c++ function)": [[0, "_CPPv46arctanRK5array14StreamOrDevice"]], "arctan2 (c++ function)": [[0, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice"]], "arctanh (c++ function)": [[0, "_CPPv47arctanhRK5array14StreamOrDevice"]], "argmax (c++ function)": [[0, "_CPPv46argmaxRK5array14StreamOrDevice"], [0, "_CPPv46argmaxRK5arrayb14StreamOrDevice"], [0, "_CPPv46argmaxRK5arrayib14StreamOrDevice"]], "argmin (c++ function)": [[0, "_CPPv46argminRK5array14StreamOrDevice"], [0, "_CPPv46argminRK5arrayb14StreamOrDevice"], [0, "_CPPv46argminRK5arrayib14StreamOrDevice"]], "argpartition (c++ function)": [[0, "_CPPv412argpartitionRK5arrayi14StreamOrDevice"], [0, "_CPPv412argpartitionRK5arrayii14StreamOrDevice"]], "argsort (c++ function)": [[0, "_CPPv47argsortRK5array14StreamOrDevice"], [0, "_CPPv47argsortRK5arrayi14StreamOrDevice"]], "array_equal (c++ function)": [[0, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice"], [0, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice"]], "as_strided (c++ function)": [[0, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice"]], "astype (c++ function)": [[0, "_CPPv46astype5array5Dtype14StreamOrDevice"]], "atleast_1d (c++ function)": [[0, "_CPPv410atleast_1dRK5array14StreamOrDevice"], [0, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice"]], "atleast_2d (c++ function)": [[0, "_CPPv410atleast_2dRK5array14StreamOrDevice"], [0, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice"]], "atleast_3d (c++ function)": [[0, "_CPPv410atleast_3dRK5array14StreamOrDevice"], [0, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice"]], "bitwise_and (c++ function)": [[0, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice"]], "bitwise_or (c++ function)": [[0, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice"]], "bitwise_xor (c++ function)": [[0, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice"]], "block_masked_mm (c++ function)": [[0, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice"]], "broadcast_arrays (c++ function)": [[0, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice"]], "broadcast_to (c++ function)": [[0, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "ceil (c++ function)": [[0, "_CPPv44ceilRK5array14StreamOrDevice"]], "clip (c++ function)": [[0, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice"]], "concatenate (c++ function)": [[0, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice"], [0, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice"]], "conjugate (c++ function)": [[0, "_CPPv49conjugateRK5array14StreamOrDevice"]], "conv1d (c++ function)": [[0, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice"]], "conv2d (c++ function)": [[0, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice"]], "conv3d (c++ function)": [[0, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice"]], "conv_general (c++ function)": [[0, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice"], [0, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice"]], "copy (c++ function)": [[0, "_CPPv44copy5array14StreamOrDevice"]], "cos (c++ function)": [[0, "_CPPv43cosRK5array14StreamOrDevice"]], "cosh (c++ function)": [[0, "_CPPv44coshRK5array14StreamOrDevice"]], "cummax (c++ function)": [[0, "_CPPv46cummaxRK5arrayibb14StreamOrDevice"]], "cummin (c++ function)": [[0, "_CPPv46cumminRK5arrayibb14StreamOrDevice"]], "cumprod (c++ function)": [[0, "_CPPv47cumprodRK5arrayibb14StreamOrDevice"]], "cumsum (c++ function)": [[0, "_CPPv46cumsumRK5arrayibb14StreamOrDevice"]], "degrees (c++ function)": [[0, "_CPPv47degreesRK5array14StreamOrDevice"]], "depends (c++ function)": [[0, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE"]], "dequantize (c++ function)": [[0, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice"]], "diag (c++ function)": [[0, "_CPPv44diagRK5arrayi14StreamOrDevice"]], "diagonal (c++ function)": [[0, "_CPPv48diagonalRK5arrayiii14StreamOrDevice"]], "divide (c++ function)": [[0, "_CPPv46divideRK5arrayRK5array14StreamOrDevice"]], "divmod (c++ function)": [[0, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice"]], "equal (c++ function)": [[0, "_CPPv45equalRK5arrayRK5array14StreamOrDevice"]], "erf (c++ function)": [[0, "_CPPv43erfRK5array14StreamOrDevice"]], "erfinv (c++ function)": [[0, "_CPPv46erfinvRK5array14StreamOrDevice"]], "exp (c++ function)": [[0, "_CPPv43expRK5array14StreamOrDevice"]], "expand_dims (c++ function)": [[0, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice"]], "expm1 (c++ function)": [[0, "_CPPv45expm1RK5array14StreamOrDevice"]], "eye (c++ function)": [[0, "_CPPv43eyei14StreamOrDevice"], [0, "_CPPv43eyei5Dtype14StreamOrDevice"], [0, "_CPPv43eyeii14StreamOrDevice"], [0, "_CPPv43eyeiii14StreamOrDevice"], [0, "_CPPv43eyeiii5Dtype14StreamOrDevice"]], "flatten (c++ function)": [[0, "_CPPv47flattenRK5array14StreamOrDevice"], [0, "_CPPv47flattenRK5arrayii14StreamOrDevice"]], "floor (c++ function)": [[0, "_CPPv45floorRK5array14StreamOrDevice"]], "floor_divide (c++ function)": [[0, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice"]], "full (c++ function)": [[0, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice"], [0, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice"], [0, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice"], [0, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice"]], "gather (c++ function)": [[0, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice"]], "gather_mm (c++ function)": [[0, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice"]], "gather_qmm (c++ function)": [[0, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice"]], "greater (c++ function)": [[0, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice"]], "greater_equal (c++ function)": [[0, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice"]], "identity (c++ function)": [[0, "_CPPv48identityi14StreamOrDevice"], [0, "_CPPv48identityi5Dtype14StreamOrDevice"]], "inner (c++ function)": [[0, "_CPPv45innerRK5arrayRK5array14StreamOrDevice"]], "isclose (c++ function)": [[0, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice"]], "isinf (c++ function)": [[0, "_CPPv45isinfRK5array14StreamOrDevice"]], "isnan (c++ function)": [[0, "_CPPv45isnanRK5array14StreamOrDevice"]], "isneginf (c++ function)": [[0, "_CPPv48isneginfRK5array14StreamOrDevice"]], "isposinf (c++ function)": [[0, "_CPPv48isposinfRK5array14StreamOrDevice"]], "left_shift (c++ function)": [[0, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice"]], "less (c++ function)": [[0, "_CPPv44lessRK5arrayRK5array14StreamOrDevice"]], "less_equal (c++ function)": [[0, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice"]], "linspace (c++ function)": [[0, "_CPPv48linspaceddi5Dtype14StreamOrDevice"]], "log (c++ function)": [[0, "_CPPv43logRK5array14StreamOrDevice"]], "log10 (c++ function)": [[0, "_CPPv45log10RK5array14StreamOrDevice"]], "log1p (c++ function)": [[0, "_CPPv45log1pRK5array14StreamOrDevice"]], "log2 (c++ function)": [[0, "_CPPv44log2RK5array14StreamOrDevice"]], "logaddexp (c++ function)": [[0, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice"]], "logical_and (c++ function)": [[0, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice"]], "logical_not (c++ function)": [[0, "_CPPv411logical_notRK5array14StreamOrDevice"]], "logical_or (c++ function)": [[0, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice"]], "logsumexp (c++ function)": [[0, "_CPPv49logsumexpRK5array14StreamOrDevice"], [0, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv49logsumexpRK5arrayb14StreamOrDevice"], [0, "_CPPv49logsumexpRK5arrayib14StreamOrDevice"]], "matmul (c++ function)": [[0, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice"]], "max (c++ function)": [[0, "_CPPv43maxRK5array14StreamOrDevice"], [0, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43maxRK5arrayb14StreamOrDevice"], [0, "_CPPv43maxRK5arrayib14StreamOrDevice"]], "maximum (c++ function)": [[0, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice"]], "mean (c++ function)": [[0, "_CPPv44meanRK5array14StreamOrDevice"], [0, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv44meanRK5arrayb14StreamOrDevice"], [0, "_CPPv44meanRK5arrayib14StreamOrDevice"]], "meshgrid (c++ function)": [[0, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice"]], "min (c++ function)": [[0, "_CPPv43minRK5array14StreamOrDevice"], [0, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43minRK5arrayb14StreamOrDevice"], [0, "_CPPv43minRK5arrayib14StreamOrDevice"]], "minimum (c++ function)": [[0, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice"]], "moveaxis (c++ function)": [[0, "_CPPv48moveaxisRK5arrayii14StreamOrDevice"]], "multiply (c++ function)": [[0, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice"]], "negative (c++ function)": [[0, "_CPPv48negativeRK5array14StreamOrDevice"]], "not_equal (c++ function)": [[0, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice"]], "number_of_elements (c++ function)": [[0, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice"]], "ones (c++ function)": [[0, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice"]], "ones_like (c++ function)": [[0, "_CPPv49ones_likeRK5array14StreamOrDevice"]], "operator!= (c++ function)": [[0, "_CPPv4I0Ene5array1TRK5array"], [0, "_CPPv4I0Ene5arrayRK5array1T"], [0, "_CPPv4neRK5arrayRK5array"]], "operator% (c++ function)": [[0, "_CPPv4I0Erm5array1TRK5array"], [0, "_CPPv4I0Erm5arrayRK5array1T"], [0, "_CPPv4rmRK5arrayRK5array"]], "operator& (c++ function)": [[0, "_CPPv4anRK5arrayRK5array"]], "operator&& (c++ function)": [[0, "_CPPv4aaRK5arrayRK5array"]], "operator* (c++ function)": [[0, "_CPPv4I0Eml5array1TRK5array"], [0, "_CPPv4I0Eml5arrayRK5array1T"], [0, "_CPPv4mlRK5arrayRK5array"]], "operator+ (c++ function)": [[0, "_CPPv4I0Epl5array1TRK5array"], [0, "_CPPv4I0Epl5arrayRK5array1T"], [0, "_CPPv4plRK5arrayRK5array"]], "operator- (c++ function)": [[0, "_CPPv4I0Emi5array1TRK5array"], [0, "_CPPv4I0Emi5arrayRK5array1T"], [0, "_CPPv4miRK5array"], [0, "_CPPv4miRK5arrayRK5array"]], "operator/ (c++ function)": [[0, "_CPPv4dvRK5arrayRK5array"], [0, "_CPPv4dvRK5arrayd"], [0, "_CPPv4dvdRK5array"]], "operator< (c++ function)": [[0, "_CPPv4I0Elt5array1TRK5array"], [0, "_CPPv4I0Elt5arrayRK5array1T"], [0, "_CPPv4ltRK5arrayRK5array"]], "operator<< (c++ function)": [[0, "_CPPv4lsRK5arrayRK5array"]], "operator<= (c++ function)": [[0, "_CPPv4I0Ele5array1TRK5array"], [0, "_CPPv4I0Ele5arrayRK5array1T"], [0, "_CPPv4leRK5arrayRK5array"]], "operator== (c++ function)": [[0, "_CPPv4I0Eeq5array1TRK5array"], [0, "_CPPv4I0Eeq5arrayRK5array1T"], [0, "_CPPv4eqRK5arrayRK5array"]], "operator> (c++ function)": [[0, "_CPPv4I0Egt5array1TRK5array"], [0, "_CPPv4I0Egt5arrayRK5array1T"], [0, "_CPPv4gtRK5arrayRK5array"]], "operator>= (c++ function)": [[0, "_CPPv4I0Ege5array1TRK5array"], [0, "_CPPv4I0Ege5arrayRK5array1T"], [0, "_CPPv4geRK5arrayRK5array"]], "operator>> (c++ function)": [[0, "_CPPv4rsRK5arrayRK5array"]], "operator^ (c++ function)": [[0, "_CPPv4eoRK5arrayRK5array"]], "operator| (c++ function)": [[0, "_CPPv4orRK5arrayRK5array"]], "operator|| (c++ function)": [[0, "_CPPv4ooRK5arrayRK5array"]], "outer (c++ function)": [[0, "_CPPv45outerRK5arrayRK5array14StreamOrDevice"]], "pad (c++ function)": [[0, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice"], [0, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice"], [0, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice"], [0, "_CPPv43padRK5arrayiRK5array14StreamOrDevice"]], "partition (c++ function)": [[0, "_CPPv49partitionRK5arrayi14StreamOrDevice"], [0, "_CPPv49partitionRK5arrayii14StreamOrDevice"]], "power (c++ function)": [[0, "_CPPv45powerRK5arrayRK5array14StreamOrDevice"]], "prod (c++ function)": [[0, "_CPPv44prodRK5array14StreamOrDevice"], [0, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv44prodRK5arrayb14StreamOrDevice"], [0, "_CPPv44prodRK5arrayib14StreamOrDevice"]], "quantize (c++ function)": [[0, "_CPPv48quantizeRK5arrayii14StreamOrDevice"]], "quantized_matmul (c++ function)": [[0, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice"]], "radians (c++ function)": [[0, "_CPPv47radiansRK5array14StreamOrDevice"]], "reciprocal (c++ function)": [[0, "_CPPv410reciprocalRK5array14StreamOrDevice"]], "remainder (c++ function)": [[0, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice"]], "repeat (c++ function)": [[0, "_CPPv46repeatRK5arrayi14StreamOrDevice"], [0, "_CPPv46repeatRK5arrayii14StreamOrDevice"]], "reshape (c++ function)": [[0, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice"]], "right_shift (c++ function)": [[0, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice"]], "round (c++ function)": [[0, "_CPPv45roundRK5array14StreamOrDevice"], [0, "_CPPv45roundRK5arrayi14StreamOrDevice"]], "rsqrt (c++ function)": [[0, "_CPPv45rsqrtRK5array14StreamOrDevice"]], "scatter (c++ function)": [[0, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_add (c++ function)": [[0, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_max (c++ function)": [[0, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_min (c++ function)": [[0, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_prod (c++ function)": [[0, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "sigmoid (c++ function)": [[0, "_CPPv47sigmoidRK5array14StreamOrDevice"]], "sign (c++ function)": [[0, "_CPPv44signRK5array14StreamOrDevice"]], "sin (c++ function)": [[0, "_CPPv43sinRK5array14StreamOrDevice"]], "sinh (c++ function)": [[0, "_CPPv44sinhRK5array14StreamOrDevice"]], "slice (c++ function)": [[0, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice"]], "slice_update (c++ function)": [[0, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"]], "softmax (c++ function)": [[0, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv47softmaxRK5arrayb14StreamOrDevice"], [0, "_CPPv47softmaxRK5arrayib14StreamOrDevice"]], "sort (c++ function)": [[0, "_CPPv44sortRK5array14StreamOrDevice"], [0, "_CPPv44sortRK5arrayi14StreamOrDevice"]], "split (c++ function)": [[0, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice"], [0, "_CPPv45splitRK5arrayi14StreamOrDevice"], [0, "_CPPv45splitRK5arrayii14StreamOrDevice"]], "sqrt (c++ function)": [[0, "_CPPv44sqrtRK5array14StreamOrDevice"]], "square (c++ function)": [[0, "_CPPv46squareRK5array14StreamOrDevice"]], "squeeze (c++ function)": [[0, "_CPPv47squeezeRK5array14StreamOrDevice"], [0, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv47squeezeRK5arrayi14StreamOrDevice"]], "stack (c++ function)": [[0, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice"], [0, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice"]], "std (c++ function)": [[0, "_CPPv4StRK5array14StreamOrDevice"], [0, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice"], [0, "_CPPv4StRK5arraybi14StreamOrDevice"], [0, "_CPPv4StRK5arrayibi14StreamOrDevice"]], "stop_gradient (c++ function)": [[0, "_CPPv413stop_gradientRK5array14StreamOrDevice"]], "subtract (c++ function)": [[0, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice"]], "sum (c++ function)": [[0, "_CPPv43sumRK5array14StreamOrDevice"], [0, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43sumRK5arrayb14StreamOrDevice"], [0, "_CPPv43sumRK5arrayib14StreamOrDevice"]], "swapaxes (c++ function)": [[0, "_CPPv48swapaxesRK5arrayii14StreamOrDevice"]], "take (c++ function)": [[0, "_CPPv44takeRK5arrayRK5array14StreamOrDevice"], [0, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice"]], "take_along_axis (c++ function)": [[0, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice"]], "tan (c++ function)": [[0, "_CPPv43tanRK5array14StreamOrDevice"]], "tanh (c++ function)": [[0, "_CPPv44tanhRK5array14StreamOrDevice"]], "tensordot (c++ function)": [[0, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice"], [0, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice"]], "tile (c++ function)": [[0, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice"]], "topk (c++ function)": [[0, "_CPPv44topkRK5arrayi14StreamOrDevice"], [0, "_CPPv44topkRK5arrayii14StreamOrDevice"]], "trace (c++ function)": [[0, "_CPPv45traceRK5array14StreamOrDevice"], [0, "_CPPv45traceRK5arrayiii14StreamOrDevice"], [0, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice"]], "transpose (c++ function)": [[0, "_CPPv49transposeRK5array14StreamOrDevice"], [0, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice"], [0, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice"]], "tri (c++ function)": [[0, "_CPPv43trii5Dtype14StreamOrDevice"], [0, "_CPPv43triiii5Dtype14StreamOrDevice"]], "tril (c++ function)": [[0, "_CPPv44tril5arrayi14StreamOrDevice"]], "triu (c++ function)": [[0, "_CPPv44triu5arrayi14StreamOrDevice"]], "var (c++ function)": [[0, "_CPPv43varRK5array14StreamOrDevice"], [0, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice"], [0, "_CPPv43varRK5arraybi14StreamOrDevice"], [0, "_CPPv43varRK5arrayibi14StreamOrDevice"]], "view (c++ function)": [[0, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice"]], "where (c++ function)": [[0, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice"]], "zeros (c++ function)": [[0, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice"]], "zeros_like (c++ function)": [[0, "_CPPv410zeros_likeRK5array14StreamOrDevice"]], "device (class in mlx.core)": [[8, "mlx.core.Device"]], "__init__() (device method)": [[8, "mlx.core.Device.__init__"]], "dtype (class in mlx.core)": [[9, "mlx.core.Dtype"]], "__init__() (dtype method)": [[9, "mlx.core.Dtype.__init__"]], "dtypecategory (class in mlx.core)": [[10, "mlx.core.DtypeCategory"]], "__init__() (dtypecategory method)": [[10, "mlx.core.DtypeCategory.__init__"]], "abs() (in module mlx.core)": [[11, "mlx.core.abs"]], "add() (in module mlx.core)": [[12, "mlx.core.add"]], "addmm() (in module mlx.core)": [[13, "mlx.core.addmm"]], "all() (in module mlx.core)": [[14, "mlx.core.all"]], "allclose() (in module mlx.core)": [[15, "mlx.core.allclose"]], "any() (in module mlx.core)": [[16, "mlx.core.any"]], "arange() (in module mlx.core)": [[17, "mlx.core.arange"]], "arccos() (in module mlx.core)": [[18, "mlx.core.arccos"]], "arccosh() (in module mlx.core)": [[19, "mlx.core.arccosh"]], "arcsin() (in module mlx.core)": [[20, "mlx.core.arcsin"]], "arcsinh() (in module mlx.core)": [[21, "mlx.core.arcsinh"]], "arctan() (in module mlx.core)": [[22, "mlx.core.arctan"]], "arctan2() (in module mlx.core)": [[23, "mlx.core.arctan2"]], "arctanh() (in module mlx.core)": [[24, "mlx.core.arctanh"]], "argmax() (in module mlx.core)": [[25, "mlx.core.argmax"]], "argmin() (in module mlx.core)": [[26, "mlx.core.argmin"]], "argpartition() (in module mlx.core)": [[27, "mlx.core.argpartition"]], "argsort() (in module mlx.core)": [[28, "mlx.core.argsort"]], "__init__() (array method)": [[29, "mlx.core.array.__init__"]], "array (class in mlx.core)": [[29, "mlx.core.array"]], "t (array property)": [[30, "mlx.core.array.T"]], "abs() (array method)": [[31, "mlx.core.array.abs"]], "all() (array method)": [[32, "mlx.core.array.all"]], "any() (array method)": [[33, "mlx.core.array.any"]], "argmax() (array method)": [[34, "mlx.core.array.argmax"]], "argmin() (array method)": [[35, "mlx.core.array.argmin"]], "astype() (array method)": [[36, "mlx.core.array.astype"]], "at (array property)": [[37, "mlx.core.array.at"]], "cos() (array method)": [[38, "mlx.core.array.cos"]], "cummax() (array method)": [[39, "mlx.core.array.cummax"]], "cummin() (array method)": [[40, "mlx.core.array.cummin"]], "cumprod() (array method)": [[41, "mlx.core.array.cumprod"]], "cumsum() (array method)": [[42, "mlx.core.array.cumsum"]], "diag() (array method)": [[43, "mlx.core.array.diag"]], "diagonal() (array method)": [[44, "mlx.core.array.diagonal"]], "dtype (array property)": [[45, "mlx.core.array.dtype"]], "exp() (array method)": [[46, "mlx.core.array.exp"]], "flatten() (array method)": [[47, "mlx.core.array.flatten"]], "item() (array method)": [[48, "mlx.core.array.item"]], "itemsize (array property)": [[49, "mlx.core.array.itemsize"]], "log() (array method)": [[50, "mlx.core.array.log"]], "log10() (array method)": [[51, "mlx.core.array.log10"]], "log1p() (array method)": [[52, "mlx.core.array.log1p"]], "log2() (array method)": [[53, "mlx.core.array.log2"]], "logsumexp() (array method)": [[54, "mlx.core.array.logsumexp"]], "max() (array method)": [[55, "mlx.core.array.max"]], "mean() (array method)": [[56, "mlx.core.array.mean"]], "min() (array method)": [[57, "mlx.core.array.min"]], "moveaxis() (array method)": [[58, "mlx.core.array.moveaxis"]], "nbytes (array property)": [[59, "mlx.core.array.nbytes"]], "ndim (array property)": [[60, "mlx.core.array.ndim"]], "prod() (array method)": [[61, "mlx.core.array.prod"]], "reciprocal() (array method)": [[62, "mlx.core.array.reciprocal"]], "reshape() (array method)": [[63, "mlx.core.array.reshape"]], "round() (array method)": [[64, "mlx.core.array.round"]], "rsqrt() (array method)": [[65, "mlx.core.array.rsqrt"]], "shape (array property)": [[66, "mlx.core.array.shape"]], "sin() (array method)": [[67, "mlx.core.array.sin"]], "size (array property)": [[68, "mlx.core.array.size"]], "split() (array method)": [[69, "mlx.core.array.split"]], "sqrt() (array method)": [[70, "mlx.core.array.sqrt"]], "square() (array method)": [[71, "mlx.core.array.square"]], "squeeze() (array method)": [[72, "mlx.core.array.squeeze"]], "sum() (array method)": [[73, "mlx.core.array.sum"]], "swapaxes() (array method)": [[74, "mlx.core.array.swapaxes"]], "tolist() (array method)": [[75, "mlx.core.array.tolist"]], "transpose() (array method)": [[76, "mlx.core.array.transpose"]], "var() (array method)": [[77, "mlx.core.array.var"]], "array_equal() (in module mlx.core)": [[78, "mlx.core.array_equal"]], "as_strided() (in module mlx.core)": [[79, "mlx.core.as_strided"]], "atleast_1d() (in module mlx.core)": [[80, "mlx.core.atleast_1d"]], "atleast_2d() (in module mlx.core)": [[81, "mlx.core.atleast_2d"]], "atleast_3d() (in module mlx.core)": [[82, "mlx.core.atleast_3d"]], "bitwise_and() (in module mlx.core)": [[83, "mlx.core.bitwise_and"]], "bitwise_or() (in module mlx.core)": [[84, "mlx.core.bitwise_or"]], "bitwise_xor() (in module mlx.core)": [[85, "mlx.core.bitwise_xor"]], "block_masked_mm() (in module mlx.core)": [[86, "mlx.core.block_masked_mm"]], "broadcast_to() (in module mlx.core)": [[87, "mlx.core.broadcast_to"]], "ceil() (in module mlx.core)": [[88, "mlx.core.ceil"]], "clip() (in module mlx.core)": [[89, "mlx.core.clip"]], "compile() (in module mlx.core)": [[90, "mlx.core.compile"]], "concatenate() (in module mlx.core)": [[91, "mlx.core.concatenate"]], "conj() (in module mlx.core)": [[92, "mlx.core.conj"]], "conjugate() (in module mlx.core)": [[93, "mlx.core.conjugate"]], "conv1d() (in module mlx.core)": [[94, "mlx.core.conv1d"]], "conv2d() (in module mlx.core)": [[95, "mlx.core.conv2d"]], "conv_general() (in module mlx.core)": [[96, "mlx.core.conv_general"]], "convolve() (in module mlx.core)": [[97, "mlx.core.convolve"]], "cos() (in module mlx.core)": [[98, "mlx.core.cos"]], "cosh() (in module mlx.core)": [[99, "mlx.core.cosh"]], "cummax() (in module mlx.core)": [[100, "mlx.core.cummax"]], "cummin() (in module mlx.core)": [[101, "mlx.core.cummin"]], "cumprod() (in module mlx.core)": [[102, "mlx.core.cumprod"]], "cumsum() (in module mlx.core)": [[103, "mlx.core.cumsum"]], "default_device() (in module mlx.core)": [[104, "mlx.core.default_device"]], "default_stream() (in module mlx.core)": [[105, "mlx.core.default_stream"]], "degrees() (in module mlx.core)": [[106, "mlx.core.degrees"]], "dequantize() (in module mlx.core)": [[107, "mlx.core.dequantize"]], "diag() (in module mlx.core)": [[108, "mlx.core.diag"]], "diagonal() (in module mlx.core)": [[109, "mlx.core.diagonal"]], "disable_compile() (in module mlx.core)": [[110, "mlx.core.disable_compile"]], "group (class in mlx.core.distributed)": [[111, "mlx.core.distributed.Group"]], "__init__() (group method)": [[111, "mlx.core.distributed.Group.__init__"]], "all_gather() (in module mlx.core.distributed)": [[112, "mlx.core.distributed.all_gather"]], "all_sum() (in module mlx.core.distributed)": [[113, "mlx.core.distributed.all_sum"]], "init() (in module mlx.core.distributed)": [[114, "mlx.core.distributed.init"]], "is_available() (in module mlx.core.distributed)": [[115, "mlx.core.distributed.is_available"]], "divide() (in module mlx.core)": [[116, "mlx.core.divide"]], "divmod() (in module mlx.core)": [[117, "mlx.core.divmod"]], "enable_compile() (in module mlx.core)": [[118, "mlx.core.enable_compile"]], "equal() (in module mlx.core)": [[119, "mlx.core.equal"]], "erf() (in module mlx.core)": [[120, "mlx.core.erf"]], "erfinv() (in module mlx.core)": [[121, "mlx.core.erfinv"]], "eval() (in module mlx.core)": [[122, "mlx.core.eval"]], "exp() (in module mlx.core)": [[123, "mlx.core.exp"]], "expand_dims() (in module mlx.core)": [[124, "mlx.core.expand_dims"]], "expm1() (in module mlx.core)": [[125, "mlx.core.expm1"]], "eye() (in module mlx.core)": [[126, "mlx.core.eye"]], "layer_norm() (in module mlx.core.fast)": [[127, "mlx.core.fast.layer_norm"]], "rms_norm() (in module mlx.core.fast)": [[128, "mlx.core.fast.rms_norm"]], "rope() (in module mlx.core.fast)": [[129, "mlx.core.fast.rope"]], "scaled_dot_product_attention() (in module mlx.core.fast)": [[130, "mlx.core.fast.scaled_dot_product_attention"]], "fft() (in module mlx.core.fft)": [[131, "mlx.core.fft.fft"]], "fft2() (in module mlx.core.fft)": [[132, "mlx.core.fft.fft2"]], "fftn() (in module mlx.core.fft)": [[133, "mlx.core.fft.fftn"]], "ifft() (in module mlx.core.fft)": [[134, "mlx.core.fft.ifft"]], "ifft2() (in module mlx.core.fft)": [[135, "mlx.core.fft.ifft2"]], "ifftn() (in module mlx.core.fft)": [[136, "mlx.core.fft.ifftn"]], "irfft() (in module mlx.core.fft)": [[137, "mlx.core.fft.irfft"]], "irfft2() (in module mlx.core.fft)": [[138, "mlx.core.fft.irfft2"]], "irfftn() (in module mlx.core.fft)": [[139, "mlx.core.fft.irfftn"]], "rfft() (in module mlx.core.fft)": [[140, "mlx.core.fft.rfft"]], "rfft2() (in module mlx.core.fft)": [[141, "mlx.core.fft.rfft2"]], "rfftn() (in module mlx.core.fft)": [[142, "mlx.core.fft.rfftn"]], "flatten() (in module mlx.core)": [[143, "mlx.core.flatten"]], "floor() (in module mlx.core)": [[144, "mlx.core.floor"]], "floor_divide() (in module mlx.core)": [[145, "mlx.core.floor_divide"]], "full() (in module mlx.core)": [[146, "mlx.core.full"]], "gather_mm() (in module mlx.core)": [[147, "mlx.core.gather_mm"]], "gather_qmm() (in module mlx.core)": [[148, "mlx.core.gather_qmm"]], "grad() (in module mlx.core)": [[149, "mlx.core.grad"]], "greater() (in module mlx.core)": [[150, "mlx.core.greater"]], "greater_equal() (in module mlx.core)": [[151, "mlx.core.greater_equal"]], "identity() (in module mlx.core)": [[152, "mlx.core.identity"]], "inner() (in module mlx.core)": [[153, "mlx.core.inner"]], "isclose() (in module mlx.core)": [[154, "mlx.core.isclose"]], "isinf() (in module mlx.core)": [[155, "mlx.core.isinf"]], "isnan() (in module mlx.core)": [[156, "mlx.core.isnan"]], "isneginf() (in module mlx.core)": [[157, "mlx.core.isneginf"]], "isposinf() (in module mlx.core)": [[158, "mlx.core.isposinf"]], "issubdtype() (in module mlx.core)": [[159, "mlx.core.issubdtype"]], "jvp() (in module mlx.core)": [[160, "mlx.core.jvp"]], "left_shift() (in module mlx.core)": [[161, "mlx.core.left_shift"]], "less() (in module mlx.core)": [[162, "mlx.core.less"]], "less_equal() (in module mlx.core)": [[163, "mlx.core.less_equal"]], "cholesky() (in module mlx.core.linalg)": [[164, "mlx.core.linalg.cholesky"]], "inv() (in module mlx.core.linalg)": [[165, "mlx.core.linalg.inv"]], "norm() (in module mlx.core.linalg)": [[166, "mlx.core.linalg.norm"]], "qr() (in module mlx.core.linalg)": [[167, "mlx.core.linalg.qr"]], "svd() (in module mlx.core.linalg)": [[168, "mlx.core.linalg.svd"]], "linspace() (in module mlx.core)": [[169, "mlx.core.linspace"]], "load() (in module mlx.core)": [[170, "mlx.core.load"]], "log() (in module mlx.core)": [[171, "mlx.core.log"]], "log10() (in module mlx.core)": [[172, "mlx.core.log10"]], "log1p() (in module mlx.core)": [[173, "mlx.core.log1p"]], "log2() (in module mlx.core)": [[174, "mlx.core.log2"]], "logaddexp() (in module mlx.core)": [[175, "mlx.core.logaddexp"]], "logical_and() (in module mlx.core)": [[176, "mlx.core.logical_and"]], "logical_not() (in module mlx.core)": [[177, "mlx.core.logical_not"]], "logical_or() (in module mlx.core)": [[178, "mlx.core.logical_or"]], "logsumexp() (in module mlx.core)": [[179, "mlx.core.logsumexp"]], "matmul() (in module mlx.core)": [[180, "mlx.core.matmul"]], "max() (in module mlx.core)": [[181, "mlx.core.max"]], "maximum() (in module mlx.core)": [[182, "mlx.core.maximum"]], "mean() (in module mlx.core)": [[183, "mlx.core.mean"]], "meshgrid() (in module mlx.core)": [[184, "mlx.core.meshgrid"]], "clear_cache() (in module mlx.core.metal)": [[185, "mlx.core.metal.clear_cache"]], "device_info() (in module mlx.core.metal)": [[186, "mlx.core.metal.device_info"]], "get_active_memory() (in module mlx.core.metal)": [[187, "mlx.core.metal.get_active_memory"]], "get_cache_memory() (in module mlx.core.metal)": [[188, "mlx.core.metal.get_cache_memory"]], "get_peak_memory() (in module mlx.core.metal)": [[189, "mlx.core.metal.get_peak_memory"]], "is_available() (in module mlx.core.metal)": [[190, "mlx.core.metal.is_available"]], "reset_peak_memory() (in module mlx.core.metal)": [[191, "mlx.core.metal.reset_peak_memory"]], "set_cache_limit() (in module mlx.core.metal)": [[192, "mlx.core.metal.set_cache_limit"]], "set_memory_limit() (in module mlx.core.metal)": [[193, "mlx.core.metal.set_memory_limit"]], "start_capture() (in module mlx.core.metal)": [[194, "mlx.core.metal.start_capture"]], "stop_capture() (in module mlx.core.metal)": [[195, "mlx.core.metal.stop_capture"]], "min() (in module mlx.core)": [[196, "mlx.core.min"]], "minimum() (in module mlx.core)": [[197, "mlx.core.minimum"]], "moveaxis() (in module mlx.core)": [[198, "mlx.core.moveaxis"]], "multiply() (in module mlx.core)": [[199, "mlx.core.multiply"]], "negative() (in module mlx.core)": [[200, "mlx.core.negative"]], "new_stream() (in module mlx.core)": [[201, "mlx.core.new_stream"]], "not_equal() (in module mlx.core)": [[202, "mlx.core.not_equal"]], "ones() (in module mlx.core)": [[203, "mlx.core.ones"]], "ones_like() (in module mlx.core)": [[204, "mlx.core.ones_like"]], "outer() (in module mlx.core)": [[205, "mlx.core.outer"]], "pad() (in module mlx.core)": [[206, "mlx.core.pad"]], "partition() (in module mlx.core)": [[207, "mlx.core.partition"]], "power() (in module mlx.core)": [[208, "mlx.core.power"]], "prod() (in module mlx.core)": [[209, "mlx.core.prod"]], "quantize() (in module mlx.core)": [[210, "mlx.core.quantize"]], "quantized_matmul() (in module mlx.core)": [[211, "mlx.core.quantized_matmul"]], "radians() (in module mlx.core)": [[212, "mlx.core.radians"]], "bernoulli() (in module mlx.core.random)": [[213, "mlx.core.random.bernoulli"]], "categorical() (in module mlx.core.random)": [[214, "mlx.core.random.categorical"]], "gumbel() (in module mlx.core.random)": [[215, "mlx.core.random.gumbel"]], "key() (in module mlx.core.random)": [[216, "mlx.core.random.key"]], "multivariate_normal() (in module mlx.core.random)": [[217, "mlx.core.random.multivariate_normal"]], "normal() (in module mlx.core.random)": [[218, "mlx.core.random.normal"]], "randint() (in module mlx.core.random)": [[219, "mlx.core.random.randint"]], "seed() (in module mlx.core.random)": [[220, "mlx.core.random.seed"]], "split() (in module mlx.core.random)": [[221, "mlx.core.random.split"]], "truncated_normal() (in module mlx.core.random)": [[222, "mlx.core.random.truncated_normal"]], "uniform() (in module mlx.core.random)": [[223, "mlx.core.random.uniform"]], "reciprocal() (in module mlx.core)": [[224, "mlx.core.reciprocal"]], "remainder() (in module mlx.core)": [[225, "mlx.core.remainder"]], "repeat() (in module mlx.core)": [[226, "mlx.core.repeat"]], "reshape() (in module mlx.core)": [[227, "mlx.core.reshape"]], "right_shift() (in module mlx.core)": [[228, "mlx.core.right_shift"]], "round() (in module mlx.core)": [[229, "mlx.core.round"]], "rsqrt() (in module mlx.core)": [[230, "mlx.core.rsqrt"]], "save() (in module mlx.core)": [[231, "mlx.core.save"]], "save_gguf() (in module mlx.core)": [[232, "mlx.core.save_gguf"]], "save_safetensors() (in module mlx.core)": [[233, "mlx.core.save_safetensors"]], "savez() (in module mlx.core)": [[234, "mlx.core.savez"]], "savez_compressed() (in module mlx.core)": [[235, "mlx.core.savez_compressed"]], "set_default_device() (in module mlx.core)": [[236, "mlx.core.set_default_device"]], "set_default_stream() (in module mlx.core)": [[237, "mlx.core.set_default_stream"]], "sigmoid() (in module mlx.core)": [[238, "mlx.core.sigmoid"]], "sign() (in module mlx.core)": [[239, "mlx.core.sign"]], "sin() (in module mlx.core)": [[240, "mlx.core.sin"]], "sinh() (in module mlx.core)": [[241, "mlx.core.sinh"]], "softmax() (in module mlx.core)": [[242, "mlx.core.softmax"]], "sort() (in module mlx.core)": [[243, "mlx.core.sort"]], "split() (in module mlx.core)": [[244, "mlx.core.split"]], "sqrt() (in module mlx.core)": [[245, "mlx.core.sqrt"]], "square() (in module mlx.core)": [[246, "mlx.core.square"]], "squeeze() (in module mlx.core)": [[247, "mlx.core.squeeze"]], "stack() (in module mlx.core)": [[248, "mlx.core.stack"]], "std() (in module mlx.core)": [[249, "mlx.core.std"]], "stop_gradient() (in module mlx.core)": [[250, "mlx.core.stop_gradient"]], "stream() (in module mlx.core)": [[251, "mlx.core.stream"]], "subtract() (in module mlx.core)": [[252, "mlx.core.subtract"]], "sum() (in module mlx.core)": [[253, "mlx.core.sum"]], "swapaxes() (in module mlx.core)": [[254, "mlx.core.swapaxes"]], "synchronize() (in module mlx.core)": [[255, "mlx.core.synchronize"]], "take() (in module mlx.core)": [[256, "mlx.core.take"]], "take_along_axis() (in module mlx.core)": [[257, "mlx.core.take_along_axis"]], "tan() (in module mlx.core)": [[258, "mlx.core.tan"]], "tanh() (in module mlx.core)": [[259, "mlx.core.tanh"]], "tensordot() (in module mlx.core)": [[260, "mlx.core.tensordot"]], "tile() (in module mlx.core)": [[261, "mlx.core.tile"]], "topk() (in module mlx.core)": [[262, "mlx.core.topk"]], "trace() (in module mlx.core)": [[263, "mlx.core.trace"]], "transpose() (in module mlx.core)": [[264, "mlx.core.transpose"]], "tri() (in module mlx.core)": [[265, "mlx.core.tri"]], "tril() (in module mlx.core)": [[266, "mlx.core.tril"]], "triu() (in module mlx.core)": [[267, "mlx.core.triu"]], "value_and_grad() (in module mlx.core)": [[268, "mlx.core.value_and_grad"]], "var() (in module mlx.core)": [[269, "mlx.core.var"]], "view() (in module mlx.core)": [[270, "mlx.core.view"]], "vjp() (in module mlx.core)": [[271, "mlx.core.vjp"]], "vmap() (in module mlx.core)": [[272, "mlx.core.vmap"]], "where() (in module mlx.core)": [[273, "mlx.core.where"]], "zeros() (in module mlx.core)": [[274, "mlx.core.zeros"]], "zeros_like() (in module mlx.core)": [[275, "mlx.core.zeros_like"]], "quantize() (in module mlx.nn)": [[276, "mlx.nn.quantize"]], "value_and_grad() (in module mlx.nn)": [[277, "mlx.nn.value_and_grad"]], "clip_grad_norm() (in module mlx.optimizers)": [[278, "mlx.optimizers.clip_grad_norm"]], "tree_flatten() (in module mlx.utils)": [[279, "mlx.utils.tree_flatten"]], "tree_map() (in module mlx.utils)": [[280, "mlx.utils.tree_map"]], "tree_map_with_path() (in module mlx.utils)": [[281, "mlx.utils.tree_map_with_path"]], "tree_reduce() (in module mlx.utils)": [[282, "mlx.utils.tree_reduce"]], "tree_unflatten() (in module mlx.utils)": [[283, "mlx.utils.tree_unflatten"]], "stream (class in mlx.core)": [[284, "mlx.core.Stream"]], "__init__() (stream method)": [[284, "mlx.core.Stream.__init__"]], "alibi (class in mlx.nn)": [[294, "mlx.nn.ALiBi"]], "avgpool1d (class in mlx.nn)": [[295, "mlx.nn.AvgPool1d"]], "avgpool2d (class in mlx.nn)": [[296, "mlx.nn.AvgPool2d"]], "batchnorm (class in mlx.nn)": [[297, "mlx.nn.BatchNorm"]], "conv1d (class in mlx.nn)": [[298, "mlx.nn.Conv1d"]], "conv2d (class in mlx.nn)": [[299, "mlx.nn.Conv2d"]], "conv3d (class in mlx.nn)": [[300, "mlx.nn.Conv3d"]], "dropout (class in mlx.nn)": [[301, "mlx.nn.Dropout"]], "dropout2d (class in mlx.nn)": [[302, "mlx.nn.Dropout2d"]], "dropout3d (class in mlx.nn)": [[303, "mlx.nn.Dropout3d"]], "embedding (class in mlx.nn)": [[304, "mlx.nn.Embedding"]], "gelu (class in mlx.nn)": [[305, "mlx.nn.GELU"], [371, "mlx.nn.gelu"]], "glu (class in mlx.nn)": [[306, "mlx.nn.GLU"], [374, "mlx.nn.glu"]], "gru (class in mlx.nn)": [[307, "mlx.nn.GRU"]], "groupnorm (class in mlx.nn)": [[308, "mlx.nn.GroupNorm"]], "hardshrink (class in mlx.nn)": [[309, "mlx.nn.HardShrink"]], "hardtanh (class in mlx.nn)": [[310, "mlx.nn.HardTanh"]], "hardswish (class in mlx.nn)": [[311, "mlx.nn.Hardswish"], [377, "mlx.nn.hardswish"]], "instancenorm (class in mlx.nn)": [[312, "mlx.nn.InstanceNorm"]], "lstm (class in mlx.nn)": [[313, "mlx.nn.LSTM"]], "layernorm (class in mlx.nn)": [[314, "mlx.nn.LayerNorm"]], "leakyrelu (class in mlx.nn)": [[315, "mlx.nn.LeakyReLU"]], "linear (class in mlx.nn)": [[316, "mlx.nn.Linear"]], "maxpool1d (class in mlx.nn)": [[317, "mlx.nn.MaxPool1d"]], "maxpool2d (class in mlx.nn)": [[318, "mlx.nn.MaxPool2d"]], "mish (class in mlx.nn)": [[319, "mlx.nn.Mish"], [395, "mlx.nn.mish"]], "apply() (module method)": [[320, "mlx.nn.Module.apply"]], "apply_to_modules() (module method)": [[321, "mlx.nn.Module.apply_to_modules"]], "children() (module method)": [[322, "mlx.nn.Module.children"]], "eval() (module method)": [[323, "mlx.nn.Module.eval"]], "filter_and_map() (module method)": [[324, "mlx.nn.Module.filter_and_map"]], "freeze() (module method)": [[325, "mlx.nn.Module.freeze"]], "leaf_modules() (module method)": [[326, "mlx.nn.Module.leaf_modules"]], "load_weights() (module method)": [[327, "mlx.nn.Module.load_weights"]], "modules() (module method)": [[328, "mlx.nn.Module.modules"]], "named_modules() (module method)": [[329, "mlx.nn.Module.named_modules"]], "parameters() (module method)": [[330, "mlx.nn.Module.parameters"]], "save_weights() (module method)": [[331, "mlx.nn.Module.save_weights"]], "set_dtype() (module method)": [[332, "mlx.nn.Module.set_dtype"]], "state (module property)": [[333, "mlx.nn.Module.state"]], "train() (module method)": [[334, "mlx.nn.Module.train"]], "trainable_parameters() (module method)": [[335, "mlx.nn.Module.trainable_parameters"]], "training (module property)": [[336, "mlx.nn.Module.training"]], "unfreeze() (module method)": [[337, "mlx.nn.Module.unfreeze"]], "update() (module method)": [[338, "mlx.nn.Module.update"]], "update_modules() (module method)": [[339, "mlx.nn.Module.update_modules"]], "multiheadattention (class in mlx.nn)": [[340, "mlx.nn.MultiHeadAttention"]], "prelu (class in mlx.nn)": [[341, "mlx.nn.PReLU"], [396, "mlx.nn.prelu"]], "quantizedembedding (class in mlx.nn)": [[342, "mlx.nn.QuantizedEmbedding"]], "quantizedlinear (class in mlx.nn)": [[343, "mlx.nn.QuantizedLinear"]], "rmsnorm (class in mlx.nn)": [[344, "mlx.nn.RMSNorm"]], "rnn (class in mlx.nn)": [[345, "mlx.nn.RNN"]], "relu (class in mlx.nn)": [[346, "mlx.nn.ReLU"], [397, "mlx.nn.relu"]], "relu6 (class in mlx.nn)": [[347, "mlx.nn.ReLU6"], [398, "mlx.nn.relu6"]], "rope (class in mlx.nn)": [[348, "mlx.nn.RoPE"]], "selu (class in mlx.nn)": [[349, "mlx.nn.SELU"], [399, "mlx.nn.selu"]], "sequential (class in mlx.nn)": [[350, "mlx.nn.Sequential"]], "silu (class in mlx.nn)": [[351, "mlx.nn.SiLU"], [401, "mlx.nn.silu"]], "sinusoidalpositionalencoding (class in mlx.nn)": [[352, "mlx.nn.SinusoidalPositionalEncoding"]], "softmax (class in mlx.nn)": [[353, "mlx.nn.Softmax"], [402, "mlx.nn.softmax"]], "softmin (class in mlx.nn)": [[354, "mlx.nn.Softmin"], [403, "mlx.nn.softmin"]], "softplus (class in mlx.nn)": [[355, "mlx.nn.Softplus"], [404, "mlx.nn.softplus"]], "softshrink (class in mlx.nn)": [[356, "mlx.nn.Softshrink"], [405, "mlx.nn.softshrink"]], "softsign (class in mlx.nn)": [[357, "mlx.nn.Softsign"]], "step (class in mlx.nn)": [[358, "mlx.nn.Step"], [406, "mlx.nn.step"]], "tanh (class in mlx.nn)": [[359, "mlx.nn.Tanh"], [407, "mlx.nn.tanh"]], "transformer (class in mlx.nn)": [[360, "mlx.nn.Transformer"]], "upsample (class in mlx.nn)": [[361, "mlx.nn.Upsample"]], "constant() (in module mlx.nn.init)": [[362, "mlx.nn.init.constant"]], "glorot_normal() (in module mlx.nn.init)": [[363, "mlx.nn.init.glorot_normal"]], "glorot_uniform() (in module mlx.nn.init)": [[364, "mlx.nn.init.glorot_uniform"]], "he_normal() (in module mlx.nn.init)": [[365, "mlx.nn.init.he_normal"]], "he_uniform() (in module mlx.nn.init)": [[366, "mlx.nn.init.he_uniform"]], "identity() (in module mlx.nn.init)": [[367, "mlx.nn.init.identity"]], "normal() (in module mlx.nn.init)": [[368, "mlx.nn.init.normal"]], "uniform() (in module mlx.nn.init)": [[369, "mlx.nn.init.uniform"]], "elu (class in mlx.nn)": [[370, "mlx.nn.elu"]], "gelu_approx (class in mlx.nn)": [[372, "mlx.nn.gelu_approx"]], "gelu_fast_approx (class in mlx.nn)": [[373, "mlx.nn.gelu_fast_approx"]], "hard_shrink (class in mlx.nn)": [[375, "mlx.nn.hard_shrink"]], "hard_tanh (class in mlx.nn)": [[376, "mlx.nn.hard_tanh"]], "leaky_relu (class in mlx.nn)": [[378, "mlx.nn.leaky_relu"]], "log_sigmoid (class in mlx.nn)": [[379, "mlx.nn.log_sigmoid"]], "log_softmax (class in mlx.nn)": [[380, "mlx.nn.log_softmax"]], "binary_cross_entropy (class in mlx.nn.losses)": [[381, "mlx.nn.losses.binary_cross_entropy"]], "cosine_similarity_loss (class in mlx.nn.losses)": [[382, "mlx.nn.losses.cosine_similarity_loss"]], "cross_entropy (class in mlx.nn.losses)": [[383, "mlx.nn.losses.cross_entropy"]], "gaussian_nll_loss (class in mlx.nn.losses)": [[384, "mlx.nn.losses.gaussian_nll_loss"]], "hinge_loss (class in mlx.nn.losses)": [[385, "mlx.nn.losses.hinge_loss"]], "huber_loss (class in mlx.nn.losses)": [[386, "mlx.nn.losses.huber_loss"]], "kl_div_loss (class in mlx.nn.losses)": [[387, "mlx.nn.losses.kl_div_loss"]], "l1_loss (class in mlx.nn.losses)": [[388, "mlx.nn.losses.l1_loss"]], "log_cosh_loss (class in mlx.nn.losses)": [[389, "mlx.nn.losses.log_cosh_loss"]], "margin_ranking_loss (class in mlx.nn.losses)": [[390, "mlx.nn.losses.margin_ranking_loss"]], "mse_loss (class in mlx.nn.losses)": [[391, "mlx.nn.losses.mse_loss"]], "nll_loss (class in mlx.nn.losses)": [[392, "mlx.nn.losses.nll_loss"]], "smooth_l1_loss (class in mlx.nn.losses)": [[393, "mlx.nn.losses.smooth_l1_loss"]], "triplet_loss (class in mlx.nn.losses)": [[394, "mlx.nn.losses.triplet_loss"]], "sigmoid (class in mlx.nn)": [[400, "mlx.nn.sigmoid"]], "module (class in mlx.nn)": [[412, "mlx.nn.Module"]], "adadelta (class in mlx.optimizers)": [[415, "mlx.optimizers.AdaDelta"]], "adafactor (class in mlx.optimizers)": [[416, "mlx.optimizers.Adafactor"]], "adagrad (class in mlx.optimizers)": [[417, "mlx.optimizers.Adagrad"]], "adam (class in mlx.optimizers)": [[418, "mlx.optimizers.Adam"]], "adamw (class in mlx.optimizers)": [[419, "mlx.optimizers.AdamW"]], "adamax (class in mlx.optimizers)": [[420, "mlx.optimizers.Adamax"]], "lion (class in mlx.optimizers)": [[421, "mlx.optimizers.Lion"]], "apply_gradients() (optimizer method)": [[422, "mlx.optimizers.Optimizer.apply_gradients"]], "init() (optimizer method)": [[423, "mlx.optimizers.Optimizer.init"]], "state (optimizer property)": [[424, "mlx.optimizers.Optimizer.state"]], "update() (optimizer method)": [[425, "mlx.optimizers.Optimizer.update"]], "rmsprop (class in mlx.optimizers)": [[426, "mlx.optimizers.RMSprop"]], "sgd (class in mlx.optimizers)": [[427, "mlx.optimizers.SGD"]], "cosine_decay() (in module mlx.optimizers)": [[428, "mlx.optimizers.cosine_decay"]], "exponential_decay() (in module mlx.optimizers)": [[429, "mlx.optimizers.exponential_decay"]], "join_schedules() (in module mlx.optimizers)": [[430, "mlx.optimizers.join_schedules"]], "linear_schedule() (in module mlx.optimizers)": [[431, "mlx.optimizers.linear_schedule"]], "step_decay() (in module mlx.optimizers)": [[432, "mlx.optimizers.step_decay"]], "optimizer (class in mlx.optimizers)": [[434, "mlx.optimizers.Optimizer"]]}})