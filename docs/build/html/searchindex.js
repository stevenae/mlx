Search.setIndex({"docnames": ["cpp/ops", "dev/extensions", "dev/metal_debugger", "examples/linear_regression", "examples/llama-inference", "examples/mlp", "index", "install", "python/_autosummary/mlx.core.Device", "python/_autosummary/mlx.core.Dtype", "python/_autosummary/mlx.core.DtypeCategory", "python/_autosummary/mlx.core.abs", "python/_autosummary/mlx.core.add", "python/_autosummary/mlx.core.addmm", "python/_autosummary/mlx.core.all", "python/_autosummary/mlx.core.allclose", "python/_autosummary/mlx.core.any", "python/_autosummary/mlx.core.arange", "python/_autosummary/mlx.core.arccos", "python/_autosummary/mlx.core.arccosh", "python/_autosummary/mlx.core.arcsin", "python/_autosummary/mlx.core.arcsinh", "python/_autosummary/mlx.core.arctan", "python/_autosummary/mlx.core.arctan2", "python/_autosummary/mlx.core.arctanh", "python/_autosummary/mlx.core.argmax", "python/_autosummary/mlx.core.argmin", "python/_autosummary/mlx.core.argpartition", "python/_autosummary/mlx.core.argsort", "python/_autosummary/mlx.core.array", "python/_autosummary/mlx.core.array.T", "python/_autosummary/mlx.core.array.abs", "python/_autosummary/mlx.core.array.all", "python/_autosummary/mlx.core.array.any", "python/_autosummary/mlx.core.array.argmax", "python/_autosummary/mlx.core.array.argmin", "python/_autosummary/mlx.core.array.astype", "python/_autosummary/mlx.core.array.at", "python/_autosummary/mlx.core.array.conj", "python/_autosummary/mlx.core.array.cos", "python/_autosummary/mlx.core.array.cummax", "python/_autosummary/mlx.core.array.cummin", "python/_autosummary/mlx.core.array.cumprod", "python/_autosummary/mlx.core.array.cumsum", "python/_autosummary/mlx.core.array.diag", "python/_autosummary/mlx.core.array.diagonal", "python/_autosummary/mlx.core.array.dtype", "python/_autosummary/mlx.core.array.exp", "python/_autosummary/mlx.core.array.flatten", "python/_autosummary/mlx.core.array.item", "python/_autosummary/mlx.core.array.itemsize", "python/_autosummary/mlx.core.array.log", "python/_autosummary/mlx.core.array.log10", "python/_autosummary/mlx.core.array.log1p", "python/_autosummary/mlx.core.array.log2", "python/_autosummary/mlx.core.array.logsumexp", "python/_autosummary/mlx.core.array.max", "python/_autosummary/mlx.core.array.mean", "python/_autosummary/mlx.core.array.min", "python/_autosummary/mlx.core.array.moveaxis", "python/_autosummary/mlx.core.array.nbytes", "python/_autosummary/mlx.core.array.ndim", "python/_autosummary/mlx.core.array.prod", "python/_autosummary/mlx.core.array.reciprocal", "python/_autosummary/mlx.core.array.reshape", "python/_autosummary/mlx.core.array.round", "python/_autosummary/mlx.core.array.rsqrt", "python/_autosummary/mlx.core.array.shape", "python/_autosummary/mlx.core.array.sin", "python/_autosummary/mlx.core.array.size", "python/_autosummary/mlx.core.array.split", "python/_autosummary/mlx.core.array.sqrt", "python/_autosummary/mlx.core.array.square", "python/_autosummary/mlx.core.array.squeeze", "python/_autosummary/mlx.core.array.sum", "python/_autosummary/mlx.core.array.swapaxes", "python/_autosummary/mlx.core.array.tolist", "python/_autosummary/mlx.core.array.transpose", "python/_autosummary/mlx.core.array.var", "python/_autosummary/mlx.core.array.view", "python/_autosummary/mlx.core.array_equal", "python/_autosummary/mlx.core.as_strided", "python/_autosummary/mlx.core.atleast_1d", "python/_autosummary/mlx.core.atleast_2d", "python/_autosummary/mlx.core.atleast_3d", "python/_autosummary/mlx.core.bitwise_and", "python/_autosummary/mlx.core.bitwise_or", "python/_autosummary/mlx.core.bitwise_xor", "python/_autosummary/mlx.core.block_masked_mm", "python/_autosummary/mlx.core.broadcast_to", "python/_autosummary/mlx.core.ceil", "python/_autosummary/mlx.core.clip", "python/_autosummary/mlx.core.compile", "python/_autosummary/mlx.core.concatenate", "python/_autosummary/mlx.core.conj", "python/_autosummary/mlx.core.conjugate", "python/_autosummary/mlx.core.conv1d", "python/_autosummary/mlx.core.conv2d", "python/_autosummary/mlx.core.conv_general", "python/_autosummary/mlx.core.convolve", "python/_autosummary/mlx.core.cos", "python/_autosummary/mlx.core.cosh", "python/_autosummary/mlx.core.cummax", "python/_autosummary/mlx.core.cummin", "python/_autosummary/mlx.core.cumprod", "python/_autosummary/mlx.core.cumsum", "python/_autosummary/mlx.core.custom_function", "python/_autosummary/mlx.core.default_device", "python/_autosummary/mlx.core.default_stream", "python/_autosummary/mlx.core.degrees", "python/_autosummary/mlx.core.dequantize", "python/_autosummary/mlx.core.diag", "python/_autosummary/mlx.core.diagonal", "python/_autosummary/mlx.core.disable_compile", "python/_autosummary/mlx.core.distributed.Group", "python/_autosummary/mlx.core.distributed.all_gather", "python/_autosummary/mlx.core.distributed.all_sum", "python/_autosummary/mlx.core.distributed.init", "python/_autosummary/mlx.core.distributed.is_available", "python/_autosummary/mlx.core.divide", "python/_autosummary/mlx.core.divmod", "python/_autosummary/mlx.core.einsum", "python/_autosummary/mlx.core.einsum_path", "python/_autosummary/mlx.core.enable_compile", "python/_autosummary/mlx.core.equal", "python/_autosummary/mlx.core.erf", "python/_autosummary/mlx.core.erfinv", "python/_autosummary/mlx.core.eval", "python/_autosummary/mlx.core.exp", "python/_autosummary/mlx.core.expand_dims", "python/_autosummary/mlx.core.expm1", "python/_autosummary/mlx.core.eye", "python/_autosummary/mlx.core.fast.layer_norm", "python/_autosummary/mlx.core.fast.rms_norm", "python/_autosummary/mlx.core.fast.rope", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention", "python/_autosummary/mlx.core.fft.fft", "python/_autosummary/mlx.core.fft.fft2", "python/_autosummary/mlx.core.fft.fftn", "python/_autosummary/mlx.core.fft.ifft", "python/_autosummary/mlx.core.fft.ifft2", "python/_autosummary/mlx.core.fft.ifftn", "python/_autosummary/mlx.core.fft.irfft", "python/_autosummary/mlx.core.fft.irfft2", "python/_autosummary/mlx.core.fft.irfftn", "python/_autosummary/mlx.core.fft.rfft", "python/_autosummary/mlx.core.fft.rfft2", "python/_autosummary/mlx.core.fft.rfftn", "python/_autosummary/mlx.core.flatten", "python/_autosummary/mlx.core.floor", "python/_autosummary/mlx.core.floor_divide", "python/_autosummary/mlx.core.full", "python/_autosummary/mlx.core.gather_mm", "python/_autosummary/mlx.core.gather_qmm", "python/_autosummary/mlx.core.grad", "python/_autosummary/mlx.core.greater", "python/_autosummary/mlx.core.greater_equal", "python/_autosummary/mlx.core.hadamard_transform", "python/_autosummary/mlx.core.identity", "python/_autosummary/mlx.core.inner", "python/_autosummary/mlx.core.isclose", "python/_autosummary/mlx.core.isinf", "python/_autosummary/mlx.core.isnan", "python/_autosummary/mlx.core.isneginf", "python/_autosummary/mlx.core.isposinf", "python/_autosummary/mlx.core.issubdtype", "python/_autosummary/mlx.core.jvp", "python/_autosummary/mlx.core.left_shift", "python/_autosummary/mlx.core.less", "python/_autosummary/mlx.core.less_equal", "python/_autosummary/mlx.core.linalg.cholesky", "python/_autosummary/mlx.core.linalg.inv", "python/_autosummary/mlx.core.linalg.norm", "python/_autosummary/mlx.core.linalg.qr", "python/_autosummary/mlx.core.linalg.svd", "python/_autosummary/mlx.core.linspace", "python/_autosummary/mlx.core.load", "python/_autosummary/mlx.core.log", "python/_autosummary/mlx.core.log10", "python/_autosummary/mlx.core.log1p", "python/_autosummary/mlx.core.log2", "python/_autosummary/mlx.core.logaddexp", "python/_autosummary/mlx.core.logical_and", "python/_autosummary/mlx.core.logical_not", "python/_autosummary/mlx.core.logical_or", "python/_autosummary/mlx.core.logsumexp", "python/_autosummary/mlx.core.matmul", "python/_autosummary/mlx.core.max", "python/_autosummary/mlx.core.maximum", "python/_autosummary/mlx.core.mean", "python/_autosummary/mlx.core.meshgrid", "python/_autosummary/mlx.core.metal.clear_cache", "python/_autosummary/mlx.core.metal.device_info", "python/_autosummary/mlx.core.metal.get_active_memory", "python/_autosummary/mlx.core.metal.get_cache_memory", "python/_autosummary/mlx.core.metal.get_peak_memory", "python/_autosummary/mlx.core.metal.is_available", "python/_autosummary/mlx.core.metal.reset_peak_memory", "python/_autosummary/mlx.core.metal.set_cache_limit", "python/_autosummary/mlx.core.metal.set_memory_limit", "python/_autosummary/mlx.core.metal.start_capture", "python/_autosummary/mlx.core.metal.stop_capture", "python/_autosummary/mlx.core.min", "python/_autosummary/mlx.core.minimum", "python/_autosummary/mlx.core.moveaxis", "python/_autosummary/mlx.core.multiply", "python/_autosummary/mlx.core.nan_to_num", "python/_autosummary/mlx.core.negative", "python/_autosummary/mlx.core.new_stream", "python/_autosummary/mlx.core.not_equal", "python/_autosummary/mlx.core.ones", "python/_autosummary/mlx.core.ones_like", "python/_autosummary/mlx.core.outer", "python/_autosummary/mlx.core.pad", "python/_autosummary/mlx.core.partition", "python/_autosummary/mlx.core.power", "python/_autosummary/mlx.core.prod", "python/_autosummary/mlx.core.quantize", "python/_autosummary/mlx.core.quantized_matmul", "python/_autosummary/mlx.core.radians", "python/_autosummary/mlx.core.random.bernoulli", "python/_autosummary/mlx.core.random.categorical", "python/_autosummary/mlx.core.random.gumbel", "python/_autosummary/mlx.core.random.key", "python/_autosummary/mlx.core.random.laplace", "python/_autosummary/mlx.core.random.multivariate_normal", "python/_autosummary/mlx.core.random.normal", "python/_autosummary/mlx.core.random.randint", "python/_autosummary/mlx.core.random.seed", "python/_autosummary/mlx.core.random.split", "python/_autosummary/mlx.core.random.truncated_normal", "python/_autosummary/mlx.core.random.uniform", "python/_autosummary/mlx.core.reciprocal", "python/_autosummary/mlx.core.remainder", "python/_autosummary/mlx.core.repeat", "python/_autosummary/mlx.core.reshape", "python/_autosummary/mlx.core.right_shift", "python/_autosummary/mlx.core.round", "python/_autosummary/mlx.core.rsqrt", "python/_autosummary/mlx.core.save", "python/_autosummary/mlx.core.save_gguf", "python/_autosummary/mlx.core.save_safetensors", "python/_autosummary/mlx.core.savez", "python/_autosummary/mlx.core.savez_compressed", "python/_autosummary/mlx.core.set_default_device", "python/_autosummary/mlx.core.set_default_stream", "python/_autosummary/mlx.core.sigmoid", "python/_autosummary/mlx.core.sign", "python/_autosummary/mlx.core.sin", "python/_autosummary/mlx.core.sinh", "python/_autosummary/mlx.core.softmax", "python/_autosummary/mlx.core.sort", "python/_autosummary/mlx.core.split", "python/_autosummary/mlx.core.sqrt", "python/_autosummary/mlx.core.square", "python/_autosummary/mlx.core.squeeze", "python/_autosummary/mlx.core.stack", "python/_autosummary/mlx.core.std", "python/_autosummary/mlx.core.stop_gradient", "python/_autosummary/mlx.core.stream", "python/_autosummary/mlx.core.subtract", "python/_autosummary/mlx.core.sum", "python/_autosummary/mlx.core.swapaxes", "python/_autosummary/mlx.core.synchronize", "python/_autosummary/mlx.core.take", "python/_autosummary/mlx.core.take_along_axis", "python/_autosummary/mlx.core.tan", "python/_autosummary/mlx.core.tanh", "python/_autosummary/mlx.core.tensordot", "python/_autosummary/mlx.core.tile", "python/_autosummary/mlx.core.topk", "python/_autosummary/mlx.core.trace", "python/_autosummary/mlx.core.transpose", "python/_autosummary/mlx.core.tri", "python/_autosummary/mlx.core.tril", "python/_autosummary/mlx.core.triu", "python/_autosummary/mlx.core.value_and_grad", "python/_autosummary/mlx.core.var", "python/_autosummary/mlx.core.view", "python/_autosummary/mlx.core.vjp", "python/_autosummary/mlx.core.vmap", "python/_autosummary/mlx.core.where", "python/_autosummary/mlx.core.zeros", "python/_autosummary/mlx.core.zeros_like", "python/_autosummary/mlx.nn.quantize", "python/_autosummary/mlx.nn.value_and_grad", "python/_autosummary/mlx.optimizers.clip_grad_norm", "python/_autosummary/mlx.utils.tree_flatten", "python/_autosummary/mlx.utils.tree_map", "python/_autosummary/mlx.utils.tree_map_with_path", "python/_autosummary/mlx.utils.tree_reduce", "python/_autosummary/mlx.utils.tree_unflatten", "python/_autosummary/stream_class", "python/array", "python/data_types", "python/devices_and_streams", "python/distributed", "python/fast", "python/fft", "python/linalg", "python/metal", "python/nn", "python/nn/_autosummary/mlx.nn.ALiBi", "python/nn/_autosummary/mlx.nn.AvgPool1d", "python/nn/_autosummary/mlx.nn.AvgPool2d", "python/nn/_autosummary/mlx.nn.BatchNorm", "python/nn/_autosummary/mlx.nn.Conv1d", "python/nn/_autosummary/mlx.nn.Conv2d", "python/nn/_autosummary/mlx.nn.Conv3d", "python/nn/_autosummary/mlx.nn.Dropout", "python/nn/_autosummary/mlx.nn.Dropout2d", "python/nn/_autosummary/mlx.nn.Dropout3d", "python/nn/_autosummary/mlx.nn.Embedding", "python/nn/_autosummary/mlx.nn.GELU", "python/nn/_autosummary/mlx.nn.GLU", "python/nn/_autosummary/mlx.nn.GRU", "python/nn/_autosummary/mlx.nn.GroupNorm", "python/nn/_autosummary/mlx.nn.HardShrink", "python/nn/_autosummary/mlx.nn.HardTanh", "python/nn/_autosummary/mlx.nn.Hardswish", "python/nn/_autosummary/mlx.nn.InstanceNorm", "python/nn/_autosummary/mlx.nn.LSTM", "python/nn/_autosummary/mlx.nn.LayerNorm", "python/nn/_autosummary/mlx.nn.LeakyReLU", "python/nn/_autosummary/mlx.nn.Linear", "python/nn/_autosummary/mlx.nn.MaxPool1d", "python/nn/_autosummary/mlx.nn.MaxPool2d", "python/nn/_autosummary/mlx.nn.Mish", "python/nn/_autosummary/mlx.nn.Module.apply", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules", "python/nn/_autosummary/mlx.nn.Module.children", "python/nn/_autosummary/mlx.nn.Module.eval", "python/nn/_autosummary/mlx.nn.Module.filter_and_map", "python/nn/_autosummary/mlx.nn.Module.freeze", "python/nn/_autosummary/mlx.nn.Module.leaf_modules", "python/nn/_autosummary/mlx.nn.Module.load_weights", "python/nn/_autosummary/mlx.nn.Module.modules", "python/nn/_autosummary/mlx.nn.Module.named_modules", "python/nn/_autosummary/mlx.nn.Module.parameters", "python/nn/_autosummary/mlx.nn.Module.save_weights", "python/nn/_autosummary/mlx.nn.Module.set_dtype", "python/nn/_autosummary/mlx.nn.Module.state", "python/nn/_autosummary/mlx.nn.Module.train", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters", "python/nn/_autosummary/mlx.nn.Module.training", "python/nn/_autosummary/mlx.nn.Module.unfreeze", "python/nn/_autosummary/mlx.nn.Module.update", "python/nn/_autosummary/mlx.nn.Module.update_modules", "python/nn/_autosummary/mlx.nn.MultiHeadAttention", "python/nn/_autosummary/mlx.nn.PReLU", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding", "python/nn/_autosummary/mlx.nn.QuantizedLinear", "python/nn/_autosummary/mlx.nn.RMSNorm", "python/nn/_autosummary/mlx.nn.RNN", "python/nn/_autosummary/mlx.nn.ReLU", "python/nn/_autosummary/mlx.nn.ReLU6", "python/nn/_autosummary/mlx.nn.RoPE", "python/nn/_autosummary/mlx.nn.SELU", "python/nn/_autosummary/mlx.nn.Sequential", "python/nn/_autosummary/mlx.nn.SiLU", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding", "python/nn/_autosummary/mlx.nn.Softmax", "python/nn/_autosummary/mlx.nn.Softmin", "python/nn/_autosummary/mlx.nn.Softplus", "python/nn/_autosummary/mlx.nn.Softshrink", "python/nn/_autosummary/mlx.nn.Softsign", "python/nn/_autosummary/mlx.nn.Step", "python/nn/_autosummary/mlx.nn.Tanh", "python/nn/_autosummary/mlx.nn.Transformer", "python/nn/_autosummary/mlx.nn.Upsample", "python/nn/_autosummary/mlx.nn.init.constant", "python/nn/_autosummary/mlx.nn.init.glorot_normal", "python/nn/_autosummary/mlx.nn.init.glorot_uniform", "python/nn/_autosummary/mlx.nn.init.he_normal", "python/nn/_autosummary/mlx.nn.init.he_uniform", "python/nn/_autosummary/mlx.nn.init.identity", "python/nn/_autosummary/mlx.nn.init.normal", "python/nn/_autosummary/mlx.nn.init.uniform", "python/nn/_autosummary_functions/mlx.nn.elu", "python/nn/_autosummary_functions/mlx.nn.gelu", "python/nn/_autosummary_functions/mlx.nn.gelu_approx", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx", "python/nn/_autosummary_functions/mlx.nn.glu", "python/nn/_autosummary_functions/mlx.nn.hard_shrink", "python/nn/_autosummary_functions/mlx.nn.hard_tanh", "python/nn/_autosummary_functions/mlx.nn.hardswish", "python/nn/_autosummary_functions/mlx.nn.leaky_relu", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid", "python/nn/_autosummary_functions/mlx.nn.log_softmax", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss", "python/nn/_autosummary_functions/mlx.nn.mish", "python/nn/_autosummary_functions/mlx.nn.prelu", "python/nn/_autosummary_functions/mlx.nn.relu", "python/nn/_autosummary_functions/mlx.nn.relu6", "python/nn/_autosummary_functions/mlx.nn.selu", "python/nn/_autosummary_functions/mlx.nn.sigmoid", "python/nn/_autosummary_functions/mlx.nn.silu", "python/nn/_autosummary_functions/mlx.nn.softmax", "python/nn/_autosummary_functions/mlx.nn.softmin", "python/nn/_autosummary_functions/mlx.nn.softplus", "python/nn/_autosummary_functions/mlx.nn.softshrink", "python/nn/_autosummary_functions/mlx.nn.step", "python/nn/_autosummary_functions/mlx.nn.tanh", "python/nn/functions", "python/nn/init", "python/nn/layers", "python/nn/losses", "python/nn/module", "python/ops", "python/optimizers", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta", "python/optimizers/_autosummary/mlx.optimizers.Adafactor", "python/optimizers/_autosummary/mlx.optimizers.Adagrad", "python/optimizers/_autosummary/mlx.optimizers.Adam", "python/optimizers/_autosummary/mlx.optimizers.AdamW", "python/optimizers/_autosummary/mlx.optimizers.Adamax", "python/optimizers/_autosummary/mlx.optimizers.Lion", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update", "python/optimizers/_autosummary/mlx.optimizers.RMSprop", "python/optimizers/_autosummary/mlx.optimizers.SGD", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay", "python/optimizers/_autosummary/mlx.optimizers.join_schedules", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule", "python/optimizers/_autosummary/mlx.optimizers.step_decay", "python/optimizers/common_optimizers", "python/optimizers/optimizer", "python/optimizers/schedulers", "python/random", "python/transforms", "python/tree_utils", "usage/compile", "usage/distributed", "usage/function_transforms", "usage/indexing", "usage/lazy_evaluation", "usage/numpy", "usage/quick_start", "usage/saving_and_loading", "usage/unified_memory", "usage/using_streams"], "filenames": ["cpp/ops.rst", "dev/extensions.rst", "dev/metal_debugger.rst", "examples/linear_regression.rst", "examples/llama-inference.rst", "examples/mlp.rst", "index.rst", "install.rst", "python/_autosummary/mlx.core.Device.rst", "python/_autosummary/mlx.core.Dtype.rst", "python/_autosummary/mlx.core.DtypeCategory.rst", "python/_autosummary/mlx.core.abs.rst", "python/_autosummary/mlx.core.add.rst", "python/_autosummary/mlx.core.addmm.rst", "python/_autosummary/mlx.core.all.rst", "python/_autosummary/mlx.core.allclose.rst", "python/_autosummary/mlx.core.any.rst", "python/_autosummary/mlx.core.arange.rst", "python/_autosummary/mlx.core.arccos.rst", "python/_autosummary/mlx.core.arccosh.rst", "python/_autosummary/mlx.core.arcsin.rst", "python/_autosummary/mlx.core.arcsinh.rst", "python/_autosummary/mlx.core.arctan.rst", "python/_autosummary/mlx.core.arctan2.rst", "python/_autosummary/mlx.core.arctanh.rst", "python/_autosummary/mlx.core.argmax.rst", "python/_autosummary/mlx.core.argmin.rst", "python/_autosummary/mlx.core.argpartition.rst", "python/_autosummary/mlx.core.argsort.rst", "python/_autosummary/mlx.core.array.rst", "python/_autosummary/mlx.core.array.T.rst", "python/_autosummary/mlx.core.array.abs.rst", "python/_autosummary/mlx.core.array.all.rst", "python/_autosummary/mlx.core.array.any.rst", "python/_autosummary/mlx.core.array.argmax.rst", "python/_autosummary/mlx.core.array.argmin.rst", "python/_autosummary/mlx.core.array.astype.rst", "python/_autosummary/mlx.core.array.at.rst", "python/_autosummary/mlx.core.array.conj.rst", "python/_autosummary/mlx.core.array.cos.rst", "python/_autosummary/mlx.core.array.cummax.rst", "python/_autosummary/mlx.core.array.cummin.rst", "python/_autosummary/mlx.core.array.cumprod.rst", "python/_autosummary/mlx.core.array.cumsum.rst", "python/_autosummary/mlx.core.array.diag.rst", "python/_autosummary/mlx.core.array.diagonal.rst", "python/_autosummary/mlx.core.array.dtype.rst", "python/_autosummary/mlx.core.array.exp.rst", "python/_autosummary/mlx.core.array.flatten.rst", "python/_autosummary/mlx.core.array.item.rst", "python/_autosummary/mlx.core.array.itemsize.rst", "python/_autosummary/mlx.core.array.log.rst", "python/_autosummary/mlx.core.array.log10.rst", "python/_autosummary/mlx.core.array.log1p.rst", "python/_autosummary/mlx.core.array.log2.rst", "python/_autosummary/mlx.core.array.logsumexp.rst", "python/_autosummary/mlx.core.array.max.rst", "python/_autosummary/mlx.core.array.mean.rst", "python/_autosummary/mlx.core.array.min.rst", "python/_autosummary/mlx.core.array.moveaxis.rst", "python/_autosummary/mlx.core.array.nbytes.rst", "python/_autosummary/mlx.core.array.ndim.rst", "python/_autosummary/mlx.core.array.prod.rst", "python/_autosummary/mlx.core.array.reciprocal.rst", "python/_autosummary/mlx.core.array.reshape.rst", "python/_autosummary/mlx.core.array.round.rst", "python/_autosummary/mlx.core.array.rsqrt.rst", "python/_autosummary/mlx.core.array.shape.rst", "python/_autosummary/mlx.core.array.sin.rst", "python/_autosummary/mlx.core.array.size.rst", "python/_autosummary/mlx.core.array.split.rst", "python/_autosummary/mlx.core.array.sqrt.rst", "python/_autosummary/mlx.core.array.square.rst", "python/_autosummary/mlx.core.array.squeeze.rst", "python/_autosummary/mlx.core.array.sum.rst", "python/_autosummary/mlx.core.array.swapaxes.rst", "python/_autosummary/mlx.core.array.tolist.rst", "python/_autosummary/mlx.core.array.transpose.rst", "python/_autosummary/mlx.core.array.var.rst", "python/_autosummary/mlx.core.array.view.rst", "python/_autosummary/mlx.core.array_equal.rst", "python/_autosummary/mlx.core.as_strided.rst", "python/_autosummary/mlx.core.atleast_1d.rst", "python/_autosummary/mlx.core.atleast_2d.rst", "python/_autosummary/mlx.core.atleast_3d.rst", "python/_autosummary/mlx.core.bitwise_and.rst", "python/_autosummary/mlx.core.bitwise_or.rst", "python/_autosummary/mlx.core.bitwise_xor.rst", "python/_autosummary/mlx.core.block_masked_mm.rst", "python/_autosummary/mlx.core.broadcast_to.rst", "python/_autosummary/mlx.core.ceil.rst", "python/_autosummary/mlx.core.clip.rst", "python/_autosummary/mlx.core.compile.rst", "python/_autosummary/mlx.core.concatenate.rst", "python/_autosummary/mlx.core.conj.rst", "python/_autosummary/mlx.core.conjugate.rst", "python/_autosummary/mlx.core.conv1d.rst", "python/_autosummary/mlx.core.conv2d.rst", "python/_autosummary/mlx.core.conv_general.rst", "python/_autosummary/mlx.core.convolve.rst", "python/_autosummary/mlx.core.cos.rst", "python/_autosummary/mlx.core.cosh.rst", "python/_autosummary/mlx.core.cummax.rst", "python/_autosummary/mlx.core.cummin.rst", "python/_autosummary/mlx.core.cumprod.rst", "python/_autosummary/mlx.core.cumsum.rst", "python/_autosummary/mlx.core.custom_function.rst", "python/_autosummary/mlx.core.default_device.rst", "python/_autosummary/mlx.core.default_stream.rst", "python/_autosummary/mlx.core.degrees.rst", "python/_autosummary/mlx.core.dequantize.rst", "python/_autosummary/mlx.core.diag.rst", "python/_autosummary/mlx.core.diagonal.rst", "python/_autosummary/mlx.core.disable_compile.rst", "python/_autosummary/mlx.core.distributed.Group.rst", "python/_autosummary/mlx.core.distributed.all_gather.rst", "python/_autosummary/mlx.core.distributed.all_sum.rst", "python/_autosummary/mlx.core.distributed.init.rst", "python/_autosummary/mlx.core.distributed.is_available.rst", "python/_autosummary/mlx.core.divide.rst", "python/_autosummary/mlx.core.divmod.rst", "python/_autosummary/mlx.core.einsum.rst", "python/_autosummary/mlx.core.einsum_path.rst", "python/_autosummary/mlx.core.enable_compile.rst", "python/_autosummary/mlx.core.equal.rst", "python/_autosummary/mlx.core.erf.rst", "python/_autosummary/mlx.core.erfinv.rst", "python/_autosummary/mlx.core.eval.rst", "python/_autosummary/mlx.core.exp.rst", "python/_autosummary/mlx.core.expand_dims.rst", "python/_autosummary/mlx.core.expm1.rst", "python/_autosummary/mlx.core.eye.rst", "python/_autosummary/mlx.core.fast.layer_norm.rst", "python/_autosummary/mlx.core.fast.rms_norm.rst", "python/_autosummary/mlx.core.fast.rope.rst", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention.rst", "python/_autosummary/mlx.core.fft.fft.rst", "python/_autosummary/mlx.core.fft.fft2.rst", "python/_autosummary/mlx.core.fft.fftn.rst", "python/_autosummary/mlx.core.fft.ifft.rst", "python/_autosummary/mlx.core.fft.ifft2.rst", "python/_autosummary/mlx.core.fft.ifftn.rst", "python/_autosummary/mlx.core.fft.irfft.rst", "python/_autosummary/mlx.core.fft.irfft2.rst", "python/_autosummary/mlx.core.fft.irfftn.rst", "python/_autosummary/mlx.core.fft.rfft.rst", "python/_autosummary/mlx.core.fft.rfft2.rst", "python/_autosummary/mlx.core.fft.rfftn.rst", "python/_autosummary/mlx.core.flatten.rst", "python/_autosummary/mlx.core.floor.rst", "python/_autosummary/mlx.core.floor_divide.rst", "python/_autosummary/mlx.core.full.rst", "python/_autosummary/mlx.core.gather_mm.rst", "python/_autosummary/mlx.core.gather_qmm.rst", "python/_autosummary/mlx.core.grad.rst", "python/_autosummary/mlx.core.greater.rst", "python/_autosummary/mlx.core.greater_equal.rst", "python/_autosummary/mlx.core.hadamard_transform.rst", "python/_autosummary/mlx.core.identity.rst", "python/_autosummary/mlx.core.inner.rst", "python/_autosummary/mlx.core.isclose.rst", "python/_autosummary/mlx.core.isinf.rst", "python/_autosummary/mlx.core.isnan.rst", "python/_autosummary/mlx.core.isneginf.rst", "python/_autosummary/mlx.core.isposinf.rst", "python/_autosummary/mlx.core.issubdtype.rst", "python/_autosummary/mlx.core.jvp.rst", "python/_autosummary/mlx.core.left_shift.rst", "python/_autosummary/mlx.core.less.rst", "python/_autosummary/mlx.core.less_equal.rst", "python/_autosummary/mlx.core.linalg.cholesky.rst", "python/_autosummary/mlx.core.linalg.inv.rst", "python/_autosummary/mlx.core.linalg.norm.rst", "python/_autosummary/mlx.core.linalg.qr.rst", "python/_autosummary/mlx.core.linalg.svd.rst", "python/_autosummary/mlx.core.linspace.rst", "python/_autosummary/mlx.core.load.rst", "python/_autosummary/mlx.core.log.rst", "python/_autosummary/mlx.core.log10.rst", "python/_autosummary/mlx.core.log1p.rst", "python/_autosummary/mlx.core.log2.rst", "python/_autosummary/mlx.core.logaddexp.rst", "python/_autosummary/mlx.core.logical_and.rst", "python/_autosummary/mlx.core.logical_not.rst", "python/_autosummary/mlx.core.logical_or.rst", "python/_autosummary/mlx.core.logsumexp.rst", "python/_autosummary/mlx.core.matmul.rst", "python/_autosummary/mlx.core.max.rst", "python/_autosummary/mlx.core.maximum.rst", "python/_autosummary/mlx.core.mean.rst", "python/_autosummary/mlx.core.meshgrid.rst", "python/_autosummary/mlx.core.metal.clear_cache.rst", "python/_autosummary/mlx.core.metal.device_info.rst", "python/_autosummary/mlx.core.metal.get_active_memory.rst", "python/_autosummary/mlx.core.metal.get_cache_memory.rst", "python/_autosummary/mlx.core.metal.get_peak_memory.rst", "python/_autosummary/mlx.core.metal.is_available.rst", "python/_autosummary/mlx.core.metal.reset_peak_memory.rst", "python/_autosummary/mlx.core.metal.set_cache_limit.rst", "python/_autosummary/mlx.core.metal.set_memory_limit.rst", "python/_autosummary/mlx.core.metal.start_capture.rst", "python/_autosummary/mlx.core.metal.stop_capture.rst", "python/_autosummary/mlx.core.min.rst", "python/_autosummary/mlx.core.minimum.rst", "python/_autosummary/mlx.core.moveaxis.rst", "python/_autosummary/mlx.core.multiply.rst", "python/_autosummary/mlx.core.nan_to_num.rst", "python/_autosummary/mlx.core.negative.rst", "python/_autosummary/mlx.core.new_stream.rst", "python/_autosummary/mlx.core.not_equal.rst", "python/_autosummary/mlx.core.ones.rst", "python/_autosummary/mlx.core.ones_like.rst", "python/_autosummary/mlx.core.outer.rst", "python/_autosummary/mlx.core.pad.rst", "python/_autosummary/mlx.core.partition.rst", "python/_autosummary/mlx.core.power.rst", "python/_autosummary/mlx.core.prod.rst", "python/_autosummary/mlx.core.quantize.rst", "python/_autosummary/mlx.core.quantized_matmul.rst", "python/_autosummary/mlx.core.radians.rst", "python/_autosummary/mlx.core.random.bernoulli.rst", "python/_autosummary/mlx.core.random.categorical.rst", "python/_autosummary/mlx.core.random.gumbel.rst", "python/_autosummary/mlx.core.random.key.rst", "python/_autosummary/mlx.core.random.laplace.rst", "python/_autosummary/mlx.core.random.multivariate_normal.rst", "python/_autosummary/mlx.core.random.normal.rst", "python/_autosummary/mlx.core.random.randint.rst", "python/_autosummary/mlx.core.random.seed.rst", "python/_autosummary/mlx.core.random.split.rst", "python/_autosummary/mlx.core.random.truncated_normal.rst", "python/_autosummary/mlx.core.random.uniform.rst", "python/_autosummary/mlx.core.reciprocal.rst", "python/_autosummary/mlx.core.remainder.rst", "python/_autosummary/mlx.core.repeat.rst", "python/_autosummary/mlx.core.reshape.rst", "python/_autosummary/mlx.core.right_shift.rst", "python/_autosummary/mlx.core.round.rst", "python/_autosummary/mlx.core.rsqrt.rst", "python/_autosummary/mlx.core.save.rst", "python/_autosummary/mlx.core.save_gguf.rst", "python/_autosummary/mlx.core.save_safetensors.rst", "python/_autosummary/mlx.core.savez.rst", "python/_autosummary/mlx.core.savez_compressed.rst", "python/_autosummary/mlx.core.set_default_device.rst", "python/_autosummary/mlx.core.set_default_stream.rst", "python/_autosummary/mlx.core.sigmoid.rst", "python/_autosummary/mlx.core.sign.rst", "python/_autosummary/mlx.core.sin.rst", "python/_autosummary/mlx.core.sinh.rst", "python/_autosummary/mlx.core.softmax.rst", "python/_autosummary/mlx.core.sort.rst", "python/_autosummary/mlx.core.split.rst", "python/_autosummary/mlx.core.sqrt.rst", "python/_autosummary/mlx.core.square.rst", "python/_autosummary/mlx.core.squeeze.rst", "python/_autosummary/mlx.core.stack.rst", "python/_autosummary/mlx.core.std.rst", "python/_autosummary/mlx.core.stop_gradient.rst", "python/_autosummary/mlx.core.stream.rst", "python/_autosummary/mlx.core.subtract.rst", "python/_autosummary/mlx.core.sum.rst", "python/_autosummary/mlx.core.swapaxes.rst", "python/_autosummary/mlx.core.synchronize.rst", "python/_autosummary/mlx.core.take.rst", "python/_autosummary/mlx.core.take_along_axis.rst", "python/_autosummary/mlx.core.tan.rst", "python/_autosummary/mlx.core.tanh.rst", "python/_autosummary/mlx.core.tensordot.rst", "python/_autosummary/mlx.core.tile.rst", "python/_autosummary/mlx.core.topk.rst", "python/_autosummary/mlx.core.trace.rst", "python/_autosummary/mlx.core.transpose.rst", "python/_autosummary/mlx.core.tri.rst", "python/_autosummary/mlx.core.tril.rst", "python/_autosummary/mlx.core.triu.rst", "python/_autosummary/mlx.core.value_and_grad.rst", "python/_autosummary/mlx.core.var.rst", "python/_autosummary/mlx.core.view.rst", "python/_autosummary/mlx.core.vjp.rst", "python/_autosummary/mlx.core.vmap.rst", "python/_autosummary/mlx.core.where.rst", "python/_autosummary/mlx.core.zeros.rst", "python/_autosummary/mlx.core.zeros_like.rst", "python/_autosummary/mlx.nn.quantize.rst", "python/_autosummary/mlx.nn.value_and_grad.rst", "python/_autosummary/mlx.optimizers.clip_grad_norm.rst", "python/_autosummary/mlx.utils.tree_flatten.rst", "python/_autosummary/mlx.utils.tree_map.rst", "python/_autosummary/mlx.utils.tree_map_with_path.rst", "python/_autosummary/mlx.utils.tree_reduce.rst", "python/_autosummary/mlx.utils.tree_unflatten.rst", "python/_autosummary/stream_class.rst", "python/array.rst", "python/data_types.rst", "python/devices_and_streams.rst", "python/distributed.rst", "python/fast.rst", "python/fft.rst", "python/linalg.rst", "python/metal.rst", "python/nn.rst", "python/nn/_autosummary/mlx.nn.ALiBi.rst", "python/nn/_autosummary/mlx.nn.AvgPool1d.rst", "python/nn/_autosummary/mlx.nn.AvgPool2d.rst", "python/nn/_autosummary/mlx.nn.BatchNorm.rst", "python/nn/_autosummary/mlx.nn.Conv1d.rst", "python/nn/_autosummary/mlx.nn.Conv2d.rst", "python/nn/_autosummary/mlx.nn.Conv3d.rst", "python/nn/_autosummary/mlx.nn.Dropout.rst", "python/nn/_autosummary/mlx.nn.Dropout2d.rst", "python/nn/_autosummary/mlx.nn.Dropout3d.rst", "python/nn/_autosummary/mlx.nn.Embedding.rst", "python/nn/_autosummary/mlx.nn.GELU.rst", "python/nn/_autosummary/mlx.nn.GLU.rst", "python/nn/_autosummary/mlx.nn.GRU.rst", "python/nn/_autosummary/mlx.nn.GroupNorm.rst", "python/nn/_autosummary/mlx.nn.HardShrink.rst", "python/nn/_autosummary/mlx.nn.HardTanh.rst", "python/nn/_autosummary/mlx.nn.Hardswish.rst", "python/nn/_autosummary/mlx.nn.InstanceNorm.rst", "python/nn/_autosummary/mlx.nn.LSTM.rst", "python/nn/_autosummary/mlx.nn.LayerNorm.rst", "python/nn/_autosummary/mlx.nn.LeakyReLU.rst", "python/nn/_autosummary/mlx.nn.Linear.rst", "python/nn/_autosummary/mlx.nn.MaxPool1d.rst", "python/nn/_autosummary/mlx.nn.MaxPool2d.rst", "python/nn/_autosummary/mlx.nn.Mish.rst", "python/nn/_autosummary/mlx.nn.Module.apply.rst", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules.rst", "python/nn/_autosummary/mlx.nn.Module.children.rst", "python/nn/_autosummary/mlx.nn.Module.eval.rst", "python/nn/_autosummary/mlx.nn.Module.filter_and_map.rst", "python/nn/_autosummary/mlx.nn.Module.freeze.rst", "python/nn/_autosummary/mlx.nn.Module.leaf_modules.rst", "python/nn/_autosummary/mlx.nn.Module.load_weights.rst", "python/nn/_autosummary/mlx.nn.Module.modules.rst", "python/nn/_autosummary/mlx.nn.Module.named_modules.rst", "python/nn/_autosummary/mlx.nn.Module.parameters.rst", "python/nn/_autosummary/mlx.nn.Module.save_weights.rst", "python/nn/_autosummary/mlx.nn.Module.set_dtype.rst", "python/nn/_autosummary/mlx.nn.Module.state.rst", "python/nn/_autosummary/mlx.nn.Module.train.rst", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters.rst", "python/nn/_autosummary/mlx.nn.Module.training.rst", "python/nn/_autosummary/mlx.nn.Module.unfreeze.rst", "python/nn/_autosummary/mlx.nn.Module.update.rst", "python/nn/_autosummary/mlx.nn.Module.update_modules.rst", "python/nn/_autosummary/mlx.nn.MultiHeadAttention.rst", "python/nn/_autosummary/mlx.nn.PReLU.rst", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding.rst", "python/nn/_autosummary/mlx.nn.QuantizedLinear.rst", "python/nn/_autosummary/mlx.nn.RMSNorm.rst", "python/nn/_autosummary/mlx.nn.RNN.rst", "python/nn/_autosummary/mlx.nn.ReLU.rst", "python/nn/_autosummary/mlx.nn.ReLU6.rst", "python/nn/_autosummary/mlx.nn.RoPE.rst", "python/nn/_autosummary/mlx.nn.SELU.rst", "python/nn/_autosummary/mlx.nn.Sequential.rst", "python/nn/_autosummary/mlx.nn.SiLU.rst", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding.rst", "python/nn/_autosummary/mlx.nn.Softmax.rst", "python/nn/_autosummary/mlx.nn.Softmin.rst", "python/nn/_autosummary/mlx.nn.Softplus.rst", "python/nn/_autosummary/mlx.nn.Softshrink.rst", "python/nn/_autosummary/mlx.nn.Softsign.rst", "python/nn/_autosummary/mlx.nn.Step.rst", "python/nn/_autosummary/mlx.nn.Tanh.rst", "python/nn/_autosummary/mlx.nn.Transformer.rst", "python/nn/_autosummary/mlx.nn.Upsample.rst", "python/nn/_autosummary/mlx.nn.init.constant.rst", "python/nn/_autosummary/mlx.nn.init.glorot_normal.rst", "python/nn/_autosummary/mlx.nn.init.glorot_uniform.rst", "python/nn/_autosummary/mlx.nn.init.he_normal.rst", "python/nn/_autosummary/mlx.nn.init.he_uniform.rst", "python/nn/_autosummary/mlx.nn.init.identity.rst", "python/nn/_autosummary/mlx.nn.init.normal.rst", "python/nn/_autosummary/mlx.nn.init.uniform.rst", "python/nn/_autosummary_functions/mlx.nn.elu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_approx.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx.rst", "python/nn/_autosummary_functions/mlx.nn.glu.rst", "python/nn/_autosummary_functions/mlx.nn.hard_shrink.rst", "python/nn/_autosummary_functions/mlx.nn.hard_tanh.rst", "python/nn/_autosummary_functions/mlx.nn.hardswish.rst", "python/nn/_autosummary_functions/mlx.nn.leaky_relu.rst", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.log_softmax.rst", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss.rst", "python/nn/_autosummary_functions/mlx.nn.mish.rst", "python/nn/_autosummary_functions/mlx.nn.prelu.rst", "python/nn/_autosummary_functions/mlx.nn.relu.rst", "python/nn/_autosummary_functions/mlx.nn.relu6.rst", "python/nn/_autosummary_functions/mlx.nn.selu.rst", "python/nn/_autosummary_functions/mlx.nn.sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.silu.rst", "python/nn/_autosummary_functions/mlx.nn.softmax.rst", "python/nn/_autosummary_functions/mlx.nn.softmin.rst", "python/nn/_autosummary_functions/mlx.nn.softplus.rst", "python/nn/_autosummary_functions/mlx.nn.softshrink.rst", "python/nn/_autosummary_functions/mlx.nn.step.rst", "python/nn/_autosummary_functions/mlx.nn.tanh.rst", "python/nn/functions.rst", "python/nn/init.rst", "python/nn/layers.rst", "python/nn/losses.rst", "python/nn/module.rst", "python/ops.rst", "python/optimizers.rst", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta.rst", "python/optimizers/_autosummary/mlx.optimizers.Adafactor.rst", "python/optimizers/_autosummary/mlx.optimizers.Adagrad.rst", "python/optimizers/_autosummary/mlx.optimizers.Adam.rst", "python/optimizers/_autosummary/mlx.optimizers.AdamW.rst", "python/optimizers/_autosummary/mlx.optimizers.Adamax.rst", "python/optimizers/_autosummary/mlx.optimizers.Lion.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update.rst", "python/optimizers/_autosummary/mlx.optimizers.RMSprop.rst", "python/optimizers/_autosummary/mlx.optimizers.SGD.rst", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.join_schedules.rst", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule.rst", "python/optimizers/_autosummary/mlx.optimizers.step_decay.rst", "python/optimizers/common_optimizers.rst", "python/optimizers/optimizer.rst", "python/optimizers/schedulers.rst", "python/random.rst", "python/transforms.rst", "python/tree_utils.rst", "usage/compile.rst", "usage/distributed.rst", "usage/function_transforms.rst", "usage/indexing.rst", "usage/lazy_evaluation.rst", "usage/numpy.rst", "usage/quick_start.rst", "usage/saving_and_loading.rst", "usage/unified_memory.rst", "usage/using_streams.rst"], "titles": ["Operations", "Custom Extensions in MLX", "Metal Debugger", "Linear Regression", "LLM inference", "Multi-Layer Perceptron", "MLX", "Build and Install", "mlx.core.Device", "mlx.core.Dtype", "mlx.core.DtypeCategory", "mlx.core.abs", "mlx.core.add", "mlx.core.addmm", "mlx.core.all", "mlx.core.allclose", "mlx.core.any", "mlx.core.arange", "mlx.core.arccos", "mlx.core.arccosh", "mlx.core.arcsin", "mlx.core.arcsinh", "mlx.core.arctan", "mlx.core.arctan2", "mlx.core.arctanh", "mlx.core.argmax", "mlx.core.argmin", "mlx.core.argpartition", "mlx.core.argsort", "mlx.core.array", "mlx.core.array.T", "mlx.core.array.abs", "mlx.core.array.all", "mlx.core.array.any", "mlx.core.array.argmax", "mlx.core.array.argmin", "mlx.core.array.astype", "mlx.core.array.at", "mlx.core.array.conj", "mlx.core.array.cos", "mlx.core.array.cummax", "mlx.core.array.cummin", "mlx.core.array.cumprod", "mlx.core.array.cumsum", "mlx.core.array.diag", "mlx.core.array.diagonal", "mlx.core.array.dtype", "mlx.core.array.exp", "mlx.core.array.flatten", "mlx.core.array.item", "mlx.core.array.itemsize", "mlx.core.array.log", "mlx.core.array.log10", "mlx.core.array.log1p", "mlx.core.array.log2", "mlx.core.array.logsumexp", "mlx.core.array.max", "mlx.core.array.mean", "mlx.core.array.min", "mlx.core.array.moveaxis", "mlx.core.array.nbytes", "mlx.core.array.ndim", "mlx.core.array.prod", "mlx.core.array.reciprocal", "mlx.core.array.reshape", "mlx.core.array.round", "mlx.core.array.rsqrt", "mlx.core.array.shape", "mlx.core.array.sin", "mlx.core.array.size", "mlx.core.array.split", "mlx.core.array.sqrt", "mlx.core.array.square", "mlx.core.array.squeeze", "mlx.core.array.sum", "mlx.core.array.swapaxes", "mlx.core.array.tolist", "mlx.core.array.transpose", "mlx.core.array.var", "mlx.core.array.view", "mlx.core.array_equal", "mlx.core.as_strided", "mlx.core.atleast_1d", "mlx.core.atleast_2d", "mlx.core.atleast_3d", "mlx.core.bitwise_and", "mlx.core.bitwise_or", "mlx.core.bitwise_xor", "mlx.core.block_masked_mm", "mlx.core.broadcast_to", "mlx.core.ceil", "mlx.core.clip", "mlx.core.compile", "mlx.core.concatenate", "mlx.core.conj", "mlx.core.conjugate", "mlx.core.conv1d", "mlx.core.conv2d", "mlx.core.conv_general", "mlx.core.convolve", "mlx.core.cos", "mlx.core.cosh", "mlx.core.cummax", "mlx.core.cummin", "mlx.core.cumprod", "mlx.core.cumsum", "mlx.core.custom_function", "mlx.core.default_device", "mlx.core.default_stream", "mlx.core.degrees", "mlx.core.dequantize", "mlx.core.diag", "mlx.core.diagonal", "mlx.core.disable_compile", "mlx.core.distributed.Group", "mlx.core.distributed.all_gather", "mlx.core.distributed.all_sum", "mlx.core.distributed.init", "mlx.core.distributed.is_available", "mlx.core.divide", "mlx.core.divmod", "mlx.core.einsum", "mlx.core.einsum_path", "mlx.core.enable_compile", "mlx.core.equal", "mlx.core.erf", "mlx.core.erfinv", "mlx.core.eval", "mlx.core.exp", "mlx.core.expand_dims", "mlx.core.expm1", "mlx.core.eye", "mlx.core.fast.layer_norm", "mlx.core.fast.rms_norm", "mlx.core.fast.rope", "mlx.core.fast.scaled_dot_product_attention", "mlx.core.fft.fft", "mlx.core.fft.fft2", "mlx.core.fft.fftn", "mlx.core.fft.ifft", "mlx.core.fft.ifft2", "mlx.core.fft.ifftn", "mlx.core.fft.irfft", "mlx.core.fft.irfft2", "mlx.core.fft.irfftn", "mlx.core.fft.rfft", "mlx.core.fft.rfft2", "mlx.core.fft.rfftn", "mlx.core.flatten", "mlx.core.floor", "mlx.core.floor_divide", "mlx.core.full", "mlx.core.gather_mm", "mlx.core.gather_qmm", "mlx.core.grad", "mlx.core.greater", "mlx.core.greater_equal", "mlx.core.hadamard_transform", "mlx.core.identity", "mlx.core.inner", "mlx.core.isclose", "mlx.core.isinf", "mlx.core.isnan", "mlx.core.isneginf", "mlx.core.isposinf", "mlx.core.issubdtype", "mlx.core.jvp", "mlx.core.left_shift", "mlx.core.less", "mlx.core.less_equal", "mlx.core.linalg.cholesky", "mlx.core.linalg.inv", "mlx.core.linalg.norm", "mlx.core.linalg.qr", "mlx.core.linalg.svd", "mlx.core.linspace", "mlx.core.load", "mlx.core.log", "mlx.core.log10", "mlx.core.log1p", "mlx.core.log2", "mlx.core.logaddexp", "mlx.core.logical_and", "mlx.core.logical_not", "mlx.core.logical_or", "mlx.core.logsumexp", "mlx.core.matmul", "mlx.core.max", "mlx.core.maximum", "mlx.core.mean", "mlx.core.meshgrid", "mlx.core.metal.clear_cache", "mlx.core.metal.device_info", "mlx.core.metal.get_active_memory", "mlx.core.metal.get_cache_memory", "mlx.core.metal.get_peak_memory", "mlx.core.metal.is_available", "mlx.core.metal.reset_peak_memory", "mlx.core.metal.set_cache_limit", "mlx.core.metal.set_memory_limit", "mlx.core.metal.start_capture", "mlx.core.metal.stop_capture", "mlx.core.min", "mlx.core.minimum", "mlx.core.moveaxis", "mlx.core.multiply", "mlx.core.nan_to_num", "mlx.core.negative", "mlx.core.new_stream", "mlx.core.not_equal", "mlx.core.ones", "mlx.core.ones_like", "mlx.core.outer", "mlx.core.pad", "mlx.core.partition", "mlx.core.power", "mlx.core.prod", "mlx.core.quantize", "mlx.core.quantized_matmul", "mlx.core.radians", "mlx.core.random.bernoulli", "mlx.core.random.categorical", "mlx.core.random.gumbel", "mlx.core.random.key", "mlx.core.random.laplace", "mlx.core.random.multivariate_normal", "mlx.core.random.normal", "mlx.core.random.randint", "mlx.core.random.seed", "mlx.core.random.split", "mlx.core.random.truncated_normal", "mlx.core.random.uniform", "mlx.core.reciprocal", "mlx.core.remainder", "mlx.core.repeat", "mlx.core.reshape", "mlx.core.right_shift", "mlx.core.round", "mlx.core.rsqrt", "mlx.core.save", "mlx.core.save_gguf", "mlx.core.save_safetensors", "mlx.core.savez", "mlx.core.savez_compressed", "mlx.core.set_default_device", "mlx.core.set_default_stream", "mlx.core.sigmoid", "mlx.core.sign", "mlx.core.sin", "mlx.core.sinh", "mlx.core.softmax", "mlx.core.sort", "mlx.core.split", "mlx.core.sqrt", "mlx.core.square", "mlx.core.squeeze", "mlx.core.stack", "mlx.core.std", "mlx.core.stop_gradient", "mlx.core.stream", "mlx.core.subtract", "mlx.core.sum", "mlx.core.swapaxes", "mlx.core.synchronize", "mlx.core.take", "mlx.core.take_along_axis", "mlx.core.tan", "mlx.core.tanh", "mlx.core.tensordot", "mlx.core.tile", "mlx.core.topk", "mlx.core.trace", "mlx.core.transpose", "mlx.core.tri", "mlx.core.tril", "mlx.core.triu", "mlx.core.value_and_grad", "mlx.core.var", "mlx.core.view", "mlx.core.vjp", "mlx.core.vmap", "mlx.core.where", "mlx.core.zeros", "mlx.core.zeros_like", "mlx.nn.quantize", "mlx.nn.value_and_grad", "mlx.optimizers.clip_grad_norm", "mlx.utils.tree_flatten", "mlx.utils.tree_map", "mlx.utils.tree_map_with_path", "mlx.utils.tree_reduce", "mlx.utils.tree_unflatten", "mlx.core.Stream", "Array", "Data Types", "Devices and Streams", "Distributed Communication", "Fast", "FFT", "Linear Algebra", "Metal", "Neural Networks", "mlx.nn.ALiBi", "mlx.nn.AvgPool1d", "mlx.nn.AvgPool2d", "mlx.nn.BatchNorm", "mlx.nn.Conv1d", "mlx.nn.Conv2d", "mlx.nn.Conv3d", "mlx.nn.Dropout", "mlx.nn.Dropout2d", "mlx.nn.Dropout3d", "mlx.nn.Embedding", "mlx.nn.GELU", "mlx.nn.GLU", "mlx.nn.GRU", "mlx.nn.GroupNorm", "mlx.nn.HardShrink", "mlx.nn.HardTanh", "mlx.nn.Hardswish", "mlx.nn.InstanceNorm", "mlx.nn.LSTM", "mlx.nn.LayerNorm", "mlx.nn.LeakyReLU", "mlx.nn.Linear", "mlx.nn.MaxPool1d", "mlx.nn.MaxPool2d", "mlx.nn.Mish", "mlx.nn.Module.apply", "mlx.nn.Module.apply_to_modules", "mlx.nn.Module.children", "mlx.nn.Module.eval", "mlx.nn.Module.filter_and_map", "mlx.nn.Module.freeze", "mlx.nn.Module.leaf_modules", "mlx.nn.Module.load_weights", "mlx.nn.Module.modules", "mlx.nn.Module.named_modules", "mlx.nn.Module.parameters", "mlx.nn.Module.save_weights", "mlx.nn.Module.set_dtype", "mlx.nn.Module.state", "mlx.nn.Module.train", "mlx.nn.Module.trainable_parameters", "mlx.nn.Module.training", "mlx.nn.Module.unfreeze", "mlx.nn.Module.update", "mlx.nn.Module.update_modules", "mlx.nn.MultiHeadAttention", "mlx.nn.PReLU", "mlx.nn.QuantizedEmbedding", "mlx.nn.QuantizedLinear", "mlx.nn.RMSNorm", "mlx.nn.RNN", "mlx.nn.ReLU", "mlx.nn.ReLU6", "mlx.nn.RoPE", "mlx.nn.SELU", "mlx.nn.Sequential", "mlx.nn.SiLU", "mlx.nn.SinusoidalPositionalEncoding", "mlx.nn.Softmax", "mlx.nn.Softmin", "mlx.nn.Softplus", "mlx.nn.Softshrink", "mlx.nn.Softsign", "mlx.nn.Step", "mlx.nn.Tanh", "mlx.nn.Transformer", "mlx.nn.Upsample", "mlx.nn.init.constant", "mlx.nn.init.glorot_normal", "mlx.nn.init.glorot_uniform", "mlx.nn.init.he_normal", "mlx.nn.init.he_uniform", "mlx.nn.init.identity", "mlx.nn.init.normal", "mlx.nn.init.uniform", "mlx.nn.elu", "mlx.nn.gelu", "mlx.nn.gelu_approx", "mlx.nn.gelu_fast_approx", "mlx.nn.glu", "mlx.nn.hard_shrink", "mlx.nn.hard_tanh", "mlx.nn.hardswish", "mlx.nn.leaky_relu", "mlx.nn.log_sigmoid", "mlx.nn.log_softmax", "mlx.nn.losses.binary_cross_entropy", "mlx.nn.losses.cosine_similarity_loss", "mlx.nn.losses.cross_entropy", "mlx.nn.losses.gaussian_nll_loss", "mlx.nn.losses.hinge_loss", "mlx.nn.losses.huber_loss", "mlx.nn.losses.kl_div_loss", "mlx.nn.losses.l1_loss", "mlx.nn.losses.log_cosh_loss", "mlx.nn.losses.margin_ranking_loss", "mlx.nn.losses.mse_loss", "mlx.nn.losses.nll_loss", "mlx.nn.losses.smooth_l1_loss", "mlx.nn.losses.triplet_loss", "mlx.nn.mish", "mlx.nn.prelu", "mlx.nn.relu", "mlx.nn.relu6", "mlx.nn.selu", "mlx.nn.sigmoid", "mlx.nn.silu", "mlx.nn.softmax", "mlx.nn.softmin", "mlx.nn.softplus", "mlx.nn.softshrink", "mlx.nn.step", "mlx.nn.tanh", "Functions", "Initializers", "Layers", "Loss Functions", "Module", "Operations", "Optimizers", "mlx.optimizers.AdaDelta", "mlx.optimizers.Adafactor", "mlx.optimizers.Adagrad", "mlx.optimizers.Adam", "mlx.optimizers.AdamW", "mlx.optimizers.Adamax", "mlx.optimizers.Lion", "mlx.optimizers.Optimizer.apply_gradients", "mlx.optimizers.Optimizer.init", "mlx.optimizers.Optimizer.state", "mlx.optimizers.Optimizer.update", "mlx.optimizers.RMSprop", "mlx.optimizers.SGD", "mlx.optimizers.cosine_decay", "mlx.optimizers.exponential_decay", "mlx.optimizers.join_schedules", "mlx.optimizers.linear_schedule", "mlx.optimizers.step_decay", "Common Optimizers", "Optimizer", "Schedulers", "Random", "Transforms", "Tree Utils", "Compilation", "Distributed Communication", "Function Transforms", "Indexing Arrays", "Lazy Evaluation", "Conversion to NumPy and Other Frameworks", "Quick Start Guide", "Saving and Loading Arrays", "Unified Memory", "Using Streams"], "terms": {"arrai": [0, 1, 4, 5, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 115, 116, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 301, 305, 321, 328, 335, 338, 343, 349, 369, 370, 371, 372, 373, 374, 375, 376, 377, 382, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 414, 417, 420, 423, 424, 425, 426, 427, 428, 429, 434, 435, 436, 437, 438, 439, 440, 447, 448, 449, 451, 452, 453, 455], "arang": [0, 172, 294, 369, 450, 452], "doubl": [0, 4], "start": [0, 1, 3, 4, 6, 7, 17, 134, 175, 200, 252, 290, 447, 450, 455], "stop": [0, 1, 4, 17, 175, 201, 258, 449, 450], "step": [0, 2, 4, 5, 17, 301, 315, 321, 353, 424, 431, 436, 438, 439, 440, 447, 448], "dtype": [0, 1, 4, 10, 17, 29, 36, 37, 76, 79, 131, 148, 151, 158, 165, 172, 173, 175, 210, 222, 224, 225, 226, 227, 230, 231, 271, 273, 278, 282, 294, 340, 369, 370, 371, 372, 373, 374, 375, 376, 377, 389, 391, 398, 436, 437, 438, 439, 440, 447, 448, 449, 450, 452, 453, 454], "streamordevic": [0, 1], "": [0, 1, 3, 4, 5, 46, 50, 61, 92, 108, 110, 137, 138, 140, 141, 143, 144, 146, 147, 154, 172, 174, 176, 189, 212, 217, 221, 237, 240, 241, 257, 259, 276, 277, 278, 280, 285, 301, 304, 315, 321, 326, 332, 333, 335, 339, 340, 341, 345, 353, 422, 431, 432, 444, 447, 449, 451, 452, 453, 454, 455], "A": [0, 1, 4, 6, 7, 8, 67, 80, 92, 132, 133, 135, 154, 166, 172, 173, 174, 176, 185, 186, 187, 192, 202, 217, 220, 221, 222, 224, 225, 226, 227, 230, 231, 252, 256, 259, 276, 279, 280, 284, 285, 286, 287, 288, 289, 290, 291, 292, 301, 305, 310, 315, 316, 320, 322, 332, 336, 337, 340, 346, 347, 352, 358, 360, 368, 371, 372, 374, 381, 402, 403, 420, 422, 426, 428, 430, 431, 433, 438, 447, 448, 449, 451, 452], "1d": [0, 96, 99, 240, 265], "number": [0, 1, 10, 17, 60, 69, 92, 97, 98, 110, 131, 153, 154, 158, 166, 175, 206, 213, 217, 218, 221, 224, 226, 229, 231, 234, 237, 268, 269, 273, 276, 279, 280, 284, 301, 305, 306, 307, 308, 310, 311, 316, 320, 348, 349, 368, 369, 371, 372, 373, 374, 436, 438, 439, 444, 447, 449, 456], "option": [0, 2, 4, 13, 14, 16, 17, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 88, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 110, 111, 112, 117, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 157, 158, 163, 164, 170, 171, 172, 173, 174, 175, 176, 185, 187, 189, 190, 199, 202, 206, 210, 213, 214, 216, 217, 218, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 234, 235, 250, 251, 252, 255, 256, 257, 261, 263, 264, 268, 270, 271, 272, 273, 274, 275, 276, 277, 280, 282, 284, 287, 288, 289, 290, 303, 304, 305, 306, 307, 308, 315, 321, 324, 325, 326, 328, 332, 333, 335, 340, 345, 348, 350, 351, 353, 356, 360, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 423, 424, 425, 426, 427, 428, 429, 431, 434, 435, 436, 444, 447, 454, 456], "int": [0, 1, 4, 5, 8, 14, 16, 17, 25, 26, 27, 28, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 48, 55, 56, 57, 58, 59, 62, 65, 67, 70, 73, 74, 75, 76, 78, 81, 88, 89, 93, 96, 97, 98, 102, 103, 104, 105, 110, 111, 112, 122, 129, 131, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 158, 165, 172, 175, 185, 187, 189, 192, 193, 194, 195, 198, 199, 202, 204, 210, 213, 214, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 237, 250, 251, 252, 255, 256, 257, 261, 262, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 282, 284, 292, 301, 303, 304, 305, 306, 307, 308, 312, 314, 315, 316, 320, 321, 322, 324, 325, 326, 348, 350, 351, 352, 353, 356, 360, 368, 382, 390, 391, 395, 400, 402, 420, 436, 438, 439, 440], "linspac": 0, "num": [0, 4, 175, 229], "50": [0, 175], "float32": [0, 1, 10, 17, 131, 135, 157, 158, 165, 172, 173, 175, 210, 222, 224, 225, 226, 230, 231, 273, 282, 294, 369, 370, 371, 372, 373, 374, 375, 376, 377, 389, 391, 398, 436, 437, 438, 439, 440, 447, 448, 449, 450, 451, 452, 453, 454], "evenli": [0, 175], "space": [0, 1, 175, 389, 400], "rang": [0, 1, 2, 3, 4, 5, 7, 17, 148, 152, 175, 372, 374, 380, 381, 422, 436, 437, 438, 439, 440, 444, 447, 449, 451, 455], "astyp": [0, 1, 4, 328, 452], "convert": [0, 1, 76, 82, 83, 84, 109, 148, 219, 350, 351, 451, 452, 453], "an": [0, 1, 2, 4, 5, 7, 9, 14, 16, 29, 82, 83, 84, 89, 96, 97, 98, 114, 127, 131, 132, 135, 148, 151, 158, 170, 172, 176, 199, 204, 210, 211, 213, 216, 217, 218, 234, 235, 237, 252, 255, 262, 264, 265, 268, 269, 273, 280, 282, 283, 287, 288, 289, 290, 301, 303, 304, 309, 316, 321, 322, 324, 325, 326, 328, 348, 349, 351, 353, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 404, 417, 422, 423, 433, 437, 442, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456], "given": [0, 1, 7, 14, 16, 27, 37, 81, 89, 91, 93, 102, 103, 104, 105, 110, 112, 122, 127, 129, 136, 137, 138, 139, 140, 141, 145, 146, 147, 151, 152, 172, 185, 187, 189, 198, 202, 206, 208, 216, 225, 227, 237, 245, 250, 252, 257, 261, 263, 269, 270, 271, 273, 274, 275, 277, 292, 303, 304, 309, 325, 326, 332, 348, 390, 392, 398], "data": [0, 1, 5, 6, 9, 17, 131, 145, 146, 151, 158, 175, 206, 210, 230, 271, 273, 278, 282, 311, 370, 371, 372, 373, 374, 375, 376, 377, 447, 448, 450, 452], "type": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 67, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 198, 199, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 290, 301, 340, 368, 370, 371, 372, 373, 374, 375, 376, 377, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 447, 450], "as_strid": 0, "std": [0, 1, 376], "vector": [0, 1, 3, 6, 159, 166, 172, 264, 279, 280, 312, 391, 453], "shape": [0, 1, 2, 4, 5, 64, 80, 81, 88, 89, 92, 96, 97, 98, 112, 115, 135, 136, 139, 142, 145, 146, 147, 151, 152, 157, 166, 171, 186, 210, 211, 220, 221, 222, 224, 225, 226, 227, 230, 231, 235, 265, 278, 279, 281, 282, 283, 301, 303, 304, 305, 306, 307, 308, 310, 311, 315, 320, 321, 324, 325, 326, 335, 353, 370, 371, 372, 373, 374, 375, 376, 377, 391, 402, 422, 447, 449, 450, 453, 455], "size_t": [0, 1], "stride": [0, 1, 81, 96, 97, 98, 303, 304, 306, 307, 308, 325, 326, 356, 450], "offset": [0, 1, 4, 45, 81, 112, 132, 134, 271], "creat": [0, 1, 4, 7, 81, 117, 131, 158, 259, 301, 420, 422, 438, 447, 450, 452], "view": [0, 2, 81, 452], "copi": [0, 1, 4, 6, 214, 251, 452], "anoth": [0, 91, 165, 186, 260, 281, 294, 301, 328, 447, 449, 450, 455], "full": [0, 1, 5, 64, 77, 99, 250, 346, 347, 392, 447, 448, 451], "val": [0, 29, 151], "fill": [0, 1, 151, 211, 273, 283, 370, 371, 372, 373, 374, 376, 377], "valu": [0, 3, 4, 11, 15, 17, 25, 26, 49, 76, 80, 91, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 160, 172, 174, 175, 192, 206, 213, 220, 221, 222, 224, 225, 226, 227, 230, 231, 240, 264, 265, 276, 280, 285, 287, 288, 289, 290, 294, 304, 309, 310, 311, 317, 320, 324, 326, 332, 348, 349, 364, 366, 368, 370, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 414, 420, 424, 427, 436, 437, 439, 440, 449], "templat": [0, 1], "typenam": [0, 1], "t": [0, 1, 4, 7, 125, 135, 153, 170, 218, 276, 301, 303, 315, 321, 325, 353, 423, 424, 425, 426, 427, 428, 429, 434, 435, 447, 449, 455], "zero": [0, 131, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 190, 197, 273, 274, 275, 283, 301, 303, 304, 309, 310, 311, 335, 370, 371, 372, 373, 374, 375, 376, 377, 417, 422, 424, 450], "const": [0, 1, 392], "inlin": 0, "zeros_lik": 0, "ones": [0, 1, 4, 211, 242, 273, 346, 347, 422, 448, 450], "ones_lik": 0, "ey": [0, 4, 171], "n": [0, 1, 4, 29, 88, 96, 97, 98, 131, 136, 138, 139, 141, 142, 145, 147, 157, 158, 225, 257, 273, 277, 303, 304, 305, 306, 307, 308, 310, 311, 315, 321, 325, 326, 353, 369, 397, 402, 448], "m": [0, 1, 4, 7, 88, 131, 152, 157, 172, 273, 303, 304, 325, 326, 423, 447], "k": [0, 4, 44, 88, 111, 131, 135, 152, 157, 270, 273, 274, 275, 303, 324, 325, 333], "specifi": [0, 1, 17, 36, 97, 98, 112, 143, 144, 151, 154, 172, 175, 204, 210, 221, 234, 262, 264, 265, 268, 271, 272, 276, 280, 282, 305, 366, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 414, 448, 449, 455], "diagon": [0, 44, 111, 131, 271, 273, 274, 275], "everywher": 0, "els": [0, 1, 4, 301, 333, 448, 451], "ident": [0, 106, 131, 258, 301, 342], "squar": [0, 3, 4, 133, 158, 171, 238, 253, 276, 288, 301, 352, 399, 401, 423, 424, 426, 427, 428, 449, 452], "matrix": [0, 3, 13, 44, 88, 110, 111, 131, 152, 153, 157, 158, 170, 171, 172, 173, 174, 186, 190, 217, 218, 225, 350, 351, 375, 417], "major": [0, 1], "tri": 0, "tril": 0, "x": [0, 1, 3, 4, 5, 37, 88, 106, 115, 116, 125, 130, 132, 133, 153, 157, 158, 172, 218, 222, 237, 242, 246, 274, 275, 281, 288, 290, 301, 303, 304, 305, 313, 314, 316, 320, 322, 323, 324, 325, 326, 327, 328, 349, 352, 354, 360, 366, 369, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 420, 422, 429, 447, 448, 449, 450, 451, 452, 453, 455], "0": [0, 1, 3, 4, 5, 7, 8, 13, 17, 37, 44, 45, 48, 65, 70, 78, 81, 93, 96, 97, 98, 111, 112, 131, 135, 148, 152, 154, 171, 172, 173, 191, 198, 206, 213, 220, 224, 226, 231, 234, 237, 252, 256, 257, 271, 273, 274, 275, 276, 277, 280, 286, 287, 289, 290, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 316, 317, 320, 322, 323, 325, 326, 349, 354, 356, 360, 364, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 383, 384, 385, 386, 389, 391, 393, 394, 398, 401, 402, 404, 405, 406, 407, 413, 414, 417, 420, 423, 424, 426, 427, 428, 429, 431, 434, 435, 436, 437, 438, 439, 440, 444, 447, 448, 449, 450, 451, 452, 453, 454], "triu": 0, "reshap": [0, 4, 172, 369, 450], "flatten": [0, 27, 28, 102, 103, 104, 105, 172, 212, 214, 234, 251, 264, 265, 270, 287], "start_axi": [0, 48, 148], "end_axi": [0, 48, 148], "1": [0, 1, 2, 4, 5, 13, 17, 27, 28, 37, 45, 48, 96, 97, 98, 111, 112, 130, 135, 136, 137, 139, 140, 142, 143, 144, 145, 146, 147, 148, 157, 159, 165, 172, 173, 186, 190, 199, 212, 214, 217, 221, 224, 225, 226, 231, 246, 251, 264, 270, 271, 276, 286, 289, 290, 294, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 320, 321, 322, 324, 325, 326, 349, 352, 353, 356, 360, 366, 369, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 400, 401, 402, 407, 408, 410, 411, 412, 414, 417, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 434, 435, 436, 437, 438, 439, 440, 447, 448, 449, 450, 452, 453, 454, 455], "dimens": [0, 1, 4, 14, 16, 25, 26, 61, 67, 76, 82, 83, 84, 92, 97, 98, 112, 129, 134, 143, 144, 146, 147, 148, 152, 153, 159, 170, 171, 172, 173, 174, 185, 186, 187, 189, 202, 216, 217, 221, 229, 257, 261, 265, 268, 272, 277, 305, 306, 307, 308, 310, 311, 314, 315, 316, 320, 321, 322, 348, 352, 353, 356, 368, 369, 382, 391, 447, 449], "hadamard_transform": 0, "float": [0, 1, 10, 13, 15, 17, 76, 132, 133, 134, 135, 150, 151, 157, 160, 165, 172, 206, 218, 220, 224, 226, 286, 294, 305, 309, 310, 311, 316, 320, 322, 328, 340, 352, 356, 360, 366, 368, 369, 370, 371, 372, 373, 374, 376, 377, 390, 391, 392, 394, 398, 401, 402, 413, 414, 423, 424, 425, 426, 427, 428, 429, 434, 435, 436, 437, 439, 440], "scale": [0, 1, 4, 13, 110, 132, 133, 134, 135, 153, 157, 217, 218, 224, 226, 286, 310, 311, 322, 348, 356, 357, 360, 369, 407, 424], "nullopt": 0, "multipli": [0, 1, 37, 153, 217, 218, 309, 360, 369], "hadamard": [0, 157], "correspond": [0, 1, 14, 16, 76, 91, 110, 112, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 185, 187, 202, 216, 261, 268, 280, 288, 449], "size": [0, 1, 4, 5, 50, 67, 88, 97, 110, 129, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 151, 153, 157, 158, 165, 172, 194, 199, 217, 218, 221, 235, 252, 255, 278, 284, 301, 303, 304, 306, 307, 308, 312, 320, 325, 326, 350, 351, 369, 424, 448, 451, 452], "squeez": [0, 369, 447], "ax": [0, 1, 14, 16, 25, 26, 77, 106, 129, 137, 138, 140, 141, 143, 144, 146, 147, 148, 159, 172, 185, 187, 189, 202, 213, 216, 250, 255, 257, 261, 262, 268, 272, 277, 449], "remov": [0, 112, 186, 221, 255, 391], "singleton": [0, 14, 16, 25, 26, 117, 185, 186, 187, 189, 202, 216, 257, 261, 277], "axi": [0, 1, 4, 5, 14, 16, 25, 26, 27, 28, 32, 33, 34, 35, 40, 41, 42, 43, 55, 56, 57, 58, 62, 70, 73, 74, 78, 93, 102, 103, 104, 105, 112, 115, 129, 132, 133, 136, 139, 142, 143, 144, 145, 146, 147, 148, 157, 172, 185, 187, 189, 202, 204, 213, 214, 216, 221, 234, 250, 251, 252, 255, 256, 257, 261, 262, 264, 265, 269, 270, 271, 272, 277, 278, 280, 303, 304, 314, 325, 326, 353, 382, 388, 390, 391, 395, 400, 402, 410, 411, 450], "all": [0, 1, 2, 5, 7, 15, 27, 37, 82, 83, 84, 92, 97, 98, 106, 115, 116, 117, 131, 138, 141, 144, 147, 152, 153, 174, 186, 213, 214, 255, 284, 301, 328, 329, 333, 336, 337, 338, 343, 345, 348, 360, 368, 369, 417, 420, 442, 444, 447, 450, 451, 453, 456], "expand_dim": 0, "add": [0, 1, 2, 4, 13, 37, 129, 181, 213, 217, 306, 307, 308, 449, 455], "slice": [0, 450], "each": [0, 1, 67, 110, 127, 134, 153, 165, 170, 171, 174, 186, 190, 213, 217, 218, 221, 234, 242, 243, 252, 269, 272, 278, 280, 281, 310, 311, 312, 315, 316, 321, 353, 356, 368, 389, 391, 444, 447, 448, 451], "slice_upd": 0, "src": 0, "updat": [0, 1, 3, 4, 5, 37, 92, 284, 288, 290, 305, 328, 329, 335, 340, 341, 342, 347, 422, 424, 427, 429, 430, 431, 435, 436, 437, 438, 439, 440, 447, 448, 451], "from": [0, 1, 4, 5, 6, 81, 109, 110, 112, 115, 116, 143, 144, 146, 147, 151, 152, 157, 172, 176, 186, 190, 195, 198, 211, 217, 219, 220, 221, 222, 223, 224, 227, 230, 242, 255, 258, 260, 264, 265, 270, 271, 281, 283, 287, 288, 289, 290, 291, 301, 324, 333, 335, 348, 371, 372, 373, 374, 376, 377, 392, 401, 417, 422, 446, 447, 448, 449, 451, 452, 453, 454, 455], "sourc": [0, 1, 2, 59, 204, 272, 448], "split": [0, 314, 316, 382], "num_split": 0, "sub": [0, 5, 112, 229, 271, 284], "along": [0, 1, 25, 26, 92, 93, 102, 103, 104, 105, 115, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 153, 157, 172, 234, 250, 252, 256, 264, 265, 268, 269, 270, 271, 278, 301, 314, 353, 382], "indic": [0, 1, 15, 25, 26, 27, 28, 37, 152, 153, 154, 160, 161, 162, 163, 164, 174, 252, 264, 265, 276, 342, 344, 391, 398, 438, 450], "meshgrid": 0, "bool": [0, 1, 14, 15, 16, 25, 26, 32, 33, 34, 35, 40, 41, 42, 43, 55, 56, 57, 58, 62, 74, 76, 78, 80, 92, 98, 102, 103, 104, 105, 117, 118, 134, 153, 160, 165, 170, 172, 176, 185, 187, 189, 190, 196, 199, 202, 216, 218, 257, 261, 277, 305, 306, 307, 308, 315, 316, 320, 321, 322, 324, 328, 332, 333, 335, 340, 342, 345, 348, 351, 353, 356, 360, 368, 369, 389, 392, 424, 435], "spars": [0, 190], "fals": [0, 1, 4, 14, 15, 16, 25, 26, 32, 33, 34, 35, 40, 41, 42, 43, 55, 56, 57, 58, 62, 74, 78, 80, 92, 98, 102, 103, 104, 105, 117, 160, 165, 170, 172, 176, 185, 187, 189, 190, 199, 202, 216, 257, 261, 277, 281, 284, 287, 288, 289, 290, 294, 316, 320, 322, 324, 333, 335, 345, 348, 351, 356, 360, 368, 369, 389, 392, 424, 435, 452], "string": [0, 1, 122, 192, 452, 454], "index": [0, 1, 6, 8, 27, 37, 129, 131, 154, 190, 214, 264, 265, 276, 292], "xy": [0, 190], "coordin": [0, 190], "clip": [0, 286, 389, 424], "a_min": [0, 91], "a_max": [0, 91], "limit": [0, 1, 91, 198, 199, 450], "concaten": [0, 4, 115], "stack": [0, 447], "new": [0, 1, 5, 89, 112, 204, 208, 235, 256, 272, 278, 288, 289, 340, 348, 420, 422, 433, 438, 447, 450, 451, 452], "repeat": [0, 269], "arr": [0, 239, 450], "tile": [0, 135], "rep": [0, 269], "transpos": [0, 4, 30, 153, 218], "permut": [0, 5], "accord": [0, 222, 281, 284, 348, 371, 372, 373, 374], "initializer_list": 0, "swapax": [0, 106], "axis1": [0, 45, 75, 112, 262, 271], "axis2": [0, 45, 75, 112, 262, 271], "swap": [0, 99, 199, 262, 347], "two": [0, 1, 12, 13, 15, 23, 80, 83, 85, 86, 87, 88, 112, 119, 124, 137, 140, 146, 152, 153, 155, 156, 160, 168, 169, 170, 171, 173, 174, 181, 186, 188, 203, 205, 209, 212, 262, 290, 304, 314, 321, 326, 382, 390, 447, 448, 449, 450, 455], "moveaxi": 0, "destin": [0, 1, 59, 204], "move": [0, 1, 204, 455], "pad": [0, 96, 97, 98, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 303, 304, 306, 307, 308, 325, 326], "low_pad_s": 0, "high_pad_s": 0, "pad_valu": 0, "constant": [0, 1, 4, 7, 132, 133, 213, 301, 305, 316, 322, 352, 392, 402, 434, 436, 447, 452], "pair": [0, 1, 213, 335, 356], "pad_width": [0, 213], "revers": [0, 1, 40, 41, 42, 43, 81, 102, 103, 104, 105, 272, 360], "order": [0, 27, 81, 98, 122, 172, 214, 217, 270, 301, 316, 346, 358, 431, 447, 449], "broadcast_to": 0, "broadcast": [0, 1, 12, 15, 85, 86, 87, 89, 91, 119, 120, 124, 151, 155, 156, 160, 167, 168, 169, 181, 186, 188, 203, 205, 209, 215, 220, 221, 225, 230, 231, 233, 236, 260, 265, 281, 348], "broadcast_arrai": [0, 1], "input": [0, 1, 3, 4, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 115, 116, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 229, 232, 233, 234, 235, 236, 237, 238, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 280, 281, 283, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 320, 321, 322, 324, 325, 326, 348, 351, 352, 353, 356, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 382, 389, 390, 392, 393, 394, 395, 397, 398, 400, 402, 414, 417, 447, 449, 450, 453, 454], "against": 0, "one": [0, 1, 4, 7, 37, 76, 82, 91, 97, 98, 129, 131, 132, 133, 172, 179, 186, 218, 221, 255, 260, 294, 345, 369, 391, 448, 455], "equal": [0, 15, 27, 80, 131, 156, 160, 169, 209, 214, 227, 252, 320, 324], "b": [0, 1, 2, 4, 12, 13, 15, 23, 80, 85, 86, 87, 88, 119, 120, 124, 150, 152, 155, 156, 159, 160, 167, 168, 169, 172, 181, 182, 184, 186, 188, 203, 205, 209, 212, 215, 217, 224, 233, 236, 260, 268, 276, 289, 290, 314, 324, 353, 369, 382, 449, 450, 451, 452, 453, 454, 455], "return": [0, 1, 3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 49, 67, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 198, 199, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 301, 315, 321, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 342, 343, 345, 346, 347, 353, 370, 371, 372, 373, 374, 375, 376, 377, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 417, 420, 430, 446, 447, 448, 449, 450, 451, 452, 454, 455], "element": [0, 1, 11, 12, 18, 19, 20, 21, 22, 23, 24, 27, 69, 81, 85, 86, 87, 90, 100, 101, 102, 103, 104, 105, 110, 119, 120, 124, 125, 126, 128, 130, 131, 149, 150, 153, 155, 156, 160, 161, 162, 163, 164, 167, 168, 169, 177, 178, 179, 180, 181, 182, 183, 184, 188, 190, 203, 205, 207, 209, 214, 215, 217, 218, 232, 233, 234, 236, 238, 246, 247, 248, 249, 253, 254, 260, 264, 266, 267, 270, 276, 278, 281, 309, 310, 311, 315, 319, 321, 327, 349, 353, 356, 384, 385, 387, 388, 403, 404, 406, 409, 410, 411, 412, 447, 449], "wise": [0, 1, 11, 12, 18, 19, 20, 21, 22, 23, 24, 85, 86, 87, 90, 100, 101, 119, 120, 124, 125, 126, 128, 130, 149, 150, 155, 156, 160, 167, 168, 169, 177, 178, 179, 180, 181, 182, 183, 184, 188, 203, 205, 207, 209, 215, 232, 233, 236, 238, 246, 247, 248, 249, 253, 254, 260, 266, 267, 310, 311, 319, 327, 349, 384, 385, 387, 388, 403, 404, 406, 409, 410, 411, 412, 447], "not_equ": 0, "greater": [0, 4, 27, 130, 156, 214, 286, 366, 414], "greater_equ": 0, "less": [0, 4, 27, 169, 214, 356, 401], "less_equ": 0, "array_equ": [0, 15, 160], "equal_nan": [0, 15, 80, 160], "true": [0, 1, 3, 4, 15, 40, 41, 42, 43, 80, 92, 102, 103, 104, 105, 134, 153, 160, 165, 170, 172, 176, 190, 199, 218, 250, 281, 284, 287, 288, 289, 290, 294, 301, 305, 306, 307, 308, 315, 316, 320, 321, 322, 324, 332, 333, 335, 342, 345, 351, 353, 356, 360, 368, 369, 389, 397, 424], "have": [0, 1, 4, 7, 15, 80, 82, 83, 84, 88, 115, 143, 144, 146, 147, 153, 160, 186, 200, 221, 278, 287, 321, 348, 358, 429, 431, 446, 447, 448, 450, 451, 455], "same": [0, 1, 4, 7, 15, 37, 80, 89, 92, 97, 98, 99, 115, 132, 133, 142, 145, 146, 147, 153, 154, 160, 166, 213, 221, 237, 278, 279, 281, 289, 301, 304, 305, 309, 316, 320, 326, 350, 370, 371, 372, 373, 374, 375, 376, 377, 391, 402, 420, 430, 444, 447, 448, 450, 455], "isnan": 0, "isinf": 0, "isposinf": 0, "isneginf": 0, "where": [0, 5, 131, 160, 217, 276, 280, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 320, 321, 322, 324, 325, 326, 332, 349, 352, 353, 366, 373, 374, 378, 379, 381, 392, 398, 404, 407, 409, 414, 431, 448, 449, 450], "condit": [0, 1, 281, 455], "y": [0, 1, 3, 4, 5, 37, 106, 157, 281, 301, 305, 310, 316, 320, 322, 324, 352, 393, 398, 401, 422, 425, 447, 448, 449, 451, 452], "select": [0, 2, 7, 270, 281, 328, 332, 340], "depend": [0, 1, 2, 3, 7, 76, 172, 315, 321, 353, 448, 450, 454, 455], "nan_to_num": 0, "nan": [0, 15, 80, 160, 162, 206], "0f": 0, "posinf": [0, 206], "neginf": [0, 206], "replac": [0, 4, 206, 346, 347, 368, 401], "infin": [0, 161, 163, 164, 206, 325, 326, 428], "finit": [0, 206], "keepdim": [0, 14, 16, 25, 26, 32, 33, 34, 35, 55, 56, 57, 58, 62, 74, 78, 172, 185, 187, 189, 202, 216, 250, 257, 261, 277], "ar": [0, 1, 3, 4, 5, 6, 7, 15, 17, 80, 88, 89, 91, 92, 98, 99, 106, 112, 127, 131, 137, 138, 140, 141, 143, 144, 146, 147, 148, 153, 154, 160, 161, 162, 163, 164, 165, 166, 172, 173, 176, 186, 199, 212, 213, 214, 217, 218, 220, 221, 222, 227, 230, 231, 242, 243, 255, 256, 264, 276, 279, 280, 284, 287, 288, 294, 305, 306, 307, 308, 309, 310, 311, 316, 320, 322, 324, 335, 348, 351, 369, 389, 391, 392, 416, 420, 422, 429, 431, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455], "non": [0, 1, 7, 190, 343, 353, 403, 420], "allclos": 0, "rtol": [0, 15, 160], "1e": [0, 3, 5, 15, 160, 305, 316, 320, 322, 323, 352, 390, 392, 402, 422, 423, 424, 425, 426, 427, 428, 431, 434, 436, 437, 438, 439, 440], "5": [0, 1, 3, 4, 7, 172, 199, 220, 290, 303, 305, 309, 310, 311, 313, 317, 320, 325, 364, 369, 370, 373, 374, 380, 383, 401, 413, 417, 422, 434, 436, 437, 447, 449, 450], "atol": [0, 15, 160], "8": [0, 1, 4, 7, 172, 217, 294, 304, 320, 326, 368, 390, 423, 424, 425, 426, 427, 428, 434, 447, 450, 453, 455], "within": [0, 2, 27, 160], "toler": [0, 15, 160], "isclos": 0, "boolean": [0, 15, 80, 160, 161, 162, 163, 164, 182, 183, 184, 294, 344, 450], "reduc": [0, 7, 14, 16, 25, 26, 116, 185, 187, 189, 202, 216, 257, 261, 277, 290, 305, 368, 397], "output": [0, 1, 4, 7, 14, 15, 16, 17, 27, 81, 88, 89, 92, 94, 95, 102, 103, 104, 105, 106, 121, 131, 132, 133, 134, 135, 142, 145, 146, 147, 151, 152, 154, 157, 158, 160, 172, 175, 185, 187, 189, 190, 202, 206, 210, 211, 214, 216, 220, 221, 222, 224, 225, 226, 227, 230, 231, 242, 243, 250, 255, 257, 261, 265, 271, 273, 276, 277, 278, 279, 280, 281, 282, 283, 303, 304, 305, 306, 307, 308, 320, 324, 325, 326, 348, 351, 366, 368, 369, 371, 372, 373, 374, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 414, 417, 447, 448, 449, 450, 451, 452, 453, 454, 455], "i": [0, 1, 2, 4, 5, 6, 7, 15, 17, 27, 36, 76, 81, 91, 97, 98, 99, 102, 103, 104, 105, 106, 111, 112, 115, 116, 118, 120, 127, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 157, 160, 165, 166, 170, 171, 172, 173, 174, 176, 181, 185, 186, 190, 196, 199, 213, 214, 217, 218, 225, 226, 235, 239, 240, 241, 246, 250, 252, 257, 258, 263, 264, 265, 268, 271, 272, 276, 277, 278, 279, 280, 281, 284, 286, 287, 288, 289, 290, 294, 296, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 320, 321, 322, 324, 325, 326, 332, 333, 339, 341, 342, 344, 345, 347, 348, 349, 351, 352, 353, 356, 360, 366, 368, 369, 373, 374, 379, 381, 389, 390, 392, 397, 398, 401, 402, 404, 409, 414, 420, 422, 424, 427, 429, 430, 431, 436, 438, 439, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456], "ani": [0, 1, 4, 6, 17, 92, 287, 288, 289, 290, 291, 301, 313, 328, 329, 332, 341, 351, 368, 369, 417, 439, 446, 447, 449, 451, 453, 454, 455], "sum": [0, 1, 3, 12, 105, 116, 159, 172, 185, 250, 268, 271, 301, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 448, 450, 452], "mean": [0, 3, 4, 5, 133, 224, 225, 226, 276, 301, 305, 316, 333, 352, 376, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 447, 449, 452], "comput": [0, 1, 3, 4, 5, 6, 7, 102, 103, 104, 105, 106, 110, 122, 130, 134, 154, 166, 170, 171, 172, 181, 189, 212, 217, 233, 250, 257, 258, 268, 276, 277, 279, 285, 301, 305, 315, 316, 320, 321, 322, 333, 346, 351, 352, 356, 368, 371, 372, 373, 374, 380, 381, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 422, 423, 424, 426, 427, 428, 429, 433, 447, 448, 449, 453, 455], "var": [0, 305, 316, 320, 322, 392], "ddof": [0, 78, 257, 277], "varianc": [0, 257, 277, 305, 316, 392], "standard": [0, 5, 49, 76, 186, 222, 226, 257, 368, 371, 373, 376, 448, 453], "deviat": [0, 226, 257, 371, 373, 376], "deviatoin": 0, "prod": 0, "The": [0, 1, 2, 4, 5, 6, 7, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 46, 50, 60, 61, 67, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 194, 195, 198, 199, 200, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 240, 241, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 296, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 320, 321, 322, 324, 325, 326, 328, 329, 333, 335, 339, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 353, 356, 358, 360, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 382, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 414, 417, 420, 422, 423, 424, 425, 426, 427, 428, 429, 432, 434, 435, 436, 439, 442, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456], "product": [0, 1, 13, 81, 104, 159, 166, 186, 212, 216, 268, 279, 348, 453], "max": [0, 1, 172, 188, 325, 326, 349, 384, 385, 390, 392, 393, 398, 402, 404, 406, 424, 428, 447, 449, 455], "maximum": [0, 5, 25, 37, 91, 102, 195, 199, 286, 301, 323, 354, 360, 380, 381, 386, 405, 420, 451], "min": [0, 1, 172, 203, 349, 384, 385, 404, 406], "minimum": [0, 26, 37, 91, 103, 360, 389, 390], "argmin": 0, "argmax": [0, 5], "sort": [0, 27, 28, 214, 270], "argsort": 0, "partit": [0, 27], "kth": [0, 27, 214], "smaller": [0, 7, 214, 429, 447], "first": [0, 1, 2, 3, 4, 5, 7, 112, 115, 148, 154, 167, 174, 182, 184, 186, 214, 229, 236, 262, 268, 271, 276, 287, 289, 290, 301, 304, 316, 326, 369, 390, 398, 424, 426, 427, 428, 431, 447, 449, 452, 455], "argpartit": 0, "topk": 0, "logsumexp": 0, "ab": [0, 15, 160, 172, 276, 316, 320, 322, 327, 352, 381, 403, 447], "absolut": [0, 11, 15, 160, 380, 381, 401], "neg": [0, 112, 148, 163, 206, 271, 323, 325, 326, 348, 392, 400, 402, 450], "negat": [0, 207], "sign": [0, 15, 160, 294, 429], "logical_not": 0, "logic": [0, 1, 182, 183, 184], "logical_and": 0, "logical_or": 0, "reciproc": [0, 238], "subtract": [0, 37], "divid": [0, 1, 37, 150, 217, 233, 448], "divmod": 0, "quotient": [0, 119, 120, 150], "remaind": [0, 120], "floor_divid": 0, "integ": [0, 10, 150, 152, 153, 165, 172, 192, 213, 217, 218, 220, 227, 252, 268, 280, 294, 312, 340, 438, 450], "divis": [0, 119, 150, 217, 233], "equival": [0, 1, 30, 64, 77, 120, 150, 153, 157, 264, 313, 317, 318, 319, 347, 349, 351, 354, 355, 357, 359, 361, 362, 363, 364, 365, 367], "do": [0, 1, 4, 7, 278, 301, 334, 345, 417, 420, 427, 447, 448, 449, 451], "floor": [0, 150], "between": [0, 1, 6, 91, 148, 368, 390, 393, 394, 397, 438, 448, 451, 452, 455], "ceil": 0, "exp": [0, 130, 181, 185, 222, 250, 378, 395, 407, 408, 412, 447, 455], "exponenti": [0, 128, 130, 357, 378, 407, 437], "sin": [0, 106, 360, 449, 453], "sine": [0, 20, 21, 248, 249, 449], "co": [0, 1, 106, 360, 449], "cosin": [0, 18, 19, 100, 101, 390, 436, 438, 449], "tan": 0, "tangent": [0, 1, 22, 23, 24, 106, 166, 266, 267, 367, 415], "arcsin": 0, "arc": 0, "arcco": 0, "arctan": 0, "arctan2": 0, "invers": [0, 18, 19, 20, 21, 22, 23, 24, 126, 139, 140, 141, 142, 143, 144, 171], "ratio": [0, 23], "sinh": 0, "hyperbol": [0, 19, 21, 24, 101, 249, 267, 367, 415], "cosh": [0, 397], "tanh": [0, 301, 313, 315, 321, 327, 353, 380, 403], "arcsinh": 0, "arccosh": 0, "arctanh": 0, "degre": [0, 219, 402], "radian": [0, 109], "log": [0, 179, 181, 185, 387, 388, 389, 392, 395, 397, 400, 412], "natur": [0, 177, 179, 451], "logarithm": [0, 177, 178, 179, 180], "log2": 0, "base": [0, 1, 134, 172, 178, 180, 215, 356, 368, 420, 422, 428, 442, 444, 447, 450], "2": [0, 1, 3, 4, 5, 37, 97, 111, 112, 125, 137, 140, 142, 143, 144, 145, 146, 147, 148, 157, 165, 170, 171, 172, 173, 174, 180, 186, 217, 225, 229, 268, 271, 273, 274, 275, 286, 290, 294, 301, 303, 304, 307, 313, 323, 325, 326, 352, 360, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 391, 392, 394, 401, 402, 417, 420, 422, 423, 425, 426, 427, 431, 434, 447, 448, 449, 450, 451, 452, 453, 454, 455], "log10": 0, "10": [0, 2, 4, 5, 178, 237, 242, 288, 301, 335, 417, 438, 440, 447, 448, 450], "log1p": 0, "plu": [0, 179], "logaddexp": 0, "sigmoid": [0, 4, 301, 359, 381, 387, 389, 409], "logist": [0, 3, 246, 381, 409], "erf": [0, 126, 447], "error": [0, 1, 7, 117, 125, 126, 199, 252, 313, 379, 380, 381, 397, 399, 449, 452], "function": [0, 1, 2, 3, 4, 5, 6, 15, 81, 92, 106, 120, 125, 126, 154, 160, 166, 170, 171, 172, 173, 174, 186, 246, 276, 279, 280, 285, 286, 288, 289, 290, 301, 313, 314, 317, 318, 319, 327, 329, 333, 340, 345, 349, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 403, 408, 410, 411, 412, 413, 414, 415, 417, 422, 431, 444, 446, 448, 450, 451, 452, 454], "erfinv": 0, "expm1": 0, "stop_gradi": [0, 449], "flow": [0, 258, 451], "gradient": [0, 3, 5, 106, 154, 258, 276, 285, 286, 301, 333, 346, 351, 368, 397, 420, 422, 423, 424, 426, 427, 428, 429, 430, 433, 435, 447, 448, 449, 450, 451, 452, 453], "round": [0, 217], "decim": [0, 65, 237], "point": [0, 1, 3, 4, 7, 81, 150, 218, 294], "matmul": [0, 152, 455], "multipl": [0, 7, 13, 88, 132, 133, 152, 153, 186, 205, 217, 218, 348, 360, 437, 438, 440, 447, 451, 454], "gather": [0, 115, 152, 153], "slice_s": 0, "entri": [0, 310, 311], "take": [0, 1, 4, 5, 85, 86, 87, 92, 152, 154, 166, 188, 203, 211, 218, 265, 276, 279, 280, 283, 289, 290, 348, 389, 444, 448, 449, 450, 454, 455, 456], "treat": [0, 1, 143, 144, 146, 147, 264, 369, 447], "take_along_axi": [0, 450], "scatter": 0, "paramet": [0, 1, 3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 328, 329, 332, 333, 335, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 358, 360, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 382, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 414, 416, 417, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 447, 448, 449, 451], "determin": [0, 1, 112, 225, 290, 294, 339, 454], "locat": [0, 1, 81, 346, 347, 448, 455], "assum": [0, 1, 4, 88, 173, 288, 301, 303, 304, 316, 325, 326], "d": [0, 1, 4, 111, 112, 159, 172, 186, 190, 212, 264, 271, 273, 274, 275, 291, 308, 311, 315, 321, 353, 423, 426, 428, 455], "simplic": 0, "which": [0, 1, 4, 5, 6, 7, 17, 36, 81, 92, 98, 112, 127, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 154, 161, 162, 163, 164, 166, 170, 171, 172, 173, 174, 176, 190, 200, 217, 221, 222, 234, 235, 239, 240, 241, 242, 243, 255, 256, 264, 271, 276, 279, 280, 284, 304, 310, 311, 313, 326, 328, 332, 356, 389, 391, 394, 398, 401, 417, 430, 431, 444, 447, 448, 449, 450, 451, 455, 456], "appli": [0, 37, 134, 135, 152, 174, 288, 289, 290, 301, 303, 304, 305, 306, 307, 308, 310, 311, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 329, 342, 349, 351, 352, 353, 354, 355, 357, 359, 361, 362, 363, 364, 365, 366, 367, 369, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 430, 433, 439, 442, 447, 448], "note": [0, 1, 4, 7, 15, 81, 88, 92, 106, 135, 143, 144, 153, 160, 172, 193, 217, 221, 278, 284, 301, 352, 369, 422, 452, 454], "assign": [0, 1, 37, 420], "henc": [0, 1, 217, 447], "If": [0, 1, 4, 7, 14, 15, 16, 17, 25, 26, 27, 28, 76, 80, 81, 91, 93, 99, 102, 103, 104, 105, 111, 112, 115, 116, 117, 127, 132, 134, 145, 146, 147, 150, 151, 154, 160, 170, 172, 176, 185, 186, 187, 189, 190, 198, 199, 202, 206, 210, 213, 214, 216, 221, 225, 234, 250, 251, 252, 257, 261, 263, 264, 265, 268, 270, 271, 276, 277, 280, 282, 284, 288, 290, 305, 306, 307, 308, 316, 322, 324, 333, 335, 345, 351, 353, 356, 358, 360, 369, 389, 391, 402, 424, 447, 448, 449, 451, 454, 455, 456], "provid": [0, 1, 4, 81, 110, 154, 268, 276, 288, 290, 296, 301, 328, 333, 335, 345, 346, 347, 350, 351, 368, 369, 416, 420, 448, 454, 456], "rank": [0, 398, 448], "must": [0, 1, 2, 7, 88, 91, 151, 153, 172, 220, 221, 225, 227, 230, 231, 281, 369, 452], "In": [0, 1, 4, 5, 37, 186, 217, 288, 301, 310, 316, 420, 423, 425, 426, 428, 429, 430, 446, 447, 448, 449, 451, 454, 455], "other": [0, 1, 4, 6, 165, 172, 301, 334, 420, 429, 447, 448, 450, 451, 453], "word": 0, "ndim": [0, 1, 148, 172, 174, 369], "lead": [0, 17, 81, 447], "remain": [0, 4, 276, 289, 309, 310, 311, 448], "For": [0, 1, 4, 7, 37, 135, 152, 165, 172, 217, 291, 301, 305, 310, 328, 333, 342, 345, 351, 356, 360, 369, 371, 372, 373, 374, 389, 417, 422, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455], "exampl": [0, 2, 3, 4, 5, 7, 17, 37, 106, 148, 172, 173, 259, 264, 286, 289, 290, 301, 303, 304, 305, 320, 325, 326, 333, 335, 342, 345, 369, 370, 371, 372, 373, 374, 375, 376, 377, 389, 391, 398, 417, 422, 431, 436, 437, 438, 439, 440, 444, 449, 450, 451, 452, 453, 454], "auto": [0, 1, 7], "4": [0, 1, 4, 110, 148, 153, 172, 217, 218, 242, 284, 290, 294, 303, 304, 305, 320, 325, 326, 350, 351, 368, 369, 371, 372, 373, 389, 447, 448, 450, 453, 455], "3": [0, 1, 4, 7, 148, 165, 172, 173, 286, 290, 308, 313, 369, 372, 374, 380, 385, 424, 429, 444, 447, 450, 452, 453], "out": [0, 1, 7, 88, 303, 304, 310, 311, 325, 326, 342, 447, 448, 449, 450], "produc": [0, 1, 7, 92, 348, 417], "thi": [0, 1, 4, 5, 7, 14, 15, 16, 17, 25, 26, 27, 28, 81, 106, 123, 152, 153, 157, 160, 166, 170, 171, 172, 173, 174, 181, 185, 186, 187, 189, 191, 193, 202, 214, 216, 221, 245, 250, 251, 252, 257, 261, 264, 270, 277, 286, 289, 290, 301, 309, 310, 311, 314, 315, 321, 329, 330, 332, 333, 336, 337, 338, 343, 345, 346, 347, 348, 351, 353, 366, 371, 372, 373, 374, 380, 381, 382, 389, 397, 414, 420, 431, 446, 447, 448, 449, 451, 452, 454], "row": [0, 1, 81, 131, 158, 217, 273], "posit": [0, 4, 27, 112, 134, 148, 154, 164, 170, 204, 206, 214, 225, 271, 276, 288, 301, 306, 307, 308, 348, 356, 360, 392, 402], "ad": [0, 1, 3, 7, 132, 320, 420, 423, 424, 425, 426, 427, 428, 434, 448, 451, 454], "we": [0, 1, 3, 4, 5, 110, 153, 217, 218, 301, 312, 350, 358, 427, 429, 444, 446, 447, 448, 449, 451, 455], "also": [0, 1, 4, 5, 6, 7, 10, 12, 85, 86, 87, 113, 119, 120, 124, 138, 141, 144, 147, 155, 156, 167, 168, 169, 181, 188, 203, 205, 209, 215, 217, 233, 236, 260, 284, 285, 296, 301, 332, 346, 348, 350, 351, 359, 379, 407, 409, 416, 422, 447, 448, 449, 450, 451, 452, 453, 456], "To": [0, 1, 2, 3, 4, 5, 7, 198, 301, 417, 422, 447, 448, 449, 453], "control": [0, 323, 444, 451], "addit": [0, 1, 4, 7, 12, 13, 132, 133, 135, 176, 305, 316, 322, 348, 352, 420, 449], "item": [0, 1, 3, 4, 5, 288, 422, 451, 452, 453], "togeth": [0, 1, 5, 217, 288, 289, 448], "doe": [0, 1, 2, 4, 7, 193, 278, 286, 301, 447, 450, 451, 452], "perform": [0, 1, 2, 4, 6, 13, 88, 98, 102, 103, 104, 105, 121, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 153, 157, 186, 218, 237, 250, 264, 301, 316, 368, 373, 374, 422, 447, 448, 450, 451, 455], "bound": [0, 227, 230, 231, 313, 377, 447, 450, 455], "check": [0, 1, 7, 80, 118, 165, 196, 335, 449, 450], "access": [0, 4, 49, 301, 420, 431, 448, 451, 455], "undefin": [0, 27, 106, 170, 214, 225, 450], "typic": [0, 135, 312, 422, 447, 451], "result": [0, 4, 13, 17, 37, 76, 81, 92, 132, 133, 153, 172, 186, 218, 225, 234, 256, 288, 289, 290, 360, 389, 447, 449, 452], "unintend": 0, "invalid": [0, 81], "memori": [0, 1, 6, 81, 191, 193, 194, 195, 197, 198, 199, 368, 420, 424, 447, 451, 452], "write": [0, 1, 4, 301, 452], "scatter_add": 0, "scatter_prod": 0, "scatter_max": 0, "linear": [0, 1, 4, 5, 6, 284, 288, 301, 313, 314, 323, 335, 351, 353, 354, 355, 357, 359, 369, 378, 379, 380, 381, 382, 386, 405, 406, 407, 409, 417, 420, 431, 439, 447], "scatter_min": 0, "sqrt": [0, 4, 125, 135, 157, 305, 313, 316, 320, 322, 324, 352, 360, 371, 372, 373, 374, 380, 423, 425, 426, 427, 434, 447], "root": [0, 4, 133, 238, 253, 352], "rsqrt": 0, "softmax": [0, 4, 135, 301, 388, 391], "precis": [0, 1, 4, 130, 135, 301, 313, 352, 389, 430, 447], "power": [0, 449, 452], "rais": [0, 4, 172, 199, 215, 252, 335], "cumsum": 0, "inclus": [0, 40, 41, 42, 43, 102, 103, 104, 105, 148], "cumul": [0, 81, 102, 103, 104, 105], "cumprod": 0, "cummax": 0, "cummin": 0, "conv_gener": 0, "weight": [0, 3, 96, 97, 98, 132, 133, 288, 301, 335, 339, 350, 351, 389, 391, 420, 424, 427, 429, 431, 435, 449, 451], "padding_lo": 0, "padding_hi": 0, "kernel_dil": [0, 98], "input_dil": [0, 98], "group": [0, 96, 97, 98, 110, 115, 116, 117, 135, 153, 217, 218, 278, 284, 316, 350, 351, 448], "flip": [0, 98, 99], "gener": [0, 1, 2, 3, 10, 17, 98, 131, 143, 144, 175, 190, 220, 225, 226, 227, 230, 231, 368, 444, 447, 450, 451, 456], "convolut": [0, 96, 97, 98, 99, 306, 307, 308, 310, 311], "filter": [0, 99, 306, 307, 308, 328, 332], "conv1d": [0, 301], "dilat": [0, 96, 97, 98, 306, 307], "conv2d": [0, 301], "2d": [0, 97, 112, 217, 305, 310], "conv3d": [0, 301], "tupl": [0, 29, 64, 67, 77, 93, 97, 98, 120, 122, 127, 129, 166, 172, 173, 174, 213, 217, 235, 255, 276, 279, 287, 288, 289, 290, 291, 303, 304, 307, 308, 325, 326, 335, 337, 358, 369, 424, 426, 427, 428, 429, 446, 449], "3d": [0, 1, 305, 311, 369], "quantized_matmul": 0, "w": [0, 3, 97, 110, 153, 217, 218, 276, 289, 304, 305, 307, 308, 310, 311, 324, 326, 422, 435, 449], "bias": [0, 110, 153, 217, 218, 315, 321, 333, 345, 348], "group_siz": [0, 110, 153, 217, 218, 284, 350, 351], "64": [0, 88, 110, 153, 217, 218, 284, 294, 350, 351], "bit": [0, 110, 153, 167, 217, 218, 236, 284, 294, 328, 350, 351, 352], "quantiz": [0, 110, 153, 176, 218, 350, 351], "its": [0, 1, 7, 186, 214, 229, 273, 285, 291, 301, 351, 422, 426, 427, 428, 448, 452, 455], "last": [0, 4, 28, 76, 132, 133, 138, 141, 143, 144, 146, 147, 148, 152, 153, 159, 170, 171, 173, 174, 186, 195, 221, 251, 268, 278, 306, 307, 308, 310, 311, 316, 369, 452], "dequant": [0, 217], "gather_qmm": 0, "lhs_indic": [0, 152, 153], "rhs_indic": [0, 152, 153], "level": [0, 152, 153, 373, 374], "tensordot": 0, "contract": [0, 122], "over": [0, 1, 4, 5, 14, 16, 25, 26, 27, 28, 96, 97, 98, 102, 103, 104, 105, 138, 141, 144, 147, 159, 172, 174, 175, 185, 187, 189, 202, 214, 216, 238, 250, 251, 257, 261, 268, 270, 277, 305, 306, 307, 308, 316, 322, 352, 391, 436, 439, 448, 449], "axes_a": 0, "axes_b": 0, "outer": [0, 447, 451], "inner": [0, 447], "addmm": 0, "c": [0, 1, 4, 13, 172, 303, 304, 305, 306, 307, 308, 310, 311, 320, 321, 325, 326, 452, 453, 455], "alpha": [0, 1, 13, 217, 378, 402, 404, 407, 427, 434], "f": [0, 1, 3, 5, 106, 172, 301, 321, 427, 447, 452], "beta": [0, 1, 13, 110, 217, 305, 316, 320, 322, 401, 422, 426, 427, 428, 429], "block_masked_mm": 0, "block_siz": [0, 88], "mask_out": [0, 88], "mask_lh": [0, 88], "mask_rh": [0, 88], "block": [0, 1, 4, 88, 368], "mask": [0, 4, 88, 135, 342, 348, 450], "gather_mm": [0, 153], "extract": [0, 4, 44, 111, 112, 301, 332, 420, 448], "construct": [0, 1, 5, 44, 111, 151, 210, 269, 282], "diag": [0, 174], "trace": [0, 2, 447], "implement": [0, 3, 5, 134, 135, 172, 312, 332, 348, 356, 358, 360, 366, 368, 369, 414, 423, 424, 425, 426, 428, 429, 430, 442, 447, 449], "allow": [0, 1, 165, 286, 301, 347, 420, 442, 448, 450, 453], "inject": 0, "ensur": [0, 1, 7, 286, 397, 448], "been": [0, 1, 4, 194, 451], "when": [0, 1, 4, 6, 7, 92, 98, 106, 170, 171, 172, 174, 176, 306, 307, 308, 369, 373, 374, 389, 395, 401, 420, 422, 438, 444, 447, 448, 455], "atleast_1d": 0, "atleast": 0, "atleast_2d": 0, "atleast_3d": 0, "number_of_el": 0, "invert": 0, "int32": [0, 10, 17, 37, 148, 165, 172, 227, 294, 369, 450, 453], "some": [0, 1, 3, 4, 5, 333, 345, 422, 431, 447, 449, 451], "scalar": [0, 1, 12, 13, 15, 29, 49, 76, 80, 85, 86, 87, 88, 89, 91, 119, 120, 124, 150, 151, 154, 155, 156, 157, 160, 167, 168, 169, 172, 175, 181, 182, 183, 184, 186, 188, 203, 205, 206, 209, 213, 215, 220, 227, 230, 231, 233, 236, 240, 260, 276, 278, 281, 285, 402, 449, 451, 453], "us": [0, 2, 3, 4, 5, 6, 7, 17, 37, 81, 106, 110, 113, 115, 116, 120, 134, 148, 153, 167, 170, 171, 172, 173, 174, 186, 193, 194, 195, 198, 217, 218, 234, 235, 236, 263, 287, 290, 294, 296, 301, 304, 310, 312, 313, 315, 321, 324, 326, 328, 332, 339, 346, 348, 350, 351, 353, 356, 360, 368, 369, 373, 374, 380, 381, 390, 417, 420, 422, 423, 424, 426, 427, 428, 429, 430, 431, 444, 446, 447, 448, 449, 450, 453, 455], "shapeless": [0, 92], "compil": [0, 2, 6, 7, 113, 123, 448, 449, 451], "pun": 0, "intend": [0, 447], "conjug": [0, 94], "bitwise_and": 0, "bitwis": [0, 85, 86, 87, 167, 236], "bitwise_or": 0, "bitwise_xor": 0, "exclus": [0, 81, 87], "left_shift": 0, "shift": [0, 167, 236, 305], "left": [0, 4, 134, 167, 172, 217, 303, 304, 313, 325, 326, 356, 369, 380, 381, 392, 394, 402], "right_shift": 0, "right": [0, 1, 7, 217, 236, 303, 304, 313, 325, 326, 369, 380, 381, 392, 394, 402], "you": [1, 2, 4, 5, 6, 7, 301, 360, 368, 417, 444, 447, 448, 449, 450, 452, 454, 455], "can": [1, 2, 4, 6, 7, 12, 17, 64, 77, 81, 85, 86, 87, 92, 112, 113, 114, 119, 120, 124, 127, 155, 156, 167, 168, 169, 172, 181, 188, 203, 205, 209, 215, 220, 221, 227, 230, 231, 233, 236, 240, 260, 271, 276, 290, 301, 304, 312, 326, 332, 345, 350, 358, 369, 391, 417, 420, 422, 430, 431, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456], "extend": [1, 213], "guid": [1, 6], "explain": 1, "how": [1, 4, 5, 301, 303, 304, 306, 307, 308, 312, 325, 326, 350, 369, 430, 447, 450, 455], "simpl": [1, 4, 5, 301, 312, 416, 422, 447, 448, 449, 451], "let": [1, 3, 4, 447, 449, 451, 452], "sai": [1, 4, 417, 451], "would": [1, 4, 369, 448, 450, 451, 452, 455], "like": [1, 4, 6, 165, 211, 283, 311, 397, 431, 433, 447, 448, 449, 451, 452, 453, 455], "them": [1, 4, 115, 301, 333, 345, 448, 455], "both": [1, 12, 85, 86, 87, 119, 120, 124, 155, 156, 165, 167, 168, 169, 172, 181, 188, 203, 205, 209, 215, 221, 233, 236, 260, 284, 303, 304, 320, 321, 325, 326, 422, 447, 448, 449, 453, 455], "coeffici": [1, 423, 424, 426, 427, 428, 429], "respect": [1, 3, 5, 132, 133, 152, 153, 154, 217, 276, 288, 301, 305, 313, 316, 320, 322, 420, 449, 453], "get": [1, 3, 5, 7, 97, 98, 107, 108, 192, 193, 194, 195, 223, 301, 447, 449, 451, 455], "z": [1, 315, 447, 451], "directli": [1, 4, 81], "import": [1, 2, 3, 4, 5, 7, 106, 157, 172, 242, 276, 287, 288, 289, 290, 291, 301, 303, 304, 305, 320, 325, 326, 335, 369, 389, 391, 398, 417, 420, 422, 447, 448, 449, 450, 451, 452, 453], "core": [1, 2, 3, 4, 5, 284, 301, 303, 304, 305, 320, 325, 326, 335, 338, 340, 343, 369, 370, 371, 372, 373, 374, 375, 376, 377, 389, 391, 398, 417, 420, 422, 447, 448, 452, 453], "mx": [1, 2, 3, 4, 5, 37, 94, 95, 106, 117, 148, 165, 172, 173, 176, 242, 276, 286, 301, 303, 304, 305, 320, 323, 325, 326, 328, 335, 339, 354, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 386, 389, 390, 391, 395, 398, 405, 415, 417, 420, 422, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456], "def": [1, 3, 4, 5, 106, 276, 301, 420, 447, 448, 449, 450, 451, 452, 455], "simple_axpbi": 1, "while": [1, 2, 4, 7, 235, 356, 451, 452], "leav": [1, 127, 288, 289, 290], "howev": [1, 106, 301, 313, 316, 431, 444, 447, 448, 451, 452], "mai": [1, 172, 284, 310, 448, 449, 450], "need": [1, 4, 5, 6, 7, 80, 217, 301, 346, 347, 360, 368, 444, 448, 449, 451, 452, 453, 455], "underli": [1, 278], "perhap": [1, 4], "make": [1, 2, 4, 5, 7, 186, 208, 245, 301, 436, 437, 439, 440, 447, 451, 453, 455], "faster": [1, 120, 379, 389, 447, 449], "differenti": [1, 6], "tutori": 1, "go": [1, 4, 449], "through": [1, 258, 368, 429, 447, 449, 452], "It": [1, 4, 7, 154, 245, 276, 286, 290, 301, 347, 351, 430, 442, 452, 454], "cover": 1, "structur": [1, 430, 449], "librari": [1, 7, 296, 301], "redirect": 1, "acceler": [1, 305], "appropri": [1, 447], "metal": [1, 6], "vjp": [1, 106, 453], "jvp": [1, 106, 453], "graph": [1, 4, 5, 6, 449], "rule": [1, 422], "evalu": [1, 4, 5, 6, 127, 166, 279, 301, 331, 342, 420, 422, 447, 453], "discuss": 1, "more": [1, 2, 5, 9, 76, 112, 152, 170, 171, 174, 186, 198, 199, 240, 241, 294, 301, 305, 310, 356, 360, 368, 369, 371, 372, 373, 374, 389, 444, 447, 448, 449, 450, 453, 455], "detail": [1, 9, 198, 301, 310, 356, 360, 369, 371, 372, 373, 374, 423, 425, 426, 428, 429, 450, 453], "front": 1, "thei": [1, 3, 4, 7, 15, 99, 153, 160, 358, 393, 420, 429, 446, 447, 448, 451, 453, 454, 455], "defin": [1, 3, 4, 5, 7, 106, 153, 172, 218, 284, 287, 452], "api": [1, 448, 449], "axpbi": 1, "follow": [1, 4, 5, 6, 7, 17, 99, 110, 152, 172, 217, 289, 301, 380, 381, 395, 423, 424, 425, 426, 427, 428, 429, 435, 444, 447, 448, 449, 455], "numpi": [1, 4, 5, 6, 12, 15, 17, 85, 86, 87, 89, 119, 120, 124, 155, 156, 160, 167, 168, 169, 181, 186, 188, 203, 205, 209, 215, 233, 236, 260, 451, 453, 454], "style": [1, 12, 15, 85, 86, 87, 119, 120, 124, 155, 156, 160, 167, 168, 169, 181, 186, 188, 203, 205, 209, 215, 233, 236, 260], "upcast": 1, "factor": [1, 13, 157, 170, 173, 369, 391, 437, 440], "stream": [1, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 119, 120, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 281, 282, 283, 448, 455], "schedul": [1, 199, 422, 436, 437, 438, 439, 440, 442, 455], "simplest": [1, 301, 448], "wai": [1, 4, 7, 301, 369, 447, 448, 449, 450], "term": [1, 392, 423, 424, 425, 426, 427, 428, 434], "exist": [1, 2, 4, 333, 345], "themselv": [1, 447], "contain": [1, 4, 7, 27, 28, 67, 92, 112, 122, 142, 143, 144, 152, 153, 172, 182, 183, 184, 217, 252, 281, 286, 301, 332, 334, 335, 341, 368, 398, 417, 420, 447, 448, 449], "act": [1, 397], "nor": [1, 154, 276], "rather": [1, 449, 455], "easi": [1, 301, 448], "interfac": 1, "part": [1, 449, 450], "further": [1, 7, 449], "ha": [1, 2, 4, 5, 6, 7, 76, 92, 112, 142, 143, 145, 146, 147, 154, 170, 171, 174, 190, 194, 221, 305, 315, 321, 324, 353, 420, 422, 447, 450, 451, 453, 455], "method": [1, 4, 8, 9, 10, 29, 106, 114, 284, 292, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 339, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 420, 423, 424, 425, 426, 427, 428, 429, 431, 434, 435, 442], "run": [1, 2, 4, 5, 6, 7, 8, 212, 292, 305, 328, 423, 424, 426, 427, 428, 447, 448, 451, 455, 456], "our": [1, 4, 5, 358, 423, 424, 425, 426, 428, 429, 448], "concret": [1, 315, 321, 324, 353, 451, 455], "class": [1, 4, 5, 8, 9, 10, 29, 106, 114, 292, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 420, 423, 424, 425, 426, 427, 428, 429, 434, 435, 442], "public": [1, 301], "explicit": [1, 431, 444, 452], "alpha_": 1, "beta_": 1, "know": [1, 4], "itself": [1, 284, 431], "popul": 1, "avoid": [1, 340, 447], "unnecessari": [1, 4], "alloc": [1, 194, 198, 199, 420], "respons": 1, "void": 1, "eval_cpu": 1, "overrid": [1, 123], "eval_gpu": 1, "jacobian": [1, 166, 279, 453], "primal": [1, 106, 166, 279], "argnum": [1, 154, 276, 449], "cotan": [1, 106], "across": [1, 316, 448], "repres": [1, 4, 114, 117, 153, 398, 402, 452], "virtual": 1, "vmap": [1, 106, 449, 451, 453], "print": [1, 3, 4, 5, 7, 286, 287, 288, 289, 291, 301, 444, 447, 448, 449, 450, 451, 452, 453], "ostream": 1, "o": [1, 7, 135, 321], "is_equival": 1, "privat": 1, "fall": [1, 106], "eval": [1, 2, 3, 4, 5, 301, 420, 422, 447, 448, 449, 451, 453], "deriv": [1, 449, 451], "pass": [1, 4, 5, 64, 77, 212, 213, 276, 285, 287, 288, 289, 301, 333, 345, 346, 347, 358, 447, 448, 451], "reimplement": 1, "now": [1, 4, 7, 351, 447, 448, 452], "promot": 1, "promoted_dtyp": 1, "promote_typ": 1, "out_dtyp": 1, "is_floating_point": 1, "cast": [1, 36, 145, 146, 147, 176, 328, 340, 452], "up": [1, 4, 106, 447], "x_cast": 1, "y_cast": 1, "broadcasted_input": 1, "out_shap": 1, "unique_ptr": 1, "make_shar": 1, "to_stream": 1, "handl": [1, 301, 447], "resolv": 1, "No": [1, 4], "happen": [1, 4, 132, 368, 422, 447, 451], "call": [1, 2, 4, 5, 30, 150, 191, 195, 301, 312, 333, 345, 350, 358, 420, 422, 431, 447, 448, 449, 451], "alon": [1, 452], "onli": [1, 4, 6, 7, 80, 88, 97, 98, 172, 217, 225, 278, 301, 332, 333, 335, 340, 342, 345, 346, 347, 420, 447, 448, 449, 454, 455], "execut": [1, 7, 82, 83, 84, 195, 452, 455], "devic": [1, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 119, 120, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 281, 282, 283, 292, 455, 456], "user": [1, 4, 301], "naiv": [1, 449], "version": [1, 7, 110, 181, 185, 217, 250, 280, 444, 449, 450], "declar": 1, "member": [1, 301, 338, 343], "earlier": 1, "find": [1, 3, 7, 448], "captur": [1, 2, 92, 200, 201, 301, 447], "axpby_impl": 1, "readi": 1, "malloc_or_wait": 1, "synchron": [1, 447], "avail": [1, 3, 4, 5, 7, 9, 118, 196, 296, 455], "There": [1, 301, 369, 447], "wait": [1, 4, 199], "here": [1, 4, 422, 447, 449, 451, 454, 455], "request": 1, "under": [1, 172], "pressur": 1, "set_data": 1, "nbyte": 1, "collect": [1, 288, 289, 446], "pointer": 1, "x_ptr": 1, "y_ptr": 1, "out_ptr": 1, "relev": 1, "static_cast": 1, "out_idx": 1, "map": [1, 5, 37, 176, 288, 312, 328], "x_offset": 1, "elem_to_loc": 1, "y_offset": 1, "contigu": [1, 81], "regularli": 1, "default": [1, 7, 13, 14, 15, 16, 17, 25, 26, 27, 28, 80, 81, 88, 92, 93, 96, 97, 98, 106, 107, 108, 110, 111, 112, 115, 116, 117, 131, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 157, 158, 160, 170, 171, 172, 173, 174, 175, 176, 185, 187, 189, 190, 198, 199, 202, 206, 210, 214, 216, 217, 218, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 234, 235, 237, 244, 245, 251, 252, 255, 256, 257, 259, 261, 263, 268, 270, 271, 272, 273, 274, 275, 276, 277, 280, 282, 284, 294, 303, 304, 305, 306, 307, 308, 314, 315, 317, 320, 321, 323, 324, 325, 326, 328, 333, 335, 340, 342, 345, 348, 349, 350, 351, 353, 356, 360, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 382, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 420, 423, 424, 425, 426, 427, 428, 429, 434, 435, 436, 444, 446, 447, 449, 452, 454, 456], "doesn": [1, 301], "should": [1, 3, 4, 5, 7, 81, 112, 115, 132, 133, 135, 166, 191, 200, 217, 265, 271, 276, 279, 284, 287, 301, 306, 307, 308, 310, 311, 342, 348, 358, 391, 393, 398, 420, 446, 447, 448, 449, 451, 452, 456], "work": [1, 2, 4, 7, 199, 447, 448, 449, 450, 451], "incom": 1, "accordingli": 1, "dispatch": 1, "float16": [1, 10, 157, 176, 294, 328, 451, 452], "bfloat16": [1, 10, 157, 294, 452], "complex64": [1, 294], "throw": [1, 92, 117], "encount": [1, 449], "unexpect": [1, 17], "correct": [1, 7, 426, 427, 428, 450, 451], "float16_t": 1, "bfloat16_t": 1, "complex64_t": 1, "runtime_error": 1, "support": [1, 4, 6, 7, 15, 88, 135, 148, 157, 160, 170, 171, 173, 174, 176, 186, 217, 225, 448, 449, 450, 452, 454], "good": [1, 7, 422, 447, 448, 455], "fallback": 1, "routin": 1, "framework": [1, 6], "certain": [1, 342, 447], "case": [1, 4, 117, 138, 141, 142, 144, 145, 146, 147, 148, 170, 171, 173, 174, 186, 235, 255, 304, 310, 326, 366, 383, 401, 407, 413, 414, 430, 431, 447, 449, 453, 454, 455, 456], "half": [1, 17, 227, 231, 356, 451], "fix": [1, 4, 7, 451], "direct": [1, 4, 330, 429, 455], "column": [1, 131, 158, 217], "place": [1, 4, 37, 237, 284, 448, 451, 452], "expect": [1, 4, 306, 307, 308, 309, 310, 311, 360, 368, 392, 447, 450], "catlas_saxpbi": 1, "axpby_impl_acceler": 1, "special": 1, "copy_inplac": 1, "copytyp": 1, "inplac": 1, "incx": 1, "inci": 1, "fit": [1, 217, 455], "criteria": 1, "With": 1, "mind": [1, 4], "finish": 1, "assert": 1, "singl": [1, 5, 127, 166, 176, 190, 213, 279, 304, 326, 447, 450, 454], "flag": [1, 7, 447, 452], "row_contigu": 1, "col_contigu": 1, "common": [1, 422, 447, 451], "just": [1, 5, 322, 447, 450], "much": [1, 4, 303, 304, 325, 326, 447, 451], "enough": [1, 451], "plan": [1, 447], "enjoi": 1, "speed": 1, "appl": [1, 4, 6, 7, 455], "silicon": [1, 4, 6, 7, 455], "address": 1, "shade": 1, "languag": 1, "kernel": [1, 7, 96, 97, 98, 303, 304, 325, 326, 447, 450], "written": 1, "help": [1, 4, 447, 455], "resourc": 1, "walkthrough": 1, "pipelin": 1, "document": [1, 2, 64, 77, 240, 241, 294, 447, 449, 450], "specif": [1, 7, 448, 449], "cpp": 1, "keep": [1, 14, 16, 25, 26, 185, 187, 189, 202, 216, 257, 261, 277, 301, 332, 449, 451], "launch": [1, 117, 448, 450], "exactli": [1, 4, 335, 449], "mani": [1, 81, 252, 306, 307, 308, 312, 350, 447, 448, 451], "thread": 1, "pick": 1, "axpby_gener": 1, "buffer": [1, 193, 452], "x_stride": 1, "6": [1, 4, 172, 242, 355, 368, 372, 380, 381, 385, 392, 402, 406, 434, 447, 450, 453], "y_stride": 1, "7": [1, 4, 172, 217, 450], "uint": 1, "thread_position_in_grid": 1, "instanti": [1, 5, 451], "give": [1, 4, 5, 27, 447], "uniqu": [1, 444], "host": 1, "name": [1, 153, 176, 217, 218, 240, 241, 242, 243, 301, 316, 332, 335, 337, 448, 450, 454], "so": [1, 4, 7, 154, 157, 276, 309, 369, 422, 447, 448, 451, 455], "identifi": [1, 287, 446], "instantiate_axpbi": 1, "type_nam": 1, "host_nam": 1, "axpby_general_": 1, "set": [1, 4, 5, 7, 92, 106, 113, 115, 116, 117, 123, 132, 134, 192, 198, 199, 244, 245, 259, 313, 322, 324, 331, 333, 340, 341, 342, 345, 346, 351, 356, 366, 390, 402, 414, 420, 422, 424, 431, 444, 449, 451], "grid": [1, 190], "shown": 1, "below": [1, 7, 172, 273, 275, 294, 369, 451], "prepar": [1, 4], "carri": 1, "ostringstream": 1, "kname": 1, "axpby_": 1, "general_": 1, "type_to_nam": 1, "sure": [1, 2, 4, 7, 301, 447], "look": [1, 4, 448], "folder": 1, "register_librari": 1, "mlx_ext": 1, "get_colocated_mtllib_path": 1, "get_kernel": 1, "str": [1, 99, 121, 122, 154, 172, 176, 190, 192, 200, 239, 240, 241, 242, 243, 276, 287, 291, 328, 329, 332, 333, 335, 337, 339, 345, 369, 373, 374, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], "encod": [1, 134, 356, 360, 368, 391], "compute_encod": 1, "get_command_encod": 1, "setcomputepipelinest": 1, "regist": [1, 5], "those": [1, 4, 301], "nelem": 1, "set_input_arrai": 1, "set_output_arrai": 1, "setbyt": 1, "sizeof": 1, "threadgroup": 1, "higher": [1, 159, 398, 449], "than": [1, 4, 76, 99, 112, 120, 134, 152, 155, 156, 168, 169, 170, 171, 174, 186, 198, 286, 288, 356, 366, 369, 398, 401, 414, 424, 429, 447, 449, 455], "tgp_size": 1, "maxtotalthreadsperthreadgroup": 1, "mtl": 1, "group_dim": 1, "grid_dim": 1, "among": 1, "dispatchthread": 1, "few": [1, 4, 5, 6, 7, 448, 451, 453], "thing": [1, 4, 448], "about": [1, 4, 5, 122, 192, 451, 455], "befor": [1, 4, 7, 27, 214, 332, 368, 431, 448, 450, 451], "track": [1, 301, 305], "activ": [1, 7, 193, 310, 366, 368, 383, 403, 413, 414, 416, 447], "command_buff": 1, "mtlcommandbuff": 1, "associ": [1, 242, 243, 451], "reli": 1, "u": [1, 170, 174, 324, 347, 442, 451], "command": [1, 2, 7, 448], "instead": [1, 7, 106, 301, 347, 360, 448, 449, 451], "end_encod": 1, "until": [1, 451, 453], "hit": 1, "flush": 1, "next": [1, 4, 5, 198], "These": [1, 92, 265, 391, 455], "built": [1, 7, 451], "top": [1, 270, 324, 369], "includ": [1, 102, 103, 104, 105, 193, 194, 199, 322, 329, 341, 351, 392, 422, 447, 449, 450, 453, 454, 456], "forward": [1, 276, 447, 451], "mode": [1, 99, 331, 342, 344, 369, 373, 374, 448], "diff": 1, "push": 1, "op": [1, 212, 278, 333, 451], "similarli": [1, 7, 186, 449, 451], "scale_arr": 1, "contribut": 1, "tangent_x": 1, "tangent_i": 1, "cotang": [1, 106, 279], "unus": 1, "arg": [1, 4, 9, 10, 114, 127, 242, 243], "push_back": 1, "fulli": [1, 6, 447, 448, 452, 455], "overal": 1, "directori": [1, 4, 7], "h": [1, 96, 97, 172, 304, 305, 307, 308, 310, 311, 315, 321, 326, 353, 449, 451], "mlx_sample_extens": 1, "__init__": [1, 4, 5, 8, 9, 10, 29, 106, 114, 292, 301, 420], "py": [1, 4, 7, 448], "cmakelist": 1, "txt": 1, "setup": [1, 3, 5, 7, 447], "packag": [1, 3, 5, 296, 417, 448], "hold": [1, 4, 9, 10, 172, 447], "instal": 1, "nanobind": [1, 7, 368], "sinc": [1, 4, 5, 153, 195, 420, 429, 438, 452, 455], "compon": [1, 4], "etc": [1, 217, 301, 369, 448], "alreadi": [1, 2, 4, 448], "nb_modul": 1, "_ext": 1, "doc": [1, 5, 448], "sampl": [1, 3, 4, 175, 220, 221, 222, 224, 225, 227, 230, 231, 371, 372, 373, 374, 376, 377, 392, 398, 402, 444, 447], "_a": 1, "nb": 1, "kw_onli": 1, "none": [1, 4, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 115, 116, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 197, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 287, 288, 289, 290, 292, 303, 304, 313, 325, 326, 328, 332, 333, 340, 345, 348, 353, 360, 368, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 424, 442, 450], "r": [1, 4, 173, 276, 310, 315], "most": [1, 221, 301, 433, 447, 448, 449, 450, 451], "complex": [1, 94, 95, 143, 144, 145, 146, 147, 287, 294, 301, 347, 447, 449], "abov": [1, 4, 217, 274, 301, 369, 427, 448, 449, 450, 451, 455], "come": [1, 4, 448, 449], "bell": 1, "whistl": 1, "liter": [1, 369, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], "modul": [1, 4, 5, 284, 285, 358, 368, 417, 433, 446, 447, 451], "caster": 1, "requir": [1, 4, 301, 448, 451, 452], "find_packag": 1, "config": [1, 448], "link": [1, 7], "your": [1, 4, 7, 420, 449, 451], "add_librari": 1, "target_sourc": 1, "cmake_current_list_dir": 1, "header": 1, "target_include_directori": 1, "target_link_librari": 1, "attach": 1, "conveni": [1, 5, 165], "mlx_build_metallib": 1, "metallib": [1, 7], "target": [1, 276, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 447], "automat": [1, 6, 176, 448, 453, 454, 455], "what": [1, 4, 288], "practic": [1, 447], "mlx_build_met": [1, 7], "mlx_ext_metallib": 1, "titl": 1, "include_dir": 1, "project_source_dir": 1, "mlx_include_dir": 1, "output_directori": 1, "cmake_library_output_directori": 1, "add_depend": 1, "endif": 1, "final": [1, 3, 4, 5, 157, 436, 439], "nanobind_add_modul": 1, "nb_static": 1, "stable_abi": 1, "lto": 1, "nomins": 1, "nb_domain": 1, "build_shared_lib": [1, 7], "target_link_opt": 1, "wl": 1, "rpath": 1, "loader_path": 1, "onc": [1, 7, 447], "describ": [1, 451], "util": [1, 4, 6, 7, 242, 301, 422, 448], "__name__": [1, 4], "__main__": [1, 4], "descript": [1, 4, 294], "ext_modul": 1, "cmakeextens": 1, "cmdclass": 1, "build_ext": 1, "cmakebuild": 1, "package_data": 1, "dylib": 1, "extras_requir": 1, "dev": [1, 7], "zip_saf": 1, "python_requir": 1, "even": [1, 4, 92, 447, 451, 452], "though": [1, 4, 447, 451, 452], "pip": [1, 7], "develop": [1, 7], "j8": 1, "libmlx_ext": 1, "cpython": 1, "3x": 1, "darwin": 1, "try": [1, 7], "after": [1, 4, 5, 27, 148, 150, 153, 191, 214, 217, 305, 316, 322, 328, 329, 333, 335, 342, 345, 346, 347, 348, 368, 401, 447, 455], "abl": [1, 217], "simpli": [1, 4, 7, 323, 354, 378, 386, 405, 415, 420, 447, 448, 449], "plai": [1, 4], "quick": [1, 6], "benchmark": [1, 447], "see": [1, 4, 5, 7, 9, 10, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 172, 198, 240, 241, 284, 294, 301, 305, 310, 313, 317, 318, 319, 331, 349, 350, 351, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 367, 369, 371, 372, 373, 374, 379, 380, 381, 407, 447, 448, 449, 450, 453, 455], "compar": [1, 80, 447], "time": [1, 4, 7, 199, 269, 301, 303, 304, 315, 321, 325, 326, 353, 447, 449, 451, 455], "set_default_devic": 1, "256": [1, 5], "512": [1, 2, 4, 368, 455], "random": [1, 2, 3, 4, 5, 6, 303, 304, 305, 320, 325, 326, 335, 342, 447, 449, 455, 456], "normal": [1, 3, 4, 132, 133, 225, 230, 301, 303, 304, 305, 316, 320, 322, 325, 326, 352, 368, 371, 373, 452, 455], "bench": 1, "warm": [1, 447], "100": [1, 3, 4, 389, 439, 447, 449, 451, 455], "5000": 1, "e": [1, 5, 7, 106, 125, 152, 153, 166, 246, 305, 306, 307, 308, 310, 311, 316, 320, 322, 333, 352, 387, 388, 410, 411, 416, 422, 425, 447, 451, 456], "simple_tim": 1, "custom_tim": 1, "3f": [1, 5, 447], "114": 1, "109": 1, "modest": 1, "improv": [1, 2, 4, 389, 423, 424, 425, 426, 427, 428, 434, 447, 448], "awai": [1, 4], "nn": [1, 4, 5, 242, 288, 301, 417, 420, 422, 431, 433, 447, 451], "grad": [1, 3, 5, 276, 286, 422, 430, 447, 448, 449, 450, 451, 453], "profil": 2, "kei": [2, 4, 135, 192, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 287, 288, 332, 333, 345, 348, 431, 444, 446, 449], "optim": [2, 3, 5, 6, 346, 447, 448, 449, 451], "build": [2, 4, 6, 373, 420, 447], "mlx": [2, 3, 4, 5, 7, 296, 301, 417, 420, 422, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455], "mlx_metal_debug": [2, 7], "debug": [2, 448], "record": [2, 195, 451], "dure": [2, 92, 309, 310, 311, 369, 452], "later": [2, 7, 422], "inspect": [2, 447, 453], "label": [2, 3, 391, 398], "object": [2, 9, 29, 49, 76, 92, 165, 242, 280, 287, 288, 289, 290, 294, 310, 368, 446], "queue": 2, "readabl": 2, "enabl": [2, 4, 7, 92, 123, 435], "python": [2, 4, 49, 67, 76, 127, 287, 288, 289, 290, 291, 420, 430, 431, 433, 446, 448, 449, 452], "prepend": [2, 186], "cmake_arg": 2, "dmlx_metal_debug": 2, "ON": [2, 7], "start_captur": 2, "initi": [2, 3, 4, 117, 290, 301, 305, 316, 320, 322, 324, 349, 352, 370, 371, 372, 373, 374, 375, 376, 377, 420, 431, 436, 437, 439, 440, 447, 448, 451], "gpu": [2, 6, 7, 192, 447, 450, 455], "applic": [2, 7], "mtl_capture_en": 2, "uniform": [2, 301, 324, 335, 372, 374, 417, 444, 447, 449, 455], "trace_fil": 2, "mlx_trace": 2, "gputrac": [2, 200], "path": [2, 7, 122, 200, 242, 243, 284, 289, 335, 448], "_": [2, 3, 4, 289, 301, 436, 437, 438, 439, 440, 444, 447, 451, 455], "stop_captur": 2, "open": [2, 7, 17, 227, 231], "replai": 2, "great": 2, "overview": 2, "oper": [2, 4, 6, 8, 36, 82, 83, 84, 98, 135, 152, 153, 215, 250, 258, 265, 292, 301, 368, 429, 447, 448, 449, 450, 451, 452, 453, 455, 456], "checkout": [2, 447], "inform": [2, 4, 5, 7, 122, 192, 240, 241, 294, 301, 305, 313, 348, 449, 455], "skip": [2, 81], "save": [2, 4, 6, 176, 200, 217, 240, 241, 242, 243, 339, 451], "project": [2, 4, 348], "cmake": [2, 7], "mkdir": [2, 7], "cd": [2, 7], "g": [2, 7, 106, 172, 217, 321, 416, 434, 435, 451, 456], "xcodeproj": 2, "metal_captur": 2, "schema": 2, "basic": [3, 237, 449], "model": [3, 5, 6, 242, 284, 285, 288, 289, 301, 328, 331, 333, 335, 339, 342, 344, 345, 346, 348, 368, 417, 420, 422, 430, 431, 433, 447, 448, 451], "learn": [3, 5, 6, 305, 316, 320, 322, 349, 352, 422, 423, 424, 425, 426, 427, 428, 429, 434, 435], "problem": [3, 5, 301], "metadata": [3, 176, 240, 241], "num_featur": [3, 305], "num_exampl": 3, "1_000": 3, "num_it": 3, "10_000": 3, "iter": [3, 5, 174, 288, 289, 444, 447, 451], "sgd": [3, 5, 422, 429, 431, 436, 437, 440, 447], "lr": [3, 429], "01": [3, 323, 386, 427], "rate": [3, 422, 423, 424, 425, 426, 427, 428, 429, 434, 435], "ll": [3, 5, 394, 447, 449], "synthet": 3, "dataset": [3, 448, 451], "design": [3, 6, 444, 455], "ground": [3, 4, 391, 401], "truth": [3, 391, 401], "w_star": 3, "gaussian": [3, 313, 379, 380, 381, 392], "nois": 3, "noisi": 3, "ep": [3, 132, 133, 305, 316, 320, 322, 352, 390, 392, 402, 422, 423, 424, 425, 426, 427, 428, 434], "loss": [3, 5, 276, 301, 422, 447, 448, 449, 451], "loss_fn": [3, 5, 422, 447, 449], "grad_fn": [3, 447, 449], "randomli": [3, 4, 309, 310, 311], "Then": [3, 7], "repeatedli": 3, "verifi": [3, 7], "close": [3, 6, 7, 15, 160], "error_norm": 3, "5f": 3, "someth": [3, 4, 450], "00005": 3, "00364": 3, "complet": [3, 4, 7, 199, 346, 347, 449, 455], "github": [3, 5, 7, 447], "repo": [3, 5, 7, 447], "effici": [4, 6, 152, 310, 356, 451, 453], "larg": [4, 301, 348, 397, 447, 448, 451], "ish": 4, "transform": [4, 6, 106, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 157, 285, 301, 305, 316, 322, 324, 332, 333, 345, 351, 356, 450], "without": [4, 6, 258, 348, 416, 446, 447, 448, 451, 452, 455], "compromis": 4, "eas": 4, "llama": 4, "famili": 4, "200": [4, 438], "line": [4, 448, 451, 452], "neural": [4, 6, 312, 371, 372, 403, 417, 420, 434], "network": [4, 6, 305, 310, 312, 371, 372, 417, 420, 434, 448], "concis": 4, "architectur": [4, 7, 192, 301, 347, 455], "notabl": [4, 6], "rope": [4, 301], "cach": [4, 7, 191, 193, 194, 198, 447], "llamaattent": 4, "self": [4, 5, 8, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 106, 292, 301, 403, 420], "dim": [4, 134, 135, 312, 316, 320, 322, 348, 350, 352, 356, 360, 368], "num_head": [4, 348, 368], "super": [4, 5, 301, 420], "tradit": [4, 134, 310, 311, 356], "query_proj": 4, "bia": [4, 110, 132, 153, 217, 218, 288, 301, 306, 307, 308, 315, 321, 322, 324, 333, 335, 345, 348, 351, 353, 426, 427, 428, 431, 449], "key_proj": 4, "value_proj": 4, "out_proj": [4, 420], "__call__": [4, 5, 301, 420], "queri": [4, 135, 348], "l": [4, 5, 170, 301, 303, 305, 306, 315, 321, 325, 353, 401], "combin": [4, 174, 290], "key_cach": 4, "value_cach": 4, "math": [4, 402, 447], "score": [4, 135, 398], "values_hat": 4, "possibli": [4, 13, 88, 152, 186, 286], "rm": [4, 7, 133, 424], "swiglu": 4, "rmsnorm": [4, 301], "llamaencoderlay": 4, "mlp_dim": [4, 368], "norm1": 4, "norm2": 4, "linear1": 4, "linear2": 4, "linear3": 4, "instanc": [4, 37, 106, 217, 291, 301, 320, 328, 329, 330, 333, 335, 336, 337, 342, 345, 346, 347, 358, 420, 452], "embed": [4, 284, 301, 350, 356, 360, 390], "emb": [4, 312, 350, 360], "token": [4, 312, 350], "num_lay": [4, 5, 422], "vocab_s": 4, "norm": [4, 133, 286, 316, 402, 428, 429], "multiheadattent": [4, 301], "create_additive_causal_mask": 4, "list": [4, 9, 14, 16, 29, 70, 76, 81, 82, 83, 84, 89, 92, 93, 98, 122, 127, 137, 138, 140, 141, 143, 144, 146, 147, 151, 154, 166, 172, 185, 187, 189, 190, 202, 210, 213, 216, 220, 221, 222, 224, 225, 226, 227, 230, 231, 240, 250, 252, 256, 257, 261, 268, 269, 272, 276, 277, 279, 282, 287, 290, 291, 301, 333, 335, 336, 337, 338, 343, 345, 346, 347, 420, 422, 426, 427, 428, 429, 438, 446, 447, 448, 449, 451], "still": [4, 7, 172, 447, 451], "consid": [4, 15, 80, 160, 287, 288, 289, 316, 446], "train": [4, 5, 301, 305, 309, 310, 311, 331, 333, 345, 371, 372], "process": [4, 98, 99, 114, 115, 116, 117, 288, 289, 311, 312, 368, 446, 448], "ignor": [4, 37, 91, 92, 127, 424], "whatsoev": 4, "rest": [4, 134, 288, 289, 356], "subsect": 4, "prompt": 4, "autoregress": 4, "yield": [4, 5, 444], "temp": 4, "causal": 4, "append": [4, 186, 447, 451], "store": 4, "per": [4, 5, 110, 153, 217, 218, 284, 305, 316, 320, 322, 352, 442, 447, 448, 451], "care": [4, 451], "logit": [4, 221, 389, 391, 447], "categor": 4, "lazili": [4, 301], "noth": [4, 301, 451], "yet": [4, 172, 301, 420, 431, 449, 450, 451, 453], "forc": [4, 5, 301, 448, 453], "choos": [4, 134, 356], "pars": 4, "feed": 4, "back": [4, 106, 196, 452], "loop": [4, 5, 447, 448, 449, 451], "unsqueez": 4, "sequenc": [4, 14, 16, 32, 33, 55, 56, 57, 58, 62, 70, 73, 74, 78, 81, 89, 98, 129, 137, 138, 140, 141, 143, 144, 146, 147, 151, 185, 187, 189, 202, 210, 216, 220, 221, 222, 224, 225, 226, 227, 230, 231, 235, 250, 252, 255, 257, 261, 268, 269, 272, 277, 282, 305, 306, 315, 321, 353, 368, 444, 455], "length": [4, 255, 305, 306, 315, 321, 353, 438], "len": [4, 138, 141, 144, 147, 157, 438], "overwrit": 4, "discard": [4, 287], "old": 4, "moment": [4, 424, 426, 427, 428], "anymor": 4, "everyth": [4, 448], "small": [4, 130, 132, 133, 305, 316, 322, 352, 392, 397, 402, 447, 448, 455], "12": [4, 157, 438], "8192": [4, 157], "1024": 4, "actual": [4, 17, 335, 420, 451], "materi": [4, 6], "could": [4, 301], "20_000": 4, "machin": [4, 6, 7, 434, 448], "8gb": 4, "ram": 4, "32": [4, 5, 88, 217, 218, 294, 304, 326, 352, 447], "44": 4, "bracket": 4, "becaus": [4, 193, 301, 451], "batch": [4, 13, 88, 152, 153, 186, 225, 305, 306, 307, 308, 310, 311, 315, 321, 348, 353, 369, 451], "zip": [4, 5], "haven": 4, "anyth": [4, 276, 451], "veri": [4, 348, 448, 451, 455], "similar": [4, 153, 165, 288, 346, 347, 348, 390, 452, 454], "runtim": [4, 117, 296, 447, 448], "section": [4, 7, 252, 402, 447, 448, 449], "origin": [4, 112, 286, 305, 341, 371, 372, 373, 374, 423, 424, 425, 426, 428, 429, 452], "sentencepiec": 4, "pytorch": [4, 6, 316, 449], "compat": [4, 221, 225, 454], "npz": [4, 176, 242, 243, 335, 339, 454], "file": [4, 7, 176, 239, 240, 241, 242, 243, 335, 339, 448, 449, 454], "argpars": 4, "itertool": [4, 288], "starmap": [4, 288], "np": [4, 5, 448, 452, 453], "torch": [4, 452], "map_torch_to_mlx": 4, "tok_embed": 4, "elif": 4, "attention_norm": 4, "ffn_norm": 4, "wq": 4, "wk": 4, "wv": 4, "wo": 4, "w1": [4, 286], "w2": [4, 286], "w3": 4, "ffn": 4, "separ": [4, 64, 77, 316, 398], "submodul": [4, 5, 301, 329, 333, 334, 345, 347], "feed_forward": 4, "parser": 4, "argumentpars": 4, "add_argu": 4, "torch_weight": 4, "output_fil": 4, "parse_arg": 4, "state": [4, 5, 301, 315, 321, 353, 422, 431, 444, 447], "savez": [4, 339, 454], "v": [4, 99, 135, 301, 333, 452], "disk": 4, "text": [4, 303, 304, 313, 315, 321, 325, 326, 327, 353, 366, 371, 372, 373, 374, 380, 383, 384, 385, 392, 393, 394, 397, 398, 401, 403, 404, 407, 408, 413, 414, 424, 429], "format": [4, 176, 239, 240, 241, 242, 243, 452], "dictionari": [4, 92, 176, 192, 240, 241, 286, 287, 290, 301, 332, 341, 346, 347, 432, 446, 454], "represent": [4, 217, 278, 287, 291], "tree_unflatten": [4, 422], "helper": [4, 447], "weight_fil": 4, "incur": [4, 7], "sever": [4, 7, 96, 97, 98, 242, 243, 447, 454], "futur": [4, 351, 450, 451], "pth": 4, "current": [4, 6, 7, 81, 88, 192, 194, 217, 290, 301, 424, 448, 451], "around": 4, "m1": [4, 447, 449, 455], "ultra": 4, "7b": 4, "me": 4, "ishmael": 4, "year": 4, "ago": 4, "never": [4, 451], "long": 4, "info": [4, 7], "247": 4, "press": [4, 172], "enter": 4, "littl": 4, "monei": 4, "my": [4, 7], "purs": 4, "consequ": 4, "walk": 4, "down": [4, 286], "gower": 4, "street": 4, "afternoon": 4, "heavi": 4, "rain": 4, "saw": [4, 449], "off": [4, 7, 451], "man": 4, "rag": 4, "who": 4, "sat": 4, "upon": [4, 288, 289], "hi": [4, 321], "bundl": 4, "hard": 4, "wet": 4, "he": [4, 373, 374], "were": [4, 455], "cry": 4, "watch": [4, 447], "him": 4, "observ": 4, "numer": [4, 132, 133, 172, 181, 185, 250, 305, 316, 320, 322, 352, 389, 390, 392, 402, 423, 424, 425, 426, 427, 428, 434, 447, 451], "crowd": 4, "wa": [4, 81, 448, 451], "hurri": 4, "437": 4, "330": 4, "second": [4, 7, 112, 167, 182, 184, 186, 236, 262, 271, 276, 304, 326, 390, 398, 424, 426, 427, 428, 449, 455], "spent": 4, "amount": [4, 195, 303, 325], "39": 4, "By": [4, 284, 340, 389, 449, 452], "bigger": [4, 424], "well": [4, 301, 333, 345, 348, 451], "almost": 4, "nobodi": 4, "took": 4, "least": [4, 82, 83, 84, 91, 170, 171, 173, 174, 217], "notic": [4, 449, 454], "distanc": [4, 402], "had": 4, "doubt": 4, "minut": 4, "straight": 4, "slowli": 4, "speak": [4, 172], "resum": 4, "postur": 4, "stood": 4, "feel": 4, "pain": 4, "heart": 4, "said": 4, "smile": 4, "face": 4, "am": 4, "someon": 4, "three": [4, 84, 369], "quarter": 4, "hour": 4, "made": [4, 296], "immedi": [4, 328], "repli": 4, "again": [4, 7, 301, 447], "hand": [4, 449, 451], "did": 4, "accustom": 4, "thu": [4, 301], "question": [4, 451], "reason": [4, 450], "tell": [4, 447, 452], "understand": [4, 371, 372], "579": 4, "690": 4, "500": [4, 455], "628": 4, "went": 4, "nervou": 4, "trembl": 4, "told": 4, "why": 4, "And": [4, 369], "surpris": 4, "matter": [4, 301], "shall": 4, "anyhow": 4, "friend": 4, "ye": 4, "slight": [4, 451], "kind": 4, "want": [4, 448, 449, 455], "longer": [4, 99, 449], "soon": 4, "unless": [4, 15, 160, 172, 420], "unlik": [4, 15, 160, 310, 311, 341], "strang": 4, "amus": 4, "That": 4, "secret": 4, "disappoint": 4, "mine": 4, "cannot": [4, 91, 450, 452], "happi": 4, "ask": [4, 448], "shop": 4, "bui": 4, "food": 4, "633": 4, "21": [4, 440], "475": 4, "su": 4, "j": [4, 7, 172, 310, 425, 426, 428], "lu": 4, "pan": 4, "murtadha": 4, "wen": 4, "liu": 4, "2021": 4, "roform": [4, 356], "enhanc": [4, 356, 451], "rotari": [4, 134, 356], "arxiv": [4, 316, 320, 322, 327, 352, 381, 403, 423, 429], "preprint": [4, 423, 429], "2104": 4, "09864": 4, "zhang": 4, "sennrich": 4, "2019": [4, 427], "advanc": [4, 447], "system": [4, 7, 192, 193, 194], "shazeer": 4, "2020": 4, "glu": [4, 301], "variant": [4, 401, 428], "2002": 4, "05202": 4, "classifi": 5, "mnist": 5, "As": [5, 37, 264, 301, 447], "mlp": [5, 301, 368, 422], "inherit": [5, 446], "idiom": [5, 447], "input_dim": [5, 301, 324, 351], "hidden_dim": [5, 420, 422], "output_dim": [5, 301, 324, 351], "layer_s": 5, "idim": 5, "odim": 5, "cross": [5, 98, 389, 391], "entropi": [5, 389, 391], "commonli": [5, 346, 417, 447], "cross_entropi": [5, 301], "accuraci": 5, "valid": [5, 99, 148, 280, 287, 333, 345, 446], "eval_fn": 5, "load": [5, 6, 296, 335, 448], "loader": 5, "num_class": [5, 422], "batch_siz": [5, 422], "num_epoch": [5, 422], "learning_r": [5, 422, 423, 424, 425, 426, 427, 428, 429, 431, 434, 435, 436, 437, 438, 439, 440, 447], "train_imag": [5, 422], "train_label": [5, 422], "test_imag": 5, "test_label": 5, "re": [5, 7, 417], "shuffl": 5, "minibatch": 5, "batch_iter": [5, 422], "perm": 5, "id": [5, 7], "put": [5, 447, 448], "trainabl": [5, 285, 301, 420], "loss_and_grad_fn": [5, 422, 447, 449], "value_and_grad": [5, 106, 301, 346, 420, 422, 433, 447, 449, 452, 453], "epoch": 5, "test": [5, 7, 448], "confus": 5, "decent": 5, "95": 5, "flexibl": 6, "brought": 6, "research": 6, "except": [6, 131, 142, 143, 145, 146, 147, 316, 335, 450, 452], "featur": [6, 96, 97, 98, 134, 305, 315, 316, 320, 321, 322, 324, 351, 352, 353, 356, 368, 369, 447, 451], "main": [6, 112, 131, 271, 288, 289, 301, 448], "differ": [6, 165, 260, 278, 401, 449], "compos": [6, 301, 447, 449, 453], "lazi": [6, 420, 453], "multi": [6, 135, 306, 307, 308, 450, 452], "cpu": [6, 7, 173, 447, 455], "inspir": 6, "jax": [6, 444], "arrayfir": 6, "unifi": 6, "live": [6, 455], "share": [6, 110, 153, 217, 218, 278, 448], "convers": 6, "distribut": [6, 7, 220, 221, 222, 224, 225, 226, 230, 231, 324, 371, 372, 373, 374, 376, 377, 392, 395, 400, 402, 417], "commun": [6, 114, 117, 118], "regress": [6, 397], "layer": [6, 132, 284, 301, 303, 304, 310, 311, 315, 316, 321, 322, 324, 325, 326, 342, 347, 350, 351, 353, 358, 368, 416, 420], "perceptron": 6, "llm": 6, "infer": [6, 151, 176, 271, 448], "fast": [6, 313, 381, 448, 455], "fft": 6, "algebra": 6, "tree": [6, 92, 127, 154, 276, 280, 287, 288, 289, 290, 291, 430, 431, 433, 442, 449], "custom": [6, 106, 368], "extens": [6, 176, 200, 339, 454], "debugg": 6, "pypi": 7, "own": [7, 452], "meet": 7, "seri": 7, "chip": 7, "nativ": 7, "maco": 7, "13": 7, "highli": 7, "recommend": [7, 199, 429], "14": 7, "sonoma": 7, "conda": [7, 448], "forg": 7, "match": [7, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 193, 335, 369, 391, 448, 450, 452], "probabl": [7, 227, 309, 310, 311, 351, 389, 391, 395, 455], "platform": 7, "processor": 7, "arm": 7, "i386": 7, "switch": 7, "17": 7, "clang": 7, "24": 7, "xcode": 7, "15": [7, 172, 290, 447], "sdk": 7, "environ": [7, 113, 123, 448], "via": [7, 106, 430, 433, 448, 451, 452], "rosetta": 7, "unam": 7, "p": [7, 220, 301, 309, 310, 311, 402, 426, 428], "clone": 7, "git": 7, "com": [7, 448], "ml": 7, "explor": 7, "http": [7, 316, 320, 322, 327, 352, 381, 403], "wjakob": 7, "2f04eac452a6d9142dedb957701bdb20125561e4": 7, "env": 7, "cmake_build_parallel_level": 7, "edit": [7, 347], "unittest": 7, "discov": 7, "stub": 7, "generate_stub": 7, "either": [7, 12, 64, 76, 77, 85, 86, 87, 91, 119, 120, 124, 150, 155, 156, 167, 168, 169, 172, 181, 186, 188, 203, 205, 209, 215, 233, 236, 260, 276, 304, 326, 358, 369, 373, 374, 452], "static": 7, "libmlx": 7, "preprocessor": 7, "metal_path": 7, "mlx_build_test": 7, "mlx_build_exampl": 7, "mlx_build_benchmark": 7, "mlx_build_cpu": 7, "mlx_build_python_bind": 7, "mlx_build_safetensor": 7, "mlx_build_gguf": 7, "mlx_metal_jit": 7, "wish": 7, "variabl": [7, 92, 113, 123, 154, 166, 276, 279, 280, 448], "export": 7, "developer_dir": 7, "app": 7, "content": [7, 332, 447], "xcrun": 7, "macosx": 7, "show": [7, 294, 447], "cmake_build_typ": 7, "minsizerel": 7, "don": [7, 447, 455], "backend": [7, 117, 118], "safetensor": [7, 176, 241, 335, 339, 422, 451, 454], "gguf": [7, 176, 240, 454], "dcmake_build_typ": 7, "dbuild_shared_lib": 7, "dmlx_build_cpu": 7, "dmlx_build_safetensor": 7, "dmlx_build_gguf": 7, "dmlx_metal_jit": 7, "THE": 7, "pre": [7, 135, 389], "substanti": 7, "cold": 7, "cost": [7, 424, 448, 451], "anwywher": 7, "hundr": 7, "millisecond": [7, 447, 455], "persist": 7, "accross": 7, "reboot": 7, "unabl": 7, "tool": 7, "sudo": 7, "ouptut": 7, "finder": 7, "iterm": 7, "termin": 7, "click": 7, "uncheck": 7, "window": [7, 303, 304, 325, 326], "restart": 7, "grep": 7, "cmake_host_system_processor": 7, "arm64": 7, "x86_64": 7, "wipe": 7, "cahc": 7, "rf": 7, "devicetyp": 8, "attribut": [8, 9, 29, 292, 341, 420, 442], "kwarg": [9, 10, 114, 242, 243, 456], "categori": [10, 294], "bool_": [10, 294], "unsignedinteg": 10, "uint8": [10, 294], "uint16": [10, 294], "uint32": [10, 25, 26, 27, 28, 221, 294], "uint64": [10, 294], "signedinteg": [10, 165], "int8": [10, 294], "int64": [10, 294], "inexact": [10, 165], "complexflo": 10, "complex128": 10, "issubdtyp": [10, 294], "semant": [12, 85, 86, 87, 89, 119, 120, 124, 155, 156, 167, 168, 169, 181, 186, 188, 203, 205, 209, 215, 233, 236, 260, 455], "reduct": [14, 16, 116, 185, 187, 202, 216, 290, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 448], "unspecifi": [14, 16, 17, 25, 26, 27, 28, 93, 102, 103, 104, 105, 151, 185, 187, 189, 202, 210, 214, 216, 234, 250, 251, 257, 261, 264, 270, 271, 277, 282, 456], "entir": [14, 16, 25, 26, 185, 187, 189, 202, 216, 257, 261, 277, 310, 311], "05": [15, 160, 305, 316, 320, 322, 352], "08": [15, 160, 390, 425, 426, 427, 428, 434], "approxim": [15, 313, 379, 380, 381], "comparison": [15, 124, 155, 156, 168, 169, 209], "infinit": [15, 160], "rel": [15, 160, 424, 447], "interv": [17, 175, 227, 231], "increment": 17, "otherwis": [17, 98, 117, 199, 284, 287, 288, 289, 290, 333, 335, 345, 366, 368, 369, 383, 389, 394, 401, 413, 414, 451, 452], "convent": [17, 99, 121, 122, 369, 427], "fraction": 17, "integr": [17, 264, 451], "dimension": [29, 132, 133, 136, 137, 138, 139, 140, 141, 145, 146, 147, 303, 304, 305, 306, 307, 308, 312, 324, 325, 326, 350, 351, 360, 450, 452], "ndarrai": [29, 450, 451, 453], "properti": [30, 37, 46, 50, 60, 61, 67, 69, 341, 344, 432, 449], "argument": [30, 64, 77, 92, 127, 154, 276, 288, 289, 290, 301, 369, 444, 448, 449, 454, 455, 456], "union": [31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 82, 83, 84, 88, 121, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 157, 163, 164, 192, 229, 230, 240, 259, 271], "regular": [37, 310, 403, 427, 447, 450], "idx": [37, 450], "correctli": 37, "syntax": [37, 450], "datatyp": 50, "byte": [50, 60, 193, 194, 195, 198, 199, 294], "indices_or_sect": [70, 252], "nest": [76, 92, 290, 301, 420, 446, 449], "alwai": [81, 193, 287, 449], "regardless": [81, 135], "storag": 81, "caution": 81, "chang": [81, 92, 245, 278, 346, 351, 369, 394, 401, 447, 452], "crash": [81, 447], "begin": [81, 195, 217, 304, 315, 321, 326, 366, 383, 394, 401, 407, 413, 414], "ari": [82, 83, 84], "xor": 87, "lhs_mask": 88, "lceil": 88, "rceil": 88, "rhs_mask": 88, "out_mask": 88, "edg": [91, 213, 369, 447], "At": 91, "fun": [92, 154, 166, 276, 279, 280, 447, 450, 451, 455], "callabl": [92, 106, 154, 166, 276, 279, 280, 284, 285, 287, 288, 289, 290, 328, 329, 332, 340, 353, 358, 368, 370, 371, 372, 373, 374, 375, 376, 377, 423, 424, 425, 426, 427, 428, 429, 434, 435, 436, 437, 438, 439, 440], "dict": [92, 127, 176, 192, 240, 241, 242, 286, 338, 343, 346, 347, 420, 422, 430, 431, 433, 446, 449, 454], "arbitrarili": [92, 301, 446, 449, 453], "leaf": [92, 284, 287, 288, 289, 290, 332], "node": [92, 127, 280, 289, 290], "recompil": [92, 447], "Not": [92, 209, 447], "attempt": 92, "elementwis": [94, 95], "alia": [94, 95], "conj": 95, "channel": [96, 97, 98, 305, 306, 307, 308, 310, 311], "c_in": [96, 97, 98], "c_out": [96, 97, 98], "convolv": [96, 97, 98], "spatial": [97, 98, 303, 316, 325, 369], "symmetr": [97, 170], "correl": [98, 310], "discret": [99, 136, 137, 138, 139, 140, 141, 145, 146, 147, 312, 350], "conv": 99, "signal": [99, 369], "th": [102, 103, 104, 105, 111, 131, 438], "definit": [106, 170, 225], "meant": 106, "decor": 106, "behav": 106, "wrap": [106, 301], "behaviour": [106, 170], "usag": [106, 368, 447], "f_vjp": 106, "f_jvp": 106, "dx": 106, "dy": 106, "f_vmap": 106, "ai": 106, "angl": [109, 219, 323], "configur": [110, 448], "formal": [110, 217], "notat": [110, 287, 337], "w_i": [110, 217], "hat": [110, 217], "occupi": [110, 153, 217, 218], "subarrai": [112, 252], "insert": [112, 129, 455], "end": [112, 196, 217, 304, 315, 321, 326, 366, 383, 394, 401, 407, 413, 414, 436, 439], "taken": [112, 264, 271], "global": [113, 115, 116, 117, 123, 228, 286, 444, 447], "disabl": [113, 198, 447], "mlx_disable_compil": [113, 123, 447], "independ": [114, 310, 311], "particip": [115, 116], "strict": [117, 155, 168, 333, 335, 345], "is_avail": 117, "fuction": 120, "subscript": [121, 122], "operand": [121, 122, 152], "einstein": [121, 122], "summat": [121, 122], "equat": [121, 122], "einsum": 122, "chosen": 122, "mathrm": [125, 246, 320], "frac": [125, 217, 246, 303, 304, 305, 309, 310, 311, 316, 320, 322, 324, 325, 326, 352, 371, 372, 373, 374, 390, 392, 394, 397, 408, 410, 411, 423, 425, 426, 427, 428, 434], "pi": [125, 313, 360, 380, 449], "int_0": 125, "dt": 125, "minu": 130, "whose": [131, 284, 285], "translat": [132, 322], "stabil": [132, 133, 305, 316, 320, 322, 352, 389, 390, 392, 423, 424, 425, 426, 427, 428, 434], "rotat": [134, 356], "larger": [134, 356, 429], "unchang": [134, 258, 356], "consecut": [134, 217, 356], "angular": [134, 356], "frequenc": [134, 356, 360], "q": [135, 173], "head": [135, 348, 368], "attent": [135, 333, 348, 360, 368], "One": [136, 139, 145, 238, 447, 449], "fourier": [136, 137, 138, 139, 140, 141, 145, 146, 147], "truncat": [136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 230], "dft": [136, 137, 138, 139, 140, 141, 145, 146, 147], "rfft": 142, "real": [142, 143, 144, 145, 146, 147, 170], "rfft2": 143, "rfftn": 144, "silent": [145, 146, 147], "outsid": 148, "clamp": 148, "explicitli": [152, 301, 444], "flat": [152, 153, 287, 291], "a1": 152, "a2": 152, "AS": 152, "b1": 152, "b2": 152, "pack": [153, 217, 218], "unsign": [153, 217, 218, 294], "whether": [153, 218, 315, 321, 332, 348, 353, 389, 392, 398], "argnam": [154, 276], "neither": [154, 276], "keyword": [154, 242, 243, 276, 288, 301, 444, 454, 456], "walsh": 157, "scipi": 157, "linalg": 157, "20": [157, 172], "28": 157, "16384": 157, "orthonorm": 157, "ordinari": 159, "inifn": 161, "dtypecategori": [165, 294], "subtyp": [165, 294], "subdtyp": 165, "float64": 165, "too": [165, 447, 451], "upper": [170, 217, 227, 230, 231, 377], "decomposit": [170, 174], "semi": [170, 225], "triangular": 170, "lower": [170, 217, 227, 230, 231, 273, 377], "trinagular": 170, "dot": [170, 171, 268, 287, 337, 348], "ainv": 171, "ord": 172, "tabl": [172, 294, 312], "frobeniu": 172, "matric": [172, 173, 174], "strictli": 172, "mathemat": 172, "variou": 172, "purpos": 172, "calcul": [172, 389, 392, 398, 424], "fro": 172, "inf": [172, 206, 348], "largest": [172, 206, 270], "sing": 172, "smallest": 172, "singular": [172, 174], "nuclear": 172, "_f": 172, "sum_": [172, 303, 304, 397], "a_": 172, "valueerror": [172, 335, 449], "refer": [172, 320, 327, 341, 371, 372, 373, 374, 381, 403, 450], "golub": 172, "van": 172, "loan": 172, "baltimor": 172, "md": 172, "john": 172, "hopkin": 172, "univers": 172, "1985": 172, "pg": 172, "la": 172, "9": [172, 391, 423, 426, 427, 428, 429, 431, 437, 440, 452], "74597": 172, "84804": 172, "41421": 172, "23607": [172, 173], "74166": 172, "24264": 172, "11": 172, "225": 172, "894427": 173, "447214": 173, "57771": 173, "vt": 174, "return_metadata": 176, "binari": [176, 239, 240, 241, 242, 243, 278, 366, 389, 414, 447], "npy": [176, 239, 454], "matadata": 176, "unsupport": 176, "tensor": [176, 268, 303, 304, 325, 326, 402, 452], "stabl": [181, 185, 250, 397], "multidimension": 190, "dens": [190, 455], "cartesian": 190, "ij": 190, "clear": 191, "get_cache_memori": 191, "max_buffer_s": 192, "max_recommended_working_set_s": 192, "memory_s": 192, "report": [193, 199], "peak": [195, 197], "program": [195, 448], "reset_peak_memori": 195, "reset": 197, "free": 198, "reclaim": 198, "set_memory_limit": 198, "previou": [198, 199], "relax": 199, "task": [199, 397], "exceed": 199, "potenti": 199, "beforehand": 212, "constant_valu": 213, "before_1": 213, "after_1": 213, "before_2": 213, "after_2": 213, "before_n": 213, "after_n": 213, "before_i": 213, "after_i": 213, "side": [213, 303, 304, 325, 326, 447], "everi": [217, 288, 422, 440, 449], "particular": [217, 316], "w_1": 217, "w_g": 217, "align": [217, 304, 315, 321, 326], "max_i": 217, "min_i": 217, "textrm": [217, 313, 314, 379, 382], "1st": 217, "signific": 217, "2nd": 217, "w_q": 217, "prng": [220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 444], "num_sampl": 221, "unnorm": [221, 389, 391], "draw": 221, "cdf": [222, 313, 379], "seed": 223, "loc": [224, 226], "cov": 225, "jointli": 225, "covari": [225, 305], "behavior": [225, 397, 450, 451], "empti": 225, "low": [227, 231, 377, 417], "high": [227, 231, 301, 312, 377, 417], "roadcast": 227, "domain": [230, 448], "uniformli": 231, "repetit": 234, "preserv": [235, 449], "obj": 240, "uncompress": 242, "my_path": 242, "tree_flatten": [242, 288, 291, 301, 422], "transformerencod": 242, "128": [242, 301], "flat_param": 242, "compress": 243, "possibl": [252, 312, 350, 447, 448, 450, 455], "divisor": [257, 277], "being": [258, 301], "prevent": [258, 402, 452], "streamcontext": 259, "context": 259, "manag": [259, 444, 448, 455], "prior": [264, 265], "exclud": 265, "necessarili": 270, "elsewher": [273, 450], "col": 273, "triangl": 273, "mse": 276, "param": [276, 301, 417, 449], "lvalu": 276, "dlvalu": 276, "dparam": 276, "lasso": 276, "l1": [276, 394, 396, 397, 401], "impli": 278, "gaurante": 278, "in_ax": [280, 449], "out_ax": [280, 449], "prefix": [280, 287], "class_pred": 284, "predic": [284, 340], "to_quant": 284, "receiv": [284, 438, 452], "fn": [285, 288, 289, 290, 453], "wrt": 285, "max_norm": 286, "exce": 286, "proportion": 286, "clipped_grad": 286, "total_norm": 286, "rescal": 286, "is_leaf": [287, 288, 289, 290], "arbitrari": [287, 420], "depth": [287, 308, 311, 449], "hello": [287, 291], "charact": 287, "superset": [288, 430], "extra": [288, 289], "closer": 288, "decid": [288, 332], "constitut": 288, "dict_kei": [288, 431], "lambda": [288, 289, 290, 301, 317, 328, 333, 340, 364, 383, 407, 413, 423, 424, 425, 426, 427, 428, 429, 434, 435, 447, 448, 449], "tree_map": [289, 301, 448], "new_tre": 289, "accumul": [290, 352], "acc": 290, "recreat": [291, 422], "world": [291, 448], "42": 291, "16": [294, 303, 320, 325, 328, 420], "int16": 294, "brain": 294, "e8": 294, "m7": 294, "ieee": 294, "e5": 294, "m10": 294, "hierarchi": 294, "mpi": 296, "done": [301, 309, 352, 447, 448, 451, 452], "manual": 301, "solv": 301, "intuit": 301, "freez": [301, 345, 420], "finetun": 301, "in_dim": [301, 420], "out_dim": [301, 420], "enumer": 301, "caus": [301, 447, 451], "local": [301, 310, 448], "scope": 301, "l2_loss": 301, "y_hat": 301, "trainable_paramet": [301, 332, 431], "loss_and_grad": 301, "workhors": 301, "Its": 301, "recurs": [301, 332, 333, 338, 343, 345, 420], "frozen": [301, 333, 343, 345, 351, 420], "individu": [301, 310, 311], "subset": [301, 332], "action": 301, "displai": 301, "count": [301, 438], "num_param": 301, "preclud": 301, "pure": [301, 422], "pattern": [301, 451], "achiev": [301, 448], "other_input": 301, "necessari": 301, "apply_to_modul": [301, 333], "children": 301, "filter_and_map": 301, "leaf_modul": 301, "load_weight": [301, 451], "named_modul": 301, "save_weight": 301, "set_dtyp": 301, "unfreez": [301, 333], "update_modul": 301, "alibi": 301, "avgpool1d": 301, "avgpool2d": 301, "batchnorm": 301, "dropout": [301, 310, 311, 342, 368, 447], "dropout2d": 301, "dropout3d": 301, "gelu": [301, 380, 381, 447], "groupnorm": 301, "gru": 301, "hardshrink": [301, 383], "hardtanh": [301, 384], "hardswish": 301, "instancenorm": 301, "layernorm": 301, "leakyrelu": 301, "lstm": 301, "maxpool1d": 301, "maxpool2d": 301, "mish": 301, "prelu": 301, "quantizedembed": 301, "quantizedlinear": 301, "relu": [301, 349, 368, 404, 417], "relu6": 301, "rnn": [301, 315], "selu": 301, "sequenti": [301, 417], "silu": 301, "sinusoidalpositionalencod": 301, "softmin": 301, "softshrink": 301, "softsign": 301, "softplu": [301, 327, 403], "upsampl": 301, "elu": [301, 407], "gelu_approx": [301, 313, 379], "gelu_fast_approx": [301, 313, 379], "hard_shrink": [301, 317], "hard_tanh": [301, 318], "leaky_relu": 301, "log_sigmoid": 301, "log_softmax": 301, "binary_cross_entropi": [301, 447], "cosine_similarity_loss": 301, "gaussian_nll_loss": 301, "hinge_loss": 301, "huber_loss": 301, "kl_div_loss": 301, "l1_loss": 301, "log_cosh_loss": 301, "margin_ranking_loss": 301, "mse_loss": 301, "nll_loss": 301, "smooth_l1_loss": 301, "triplet_loss": 301, "init": [301, 349, 417, 422, 436, 437, 439, 440, 448], "glorot_norm": 301, "glorot_uniform": 301, "he_norm": 301, "he_uniform": 301, "kernel_s": [303, 304, 306, 307, 308, 325, 326], "averag": [303, 304, 423, 424, 426, 427, 428, 448], "pool": [303, 304, 325, 326, 455], "l_": [303, 325, 394], "n_i": [303, 304, 325, 326], "c_j": [303, 304, 325, 326], "ldot": [303, 304, 325, 326], "lfloor": [303, 304, 325, 326], "_size": [303, 304, 325, 326], "rfloor": [303, 304, 325, 326], "k_h": [304, 326], "k_w": [304, 326], "h_": [304, 315, 321, 326, 353], "w_": [304, 315, 321, 326, 353, 423, 424, 425, 426, 427, 428, 429, 434, 435], "height": [304, 305, 307, 308, 310, 311, 326], "width": [304, 305, 307, 308, 310, 311, 326, 350, 351], "momentum": [305, 429, 431, 435, 447], "affin": [305, 316, 320, 322, 324, 351], "track_running_stat": 305, "epsilon": [305, 316, 320, 322, 352, 390, 392, 423, 425, 426, 427, 428, 434], "gamma": [305, 316, 320, 322, 352, 371, 372, 373, 374], "nc": 305, "nlc": [305, 306], "four": 305, "nhwc": [305, 307], "paper": [305, 360, 423, 424, 425, 426, 428, 429], "deep": [305, 371, 372, 373, 374], "intern": 305, "bn": 305, "in_channel": [306, 307, 308], "out_channel": [306, 307, 308], "learnabl": [306, 307, 308, 358], "imag": [307, 308, 310, 311, 369], "ndhwc": [308, 311], "portion": 309, "nwhc": 310, "whc": 310, "maintain": [310, 311, 429], "benefici": [310, 311, 451], "earli": 310, "adjac": 310, "pixel": 310, "effect": [310, 447, 451], "thompson": 310, "goroshin": 310, "jain": 310, "lecun": 310, "bregler": 310, "2015": [310, 426, 428], "cvpr": 310, "dhwc": 311, "often": 311, "medic": 311, "video": 311, "num_embed": [312, 350], "lookup": 312, "usual": [312, 350, 446, 451], "vocabulari": [312, 350], "approx": 313, "unit": [313, 314, 315, 323, 354, 355, 357, 359, 371, 372, 373, 374, 378, 379, 380, 381, 382, 386, 405, 406, 407, 409], "phi": [313, 379], "geluapprox": 313, "044715": [313, 380], "gelufast": 313, "sigma": [313, 314, 315, 321, 371, 372, 373, 374, 381, 382, 387, 408, 409], "773": 313, "regard": 313, "gate": [314, 315, 382], "halv": [314, 382], "input_s": [315, 321, 353], "hidden_s": [315, 321, 353], "recurr": [315, 321, 353], "nld": [315, 321, 353], "ld": [315, 321, 353], "r_t": 315, "xr": 315, "x_t": [315, 321, 353], "hr": 315, "h_t": [315, 321, 353], "b_": [315, 321], "z_t": 315, "xz": 315, "hz": 315, "n_t": 315, "xn": 315, "odot": [315, 321], "hn": 315, "hidden": [315, 321, 353, 368], "nh": [315, 321, 353], "nlh": [315, 321, 353], "lh": [315, 321, 353], "num_group": 316, "pytorch_compat": 316, "preced": 316, "org": [316, 320, 322, 327, 352, 381, 403], "1803": 316, "08494": 316, "lambd": [317, 364, 383, 413], "denomin": [320, 390, 423, 425, 426, 427, 428, 434], "inorm": 320, "1607": [320, 322], "08022": 320, "i_t": 321, "xi": 321, "f_t": 321, "xf": 321, "hf": 321, "g_t": [321, 423, 425, 426, 427, 428, 429, 434, 435], "xg": 321, "hg": 321, "o_t": 321, "xo": 321, "ho": 321, "c_": [321, 429], "c_t": [321, 429], "cell": 321, "06450": 322, "realli": 322, "negative_slop": [323, 386], "leaki": [323, 386], "rectifi": [323, 354, 355, 373, 374, 386, 405, 406], "slope": 323, "mathcal": 324, "d_i": 324, "max_": [325, 326], "1908": [327, 403], "08681": [327, 403], "map_fn": [328, 332], "filter_fn": [328, 332], "valid_parameter_filt": 328, "apply_fn": 329, "descend": 330, "is_leaf_fn": 332, "found": 332, "drop": 332, "idempot": [333, 345], "endswith": 333, "file_or_weight": 335, "miss": [335, 454], "ok": [335, 449], "save_safetensor": [339, 422, 454], "reflect": [341, 447, 450, 452], "ie": [345, 448], "noop": 345, "unfrozen": 345, "tracer": 346, "partial": [346, 347, 447, 451], "child": 347, "flexibli": 347, "programmat": 347, "query_input_dim": 348, "key_input_dim": 348, "value_input_dim": 348, "value_dim": 348, "value_output_dim": 348, "aggreg": 348, "linearli": 348, "attend": 348, "num_paramet": 349, "25": [349, 369], "parametr": [349, 404], "from_embed": 350, "classmethod": [350, 351], "from_linear": 351, "1910": 352, "07467": 352, "nonlinear": [353, 447], "elman": 353, "ih": 353, "hh": 353, "func": 353, "10000": 356, "slightli": [356, 455], "plain": 358, "known": [359, 409], "swish": [359, 409], "min_freq": 360, "0001": 360, "max_freq": 360, "cos_first": 360, "full_turn": 360, "sinusoid": 360, "threshold": [366, 394, 401, 414], "geq": [366, 414], "num_encoder_lay": 368, "num_decoder_lay": 368, "nb_func": 368, "custom_encod": 368, "custom_decod": 368, "norm_first": 368, "checkpoint": [368, 422], "decod": 368, "interact": 368, "mechan": 368, "chekpoint": 368, "expens": 368, "scale_factor": 369, "nearest": 369, "align_corn": 369, "audio": 369, "4d": 369, "forth": 369, "algorithm": [369, 429], "neighbor": 369, "interpol": 369, "cubic": 369, "bilinear": 369, "trilinear": 369, "bicub": 369, "corner": 369, "bottom": 369, "75": 369, "33333": 369, "66667": 369, "init_fn": [370, 371, 372, 373, 374, 375, 376, 377, 417], "glorot": [371, 372], "fan_in": [371, 372, 373, 374], "fan_out": [371, 372, 373, 374], "fan": [371, 372, 373, 374], "_in": [371, 372], "_out": [371, 372], "difficulti": [371, 372], "feedforward": [371, 372], "191107": 371, "61278": 371, "150594": 371, "363207": 371, "gain": [371, 372, 373, 374], "89613": 371, "53947": 371, "48095": 371, "995016": 371, "223404": 372, "890597": 372, "379159": 372, "776856": 372, "90041": 372, "02264": 372, "912766": 372, "12451": 372, "delv": [373, 374], "surpass": [373, 374], "human": [373, 374], "imagenet": [373, 374], "classif": [373, 374], "25211": 373, "458835": 373, "177208": 373, "0137595": 373, "6967": 373, "02765": 373, "15268": 373, "75787": 373, "kaim": 374, "0300242": 374, "0184009": 374, "793615": 374, "666329": 374, "64331": 374, "16506": 374, "08619": 374, "79854": 374, "982273": 376, "534422": 376, "380709": 376, "0645099": 376, "883935": 377, "863726": 377, "617261": 377, "417497": 377, "exact": [380, 381], "0005": 380, "015": 381, "702": 381, "cdot": [381, 390, 393, 409], "hendryck": 381, "1606": 381, "08415": 381, "min_val": 384, "max_val": 384, "_val": 384, "sum_i": 388, "x_i": [388, 410, 411], "with_logit": 389, "predict": [389, 392, 393, 394, 395, 396, 397, 399, 400, 401], "105361": 389, "223144": 389, "20397": 389, "916291": 389, "539245": 389, "prob": 389, "510826": 389, "x1": 390, "x2": 390, "x_1": [390, 398], "x_2": [390, 398], "label_smooth": 391, "hot": 391, "smooth": [391, 401, 434], "0485873": 391, "348587": 391, "06": [392, 402, 423], "likelihood": [392, 400], "nll": [392, 400], "hing": 393, "y_": [393, 397], "pred": [393, 397], "delta": [394, 423], "huber": 394, "leq": [394, 407], "l2": [394, 397, 435], "kullback": 395, "leibler": 395, "diverg": 395, "logcosh": 397, "sensit": 397, "outlier": 397, "dual": 397, "offer": 397, "balanc": 397, "robust": 397, "approach": [397, 449], "inputs1": 398, "inputs2": 398, "margin": [398, 402], "573409": 398, "765166": 398, "0638": 398, "75596": 398, "225763": 398, "256995": 398, "773433": 398, "formula": 401, "anchor": 402, "triplet": 402, "_p": 402, "pairwis": 402, "instabl": 402, "monoton": 403, "0507": 407, "67326": 407, "sum_j": [410, 411], "x_j": [410, 411], "subclass": 420, "concept": 420, "mymlp": 420, "in_proj": 420, "involv": [422, 447], "subsequ": 422, "far": 422, "serial": 422, "adam": [422, 428, 429, 438, 439], "configu": 422, "thumb": 422, "apply_gradi": 422, "rmsprop": 422, "adagrad": 422, "adafactor": 422, "adadelta": 422, "adamw": [422, 429], "adamax": 422, "lion": 422, "cosine_decai": [422, 438], "exponential_decai": 422, "join_schedul": 422, "linear_schedul": [422, 438], "step_decai": 422, "rho": 423, "zeiler": 423, "2012": [423, 434], "adapt": [423, 424, 425, 448], "1212": 423, "5701": 423, "v_": [423, 425, 426, 427, 428, 434, 435], "v_t": [423, 425, 426, 427, 428, 434, 435], "u_t": 423, "u_": 423, "w_t": [423, 425, 426, 427, 428, 429, 434, 435], "30": 424, "001": 424, "clip_threshold": 424, "decay_r": [424, 437, 440], "beta_1": [424, 426, 427, 428, 429], "weight_decai": [424, 427, 429, 435], "scale_paramet": 424, "relative_step": 424, "warmup_init": 424, "sublinear": 424, "epsilon_1": 424, "epsilon_2": 424, "parameter_scal": 424, "unscal": 424, "decai": [424, 427, 429, 435, 436, 437, 440], "duchi": 425, "hazan": 425, "singer": 425, "2011": 425, "subgradi": 425, "onlin": 425, "stochast": [425, 426, 428, 435, 451], "jmlr": 425, "999": [426, 427, 428], "omit": [426, 428, 448], "estim": [426, 428], "kingma": [426, 428], "ba": [426, 428], "iclr": [426, 427, 428], "m_": [426, 427, 428, 429], "m_t": [426, 427, 428, 429], "beta_2": [426, 427, 428, 429], "contrast": 427, "loshchilov": 427, "hutter": 427, "decoupl": 427, "99": [429, 434], "tend": 429, "10x": 429, "strength": [429, 435], "wd": 429, "chen": 429, "symbol": 429, "discoveri": 429, "2302": 429, "06675": 429, "eta": 429, "opt": [430, 448], "tieleman": 434, "hinton": 434, "lectur": 434, "coursera": 434, "dampen": 435, "nesterov": 435, "descent": [435, 447, 451], "mu": 435, "tau": 435, "penalti": 435, "decay_step": 436, "beyond": [436, 439], "lr_schedul": [436, 437, 438, 440], "1000": [436, 447], "0999961": 436, "06561": 437, "boundari": 438, "join": 438, "transit": 438, "warmup": [438, 439], "0999938": 438, "101": 439, "step_siz": 440, "081": 440, "basi": 442, "implicit": [444, 447, 449], "fine": [444, 451], "grain": 444, "pseudo": 444, "altern": 444, "splittabl": 444, "threefri": 444, "counter": 444, "cycl": 446, "merg": 447, "fuse": 447, "big": 447, "awar": [447, 451], "36788": 447, "compiled_fun": 447, "code": [447, 448, 451], "slow": 447, "rerun": [447, 451], "frequent": [447, 451], "destroi": 447, "anonym": 447, "unari": 447, "overhead": [447, 451, 455], "bandwidth": [447, 448], "fusibl": 447, "consider": 447, "versu": 447, "timeit": [447, 449], "tic": 447, "perf_count": 447, "toc": 447, "tpi": 447, "1e3": 447, "4096": [447, 449, 455], "On": [447, 449, 451], "five": 447, "latest": 447, "won": 447, "placehold": 447, "insid": 447, "disable_compil": 447, "okai": [447, 451], "deal": 447, "pretti": [447, 451], "inconveni": 447, "functool": 447, "particularli": 447, "backward": [447, 449], "compiled_grad_fn": 447, "71828": 447, "opportun": 447, "physic": 448, "lot": [448, 449], "figur": 448, "best": 448, "mac": 448, "abil": 448, "talk": 448, "minim": 448, "all_sum": 448, "mpirun": 448, "mpiexec": 448, "send": 448, "homebrew": 448, "anaconda": 448, "openmpi": 448, "libmpi": 448, "dyld": 448, "dyld_library_path": 448, "lib": 448, "connect": 448, "ssh": 448, "checklist": 448, "issu": [448, 449, 452], "hostnam": 448, "password": 448, "confirm": 448, "foo": 448, "bar": 448, "host1": 448, "host2": 448, "qualifi": 448, "ip": 448, "slot": 448, "hostfil": 448, "parallel": [448, 455], "snippet": 448, "loss_grad_fn": 448, "all_avg": 448, "all_reduce_grad": 448, "latenc": 448, "mca": 448, "btl_tcp_link": 448, "tcp": 448, "idea": [449, 451], "behind": 449, "dfdx": [449, 450], "d2fdx2": 449, "zero_grad": 449, "detach": 449, "requires_grad": 449, "dloss_dw": 449, "dloss_dx": 449, "redund": 449, "continu": 449, "suppos": [449, 455], "nice": [449, 451], "propag": [449, 450], "autom": 449, "contriv": [449, 455], "sake": 449, "clariti": 449, "quit": [449, 452], "difficult": 449, "primit": 449, "priorit": 449, "naive_add": 449, "vmap_add": 449, "total": 449, "390": 449, "wherea": 449, "025": 449, "ten": [449, 451], "Of": 449, "cours": 449, "better": [449, 455], "handi": 449, "ellipsi": 450, "mix": 450, "lack": 450, "extrem": [450, 451], "ineffici": [450, 451], "nonzero": 450, "dynam": 451, "easier": 451, "worri": 451, "fun1": 451, "expensive_fun": 451, "consum": 451, "eager": 451, "thank": 451, "weights_fp16": 451, "trade": 451, "bad": 451, "grow": 451, "computation": 451, "costli": 451, "luckili": 451, "wide": 451, "thousand": 451, "value_and_grad_fn": 451, "implicitli": 451, "anytim": 451, "memoryview": [451, 452], "perfectli": 451, "first_lay": 451, "second_layer_a": 451, "second_layer_b": 451, "protocol": 452, "dlpack": 452, "pep": 452, "3118": 452, "a_view": 452, "owndata": 452, "extern": 452, "demonstr": 452, "x_view": 452, "modifi": 452, "df": 452, "x\u00b2": 452, "2x": 452, "indirectli": 452, "modif": 452, "seen": 452, "occur": 452, "incorpor": 452, "aris": 452, "incorrect": 452, "experiment": 452, "break": 452, "advis": 452, "intermedi": 452, "jnp": 452, "tf": 452, "page": 453, "composit": 453, "archiv": 454, "savez_compress": 454, "save_gguf": 454, "arr_0": 454, "advantag": 455, "race": 455, "interest": 455, "albeit": 455, "d1": 455, "d2": 455, "But": 455, "twice": 455, "measur": 455, "default_stream": 456, "default_devic": 456, "my_devic": 456}, "objects": {"": [[0, 0, 1, "_CPPv43absRK5array14StreamOrDevice", "abs"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::a"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::s"], [0, 0, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::a"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::b"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::s"], [0, 0, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::a"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::alpha"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::b"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::beta"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::c"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::s"], [0, 0, 1, "_CPPv43allRK5array14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::axes"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::axis"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::s"], [0, 0, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::a"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::atol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::b"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::equal_nan"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::rtol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::s"], [0, 0, 1, "_CPPv43anyRK5array14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::axes"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::axis"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::s"], [0, 0, 1, "_CPPv46aranged14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangei14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeii14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeiii14StreamOrDevice", "arange"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::stop"], [0, 0, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::a"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::s"], [0, 0, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::a"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::s"], [0, 0, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::a"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::s"], [0, 0, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::a"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::s"], [0, 0, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan"], [0, 0, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::a"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::b"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::s"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::a"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::s"], [0, 0, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::a"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::s"], [0, 0, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::axis"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::s"], [0, 0, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::axis"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::s"], [0, 0, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition"], [0, 0, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::axis"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::s"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::s"], [0, 0, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort"], [0, 0, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::axis"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::s"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::s"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::equal_nan"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::s"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::s"], [0, 0, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::a"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::offset"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::s"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::shape"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::strides"], [0, 0, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::a"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::dtype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::s"], [0, 0, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d"], [0, 0, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::s"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::s"], [0, 0, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d"], [0, 0, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::s"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::s"], [0, 0, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d"], [0, 0, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::s"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::s"], [0, 0, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::a"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::b"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::s"], [0, 0, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::a"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::b"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::s"], [0, 0, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::a"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::b"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::s"], [0, 0, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::a"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::b"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::block_size"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_lhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_out"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_rhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::s"], [0, 0, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::inputs"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::s"], [0, 0, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::a"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::s"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::shape"], [0, 0, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::a"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::s"], [0, 0, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_max"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_min"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::s"], [0, 0, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate"], [0, 0, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::axis"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::s"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::s"], [0, 0, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::a"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::s"], [0, 0, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::dilation"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::groups"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::input"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::padding"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::s"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::stride"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::weight"], [0, 0, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::dilation"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::groups"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::input"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::padding"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::s"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::stride"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::weight"], [0, 0, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::dilation"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::groups"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::input"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::padding"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::s"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::stride"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::weight"], [0, 0, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 0, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_hi"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_lo"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 0, 1, "_CPPv44copy5array14StreamOrDevice", "copy"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::a"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::s"], [0, 0, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::a"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::s"], [0, 0, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::a"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::s"], [0, 0, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::a"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::axis"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::inclusive"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::reverse"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::s"], [0, 0, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::a"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::axis"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::inclusive"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::reverse"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::s"], [0, 0, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::a"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::axis"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::inclusive"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::reverse"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::s"], [0, 0, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::a"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::axis"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::inclusive"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::reverse"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::s"], [0, 0, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::a"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::s"], [0, 0, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::dependencies"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::inputs"], [0, 0, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::biases"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::bits"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::group_size"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::s"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::scales"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::w"], [0, 0, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::a"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::k"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::s"], [0, 0, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::a"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis1"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis2"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::offset"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::s"], [0, 0, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::a"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::b"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::s"], [0, 0, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::a"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::b"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::s"], [0, 0, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::a"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::b"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::s"], [0, 0, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::a"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::s"], [0, 0, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::a"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::s"], [0, 0, 1, "_CPPv43expRK5array14StreamOrDevice", "exp"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::a"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::s"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::axes"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::axis"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::s"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::s"], [0, 0, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::a"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::s"], [0, 0, 1, "_CPPv43eyei14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::s"], [0, 0, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten"], [0, 0, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::end_axis"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::start_axis"], [0, 0, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::a"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::s"], [0, 0, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::a"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::b"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::s"], [0, 0, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full"], [0, 0, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full"], [0, 2, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::T"], [0, 2, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::T"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::vals"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::vals"], [0, 0, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather"], [0, 0, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::axes"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::axis"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::slice_sizes"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::slice_sizes"], [0, 0, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::a"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::b"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::lhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::rhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::s"], [0, 0, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::biases"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::bits"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::group_size"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::lhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::rhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::s"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::scales"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::transpose"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::w"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::x"], [0, 0, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::a"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::b"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::s"], [0, 0, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::a"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::b"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::s"], [0, 0, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::a"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::s"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::scale"], [0, 0, 1, "_CPPv48identityi14StreamOrDevice", "identity"], [0, 0, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::dtype"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::s"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::s"], [0, 0, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::a"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::b"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::s"], [0, 0, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::a"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::atol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::b"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::equal_nan"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::rtol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::s"], [0, 0, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::a"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::s"], [0, 0, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::a"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::s"], [0, 0, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::a"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::s"], [0, 0, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::a"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::s"], [0, 0, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::a"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::b"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::s"], [0, 0, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::a"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::b"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::s"], [0, 0, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::a"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::b"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::s"], [0, 0, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::dtype"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::num"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::s"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::start"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::stop"], [0, 0, 1, "_CPPv43logRK5array14StreamOrDevice", "log"], [0, 0, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::a"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::s"], [0, 0, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::a"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::s"], [0, 0, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::a"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::s"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::a"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::s"], [0, 0, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::a"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::b"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::s"], [0, 0, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::a"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::b"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::s"], [0, 0, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::a"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::s"], [0, 0, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::a"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::b"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::s"], [0, 0, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::axes"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::axis"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::s"], [0, 0, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::a"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::b"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::s"], [0, 0, 1, "_CPPv43maxRK5array14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::axes"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::axis"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::s"], [0, 0, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::a"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::b"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::s"], [0, 0, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::axes"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::axis"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::s"], [0, 0, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::arrays"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::indexing"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::s"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::sparse"], [0, 0, 1, "_CPPv43minRK5array14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::axes"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::axis"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::s"], [0, 0, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::a"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::b"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::s"], [0, 0, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::a"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::destination"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::s"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::source"], [0, 0, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::a"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::b"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::s"], [0, 0, 1, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", "nan_to_num"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::a"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::nan"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::neginf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::posinf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::s"], [0, 0, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::a"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::s"], [0, 0, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::a"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::b"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::s"], [0, 0, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::a"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::axes"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::dtype"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::inverted"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::s"], [0, 0, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones"], [0, 0, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::dtype"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones::shape"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::shape"], [0, 0, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::a"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::s"], [0, 0, 1, "_CPPv4I0Ene5array1TRK5array", "operator!="], [0, 0, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!="], [0, 0, 1, "_CPPv4neRK5arrayRK5array", "operator!="], [0, 2, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::T"], [0, 2, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::T"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::a"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::b"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::b"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::b"], [0, 0, 1, "_CPPv4I0Erm5array1TRK5array", "operator%"], [0, 0, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%"], [0, 0, 1, "_CPPv4rmRK5arrayRK5array", "operator%"], [0, 2, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::T"], [0, 2, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::T"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::a"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::b"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::b"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::b"], [0, 0, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;"], [0, 0, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::a"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::b"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::a"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::b"], [0, 0, 1, "_CPPv4I0Eml5array1TRK5array", "operator*"], [0, 0, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*"], [0, 0, 1, "_CPPv4mlRK5arrayRK5array", "operator*"], [0, 2, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::T"], [0, 2, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::T"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::a"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::b"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::b"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::b"], [0, 0, 1, "_CPPv4I0Epl5array1TRK5array", "operator+"], [0, 0, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+"], [0, 0, 1, "_CPPv4plRK5arrayRK5array", "operator+"], [0, 2, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::T"], [0, 2, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::T"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::a"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::b"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::b"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::b"], [0, 0, 1, "_CPPv4I0Emi5array1TRK5array", "operator-"], [0, 0, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-"], [0, 0, 1, "_CPPv4miRK5array", "operator-"], [0, 0, 1, "_CPPv4miRK5arrayRK5array", "operator-"], [0, 2, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::T"], [0, 2, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::T"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::a"], [0, 1, 1, "_CPPv4miRK5array", "operator-::a"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::b"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::b"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::b"], [0, 0, 1, "_CPPv4dvRK5arrayRK5array", "operator/"], [0, 0, 1, "_CPPv4dvRK5arrayd", "operator/"], [0, 0, 1, "_CPPv4dvdRK5array", "operator/"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::a"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::b"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::b"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::b"], [0, 0, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;"], [0, 0, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;"], [0, 0, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;"], [0, 2, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::T"], [0, 2, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::T"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::a"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::b"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::b"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::b"], [0, 0, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::a"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::b"], [0, 0, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;="], [0, 0, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;="], [0, 0, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;="], [0, 2, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::T"], [0, 2, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::T"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::a"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::b"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::b"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::b"], [0, 0, 1, "_CPPv4I0Eeq5array1TRK5array", "operator=="], [0, 0, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator=="], [0, 0, 1, "_CPPv4eqRK5arrayRK5array", "operator=="], [0, 2, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::T"], [0, 2, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::T"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::a"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::b"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::b"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::b"], [0, 0, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;"], [0, 0, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;"], [0, 0, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;"], [0, 2, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::T"], [0, 2, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::T"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::a"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::b"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::b"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::b"], [0, 0, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;="], [0, 0, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;="], [0, 0, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;="], [0, 2, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::T"], [0, 2, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::T"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::a"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::b"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::b"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::b"], [0, 0, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::a"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::b"], [0, 0, 1, "_CPPv4eoRK5arrayRK5array", "operator^"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::a"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::b"], [0, 0, 1, "_CPPv4orRK5arrayRK5array", "operator|"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::a"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::b"], [0, 0, 1, "_CPPv4ooRK5arrayRK5array", "operator||"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::a"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::b"], [0, 0, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::a"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::b"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::s"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::axes"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::high_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::low_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::s"], [0, 0, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition"], [0, 0, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::axis"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::s"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::s"], [0, 0, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::a"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::b"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::s"], [0, 0, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::axes"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::axis"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::s"], [0, 0, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::bits"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::group_size"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::s"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::w"], [0, 0, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::biases"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::bits"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::group_size"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::s"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::scales"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::transpose"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::w"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::x"], [0, 0, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::a"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::s"], [0, 0, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::a"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::s"], [0, 0, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::a"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::b"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::s"], [0, 0, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat"], [0, 0, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::axis"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::s"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::s"], [0, 0, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::a"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::s"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::shape"], [0, 0, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::a"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::b"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::s"], [0, 0, 1, "_CPPv45roundRK5array14StreamOrDevice", "round"], [0, 0, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::decimals"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::s"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::s"], [0, 0, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::a"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::s"], [0, 0, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter"], [0, 0, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::axes"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::axis"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::updates"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::updates"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::axes"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::axis"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::updates"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::updates"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::axes"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::axis"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::updates"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::updates"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::axes"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::axis"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::updates"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::updates"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::axes"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::axis"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::updates"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::updates"], [0, 0, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::a"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::s"], [0, 0, 1, "_CPPv44signRK5array14StreamOrDevice", "sign"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::a"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::s"], [0, 0, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::a"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::s"], [0, 0, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::a"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::s"], [0, 0, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::strides"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::strides"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 0, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::axes"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::axis"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::s"], [0, 0, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort"], [0, 0, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::axis"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::s"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::s"], [0, 0, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::s"], [0, 0, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::a"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::s"], [0, 0, 1, "_CPPv46squareRK5array14StreamOrDevice", "square"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::a"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::s"], [0, 0, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::axes"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::axis"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::s"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::axis"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::s"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::s"], [0, 0, 1, "_CPPv4StRK5array14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::axes"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::axis"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::s"], [0, 0, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::a"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::s"], [0, 0, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::a"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::b"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::s"], [0, 0, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::axes"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::axis"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::s"], [0, 0, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::a"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis1"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis2"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::s"], [0, 0, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::s"], [0, 0, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::a"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::indices"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::s"], [0, 0, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::a"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::s"], [0, 0, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::a"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::s"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::axis"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::s"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::s"], [0, 0, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::arr"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::reps"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::s"], [0, 0, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk"], [0, 0, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::axis"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::s"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::s"], [0, 0, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::dtype"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::s"], [0, 0, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::s"], [0, 0, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri"], [0, 0, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::k"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::m"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::type"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::type"], [0, 0, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::k"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::s"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::x"], [0, 0, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::k"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::s"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::x"], [0, 0, 1, "_CPPv43varRK5array14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::axes"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::axis"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::s"], [0, 0, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::a"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::dtype"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::s"], [0, 0, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::condition"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::s"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::x"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::y"], [0, 0, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros"], [0, 0, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::dtype"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros::shape"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::shape"], [0, 0, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::a"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::s"]], "mlx.core": [[8, 3, 1, "", "Device"], [9, 3, 1, "", "Dtype"], [10, 3, 1, "", "DtypeCategory"], [292, 3, 1, "", "Stream"], [11, 5, 1, "", "abs"], [12, 5, 1, "", "add"], [13, 5, 1, "", "addmm"], [14, 5, 1, "", "all"], [15, 5, 1, "", "allclose"], [16, 5, 1, "", "any"], [17, 5, 1, "", "arange"], [18, 5, 1, "", "arccos"], [19, 5, 1, "", "arccosh"], [20, 5, 1, "", "arcsin"], [21, 5, 1, "", "arcsinh"], [22, 5, 1, "", "arctan"], [23, 5, 1, "", "arctan2"], [24, 5, 1, "", "arctanh"], [25, 5, 1, "", "argmax"], [26, 5, 1, "", "argmin"], [27, 5, 1, "", "argpartition"], [28, 5, 1, "", "argsort"], [29, 3, 1, "", "array"], [80, 5, 1, "", "array_equal"], [81, 5, 1, "", "as_strided"], [82, 5, 1, "", "atleast_1d"], [83, 5, 1, "", "atleast_2d"], [84, 5, 1, "", "atleast_3d"], [85, 5, 1, "", "bitwise_and"], [86, 5, 1, "", "bitwise_or"], [87, 5, 1, "", "bitwise_xor"], [88, 5, 1, "", "block_masked_mm"], [89, 5, 1, "", "broadcast_to"], [90, 5, 1, "", "ceil"], [91, 5, 1, "", "clip"], [92, 5, 1, "", "compile"], [93, 5, 1, "", "concatenate"], [94, 5, 1, "", "conj"], [95, 5, 1, "", "conjugate"], [96, 5, 1, "", "conv1d"], [97, 5, 1, "", "conv2d"], [98, 5, 1, "", "conv_general"], [99, 5, 1, "", "convolve"], [100, 5, 1, "", "cos"], [101, 5, 1, "", "cosh"], [102, 5, 1, "", "cummax"], [103, 5, 1, "", "cummin"], [104, 5, 1, "", "cumprod"], [105, 5, 1, "", "cumsum"], [106, 3, 1, "", "custom_function"], [107, 5, 1, "", "default_device"], [108, 5, 1, "", "default_stream"], [109, 5, 1, "", "degrees"], [110, 5, 1, "", "dequantize"], [111, 5, 1, "", "diag"], [112, 5, 1, "", "diagonal"], [113, 5, 1, "", "disable_compile"], [119, 5, 1, "", "divide"], [120, 5, 1, "", "divmod"], [121, 5, 1, "", "einsum"], [122, 5, 1, "", "einsum_path"], [123, 5, 1, "", "enable_compile"], [124, 5, 1, "", "equal"], [125, 5, 1, "", "erf"], [126, 5, 1, "", "erfinv"], [127, 5, 1, "", "eval"], [128, 5, 1, "", "exp"], [129, 5, 1, "", "expand_dims"], [130, 5, 1, "", "expm1"], [131, 5, 1, "", "eye"], [148, 5, 1, "", "flatten"], [149, 5, 1, "", "floor"], [150, 5, 1, "", "floor_divide"], [151, 5, 1, "", "full"], [152, 5, 1, "", "gather_mm"], [153, 5, 1, "", "gather_qmm"], [154, 5, 1, "", "grad"], [155, 5, 1, "", "greater"], [156, 5, 1, "", "greater_equal"], [157, 5, 1, "", "hadamard_transform"], [158, 5, 1, "", "identity"], [159, 5, 1, "", "inner"], [160, 5, 1, "", "isclose"], [161, 5, 1, "", "isinf"], [162, 5, 1, "", "isnan"], [163, 5, 1, "", "isneginf"], [164, 5, 1, "", "isposinf"], [165, 5, 1, "", "issubdtype"], [166, 5, 1, "", "jvp"], [167, 5, 1, "", "left_shift"], [168, 5, 1, "", "less"], [169, 5, 1, "", "less_equal"], [175, 5, 1, "", "linspace"], [176, 5, 1, "", "load"], [177, 5, 1, "", "log"], [178, 5, 1, "", "log10"], [179, 5, 1, "", "log1p"], [180, 5, 1, "", "log2"], [181, 5, 1, "", "logaddexp"], [182, 5, 1, "", "logical_and"], [183, 5, 1, "", "logical_not"], [184, 5, 1, "", "logical_or"], [185, 5, 1, "", "logsumexp"], [186, 5, 1, "", "matmul"], [187, 5, 1, "", "max"], [188, 5, 1, "", "maximum"], [189, 5, 1, "", "mean"], [190, 5, 1, "", "meshgrid"], [202, 5, 1, "", "min"], [203, 5, 1, "", "minimum"], [204, 5, 1, "", "moveaxis"], [205, 5, 1, "", "multiply"], [206, 5, 1, "", "nan_to_num"], [207, 5, 1, "", "negative"], [208, 5, 1, "", "new_stream"], [209, 5, 1, "", "not_equal"], [210, 5, 1, "", "ones"], [211, 5, 1, "", "ones_like"], [212, 5, 1, "", "outer"], [213, 5, 1, "", "pad"], [214, 5, 1, "", "partition"], [215, 5, 1, "", "power"], [216, 5, 1, "", "prod"], [217, 5, 1, "", "quantize"], [218, 5, 1, "", "quantized_matmul"], [219, 5, 1, "", "radians"], [232, 5, 1, "", "reciprocal"], [233, 5, 1, "", "remainder"], [234, 5, 1, "", "repeat"], [235, 5, 1, "", "reshape"], [236, 5, 1, "", "right_shift"], [237, 5, 1, "", "round"], [238, 5, 1, "", "rsqrt"], [239, 5, 1, "", "save"], [240, 5, 1, "", "save_gguf"], [241, 5, 1, "", "save_safetensors"], [242, 5, 1, "", "savez"], [243, 5, 1, "", "savez_compressed"], [244, 5, 1, "", "set_default_device"], [245, 5, 1, "", "set_default_stream"], [246, 5, 1, "", "sigmoid"], [247, 5, 1, "", "sign"], [248, 5, 1, "", "sin"], [249, 5, 1, "", "sinh"], [250, 5, 1, "", "softmax"], [251, 5, 1, "", "sort"], [252, 5, 1, "", "split"], [253, 5, 1, "", "sqrt"], [254, 5, 1, "", "square"], [255, 5, 1, "", "squeeze"], [256, 5, 1, "", "stack"], [257, 5, 1, "", "std"], [258, 5, 1, "", "stop_gradient"], [259, 5, 1, "", "stream"], [260, 5, 1, "", "subtract"], [261, 5, 1, "", "sum"], [262, 5, 1, "", "swapaxes"], [263, 5, 1, "", "synchronize"], [264, 5, 1, "", "take"], [265, 5, 1, "", "take_along_axis"], [266, 5, 1, "", "tan"], [267, 5, 1, "", "tanh"], [268, 5, 1, "", "tensordot"], [269, 5, 1, "", "tile"], [270, 5, 1, "", "topk"], [271, 5, 1, "", "trace"], [272, 5, 1, "", "transpose"], [273, 5, 1, "", "tri"], [274, 5, 1, "", "tril"], [275, 5, 1, "", "triu"], [276, 5, 1, "", "value_and_grad"], [277, 5, 1, "", "var"], [278, 5, 1, "", "view"], [279, 5, 1, "", "vjp"], [280, 5, 1, "", "vmap"], [281, 5, 1, "", "where"], [282, 5, 1, "", "zeros"], [283, 5, 1, "", "zeros_like"]], "mlx.core.Device": [[8, 4, 1, "", "__init__"]], "mlx.core.Dtype": [[9, 4, 1, "", "__init__"]], "mlx.core.DtypeCategory": [[10, 4, 1, "", "__init__"]], "mlx.core.Stream": [[292, 4, 1, "", "__init__"]], "mlx.core.array": [[30, 6, 1, "", "T"], [29, 4, 1, "", "__init__"], [31, 4, 1, "", "abs"], [32, 4, 1, "", "all"], [33, 4, 1, "", "any"], [34, 4, 1, "", "argmax"], [35, 4, 1, "", "argmin"], [36, 4, 1, "", "astype"], [37, 6, 1, "", "at"], [38, 4, 1, "", "conj"], [39, 4, 1, "", "cos"], [40, 4, 1, "", "cummax"], [41, 4, 1, "", "cummin"], [42, 4, 1, "", "cumprod"], [43, 4, 1, "", "cumsum"], [44, 4, 1, "", "diag"], [45, 4, 1, "", "diagonal"], [46, 6, 1, "", "dtype"], [47, 4, 1, "", "exp"], [48, 4, 1, "", "flatten"], [49, 4, 1, "", "item"], [50, 6, 1, "", "itemsize"], [51, 4, 1, "", "log"], [52, 4, 1, "", "log10"], [53, 4, 1, "", "log1p"], [54, 4, 1, "", "log2"], [55, 4, 1, "", "logsumexp"], [56, 4, 1, "", "max"], [57, 4, 1, "", "mean"], [58, 4, 1, "", "min"], [59, 4, 1, "", "moveaxis"], [60, 6, 1, "", "nbytes"], [61, 6, 1, "", "ndim"], [62, 4, 1, "", "prod"], [63, 4, 1, "", "reciprocal"], [64, 4, 1, "", "reshape"], [65, 4, 1, "", "round"], [66, 4, 1, "", "rsqrt"], [67, 6, 1, "", "shape"], [68, 4, 1, "", "sin"], [69, 6, 1, "", "size"], [70, 4, 1, "", "split"], [71, 4, 1, "", "sqrt"], [72, 4, 1, "", "square"], [73, 4, 1, "", "squeeze"], [74, 4, 1, "", "sum"], [75, 4, 1, "", "swapaxes"], [76, 4, 1, "", "tolist"], [77, 4, 1, "", "transpose"], [78, 4, 1, "", "var"], [79, 4, 1, "", "view"]], "mlx.core.custom_function": [[106, 4, 1, "", "__init__"]], "mlx.core.distributed": [[114, 3, 1, "", "Group"], [115, 5, 1, "", "all_gather"], [116, 5, 1, "", "all_sum"], [117, 5, 1, "", "init"], [118, 5, 1, "", "is_available"]], "mlx.core.distributed.Group": [[114, 4, 1, "", "__init__"]], "mlx.core.fast": [[132, 5, 1, "", "layer_norm"], [133, 5, 1, "", "rms_norm"], [134, 5, 1, "", "rope"], [135, 5, 1, "", "scaled_dot_product_attention"]], "mlx.core.fft": [[136, 5, 1, "", "fft"], [137, 5, 1, "", "fft2"], [138, 5, 1, "", "fftn"], [139, 5, 1, "", "ifft"], [140, 5, 1, "", "ifft2"], [141, 5, 1, "", "ifftn"], [142, 5, 1, "", "irfft"], [143, 5, 1, "", "irfft2"], [144, 5, 1, "", "irfftn"], [145, 5, 1, "", "rfft"], [146, 5, 1, "", "rfft2"], [147, 5, 1, "", "rfftn"]], "mlx.core.linalg": [[170, 5, 1, "", "cholesky"], [171, 5, 1, "", "inv"], [172, 5, 1, "", "norm"], [173, 5, 1, "", "qr"], [174, 5, 1, "", "svd"]], "mlx.core.metal": [[191, 5, 1, "", "clear_cache"], [192, 5, 1, "", "device_info"], [193, 5, 1, "", "get_active_memory"], [194, 5, 1, "", "get_cache_memory"], [195, 5, 1, "", "get_peak_memory"], [196, 5, 1, "", "is_available"], [197, 5, 1, "", "reset_peak_memory"], [198, 5, 1, "", "set_cache_limit"], [199, 5, 1, "", "set_memory_limit"], [200, 5, 1, "", "start_capture"], [201, 5, 1, "", "stop_capture"]], "mlx.core.random": [[220, 5, 1, "", "bernoulli"], [221, 5, 1, "", "categorical"], [222, 5, 1, "", "gumbel"], [223, 5, 1, "", "key"], [224, 5, 1, "", "laplace"], [225, 5, 1, "", "multivariate_normal"], [226, 5, 1, "", "normal"], [227, 5, 1, "", "randint"], [228, 5, 1, "", "seed"], [229, 5, 1, "", "split"], [230, 5, 1, "", "truncated_normal"], [231, 5, 1, "", "uniform"]], "mlx.nn": [[302, 3, 1, "", "ALiBi"], [303, 3, 1, "", "AvgPool1d"], [304, 3, 1, "", "AvgPool2d"], [305, 3, 1, "", "BatchNorm"], [306, 3, 1, "", "Conv1d"], [307, 3, 1, "", "Conv2d"], [308, 3, 1, "", "Conv3d"], [309, 3, 1, "", "Dropout"], [310, 3, 1, "", "Dropout2d"], [311, 3, 1, "", "Dropout3d"], [312, 3, 1, "", "Embedding"], [313, 3, 1, "", "GELU"], [314, 3, 1, "", "GLU"], [315, 3, 1, "", "GRU"], [316, 3, 1, "", "GroupNorm"], [317, 3, 1, "", "HardShrink"], [318, 3, 1, "", "HardTanh"], [319, 3, 1, "", "Hardswish"], [320, 3, 1, "", "InstanceNorm"], [321, 3, 1, "", "LSTM"], [322, 3, 1, "", "LayerNorm"], [323, 3, 1, "", "LeakyReLU"], [324, 3, 1, "", "Linear"], [325, 3, 1, "", "MaxPool1d"], [326, 3, 1, "", "MaxPool2d"], [327, 3, 1, "", "Mish"], [420, 3, 1, "", "Module"], [348, 3, 1, "", "MultiHeadAttention"], [349, 3, 1, "", "PReLU"], [350, 3, 1, "", "QuantizedEmbedding"], [351, 3, 1, "", "QuantizedLinear"], [352, 3, 1, "", "RMSNorm"], [353, 3, 1, "", "RNN"], [354, 3, 1, "", "ReLU"], [355, 3, 1, "", "ReLU6"], [356, 3, 1, "", "RoPE"], [357, 3, 1, "", "SELU"], [358, 3, 1, "", "Sequential"], [359, 3, 1, "", "SiLU"], [360, 3, 1, "", "SinusoidalPositionalEncoding"], [361, 3, 1, "", "Softmax"], [362, 3, 1, "", "Softmin"], [363, 3, 1, "", "Softplus"], [364, 3, 1, "", "Softshrink"], [365, 3, 1, "", "Softsign"], [366, 3, 1, "", "Step"], [367, 3, 1, "", "Tanh"], [368, 3, 1, "", "Transformer"], [369, 3, 1, "", "Upsample"], [378, 3, 1, "", "elu"], [379, 3, 1, "", "gelu"], [380, 3, 1, "", "gelu_approx"], [381, 3, 1, "", "gelu_fast_approx"], [382, 3, 1, "", "glu"], [383, 3, 1, "", "hard_shrink"], [384, 3, 1, "", "hard_tanh"], [385, 3, 1, "", "hardswish"], [386, 3, 1, "", "leaky_relu"], [387, 3, 1, "", "log_sigmoid"], [388, 3, 1, "", "log_softmax"], [403, 3, 1, "", "mish"], [404, 3, 1, "", "prelu"], [284, 5, 1, "", "quantize"], [405, 3, 1, "", "relu"], [406, 3, 1, "", "relu6"], [407, 3, 1, "", "selu"], [408, 3, 1, "", "sigmoid"], [409, 3, 1, "", "silu"], [410, 3, 1, "", "softmax"], [411, 3, 1, "", "softmin"], [412, 3, 1, "", "softplus"], [413, 3, 1, "", "softshrink"], [414, 3, 1, "", "step"], [415, 3, 1, "", "tanh"], [285, 5, 1, "", "value_and_grad"]], "mlx.nn.Module": [[328, 4, 1, "", "apply"], [329, 4, 1, "", "apply_to_modules"], [330, 4, 1, "", "children"], [331, 4, 1, "", "eval"], [332, 4, 1, "", "filter_and_map"], [333, 4, 1, "", "freeze"], [334, 4, 1, "", "leaf_modules"], [335, 4, 1, "", "load_weights"], [336, 4, 1, "", "modules"], [337, 4, 1, "", "named_modules"], [338, 4, 1, "", "parameters"], [339, 4, 1, "", "save_weights"], [340, 4, 1, "", "set_dtype"], [341, 6, 1, "", "state"], [342, 4, 1, "", "train"], [343, 4, 1, "", "trainable_parameters"], [344, 6, 1, "", "training"], [345, 4, 1, "", "unfreeze"], [346, 4, 1, "", "update"], [347, 4, 1, "", "update_modules"]], "mlx.nn.init": [[370, 5, 1, "", "constant"], [371, 5, 1, "", "glorot_normal"], [372, 5, 1, "", "glorot_uniform"], [373, 5, 1, "", "he_normal"], [374, 5, 1, "", "he_uniform"], [375, 5, 1, "", "identity"], [376, 5, 1, "", "normal"], [377, 5, 1, "", "uniform"]], "mlx.nn.losses": [[389, 3, 1, "", "binary_cross_entropy"], [390, 3, 1, "", "cosine_similarity_loss"], [391, 3, 1, "", "cross_entropy"], [392, 3, 1, "", "gaussian_nll_loss"], [393, 3, 1, "", "hinge_loss"], [394, 3, 1, "", "huber_loss"], [395, 3, 1, "", "kl_div_loss"], [396, 3, 1, "", "l1_loss"], [397, 3, 1, "", "log_cosh_loss"], [398, 3, 1, "", "margin_ranking_loss"], [399, 3, 1, "", "mse_loss"], [400, 3, 1, "", "nll_loss"], [401, 3, 1, "", "smooth_l1_loss"], [402, 3, 1, "", "triplet_loss"]], "mlx.optimizers": [[423, 3, 1, "", "AdaDelta"], [424, 3, 1, "", "Adafactor"], [425, 3, 1, "", "Adagrad"], [426, 3, 1, "", "Adam"], [427, 3, 1, "", "AdamW"], [428, 3, 1, "", "Adamax"], [429, 3, 1, "", "Lion"], [442, 3, 1, "", "Optimizer"], [434, 3, 1, "", "RMSprop"], [435, 3, 1, "", "SGD"], [286, 5, 1, "", "clip_grad_norm"], [436, 5, 1, "", "cosine_decay"], [437, 5, 1, "", "exponential_decay"], [438, 5, 1, "", "join_schedules"], [439, 5, 1, "", "linear_schedule"], [440, 5, 1, "", "step_decay"]], "mlx.optimizers.Optimizer": [[430, 4, 1, "", "apply_gradients"], [431, 4, 1, "", "init"], [432, 6, 1, "", "state"], [433, 4, 1, "", "update"]], "mlx.utils": [[287, 5, 1, "", "tree_flatten"], [288, 5, 1, "", "tree_map"], [289, 5, 1, "", "tree_map_with_path"], [290, 5, 1, "", "tree_reduce"], [291, 5, 1, "", "tree_unflatten"]]}, "objtypes": {"0": "cpp:function", "1": "cpp:functionParam", "2": "cpp:templateParam", "3": "py:class", "4": "py:method", "5": "py:function", "6": "py:property"}, "objnames": {"0": ["cpp", "function", "C++ function"], "1": ["cpp", "functionParam", "C++ function parameter"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "titleterms": {"oper": [0, 1, 421], "custom": 1, "extens": 1, "mlx": [1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], "introduc": 1, "exampl": [1, 6, 447, 448, 455], "primit": 1, "us": [1, 451, 456], "implement": [1, 4], "cpu": 1, "back": 1, "end": 1, "gpu": 1, "transform": [1, 368, 445, 447, 449, 451, 453], "build": [1, 7], "bind": 1, "python": [1, 6, 7], "cmake": 1, "setuptool": 1, "usag": [1, 6], "result": 1, "script": [1, 4], "download": [1, 4], "code": [1, 4], "metal": [2, 7, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 300], "debugg": 2, "xcode": 2, "workflow": 2, "linear": [3, 299, 324], "regress": 3, "llm": 4, "infer": 4, "model": 4, "attent": 4, "layer": [4, 5, 418], "encod": 4, "full": [4, 151], "gener": 4, "put": 4, "all": [4, 14, 32, 448], "togeth": 4, "convert": 4, "weight": 4, "load": [4, 176, 422, 454], "benchmark": 4, "multi": 5, "perceptron": 5, "instal": [6, 7, 448], "api": [6, 7], "refer": 6, "c": [6, 7], "further": 6, "read": 6, "troubleshoot": 7, "from": [7, 450], "sourc": 7, "requir": 7, "option": 7, "binari": 7, "size": [7, 69], "minim": 7, "found": 7, "x86": 7, "shell": 7, "core": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 292], "devic": [8, 295], "dtype": [9, 46], "dtypecategori": 10, "ab": [11, 31], "add": 12, "addmm": 13, "allclos": 15, "ani": [16, 33], "arang": 17, "arcco": 18, "arccosh": 19, "arcsin": 20, "arcsinh": 21, "arctan": 22, "arctan2": 23, "arctanh": 24, "argmax": [25, 34], "argmin": [26, 35], "argpartit": 27, "argsort": 28, "arrai": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 293, 450, 454], "t": 30, "astyp": 36, "conj": [38, 94], "co": [39, 100], "cummax": [40, 102], "cummin": [41, 103], "cumprod": [42, 104], "cumsum": [43, 105], "diag": [44, 111], "diagon": [45, 112], "exp": [47, 128], "flatten": [48, 148], "item": 49, "items": 50, "log": [51, 177], "log10": [52, 178], "log1p": [53, 179], "log2": [54, 180], "logsumexp": [55, 185], "max": [56, 187], "mean": [57, 189], "min": [58, 202], "moveaxi": [59, 204], "nbyte": 60, "ndim": 61, "prod": [62, 216], "reciproc": [63, 232], "reshap": [64, 235], "round": [65, 237], "rsqrt": [66, 238], "shape": 67, "sin": [68, 248], "split": [70, 229, 252], "sqrt": [71, 253], "squar": [72, 254], "squeez": [73, 255], "sum": [74, 261], "swapax": [75, 262], "tolist": 76, "transpos": [77, 272], "var": [78, 277], "view": [79, 278], "array_equ": 80, "as_strid": 81, "atleast_1d": 82, "atleast_2d": 83, "atleast_3d": 84, "bitwise_and": 85, "bitwise_or": 86, "bitwise_xor": 87, "block_masked_mm": 88, "broadcast_to": 89, "ceil": 90, "clip": 91, "compil": [92, 447], "concaten": 93, "conjug": 95, "conv1d": [96, 306], "conv2d": [97, 307], "conv_gener": 98, "convolv": 99, "cosh": 101, "custom_funct": 106, "default_devic": 107, "default_stream": 108, "degre": 109, "dequant": 110, "disable_compil": 113, "distribut": [114, 115, 116, 117, 118, 296, 448], "group": 114, "all_gath": 115, "all_sum": 116, "init": [117, 370, 371, 372, 373, 374, 375, 376, 377, 431], "is_avail": [118, 196], "divid": 119, "divmod": 120, "einsum": 121, "einsum_path": 122, "enable_compil": 123, "equal": 124, "erf": 125, "erfinv": 126, "eval": [127, 331], "expand_dim": 129, "expm1": 130, "ey": 131, "fast": [132, 133, 134, 135, 297], "layer_norm": 132, "rms_norm": 133, "rope": [134, 356], "scaled_dot_product_attent": 135, "fft": [136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 298], "fft2": 137, "fftn": 138, "ifft": 139, "ifft2": 140, "ifftn": 141, "irfft": 142, "irfft2": 143, "irfftn": 144, "rfft": 145, "rfft2": 146, "rfftn": 147, "floor": 149, "floor_divid": 150, "gather_mm": 152, "gather_qmm": 153, "grad": [154, 301], "greater": 155, "greater_equ": 156, "hadamard_transform": 157, "ident": [158, 375], "inner": 159, "isclos": 160, "isinf": 161, "isnan": 162, "isneginf": 163, "isposinf": 164, "issubdtyp": 165, "jvp": 166, "left_shift": 167, "less": 168, "less_equ": 169, "linalg": [170, 171, 172, 173, 174], "choleski": 170, "inv": 171, "norm": 172, "qr": 173, "svd": 174, "linspac": 175, "logaddexp": 181, "logical_and": 182, "logical_not": 183, "logical_or": 184, "matmul": 186, "maximum": 188, "meshgrid": 190, "clear_cach": 191, "device_info": 192, "get_active_memori": 193, "get_cache_memori": 194, "get_peak_memori": 195, "reset_peak_memori": 197, "set_cache_limit": 198, "set_memory_limit": 199, "start_captur": 200, "stop_captur": 201, "minimum": 203, "multipli": 205, "nan_to_num": 206, "neg": 207, "new_stream": 208, "not_equ": 209, "ones": 210, "ones_lik": 211, "outer": 212, "pad": 213, "partit": 214, "power": 215, "quantiz": [217, 284], "quantized_matmul": 218, "radian": 219, "random": [220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 444], "bernoulli": 220, "categor": 221, "gumbel": 222, "kei": 223, "laplac": 224, "multivariate_norm": 225, "normal": [226, 376], "randint": 227, "seed": 228, "truncated_norm": 230, "uniform": [231, 377], "remaind": 233, "repeat": 234, "right_shift": 236, "save": [239, 422, 454], "save_gguf": 240, "save_safetensor": 241, "savez": 242, "savez_compress": 243, "set_default_devic": 244, "set_default_stream": 245, "sigmoid": [246, 408], "sign": 247, "sinh": 249, "softmax": [250, 361, 410], "sort": 251, "stack": 256, "std": 257, "stop_gradi": 258, "stream": [259, 292, 295, 456], "subtract": 260, "synchron": 263, "take": 264, "take_along_axi": 265, "tan": 266, "tanh": [267, 367, 415], "tensordot": 268, "tile": 269, "topk": 270, "trace": 271, "tri": 273, "tril": 274, "triu": 275, "value_and_grad": [276, 285], "vjp": 279, "vmap": 280, "where": 281, "zero": 282, "zeros_lik": 283, "nn": [284, 285, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415], "optim": [286, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442], "clip_grad_norm": 286, "util": [287, 288, 289, 290, 291, 446], "tree_flatten": 287, "tree_map": 288, "tree_map_with_path": 289, "tree_reduc": 290, "tree_unflatten": 291, "data": 294, "type": 294, "support": 294, "commun": [296, 448], "algebra": 299, "neural": 301, "network": 301, "quick": [301, 453], "start": [301, 448, 453], "The": 301, "modul": [301, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 420], "class": 301, "paramet": [301, 338], "updat": [301, 346, 433, 450], "inspect": 301, "valu": 301, "alibi": 302, "avgpool1d": 303, "avgpool2d": 304, "batchnorm": 305, "conv3d": 308, "dropout": 309, "dropout2d": 310, "dropout3d": 311, "embed": 312, "gelu": [313, 379], "glu": [314, 382], "gru": 315, "groupnorm": 316, "hardshrink": 317, "hardtanh": 318, "hardswish": [319, 385], "instancenorm": 320, "lstm": 321, "layernorm": 322, "leakyrelu": 323, "maxpool1d": 325, "maxpool2d": 326, "mish": [327, 403], "appli": 328, "apply_to_modul": 329, "children": 330, "filter_and_map": 332, "freez": 333, "leaf_modul": 334, "load_weight": 335, "named_modul": 337, "save_weight": 339, "set_dtyp": 340, "state": [341, 432], "train": [342, 344, 447, 448], "trainable_paramet": 343, "unfreez": 345, "update_modul": 347, "multiheadattent": 348, "prelu": [349, 404], "quantizedembed": 350, "quantizedlinear": 351, "rmsnorm": 352, "rnn": 353, "relu": [354, 405], "relu6": [355, 406], "selu": [357, 407], "sequenti": 358, "silu": [359, 409], "sinusoidalpositionalencod": 360, "softmin": [362, 411], "softplu": [363, 412], "softshrink": [364, 413], "softsign": 365, "step": [366, 414], "upsampl": 369, "constant": 370, "glorot_norm": 371, "glorot_uniform": 372, "he_norm": 373, "he_uniform": 374, "elu": 378, "gelu_approx": 380, "gelu_fast_approx": 381, "hard_shrink": 383, "hard_tanh": 384, "leaky_relu": 386, "log_sigmoid": 387, "log_softmax": 388, "loss": [389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 419], "binary_cross_entropi": 389, "cosine_similarity_loss": 390, "cross_entropi": 391, "gaussian_nll_loss": 392, "hinge_loss": 393, "huber_loss": 394, "kl_div_loss": 395, "l1_loss": 396, "log_cosh_loss": 397, "margin_ranking_loss": 398, "mse_loss": 399, "nll_loss": 400, "smooth_l1_loss": 401, "triplet_loss": 402, "function": [416, 419, 447, 449, 453], "initi": 417, "adadelta": 423, "adafactor": 424, "adagrad": 425, "adam": 426, "adamw": 427, "adamax": 428, "lion": 429, "apply_gradi": 430, "rmsprop": 434, "sgd": 435, "cosine_decai": 436, "exponential_decai": 437, "join_schedul": 438, "linear_schedul": 439, "step_decai": 440, "common": 441, "schedul": 443, "tree": 446, "basic": [447, 453], "speedup": 447, "debug": 447, "pure": 447, "graph": [447, 451, 453], "get": 448, "mpi": 448, "set": 448, "up": 448, "remot": 448, "host": 448, "tune": 448, "reduc": 448, "automat": 449, "differenti": 449, "vector": 449, "index": 450, "differ": 450, "numpi": [450, 452], "In": 450, "place": 450, "lazi": 451, "evalu": 451, "why": 451, "comput": 451, "onli": 451, "what": 451, "you": 451, "when": 451, "convers": 452, "other": 452, "framework": 452, "pytorch": 452, "jax": 452, "tensorflow": 452, "guid": 453, "serial": 454, "format": 454, "unifi": 455, "memori": 455, "A": 455, "simpl": 455, "specifi": 456}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Operations": [[0, "operations"], [1, "operations"], [421, "operations"]], "Custom Extensions in MLX": [[1, "custom-extensions-in-mlx"]], "Introducing the Example": [[1, "introducing-the-example"]], "Operations and Primitives": [[1, "operations-and-primitives"]], "Primitives": [[1, "primitives"]], "Using the Primitive": [[1, "using-the-primitive"]], "Implementing the Primitive": [[1, "implementing-the-primitive"]], "Implementing the CPU Back-end": [[1, "implementing-the-cpu-back-end"]], "Implementing the GPU Back-end": [[1, "implementing-the-gpu-back-end"]], "Primitive Transforms": [[1, "primitive-transforms"]], "Building and Binding": [[1, "building-and-binding"]], "Binding to Python": [[1, "binding-to-python"]], "Building with CMake": [[1, "building-with-cmake"]], "Building with setuptools": [[1, "building-with-setuptools"]], "Usage": [[1, "usage"], [6, null]], "Results": [[1, "results"]], "Scripts": [[1, "scripts"], [4, "scripts"]], "Download the code": [[1, null], [4, null]], "Metal Debugger": [[2, "metal-debugger"]], "Xcode Workflow": [[2, "xcode-workflow"]], "Linear Regression": [[3, "linear-regression"]], "LLM inference": [[4, "llm-inference"]], "Implementing the model": [[4, "implementing-the-model"]], "Attention layer": [[4, "attention-layer"]], "Encoder layer": [[4, "encoder-layer"]], "Full model": [[4, "full-model"]], "Generation": [[4, "generation"]], "Putting it all together": [[4, "putting-it-all-together"]], "Converting the weights": [[4, "converting-the-weights"]], "Weight loading and benchmarking": [[4, "weight-loading-and-benchmarking"]], "Multi-Layer Perceptron": [[5, "multi-layer-perceptron"]], "MLX": [[6, "mlx"]], "Install": [[6, null]], "Examples": [[6, null]], "Python API Reference": [[6, null]], "C++ API Reference": [[6, null]], "Further Reading": [[6, null]], "Build and Install": [[7, "build-and-install"]], "Python Installation": [[7, "python-installation"]], "Troubleshooting": [[7, "troubleshooting"], [7, "id2"]], "Build from source": [[7, "build-from-source"]], "Build Requirements": [[7, "build-requirements"]], "Python API": [[7, "python-api"]], "C++ API": [[7, "c-api"]], "Build Options": [[7, "id3"]], "Binary Size Minimization": [[7, "binary-size-minimization"]], "Metal not found": [[7, "metal-not-found"]], "x86 Shell": [[7, "x86-shell"]], "mlx.core.Device": [[8, "mlx-core-device"]], "mlx.core.Dtype": [[9, "mlx-core-dtype"]], "mlx.core.DtypeCategory": [[10, "mlx-core-dtypecategory"]], "mlx.core.abs": [[11, "mlx-core-abs"]], "mlx.core.add": [[12, "mlx-core-add"]], "mlx.core.addmm": [[13, "mlx-core-addmm"]], "mlx.core.all": [[14, "mlx-core-all"]], "mlx.core.allclose": [[15, "mlx-core-allclose"]], "mlx.core.any": [[16, "mlx-core-any"]], "mlx.core.arange": [[17, "mlx-core-arange"]], "mlx.core.arccos": [[18, "mlx-core-arccos"]], "mlx.core.arccosh": [[19, "mlx-core-arccosh"]], "mlx.core.arcsin": [[20, "mlx-core-arcsin"]], "mlx.core.arcsinh": [[21, "mlx-core-arcsinh"]], "mlx.core.arctan": [[22, "mlx-core-arctan"]], "mlx.core.arctan2": [[23, "mlx-core-arctan2"]], "mlx.core.arctanh": [[24, "mlx-core-arctanh"]], "mlx.core.argmax": [[25, "mlx-core-argmax"]], "mlx.core.argmin": [[26, "mlx-core-argmin"]], "mlx.core.argpartition": [[27, "mlx-core-argpartition"]], "mlx.core.argsort": [[28, "mlx-core-argsort"]], "mlx.core.array": [[29, "mlx-core-array"]], "mlx.core.array.T": [[30, "mlx-core-array-t"]], "mlx.core.array.abs": [[31, "mlx-core-array-abs"]], "mlx.core.array.all": [[32, "mlx-core-array-all"]], "mlx.core.array.any": [[33, "mlx-core-array-any"]], "mlx.core.array.argmax": [[34, "mlx-core-array-argmax"]], "mlx.core.array.argmin": [[35, "mlx-core-array-argmin"]], "mlx.core.array.astype": [[36, "mlx-core-array-astype"]], "mlx.core.array.at": [[37, "mlx-core-array-at"]], "mlx.core.array.conj": [[38, "mlx-core-array-conj"]], "mlx.core.array.cos": [[39, "mlx-core-array-cos"]], "mlx.core.array.cummax": [[40, "mlx-core-array-cummax"]], "mlx.core.array.cummin": [[41, "mlx-core-array-cummin"]], "mlx.core.array.cumprod": [[42, "mlx-core-array-cumprod"]], "mlx.core.array.cumsum": [[43, "mlx-core-array-cumsum"]], "mlx.core.array.diag": [[44, "mlx-core-array-diag"]], "mlx.core.array.diagonal": [[45, "mlx-core-array-diagonal"]], "mlx.core.array.dtype": [[46, "mlx-core-array-dtype"]], "mlx.core.array.exp": [[47, "mlx-core-array-exp"]], "mlx.core.array.flatten": [[48, "mlx-core-array-flatten"]], "mlx.core.array.item": [[49, "mlx-core-array-item"]], "mlx.core.array.itemsize": [[50, "mlx-core-array-itemsize"]], "mlx.core.array.log": [[51, "mlx-core-array-log"]], "mlx.core.array.log10": [[52, "mlx-core-array-log10"]], "mlx.core.array.log1p": [[53, "mlx-core-array-log1p"]], "mlx.core.array.log2": [[54, "mlx-core-array-log2"]], "mlx.core.array.logsumexp": [[55, "mlx-core-array-logsumexp"]], "mlx.core.array.max": [[56, "mlx-core-array-max"]], "mlx.core.array.mean": [[57, "mlx-core-array-mean"]], "mlx.core.array.min": [[58, "mlx-core-array-min"]], "mlx.core.array.moveaxis": [[59, "mlx-core-array-moveaxis"]], "mlx.core.array.nbytes": [[60, "mlx-core-array-nbytes"]], "mlx.core.array.ndim": [[61, "mlx-core-array-ndim"]], "mlx.core.array.prod": [[62, "mlx-core-array-prod"]], "mlx.core.array.reciprocal": [[63, "mlx-core-array-reciprocal"]], "mlx.core.array.reshape": [[64, "mlx-core-array-reshape"]], "mlx.core.array.round": [[65, "mlx-core-array-round"]], "mlx.core.array.rsqrt": [[66, "mlx-core-array-rsqrt"]], "mlx.core.array.shape": [[67, "mlx-core-array-shape"]], "mlx.core.array.sin": [[68, "mlx-core-array-sin"]], "mlx.core.array.size": [[69, "mlx-core-array-size"]], "mlx.core.array.split": [[70, "mlx-core-array-split"]], "mlx.core.array.sqrt": [[71, "mlx-core-array-sqrt"]], "mlx.core.array.square": [[72, "mlx-core-array-square"]], "mlx.core.array.squeeze": [[73, "mlx-core-array-squeeze"]], "mlx.core.array.sum": [[74, "mlx-core-array-sum"]], "mlx.core.array.swapaxes": [[75, "mlx-core-array-swapaxes"]], "mlx.core.array.tolist": [[76, "mlx-core-array-tolist"]], "mlx.core.array.transpose": [[77, "mlx-core-array-transpose"]], "mlx.core.array.var": [[78, "mlx-core-array-var"]], "mlx.core.array.view": [[79, "mlx-core-array-view"]], "mlx.core.array_equal": [[80, "mlx-core-array-equal"]], "mlx.core.as_strided": [[81, "mlx-core-as-strided"]], "mlx.core.atleast_1d": [[82, "mlx-core-atleast-1d"]], "mlx.core.atleast_2d": [[83, "mlx-core-atleast-2d"]], "mlx.core.atleast_3d": [[84, "mlx-core-atleast-3d"]], "mlx.core.bitwise_and": [[85, "mlx-core-bitwise-and"]], "mlx.core.bitwise_or": [[86, "mlx-core-bitwise-or"]], "mlx.core.bitwise_xor": [[87, "mlx-core-bitwise-xor"]], "mlx.core.block_masked_mm": [[88, "mlx-core-block-masked-mm"]], "mlx.core.broadcast_to": [[89, "mlx-core-broadcast-to"]], "mlx.core.ceil": [[90, "mlx-core-ceil"]], "mlx.core.clip": [[91, "mlx-core-clip"]], "mlx.core.compile": [[92, "mlx-core-compile"]], "mlx.core.concatenate": [[93, "mlx-core-concatenate"]], "mlx.core.conj": [[94, "mlx-core-conj"]], "mlx.core.conjugate": [[95, "mlx-core-conjugate"]], "mlx.core.conv1d": [[96, "mlx-core-conv1d"]], "mlx.core.conv2d": [[97, "mlx-core-conv2d"]], "mlx.core.conv_general": [[98, "mlx-core-conv-general"]], "mlx.core.convolve": [[99, "mlx-core-convolve"]], "mlx.core.cos": [[100, "mlx-core-cos"]], "mlx.core.cosh": [[101, "mlx-core-cosh"]], "mlx.core.cummax": [[102, "mlx-core-cummax"]], "mlx.core.cummin": [[103, "mlx-core-cummin"]], "mlx.core.cumprod": [[104, "mlx-core-cumprod"]], "mlx.core.cumsum": [[105, "mlx-core-cumsum"]], "mlx.core.custom_function": [[106, "mlx-core-custom-function"]], "mlx.core.default_device": [[107, "mlx-core-default-device"]], "mlx.core.default_stream": [[108, "mlx-core-default-stream"]], "mlx.core.degrees": [[109, "mlx-core-degrees"]], "mlx.core.dequantize": [[110, "mlx-core-dequantize"]], "mlx.core.diag": [[111, "mlx-core-diag"]], "mlx.core.diagonal": [[112, "mlx-core-diagonal"]], "mlx.core.disable_compile": [[113, "mlx-core-disable-compile"]], "mlx.core.distributed.Group": [[114, "mlx-core-distributed-group"]], "mlx.core.distributed.all_gather": [[115, "mlx-core-distributed-all-gather"]], "mlx.core.distributed.all_sum": [[116, "mlx-core-distributed-all-sum"]], "mlx.core.distributed.init": [[117, "mlx-core-distributed-init"]], "mlx.core.distributed.is_available": [[118, "mlx-core-distributed-is-available"]], "mlx.core.divide": [[119, "mlx-core-divide"]], "mlx.core.divmod": [[120, "mlx-core-divmod"]], "mlx.core.einsum": [[121, "mlx-core-einsum"]], "mlx.core.einsum_path": [[122, "mlx-core-einsum-path"]], "mlx.core.enable_compile": [[123, "mlx-core-enable-compile"]], "mlx.core.equal": [[124, "mlx-core-equal"]], "mlx.core.erf": [[125, "mlx-core-erf"]], "mlx.core.erfinv": [[126, "mlx-core-erfinv"]], "mlx.core.eval": [[127, "mlx-core-eval"]], "mlx.core.exp": [[128, "mlx-core-exp"]], "mlx.core.expand_dims": [[129, "mlx-core-expand-dims"]], "mlx.core.expm1": [[130, "mlx-core-expm1"]], "mlx.core.eye": [[131, "mlx-core-eye"]], "mlx.core.fast.layer_norm": [[132, "mlx-core-fast-layer-norm"]], "mlx.core.fast.rms_norm": [[133, "mlx-core-fast-rms-norm"]], "mlx.core.fast.rope": [[134, "mlx-core-fast-rope"]], "mlx.core.fast.scaled_dot_product_attention": [[135, "mlx-core-fast-scaled-dot-product-attention"]], "mlx.core.fft.fft": [[136, "mlx-core-fft-fft"]], "mlx.core.fft.fft2": [[137, "mlx-core-fft-fft2"]], "mlx.core.fft.fftn": [[138, "mlx-core-fft-fftn"]], "mlx.core.fft.ifft": [[139, "mlx-core-fft-ifft"]], "mlx.core.fft.ifft2": [[140, "mlx-core-fft-ifft2"]], "mlx.core.fft.ifftn": [[141, "mlx-core-fft-ifftn"]], "mlx.core.fft.irfft": [[142, "mlx-core-fft-irfft"]], "mlx.core.fft.irfft2": [[143, "mlx-core-fft-irfft2"]], "mlx.core.fft.irfftn": [[144, "mlx-core-fft-irfftn"]], "mlx.core.fft.rfft": [[145, "mlx-core-fft-rfft"]], "mlx.core.fft.rfft2": [[146, "mlx-core-fft-rfft2"]], "mlx.core.fft.rfftn": [[147, "mlx-core-fft-rfftn"]], "mlx.core.flatten": [[148, "mlx-core-flatten"]], "mlx.core.floor": [[149, "mlx-core-floor"]], "mlx.core.floor_divide": [[150, "mlx-core-floor-divide"]], "mlx.core.full": [[151, "mlx-core-full"]], "mlx.core.gather_mm": [[152, "mlx-core-gather-mm"]], "mlx.core.gather_qmm": [[153, "mlx-core-gather-qmm"]], "mlx.core.grad": [[154, "mlx-core-grad"]], "mlx.core.greater": [[155, "mlx-core-greater"]], "mlx.core.greater_equal": [[156, "mlx-core-greater-equal"]], "mlx.core.hadamard_transform": [[157, "mlx-core-hadamard-transform"]], "mlx.core.identity": [[158, "mlx-core-identity"]], "mlx.core.inner": [[159, "mlx-core-inner"]], "mlx.core.isclose": [[160, "mlx-core-isclose"]], "mlx.core.isinf": [[161, "mlx-core-isinf"]], "mlx.core.isnan": [[162, "mlx-core-isnan"]], "mlx.core.isneginf": [[163, "mlx-core-isneginf"]], "mlx.core.isposinf": [[164, "mlx-core-isposinf"]], "mlx.core.issubdtype": [[165, "mlx-core-issubdtype"]], "mlx.core.jvp": [[166, "mlx-core-jvp"]], "mlx.core.left_shift": [[167, "mlx-core-left-shift"]], "mlx.core.less": [[168, "mlx-core-less"]], "mlx.core.less_equal": [[169, "mlx-core-less-equal"]], "mlx.core.linalg.cholesky": [[170, "mlx-core-linalg-cholesky"]], "mlx.core.linalg.inv": [[171, "mlx-core-linalg-inv"]], "mlx.core.linalg.norm": [[172, "mlx-core-linalg-norm"]], "mlx.core.linalg.qr": [[173, "mlx-core-linalg-qr"]], "mlx.core.linalg.svd": [[174, "mlx-core-linalg-svd"]], "mlx.core.linspace": [[175, "mlx-core-linspace"]], "mlx.core.load": [[176, "mlx-core-load"]], "mlx.core.log": [[177, "mlx-core-log"]], "mlx.core.log10": [[178, "mlx-core-log10"]], "mlx.core.log1p": [[179, "mlx-core-log1p"]], "mlx.core.log2": [[180, "mlx-core-log2"]], "mlx.core.logaddexp": [[181, "mlx-core-logaddexp"]], "mlx.core.logical_and": [[182, "mlx-core-logical-and"]], "mlx.core.logical_not": [[183, "mlx-core-logical-not"]], "mlx.core.logical_or": [[184, "mlx-core-logical-or"]], "mlx.core.logsumexp": [[185, "mlx-core-logsumexp"]], "mlx.core.matmul": [[186, "mlx-core-matmul"]], "mlx.core.max": [[187, "mlx-core-max"]], "mlx.core.maximum": [[188, "mlx-core-maximum"]], "mlx.core.mean": [[189, "mlx-core-mean"]], "mlx.core.meshgrid": [[190, "mlx-core-meshgrid"]], "mlx.core.metal.clear_cache": [[191, "mlx-core-metal-clear-cache"]], "mlx.core.metal.device_info": [[192, "mlx-core-metal-device-info"]], "mlx.core.metal.get_active_memory": [[193, "mlx-core-metal-get-active-memory"]], "mlx.core.metal.get_cache_memory": [[194, "mlx-core-metal-get-cache-memory"]], "mlx.core.metal.get_peak_memory": [[195, "mlx-core-metal-get-peak-memory"]], "mlx.core.metal.is_available": [[196, "mlx-core-metal-is-available"]], "mlx.core.metal.reset_peak_memory": [[197, "mlx-core-metal-reset-peak-memory"]], "mlx.core.metal.set_cache_limit": [[198, "mlx-core-metal-set-cache-limit"]], "mlx.core.metal.set_memory_limit": [[199, "mlx-core-metal-set-memory-limit"]], "mlx.core.metal.start_capture": [[200, "mlx-core-metal-start-capture"]], "mlx.core.metal.stop_capture": [[201, "mlx-core-metal-stop-capture"]], "mlx.core.min": [[202, "mlx-core-min"]], "mlx.core.minimum": [[203, "mlx-core-minimum"]], "mlx.core.moveaxis": [[204, "mlx-core-moveaxis"]], "mlx.core.multiply": [[205, "mlx-core-multiply"]], "mlx.core.nan_to_num": [[206, "mlx-core-nan-to-num"]], "mlx.core.negative": [[207, "mlx-core-negative"]], "mlx.core.new_stream": [[208, "mlx-core-new-stream"]], "mlx.core.not_equal": [[209, "mlx-core-not-equal"]], "mlx.core.ones": [[210, "mlx-core-ones"]], "mlx.core.ones_like": [[211, "mlx-core-ones-like"]], "mlx.core.outer": [[212, "mlx-core-outer"]], "mlx.core.pad": [[213, "mlx-core-pad"]], "mlx.core.partition": [[214, "mlx-core-partition"]], "mlx.core.power": [[215, "mlx-core-power"]], "mlx.core.prod": [[216, "mlx-core-prod"]], "mlx.core.quantize": [[217, "mlx-core-quantize"]], "mlx.core.quantized_matmul": [[218, "mlx-core-quantized-matmul"]], "mlx.core.radians": [[219, "mlx-core-radians"]], "mlx.core.random.bernoulli": [[220, "mlx-core-random-bernoulli"]], "mlx.core.random.categorical": [[221, "mlx-core-random-categorical"]], "mlx.core.random.gumbel": [[222, "mlx-core-random-gumbel"]], "mlx.core.random.key": [[223, "mlx-core-random-key"]], "mlx.core.random.laplace": [[224, "mlx-core-random-laplace"]], "mlx.core.random.multivariate_normal": [[225, "mlx-core-random-multivariate-normal"]], "mlx.core.random.normal": [[226, "mlx-core-random-normal"]], "mlx.core.random.randint": [[227, "mlx-core-random-randint"]], "mlx.core.random.seed": [[228, "mlx-core-random-seed"]], "mlx.core.random.split": [[229, "mlx-core-random-split"]], "mlx.core.random.truncated_normal": [[230, "mlx-core-random-truncated-normal"]], "mlx.core.random.uniform": [[231, "mlx-core-random-uniform"]], "mlx.core.reciprocal": [[232, "mlx-core-reciprocal"]], "mlx.core.remainder": [[233, "mlx-core-remainder"]], "mlx.core.repeat": [[234, "mlx-core-repeat"]], "mlx.core.reshape": [[235, "mlx-core-reshape"]], "mlx.core.right_shift": [[236, "mlx-core-right-shift"]], "mlx.core.round": [[237, "mlx-core-round"]], "mlx.core.rsqrt": [[238, "mlx-core-rsqrt"]], "mlx.core.save": [[239, "mlx-core-save"]], "mlx.core.save_gguf": [[240, "mlx-core-save-gguf"]], "mlx.core.save_safetensors": [[241, "mlx-core-save-safetensors"]], "mlx.core.savez": [[242, "mlx-core-savez"]], "mlx.core.savez_compressed": [[243, "mlx-core-savez-compressed"]], "mlx.core.set_default_device": [[244, "mlx-core-set-default-device"]], "mlx.core.set_default_stream": [[245, "mlx-core-set-default-stream"]], "mlx.core.sigmoid": [[246, "mlx-core-sigmoid"]], "mlx.core.sign": [[247, "mlx-core-sign"]], "mlx.core.sin": [[248, "mlx-core-sin"]], "mlx.core.sinh": [[249, "mlx-core-sinh"]], "mlx.core.softmax": [[250, "mlx-core-softmax"]], "mlx.core.sort": [[251, "mlx-core-sort"]], "mlx.core.split": [[252, "mlx-core-split"]], "mlx.core.sqrt": [[253, "mlx-core-sqrt"]], "mlx.core.square": [[254, "mlx-core-square"]], "mlx.core.squeeze": [[255, "mlx-core-squeeze"]], "mlx.core.stack": [[256, "mlx-core-stack"]], "mlx.core.std": [[257, "mlx-core-std"]], "mlx.core.stop_gradient": [[258, "mlx-core-stop-gradient"]], "mlx.core.stream": [[259, "mlx-core-stream"]], "mlx.core.subtract": [[260, "mlx-core-subtract"]], "mlx.core.sum": [[261, "mlx-core-sum"]], "mlx.core.swapaxes": [[262, "mlx-core-swapaxes"]], "mlx.core.synchronize": [[263, "mlx-core-synchronize"]], "mlx.core.take": [[264, "mlx-core-take"]], "mlx.core.take_along_axis": [[265, "mlx-core-take-along-axis"]], "mlx.core.tan": [[266, "mlx-core-tan"]], "mlx.core.tanh": [[267, "mlx-core-tanh"]], "mlx.core.tensordot": [[268, "mlx-core-tensordot"]], "mlx.core.tile": [[269, "mlx-core-tile"]], "mlx.core.topk": [[270, "mlx-core-topk"]], "mlx.core.trace": [[271, "mlx-core-trace"]], "mlx.core.transpose": [[272, "mlx-core-transpose"]], "mlx.core.tri": [[273, "mlx-core-tri"]], "mlx.core.tril": [[274, "mlx-core-tril"]], "mlx.core.triu": [[275, "mlx-core-triu"]], "mlx.core.value_and_grad": [[276, "mlx-core-value-and-grad"]], "mlx.core.var": [[277, "mlx-core-var"]], "mlx.core.view": [[278, "mlx-core-view"]], "mlx.core.vjp": [[279, "mlx-core-vjp"]], "mlx.core.vmap": [[280, "mlx-core-vmap"]], "mlx.core.where": [[281, "mlx-core-where"]], "mlx.core.zeros": [[282, "mlx-core-zeros"]], "mlx.core.zeros_like": [[283, "mlx-core-zeros-like"]], "mlx.nn.quantize": [[284, "mlx-nn-quantize"]], "mlx.nn.value_and_grad": [[285, "mlx-nn-value-and-grad"]], "mlx.optimizers.clip_grad_norm": [[286, "mlx-optimizers-clip-grad-norm"]], "mlx.utils.tree_flatten": [[287, "mlx-utils-tree-flatten"]], "mlx.utils.tree_map": [[288, "mlx-utils-tree-map"]], "mlx.utils.tree_map_with_path": [[289, "mlx-utils-tree-map-with-path"]], "mlx.utils.tree_reduce": [[290, "mlx-utils-tree-reduce"]], "mlx.utils.tree_unflatten": [[291, "mlx-utils-tree-unflatten"]], "mlx.core.Stream": [[292, "mlx-core-stream"]], "Array": [[293, "array"]], "Data Types": [[294, "data-types"]], "Supported Data Types": [[294, "id2"]], "Devices and Streams": [[295, "devices-and-streams"]], "Distributed Communication": [[296, "distributed-communication"], [448, "distributed-communication"]], "Fast": [[297, "fast"]], "FFT": [[298, "fft"]], "Linear Algebra": [[299, "linear-algebra"]], "Metal": [[300, "metal"]], "Neural Networks": [[301, "neural-networks"]], "Quick Start with Neural Networks": [[301, "quick-start-with-neural-networks"]], "The Module Class": [[301, "the-module-class"]], "Parameters": [[301, "parameters"]], "Updating the Parameters": [[301, "updating-the-parameters"]], "Inspecting Modules": [[301, "inspecting-modules"]], "Value and Grad": [[301, "value-and-grad"]], "mlx.nn.ALiBi": [[302, "mlx-nn-alibi"]], "mlx.nn.AvgPool1d": [[303, "mlx-nn-avgpool1d"]], "mlx.nn.AvgPool2d": [[304, "mlx-nn-avgpool2d"]], "mlx.nn.BatchNorm": [[305, "mlx-nn-batchnorm"]], "mlx.nn.Conv1d": [[306, "mlx-nn-conv1d"]], "mlx.nn.Conv2d": [[307, "mlx-nn-conv2d"]], "mlx.nn.Conv3d": [[308, "mlx-nn-conv3d"]], "mlx.nn.Dropout": [[309, "mlx-nn-dropout"]], "mlx.nn.Dropout2d": [[310, "mlx-nn-dropout2d"]], "mlx.nn.Dropout3d": [[311, "mlx-nn-dropout3d"]], "mlx.nn.Embedding": [[312, "mlx-nn-embedding"]], "mlx.nn.GELU": [[313, "mlx-nn-gelu"]], "mlx.nn.GLU": [[314, "mlx-nn-glu"]], "mlx.nn.GRU": [[315, "mlx-nn-gru"]], "mlx.nn.GroupNorm": [[316, "mlx-nn-groupnorm"]], "mlx.nn.HardShrink": [[317, "mlx-nn-hardshrink"]], "mlx.nn.HardTanh": [[318, "mlx-nn-hardtanh"]], "mlx.nn.Hardswish": [[319, "mlx-nn-hardswish"]], "mlx.nn.InstanceNorm": [[320, "mlx-nn-instancenorm"]], "mlx.nn.LSTM": [[321, "mlx-nn-lstm"]], "mlx.nn.LayerNorm": [[322, "mlx-nn-layernorm"]], "mlx.nn.LeakyReLU": [[323, "mlx-nn-leakyrelu"]], "mlx.nn.Linear": [[324, "mlx-nn-linear"]], "mlx.nn.MaxPool1d": [[325, "mlx-nn-maxpool1d"]], "mlx.nn.MaxPool2d": [[326, "mlx-nn-maxpool2d"]], "mlx.nn.Mish": [[327, "mlx-nn-mish"]], "mlx.nn.Module.apply": [[328, "mlx-nn-module-apply"]], "mlx.nn.Module.apply_to_modules": [[329, "mlx-nn-module-apply-to-modules"]], "mlx.nn.Module.children": [[330, "mlx-nn-module-children"]], "mlx.nn.Module.eval": [[331, "mlx-nn-module-eval"]], "mlx.nn.Module.filter_and_map": [[332, "mlx-nn-module-filter-and-map"]], "mlx.nn.Module.freeze": [[333, "mlx-nn-module-freeze"]], "mlx.nn.Module.leaf_modules": [[334, "mlx-nn-module-leaf-modules"]], "mlx.nn.Module.load_weights": [[335, "mlx-nn-module-load-weights"]], "mlx.nn.Module.modules": [[336, "mlx-nn-module-modules"]], "mlx.nn.Module.named_modules": [[337, "mlx-nn-module-named-modules"]], "mlx.nn.Module.parameters": [[338, "mlx-nn-module-parameters"]], "mlx.nn.Module.save_weights": [[339, "mlx-nn-module-save-weights"]], "mlx.nn.Module.set_dtype": [[340, "mlx-nn-module-set-dtype"]], "mlx.nn.Module.state": [[341, "mlx-nn-module-state"]], "mlx.nn.Module.train": [[342, "mlx-nn-module-train"]], "mlx.nn.Module.trainable_parameters": [[343, "mlx-nn-module-trainable-parameters"]], "mlx.nn.Module.training": [[344, "mlx-nn-module-training"]], "mlx.nn.Module.unfreeze": [[345, "mlx-nn-module-unfreeze"]], "mlx.nn.Module.update": [[346, "mlx-nn-module-update"]], "mlx.nn.Module.update_modules": [[347, "mlx-nn-module-update-modules"]], "mlx.nn.MultiHeadAttention": [[348, "mlx-nn-multiheadattention"]], "mlx.nn.PReLU": [[349, "mlx-nn-prelu"]], "mlx.nn.QuantizedEmbedding": [[350, "mlx-nn-quantizedembedding"]], "mlx.nn.QuantizedLinear": [[351, "mlx-nn-quantizedlinear"]], "mlx.nn.RMSNorm": [[352, "mlx-nn-rmsnorm"]], "mlx.nn.RNN": [[353, "mlx-nn-rnn"]], "mlx.nn.ReLU": [[354, "mlx-nn-relu"]], "mlx.nn.ReLU6": [[355, "mlx-nn-relu6"]], "mlx.nn.RoPE": [[356, "mlx-nn-rope"]], "mlx.nn.SELU": [[357, "mlx-nn-selu"]], "mlx.nn.Sequential": [[358, "mlx-nn-sequential"]], "mlx.nn.SiLU": [[359, "mlx-nn-silu"]], "mlx.nn.SinusoidalPositionalEncoding": [[360, "mlx-nn-sinusoidalpositionalencoding"]], "mlx.nn.Softmax": [[361, "mlx-nn-softmax"]], "mlx.nn.Softmin": [[362, "mlx-nn-softmin"]], "mlx.nn.Softplus": [[363, "mlx-nn-softplus"]], "mlx.nn.Softshrink": [[364, "mlx-nn-softshrink"]], "mlx.nn.Softsign": [[365, "mlx-nn-softsign"]], "mlx.nn.Step": [[366, "mlx-nn-step"]], "mlx.nn.Tanh": [[367, "mlx-nn-tanh"]], "mlx.nn.Transformer": [[368, "mlx-nn-transformer"]], "mlx.nn.Upsample": [[369, "mlx-nn-upsample"]], "mlx.nn.init.constant": [[370, "mlx-nn-init-constant"]], "mlx.nn.init.glorot_normal": [[371, "mlx-nn-init-glorot-normal"]], "mlx.nn.init.glorot_uniform": [[372, "mlx-nn-init-glorot-uniform"]], "mlx.nn.init.he_normal": [[373, "mlx-nn-init-he-normal"]], "mlx.nn.init.he_uniform": [[374, "mlx-nn-init-he-uniform"]], "mlx.nn.init.identity": [[375, "mlx-nn-init-identity"]], "mlx.nn.init.normal": [[376, "mlx-nn-init-normal"]], "mlx.nn.init.uniform": [[377, "mlx-nn-init-uniform"]], "mlx.nn.elu": [[378, "mlx-nn-elu"]], "mlx.nn.gelu": [[379, "mlx-nn-gelu"]], "mlx.nn.gelu_approx": [[380, "mlx-nn-gelu-approx"]], "mlx.nn.gelu_fast_approx": [[381, "mlx-nn-gelu-fast-approx"]], "mlx.nn.glu": [[382, "mlx-nn-glu"]], "mlx.nn.hard_shrink": [[383, "mlx-nn-hard-shrink"]], "mlx.nn.hard_tanh": [[384, "mlx-nn-hard-tanh"]], "mlx.nn.hardswish": [[385, "mlx-nn-hardswish"]], "mlx.nn.leaky_relu": [[386, "mlx-nn-leaky-relu"]], "mlx.nn.log_sigmoid": [[387, "mlx-nn-log-sigmoid"]], "mlx.nn.log_softmax": [[388, "mlx-nn-log-softmax"]], "mlx.nn.losses.binary_cross_entropy": [[389, "mlx-nn-losses-binary-cross-entropy"]], "mlx.nn.losses.cosine_similarity_loss": [[390, "mlx-nn-losses-cosine-similarity-loss"]], "mlx.nn.losses.cross_entropy": [[391, "mlx-nn-losses-cross-entropy"]], "mlx.nn.losses.gaussian_nll_loss": [[392, "mlx-nn-losses-gaussian-nll-loss"]], "mlx.nn.losses.hinge_loss": [[393, "mlx-nn-losses-hinge-loss"]], "mlx.nn.losses.huber_loss": [[394, "mlx-nn-losses-huber-loss"]], "mlx.nn.losses.kl_div_loss": [[395, "mlx-nn-losses-kl-div-loss"]], "mlx.nn.losses.l1_loss": [[396, "mlx-nn-losses-l1-loss"]], "mlx.nn.losses.log_cosh_loss": [[397, "mlx-nn-losses-log-cosh-loss"]], "mlx.nn.losses.margin_ranking_loss": [[398, "mlx-nn-losses-margin-ranking-loss"]], "mlx.nn.losses.mse_loss": [[399, "mlx-nn-losses-mse-loss"]], "mlx.nn.losses.nll_loss": [[400, "mlx-nn-losses-nll-loss"]], "mlx.nn.losses.smooth_l1_loss": [[401, "mlx-nn-losses-smooth-l1-loss"]], "mlx.nn.losses.triplet_loss": [[402, "mlx-nn-losses-triplet-loss"]], "mlx.nn.mish": [[403, "mlx-nn-mish"]], "mlx.nn.prelu": [[404, "mlx-nn-prelu"]], "mlx.nn.relu": [[405, "mlx-nn-relu"]], "mlx.nn.relu6": [[406, "mlx-nn-relu6"]], "mlx.nn.selu": [[407, "mlx-nn-selu"]], "mlx.nn.sigmoid": [[408, "mlx-nn-sigmoid"]], "mlx.nn.silu": [[409, "mlx-nn-silu"]], "mlx.nn.softmax": [[410, "mlx-nn-softmax"]], "mlx.nn.softmin": [[411, "mlx-nn-softmin"]], "mlx.nn.softplus": [[412, "mlx-nn-softplus"]], "mlx.nn.softshrink": [[413, "mlx-nn-softshrink"]], "mlx.nn.step": [[414, "mlx-nn-step"]], "mlx.nn.tanh": [[415, "mlx-nn-tanh"]], "Functions": [[416, "functions"]], "Initializers": [[417, "initializers"]], "Layers": [[418, "layers"]], "Loss Functions": [[419, "loss-functions"]], "Module": [[420, "module"]], "Optimizers": [[422, "optimizers"]], "Saving and Loading": [[422, "saving-and-loading"]], "mlx.optimizers.AdaDelta": [[423, "mlx-optimizers-adadelta"]], "mlx.optimizers.Adafactor": [[424, "mlx-optimizers-adafactor"]], "mlx.optimizers.Adagrad": [[425, "mlx-optimizers-adagrad"]], "mlx.optimizers.Adam": [[426, "mlx-optimizers-adam"]], "mlx.optimizers.AdamW": [[427, "mlx-optimizers-adamw"]], "mlx.optimizers.Adamax": [[428, "mlx-optimizers-adamax"]], "mlx.optimizers.Lion": [[429, "mlx-optimizers-lion"]], "mlx.optimizers.Optimizer.apply_gradients": [[430, "mlx-optimizers-optimizer-apply-gradients"]], "mlx.optimizers.Optimizer.init": [[431, "mlx-optimizers-optimizer-init"]], "mlx.optimizers.Optimizer.state": [[432, "mlx-optimizers-optimizer-state"]], "mlx.optimizers.Optimizer.update": [[433, "mlx-optimizers-optimizer-update"]], "mlx.optimizers.RMSprop": [[434, "mlx-optimizers-rmsprop"]], "mlx.optimizers.SGD": [[435, "mlx-optimizers-sgd"]], "mlx.optimizers.cosine_decay": [[436, "mlx-optimizers-cosine-decay"]], "mlx.optimizers.exponential_decay": [[437, "mlx-optimizers-exponential-decay"]], "mlx.optimizers.join_schedules": [[438, "mlx-optimizers-join-schedules"]], "mlx.optimizers.linear_schedule": [[439, "mlx-optimizers-linear-schedule"]], "mlx.optimizers.step_decay": [[440, "mlx-optimizers-step-decay"]], "Common Optimizers": [[441, "common-optimizers"]], "Optimizer": [[442, "optimizer"]], "Schedulers": [[443, "schedulers"]], "Random": [[444, "random"]], "Transforms": [[445, "transforms"]], "Tree Utils": [[446, "tree-utils"]], "Compilation": [[447, "compilation"]], "Basics of Compile": [[447, "basics-of-compile"]], "Example Speedup": [[447, "example-speedup"]], "Debugging": [[447, "debugging"]], "Pure Functions": [[447, "pure-functions"]], "Compiling Training Graphs": [[447, "compiling-training-graphs"]], "Transformations with Compile": [[447, "transformations-with-compile"]], "Getting Started": [[448, "getting-started"]], "Installing MPI": [[448, "installing-mpi"]], "Setting up Remote Hosts": [[448, "setting-up-remote-hosts"]], "Training Example": [[448, "training-example"]], "Tuning All Reduce": [[448, "tuning-all-reduce"]], "Function Transforms": [[449, "function-transforms"]], "Automatic Differentiation": [[449, "automatic-differentiation"]], "Automatic Vectorization": [[449, "automatic-vectorization"]], "Indexing Arrays": [[450, "indexing-arrays"]], "Differences from NumPy": [[450, "differences-from-numpy"]], "In Place Updates": [[450, "in-place-updates"]], "Lazy Evaluation": [[451, "lazy-evaluation"]], "Why Lazy Evaluation": [[451, "why-lazy-evaluation"]], "Transforming Compute Graphs": [[451, "transforming-compute-graphs"]], "Only Compute What You Use": [[451, "only-compute-what-you-use"]], "When to Evaluate": [[451, "when-to-evaluate"]], "Conversion to NumPy and Other Frameworks": [[452, "conversion-to-numpy-and-other-frameworks"]], "PyTorch": [[452, "pytorch"]], "JAX": [[452, "jax"]], "TensorFlow": [[452, "tensorflow"]], "Quick Start Guide": [[453, "quick-start-guide"]], "Basics": [[453, "basics"]], "Function and Graph Transformations": [[453, "function-and-graph-transformations"]], "Saving and Loading Arrays": [[454, "saving-and-loading-arrays"]], "Serialization Formats": [[454, "id1"]], "Unified Memory": [[455, "unified-memory"]], "A Simple Example": [[455, "a-simple-example"]], "Using Streams": [[456, "using-streams"]], "Specifying the Stream": [[456, "specifying-the-stream"]]}, "indexentries": {"abs (c++ function)": [[0, "_CPPv43absRK5array14StreamOrDevice"]], "add (c++ function)": [[0, "_CPPv43addRK5arrayRK5array14StreamOrDevice"]], "addmm (c++ function)": [[0, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice"]], "all (c++ function)": [[0, "_CPPv43allRK5array14StreamOrDevice"], [0, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43allRK5arrayb14StreamOrDevice"], [0, "_CPPv43allRK5arrayib14StreamOrDevice"]], "allclose (c++ function)": [[0, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice"]], "any (c++ function)": [[0, "_CPPv43anyRK5array14StreamOrDevice"], [0, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43anyRK5arrayb14StreamOrDevice"], [0, "_CPPv43anyRK5arrayib14StreamOrDevice"]], "arange (c++ function)": [[0, "_CPPv46aranged14StreamOrDevice"], [0, "_CPPv46aranged5Dtype14StreamOrDevice"], [0, "_CPPv46arangedd14StreamOrDevice"], [0, "_CPPv46arangedd5Dtype14StreamOrDevice"], [0, "_CPPv46arangeddd14StreamOrDevice"], [0, "_CPPv46arangeddd5Dtype14StreamOrDevice"], [0, "_CPPv46arangei14StreamOrDevice"], [0, "_CPPv46arangeii14StreamOrDevice"], [0, "_CPPv46arangeiii14StreamOrDevice"]], "arccos (c++ function)": [[0, "_CPPv46arccosRK5array14StreamOrDevice"]], "arccosh (c++ function)": [[0, "_CPPv47arccoshRK5array14StreamOrDevice"]], "arcsin (c++ function)": [[0, "_CPPv46arcsinRK5array14StreamOrDevice"]], "arcsinh (c++ function)": [[0, "_CPPv47arcsinhRK5array14StreamOrDevice"]], "arctan (c++ function)": [[0, "_CPPv46arctanRK5array14StreamOrDevice"]], "arctan2 (c++ function)": [[0, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice"]], "arctanh (c++ function)": [[0, "_CPPv47arctanhRK5array14StreamOrDevice"]], "argmax (c++ function)": [[0, "_CPPv46argmaxRK5array14StreamOrDevice"], [0, "_CPPv46argmaxRK5arrayb14StreamOrDevice"], [0, "_CPPv46argmaxRK5arrayib14StreamOrDevice"]], "argmin (c++ function)": [[0, "_CPPv46argminRK5array14StreamOrDevice"], [0, "_CPPv46argminRK5arrayb14StreamOrDevice"], [0, "_CPPv46argminRK5arrayib14StreamOrDevice"]], "argpartition (c++ function)": [[0, "_CPPv412argpartitionRK5arrayi14StreamOrDevice"], [0, "_CPPv412argpartitionRK5arrayii14StreamOrDevice"]], "argsort (c++ function)": [[0, "_CPPv47argsortRK5array14StreamOrDevice"], [0, "_CPPv47argsortRK5arrayi14StreamOrDevice"]], "array_equal (c++ function)": [[0, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice"], [0, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice"]], "as_strided (c++ function)": [[0, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice"]], "astype (c++ function)": [[0, "_CPPv46astype5array5Dtype14StreamOrDevice"]], "atleast_1d (c++ function)": [[0, "_CPPv410atleast_1dRK5array14StreamOrDevice"], [0, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice"]], "atleast_2d (c++ function)": [[0, "_CPPv410atleast_2dRK5array14StreamOrDevice"], [0, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice"]], "atleast_3d (c++ function)": [[0, "_CPPv410atleast_3dRK5array14StreamOrDevice"], [0, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice"]], "bitwise_and (c++ function)": [[0, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice"]], "bitwise_or (c++ function)": [[0, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice"]], "bitwise_xor (c++ function)": [[0, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice"]], "block_masked_mm (c++ function)": [[0, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice"]], "broadcast_arrays (c++ function)": [[0, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice"]], "broadcast_to (c++ function)": [[0, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "ceil (c++ function)": [[0, "_CPPv44ceilRK5array14StreamOrDevice"]], "clip (c++ function)": [[0, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice"]], "concatenate (c++ function)": [[0, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice"], [0, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice"]], "conjugate (c++ function)": [[0, "_CPPv49conjugateRK5array14StreamOrDevice"]], "conv1d (c++ function)": [[0, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice"]], "conv2d (c++ function)": [[0, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice"]], "conv3d (c++ function)": [[0, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice"]], "conv_general (c++ function)": [[0, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice"], [0, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice"]], "copy (c++ function)": [[0, "_CPPv44copy5array14StreamOrDevice"]], "cos (c++ function)": [[0, "_CPPv43cosRK5array14StreamOrDevice"]], "cosh (c++ function)": [[0, "_CPPv44coshRK5array14StreamOrDevice"]], "cummax (c++ function)": [[0, "_CPPv46cummaxRK5arrayibb14StreamOrDevice"]], "cummin (c++ function)": [[0, "_CPPv46cumminRK5arrayibb14StreamOrDevice"]], "cumprod (c++ function)": [[0, "_CPPv47cumprodRK5arrayibb14StreamOrDevice"]], "cumsum (c++ function)": [[0, "_CPPv46cumsumRK5arrayibb14StreamOrDevice"]], "degrees (c++ function)": [[0, "_CPPv47degreesRK5array14StreamOrDevice"]], "depends (c++ function)": [[0, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE"]], "dequantize (c++ function)": [[0, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice"]], "diag (c++ function)": [[0, "_CPPv44diagRK5arrayi14StreamOrDevice"]], "diagonal (c++ function)": [[0, "_CPPv48diagonalRK5arrayiii14StreamOrDevice"]], "divide (c++ function)": [[0, "_CPPv46divideRK5arrayRK5array14StreamOrDevice"]], "divmod (c++ function)": [[0, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice"]], "equal (c++ function)": [[0, "_CPPv45equalRK5arrayRK5array14StreamOrDevice"]], "erf (c++ function)": [[0, "_CPPv43erfRK5array14StreamOrDevice"]], "erfinv (c++ function)": [[0, "_CPPv46erfinvRK5array14StreamOrDevice"]], "exp (c++ function)": [[0, "_CPPv43expRK5array14StreamOrDevice"]], "expand_dims (c++ function)": [[0, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice"]], "expm1 (c++ function)": [[0, "_CPPv45expm1RK5array14StreamOrDevice"]], "eye (c++ function)": [[0, "_CPPv43eyei14StreamOrDevice"], [0, "_CPPv43eyei5Dtype14StreamOrDevice"], [0, "_CPPv43eyeii14StreamOrDevice"], [0, "_CPPv43eyeiii14StreamOrDevice"], [0, "_CPPv43eyeiii5Dtype14StreamOrDevice"]], "flatten (c++ function)": [[0, "_CPPv47flattenRK5array14StreamOrDevice"], [0, "_CPPv47flattenRK5arrayii14StreamOrDevice"]], "floor (c++ function)": [[0, "_CPPv45floorRK5array14StreamOrDevice"]], "floor_divide (c++ function)": [[0, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice"]], "full (c++ function)": [[0, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice"], [0, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice"], [0, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice"], [0, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice"]], "gather (c++ function)": [[0, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice"]], "gather_mm (c++ function)": [[0, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice"]], "gather_qmm (c++ function)": [[0, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice"]], "greater (c++ function)": [[0, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice"]], "greater_equal (c++ function)": [[0, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice"]], "hadamard_transform (c++ function)": [[0, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice"]], "identity (c++ function)": [[0, "_CPPv48identityi14StreamOrDevice"], [0, "_CPPv48identityi5Dtype14StreamOrDevice"]], "inner (c++ function)": [[0, "_CPPv45innerRK5arrayRK5array14StreamOrDevice"]], "isclose (c++ function)": [[0, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice"]], "isinf (c++ function)": [[0, "_CPPv45isinfRK5array14StreamOrDevice"]], "isnan (c++ function)": [[0, "_CPPv45isnanRK5array14StreamOrDevice"]], "isneginf (c++ function)": [[0, "_CPPv48isneginfRK5array14StreamOrDevice"]], "isposinf (c++ function)": [[0, "_CPPv48isposinfRK5array14StreamOrDevice"]], "left_shift (c++ function)": [[0, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice"]], "less (c++ function)": [[0, "_CPPv44lessRK5arrayRK5array14StreamOrDevice"]], "less_equal (c++ function)": [[0, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice"]], "linspace (c++ function)": [[0, "_CPPv48linspaceddi5Dtype14StreamOrDevice"]], "log (c++ function)": [[0, "_CPPv43logRK5array14StreamOrDevice"]], "log10 (c++ function)": [[0, "_CPPv45log10RK5array14StreamOrDevice"]], "log1p (c++ function)": [[0, "_CPPv45log1pRK5array14StreamOrDevice"]], "log2 (c++ function)": [[0, "_CPPv44log2RK5array14StreamOrDevice"]], "logaddexp (c++ function)": [[0, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice"]], "logical_and (c++ function)": [[0, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice"]], "logical_not (c++ function)": [[0, "_CPPv411logical_notRK5array14StreamOrDevice"]], "logical_or (c++ function)": [[0, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice"]], "logsumexp (c++ function)": [[0, "_CPPv49logsumexpRK5array14StreamOrDevice"], [0, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv49logsumexpRK5arrayb14StreamOrDevice"], [0, "_CPPv49logsumexpRK5arrayib14StreamOrDevice"]], "matmul (c++ function)": [[0, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice"]], "max (c++ function)": [[0, "_CPPv43maxRK5array14StreamOrDevice"], [0, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43maxRK5arrayb14StreamOrDevice"], [0, "_CPPv43maxRK5arrayib14StreamOrDevice"]], "maximum (c++ function)": [[0, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice"]], "mean (c++ function)": [[0, "_CPPv44meanRK5array14StreamOrDevice"], [0, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv44meanRK5arrayb14StreamOrDevice"], [0, "_CPPv44meanRK5arrayib14StreamOrDevice"]], "meshgrid (c++ function)": [[0, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice"]], "min (c++ function)": [[0, "_CPPv43minRK5array14StreamOrDevice"], [0, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43minRK5arrayb14StreamOrDevice"], [0, "_CPPv43minRK5arrayib14StreamOrDevice"]], "minimum (c++ function)": [[0, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice"]], "moveaxis (c++ function)": [[0, "_CPPv48moveaxisRK5arrayii14StreamOrDevice"]], "multiply (c++ function)": [[0, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice"]], "nan_to_num (c++ function)": [[0, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice"]], "negative (c++ function)": [[0, "_CPPv48negativeRK5array14StreamOrDevice"]], "not_equal (c++ function)": [[0, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice"]], "number_of_elements (c++ function)": [[0, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice"]], "ones (c++ function)": [[0, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice"]], "ones_like (c++ function)": [[0, "_CPPv49ones_likeRK5array14StreamOrDevice"]], "operator!= (c++ function)": [[0, "_CPPv4I0Ene5array1TRK5array"], [0, "_CPPv4I0Ene5arrayRK5array1T"], [0, "_CPPv4neRK5arrayRK5array"]], "operator% (c++ function)": [[0, "_CPPv4I0Erm5array1TRK5array"], [0, "_CPPv4I0Erm5arrayRK5array1T"], [0, "_CPPv4rmRK5arrayRK5array"]], "operator& (c++ function)": [[0, "_CPPv4anRK5arrayRK5array"]], "operator&& (c++ function)": [[0, "_CPPv4aaRK5arrayRK5array"]], "operator* (c++ function)": [[0, "_CPPv4I0Eml5array1TRK5array"], [0, "_CPPv4I0Eml5arrayRK5array1T"], [0, "_CPPv4mlRK5arrayRK5array"]], "operator+ (c++ function)": [[0, "_CPPv4I0Epl5array1TRK5array"], [0, "_CPPv4I0Epl5arrayRK5array1T"], [0, "_CPPv4plRK5arrayRK5array"]], "operator- (c++ function)": [[0, "_CPPv4I0Emi5array1TRK5array"], [0, "_CPPv4I0Emi5arrayRK5array1T"], [0, "_CPPv4miRK5array"], [0, "_CPPv4miRK5arrayRK5array"]], "operator/ (c++ function)": [[0, "_CPPv4dvRK5arrayRK5array"], [0, "_CPPv4dvRK5arrayd"], [0, "_CPPv4dvdRK5array"]], "operator< (c++ function)": [[0, "_CPPv4I0Elt5array1TRK5array"], [0, "_CPPv4I0Elt5arrayRK5array1T"], [0, "_CPPv4ltRK5arrayRK5array"]], "operator<< (c++ function)": [[0, "_CPPv4lsRK5arrayRK5array"]], "operator<= (c++ function)": [[0, "_CPPv4I0Ele5array1TRK5array"], [0, "_CPPv4I0Ele5arrayRK5array1T"], [0, "_CPPv4leRK5arrayRK5array"]], "operator== (c++ function)": [[0, "_CPPv4I0Eeq5array1TRK5array"], [0, "_CPPv4I0Eeq5arrayRK5array1T"], [0, "_CPPv4eqRK5arrayRK5array"]], "operator> (c++ function)": [[0, "_CPPv4I0Egt5array1TRK5array"], [0, "_CPPv4I0Egt5arrayRK5array1T"], [0, "_CPPv4gtRK5arrayRK5array"]], "operator>= (c++ function)": [[0, "_CPPv4I0Ege5array1TRK5array"], [0, "_CPPv4I0Ege5arrayRK5array1T"], [0, "_CPPv4geRK5arrayRK5array"]], "operator>> (c++ function)": [[0, "_CPPv4rsRK5arrayRK5array"]], "operator^ (c++ function)": [[0, "_CPPv4eoRK5arrayRK5array"]], "operator| (c++ function)": [[0, "_CPPv4orRK5arrayRK5array"]], "operator|| (c++ function)": [[0, "_CPPv4ooRK5arrayRK5array"]], "outer (c++ function)": [[0, "_CPPv45outerRK5arrayRK5array14StreamOrDevice"]], "pad (c++ function)": [[0, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice"], [0, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice"], [0, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice"], [0, "_CPPv43padRK5arrayiRK5array14StreamOrDevice"]], "partition (c++ function)": [[0, "_CPPv49partitionRK5arrayi14StreamOrDevice"], [0, "_CPPv49partitionRK5arrayii14StreamOrDevice"]], "power (c++ function)": [[0, "_CPPv45powerRK5arrayRK5array14StreamOrDevice"]], "prod (c++ function)": [[0, "_CPPv44prodRK5array14StreamOrDevice"], [0, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv44prodRK5arrayb14StreamOrDevice"], [0, "_CPPv44prodRK5arrayib14StreamOrDevice"]], "quantize (c++ function)": [[0, "_CPPv48quantizeRK5arrayii14StreamOrDevice"]], "quantized_matmul (c++ function)": [[0, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice"]], "radians (c++ function)": [[0, "_CPPv47radiansRK5array14StreamOrDevice"]], "reciprocal (c++ function)": [[0, "_CPPv410reciprocalRK5array14StreamOrDevice"]], "remainder (c++ function)": [[0, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice"]], "repeat (c++ function)": [[0, "_CPPv46repeatRK5arrayi14StreamOrDevice"], [0, "_CPPv46repeatRK5arrayii14StreamOrDevice"]], "reshape (c++ function)": [[0, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice"]], "right_shift (c++ function)": [[0, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice"]], "round (c++ function)": [[0, "_CPPv45roundRK5array14StreamOrDevice"], [0, "_CPPv45roundRK5arrayi14StreamOrDevice"]], "rsqrt (c++ function)": [[0, "_CPPv45rsqrtRK5array14StreamOrDevice"]], "scatter (c++ function)": [[0, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_add (c++ function)": [[0, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_max (c++ function)": [[0, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_min (c++ function)": [[0, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_prod (c++ function)": [[0, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "sigmoid (c++ function)": [[0, "_CPPv47sigmoidRK5array14StreamOrDevice"]], "sign (c++ function)": [[0, "_CPPv44signRK5array14StreamOrDevice"]], "sin (c++ function)": [[0, "_CPPv43sinRK5array14StreamOrDevice"]], "sinh (c++ function)": [[0, "_CPPv44sinhRK5array14StreamOrDevice"]], "slice (c++ function)": [[0, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice"]], "slice_update (c++ function)": [[0, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"]], "softmax (c++ function)": [[0, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv47softmaxRK5arrayb14StreamOrDevice"], [0, "_CPPv47softmaxRK5arrayib14StreamOrDevice"]], "sort (c++ function)": [[0, "_CPPv44sortRK5array14StreamOrDevice"], [0, "_CPPv44sortRK5arrayi14StreamOrDevice"]], "split (c++ function)": [[0, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice"], [0, "_CPPv45splitRK5arrayi14StreamOrDevice"], [0, "_CPPv45splitRK5arrayii14StreamOrDevice"]], "sqrt (c++ function)": [[0, "_CPPv44sqrtRK5array14StreamOrDevice"]], "square (c++ function)": [[0, "_CPPv46squareRK5array14StreamOrDevice"]], "squeeze (c++ function)": [[0, "_CPPv47squeezeRK5array14StreamOrDevice"], [0, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv47squeezeRK5arrayi14StreamOrDevice"]], "stack (c++ function)": [[0, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice"], [0, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice"]], "std (c++ function)": [[0, "_CPPv4StRK5array14StreamOrDevice"], [0, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice"], [0, "_CPPv4StRK5arraybi14StreamOrDevice"], [0, "_CPPv4StRK5arrayibi14StreamOrDevice"]], "stop_gradient (c++ function)": [[0, "_CPPv413stop_gradientRK5array14StreamOrDevice"]], "subtract (c++ function)": [[0, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice"]], "sum (c++ function)": [[0, "_CPPv43sumRK5array14StreamOrDevice"], [0, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43sumRK5arrayb14StreamOrDevice"], [0, "_CPPv43sumRK5arrayib14StreamOrDevice"]], "swapaxes (c++ function)": [[0, "_CPPv48swapaxesRK5arrayii14StreamOrDevice"]], "take (c++ function)": [[0, "_CPPv44takeRK5arrayRK5array14StreamOrDevice"], [0, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice"]], "take_along_axis (c++ function)": [[0, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice"]], "tan (c++ function)": [[0, "_CPPv43tanRK5array14StreamOrDevice"]], "tanh (c++ function)": [[0, "_CPPv44tanhRK5array14StreamOrDevice"]], "tensordot (c++ function)": [[0, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice"], [0, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice"]], "tile (c++ function)": [[0, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice"]], "topk (c++ function)": [[0, "_CPPv44topkRK5arrayi14StreamOrDevice"], [0, "_CPPv44topkRK5arrayii14StreamOrDevice"]], "trace (c++ function)": [[0, "_CPPv45traceRK5array14StreamOrDevice"], [0, "_CPPv45traceRK5arrayiii14StreamOrDevice"], [0, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice"]], "transpose (c++ function)": [[0, "_CPPv49transposeRK5array14StreamOrDevice"], [0, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice"], [0, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice"]], "tri (c++ function)": [[0, "_CPPv43trii5Dtype14StreamOrDevice"], [0, "_CPPv43triiii5Dtype14StreamOrDevice"]], "tril (c++ function)": [[0, "_CPPv44tril5arrayi14StreamOrDevice"]], "triu (c++ function)": [[0, "_CPPv44triu5arrayi14StreamOrDevice"]], "var (c++ function)": [[0, "_CPPv43varRK5array14StreamOrDevice"], [0, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice"], [0, "_CPPv43varRK5arraybi14StreamOrDevice"], [0, "_CPPv43varRK5arrayibi14StreamOrDevice"]], "view (c++ function)": [[0, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice"]], "where (c++ function)": [[0, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice"]], "zeros (c++ function)": [[0, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice"]], "zeros_like (c++ function)": [[0, "_CPPv410zeros_likeRK5array14StreamOrDevice"]], "device (class in mlx.core)": [[8, "mlx.core.Device"]], "__init__() (device method)": [[8, "mlx.core.Device.__init__"]], "dtype (class in mlx.core)": [[9, "mlx.core.Dtype"]], "__init__() (dtype method)": [[9, "mlx.core.Dtype.__init__"]], "dtypecategory (class in mlx.core)": [[10, "mlx.core.DtypeCategory"]], "__init__() (dtypecategory method)": [[10, "mlx.core.DtypeCategory.__init__"]], "abs() (in module mlx.core)": [[11, "mlx.core.abs"]], "add() (in module mlx.core)": [[12, "mlx.core.add"]], "addmm() (in module mlx.core)": [[13, "mlx.core.addmm"]], "all() (in module mlx.core)": [[14, "mlx.core.all"]], "allclose() (in module mlx.core)": [[15, "mlx.core.allclose"]], "any() (in module mlx.core)": [[16, "mlx.core.any"]], "arange() (in module mlx.core)": [[17, "mlx.core.arange"]], "arccos() (in module mlx.core)": [[18, "mlx.core.arccos"]], "arccosh() (in module mlx.core)": [[19, "mlx.core.arccosh"]], "arcsin() (in module mlx.core)": [[20, "mlx.core.arcsin"]], "arcsinh() (in module mlx.core)": [[21, "mlx.core.arcsinh"]], "arctan() (in module mlx.core)": [[22, "mlx.core.arctan"]], "arctan2() (in module mlx.core)": [[23, "mlx.core.arctan2"]], "arctanh() (in module mlx.core)": [[24, "mlx.core.arctanh"]], "argmax() (in module mlx.core)": [[25, "mlx.core.argmax"]], "argmin() (in module mlx.core)": [[26, "mlx.core.argmin"]], "argpartition() (in module mlx.core)": [[27, "mlx.core.argpartition"]], "argsort() (in module mlx.core)": [[28, "mlx.core.argsort"]], "__init__() (array method)": [[29, "mlx.core.array.__init__"]], "array (class in mlx.core)": [[29, "mlx.core.array"]], "t (array property)": [[30, "mlx.core.array.T"]], "abs() (array method)": [[31, "mlx.core.array.abs"]], "all() (array method)": [[32, "mlx.core.array.all"]], "any() (array method)": [[33, "mlx.core.array.any"]], "argmax() (array method)": [[34, "mlx.core.array.argmax"]], "argmin() (array method)": [[35, "mlx.core.array.argmin"]], "astype() (array method)": [[36, "mlx.core.array.astype"]], "at (array property)": [[37, "mlx.core.array.at"]], "conj() (array method)": [[38, "mlx.core.array.conj"]], "cos() (array method)": [[39, "mlx.core.array.cos"]], "cummax() (array method)": [[40, "mlx.core.array.cummax"]], "cummin() (array method)": [[41, "mlx.core.array.cummin"]], "cumprod() (array method)": [[42, "mlx.core.array.cumprod"]], "cumsum() (array method)": [[43, "mlx.core.array.cumsum"]], "diag() (array method)": [[44, "mlx.core.array.diag"]], "diagonal() (array method)": [[45, "mlx.core.array.diagonal"]], "dtype (array property)": [[46, "mlx.core.array.dtype"]], "exp() (array method)": [[47, "mlx.core.array.exp"]], "flatten() (array method)": [[48, "mlx.core.array.flatten"]], "item() (array method)": [[49, "mlx.core.array.item"]], "itemsize (array property)": [[50, "mlx.core.array.itemsize"]], "log() (array method)": [[51, "mlx.core.array.log"]], "log10() (array method)": [[52, "mlx.core.array.log10"]], "log1p() (array method)": [[53, "mlx.core.array.log1p"]], "log2() (array method)": [[54, "mlx.core.array.log2"]], "logsumexp() (array method)": [[55, "mlx.core.array.logsumexp"]], "max() (array method)": [[56, "mlx.core.array.max"]], "mean() (array method)": [[57, "mlx.core.array.mean"]], "min() (array method)": [[58, "mlx.core.array.min"]], "moveaxis() (array method)": [[59, "mlx.core.array.moveaxis"]], "nbytes (array property)": [[60, "mlx.core.array.nbytes"]], "ndim (array property)": [[61, "mlx.core.array.ndim"]], "prod() (array method)": [[62, "mlx.core.array.prod"]], "reciprocal() (array method)": [[63, "mlx.core.array.reciprocal"]], "reshape() (array method)": [[64, "mlx.core.array.reshape"]], "round() (array method)": [[65, "mlx.core.array.round"]], "rsqrt() (array method)": [[66, "mlx.core.array.rsqrt"]], "shape (array property)": [[67, "mlx.core.array.shape"]], "sin() (array method)": [[68, "mlx.core.array.sin"]], "size (array property)": [[69, "mlx.core.array.size"]], "split() (array method)": [[70, "mlx.core.array.split"]], "sqrt() (array method)": [[71, "mlx.core.array.sqrt"]], "square() (array method)": [[72, "mlx.core.array.square"]], "squeeze() (array method)": [[73, "mlx.core.array.squeeze"]], "sum() (array method)": [[74, "mlx.core.array.sum"]], "swapaxes() (array method)": [[75, "mlx.core.array.swapaxes"]], "tolist() (array method)": [[76, "mlx.core.array.tolist"]], "transpose() (array method)": [[77, "mlx.core.array.transpose"]], "var() (array method)": [[78, "mlx.core.array.var"]], "view() (array method)": [[79, "mlx.core.array.view"]], "array_equal() (in module mlx.core)": [[80, "mlx.core.array_equal"]], "as_strided() (in module mlx.core)": [[81, "mlx.core.as_strided"]], "atleast_1d() (in module mlx.core)": [[82, "mlx.core.atleast_1d"]], "atleast_2d() (in module mlx.core)": [[83, "mlx.core.atleast_2d"]], "atleast_3d() (in module mlx.core)": [[84, "mlx.core.atleast_3d"]], "bitwise_and() (in module mlx.core)": [[85, "mlx.core.bitwise_and"]], "bitwise_or() (in module mlx.core)": [[86, "mlx.core.bitwise_or"]], "bitwise_xor() (in module mlx.core)": [[87, "mlx.core.bitwise_xor"]], "block_masked_mm() (in module mlx.core)": [[88, "mlx.core.block_masked_mm"]], "broadcast_to() (in module mlx.core)": [[89, "mlx.core.broadcast_to"]], "ceil() (in module mlx.core)": [[90, "mlx.core.ceil"]], "clip() (in module mlx.core)": [[91, "mlx.core.clip"]], "compile() (in module mlx.core)": [[92, "mlx.core.compile"]], "concatenate() (in module mlx.core)": [[93, "mlx.core.concatenate"]], "conj() (in module mlx.core)": [[94, "mlx.core.conj"]], "conjugate() (in module mlx.core)": [[95, "mlx.core.conjugate"]], "conv1d() (in module mlx.core)": [[96, "mlx.core.conv1d"]], "conv2d() (in module mlx.core)": [[97, "mlx.core.conv2d"]], "conv_general() (in module mlx.core)": [[98, "mlx.core.conv_general"]], "convolve() (in module mlx.core)": [[99, "mlx.core.convolve"]], "cos() (in module mlx.core)": [[100, "mlx.core.cos"]], "cosh() (in module mlx.core)": [[101, "mlx.core.cosh"]], "cummax() (in module mlx.core)": [[102, "mlx.core.cummax"]], "cummin() (in module mlx.core)": [[103, "mlx.core.cummin"]], "cumprod() (in module mlx.core)": [[104, "mlx.core.cumprod"]], "cumsum() (in module mlx.core)": [[105, "mlx.core.cumsum"]], "__init__() (custom_function method)": [[106, "mlx.core.custom_function.__init__"]], "custom_function (class in mlx.core)": [[106, "mlx.core.custom_function"]], "default_device() (in module mlx.core)": [[107, "mlx.core.default_device"]], "default_stream() (in module mlx.core)": [[108, "mlx.core.default_stream"]], "degrees() (in module mlx.core)": [[109, "mlx.core.degrees"]], "dequantize() (in module mlx.core)": [[110, "mlx.core.dequantize"]], "diag() (in module mlx.core)": [[111, "mlx.core.diag"]], "diagonal() (in module mlx.core)": [[112, "mlx.core.diagonal"]], "disable_compile() (in module mlx.core)": [[113, "mlx.core.disable_compile"]], "group (class in mlx.core.distributed)": [[114, "mlx.core.distributed.Group"]], "__init__() (group method)": [[114, "mlx.core.distributed.Group.__init__"]], "all_gather() (in module mlx.core.distributed)": [[115, "mlx.core.distributed.all_gather"]], "all_sum() (in module mlx.core.distributed)": [[116, "mlx.core.distributed.all_sum"]], "init() (in module mlx.core.distributed)": [[117, "mlx.core.distributed.init"]], "is_available() (in module mlx.core.distributed)": [[118, "mlx.core.distributed.is_available"]], "divide() (in module mlx.core)": [[119, "mlx.core.divide"]], "divmod() (in module mlx.core)": [[120, "mlx.core.divmod"]], "einsum() (in module mlx.core)": [[121, "mlx.core.einsum"]], "einsum_path() (in module mlx.core)": [[122, "mlx.core.einsum_path"]], "enable_compile() (in module mlx.core)": [[123, "mlx.core.enable_compile"]], "equal() (in module mlx.core)": [[124, "mlx.core.equal"]], "erf() (in module mlx.core)": [[125, "mlx.core.erf"]], "erfinv() (in module mlx.core)": [[126, "mlx.core.erfinv"]], "eval() (in module mlx.core)": [[127, "mlx.core.eval"]], "exp() (in module mlx.core)": [[128, "mlx.core.exp"]], "expand_dims() (in module mlx.core)": [[129, "mlx.core.expand_dims"]], "expm1() (in module mlx.core)": [[130, "mlx.core.expm1"]], "eye() (in module mlx.core)": [[131, "mlx.core.eye"]], "layer_norm() (in module mlx.core.fast)": [[132, "mlx.core.fast.layer_norm"]], "rms_norm() (in module mlx.core.fast)": [[133, "mlx.core.fast.rms_norm"]], "rope() (in module mlx.core.fast)": [[134, "mlx.core.fast.rope"]], "scaled_dot_product_attention() (in module mlx.core.fast)": [[135, "mlx.core.fast.scaled_dot_product_attention"]], "fft() (in module mlx.core.fft)": [[136, "mlx.core.fft.fft"]], "fft2() (in module mlx.core.fft)": [[137, "mlx.core.fft.fft2"]], "fftn() (in module mlx.core.fft)": [[138, "mlx.core.fft.fftn"]], "ifft() (in module mlx.core.fft)": [[139, "mlx.core.fft.ifft"]], "ifft2() (in module mlx.core.fft)": [[140, "mlx.core.fft.ifft2"]], "ifftn() (in module mlx.core.fft)": [[141, "mlx.core.fft.ifftn"]], "irfft() (in module mlx.core.fft)": [[142, "mlx.core.fft.irfft"]], "irfft2() (in module mlx.core.fft)": [[143, "mlx.core.fft.irfft2"]], "irfftn() (in module mlx.core.fft)": [[144, "mlx.core.fft.irfftn"]], "rfft() (in module mlx.core.fft)": [[145, "mlx.core.fft.rfft"]], "rfft2() (in module mlx.core.fft)": [[146, "mlx.core.fft.rfft2"]], "rfftn() (in module mlx.core.fft)": [[147, "mlx.core.fft.rfftn"]], "flatten() (in module mlx.core)": [[148, "mlx.core.flatten"]], "floor() (in module mlx.core)": [[149, "mlx.core.floor"]], "floor_divide() (in module mlx.core)": [[150, "mlx.core.floor_divide"]], "full() (in module mlx.core)": [[151, "mlx.core.full"]], "gather_mm() (in module mlx.core)": [[152, "mlx.core.gather_mm"]], "gather_qmm() (in module mlx.core)": [[153, "mlx.core.gather_qmm"]], "grad() (in module mlx.core)": [[154, "mlx.core.grad"]], "greater() (in module mlx.core)": [[155, "mlx.core.greater"]], "greater_equal() (in module mlx.core)": [[156, "mlx.core.greater_equal"]], "hadamard_transform() (in module mlx.core)": [[157, "mlx.core.hadamard_transform"]], "identity() (in module mlx.core)": [[158, "mlx.core.identity"]], "inner() (in module mlx.core)": [[159, "mlx.core.inner"]], "isclose() (in module mlx.core)": [[160, "mlx.core.isclose"]], "isinf() (in module mlx.core)": [[161, "mlx.core.isinf"]], "isnan() (in module mlx.core)": [[162, "mlx.core.isnan"]], "isneginf() (in module mlx.core)": [[163, "mlx.core.isneginf"]], "isposinf() (in module mlx.core)": [[164, "mlx.core.isposinf"]], "issubdtype() (in module mlx.core)": [[165, "mlx.core.issubdtype"]], "jvp() (in module mlx.core)": [[166, "mlx.core.jvp"]], "left_shift() (in module mlx.core)": [[167, "mlx.core.left_shift"]], "less() (in module mlx.core)": [[168, "mlx.core.less"]], "less_equal() (in module mlx.core)": [[169, "mlx.core.less_equal"]], "cholesky() (in module mlx.core.linalg)": [[170, "mlx.core.linalg.cholesky"]], "inv() (in module mlx.core.linalg)": [[171, "mlx.core.linalg.inv"]], "norm() (in module mlx.core.linalg)": [[172, "mlx.core.linalg.norm"]], "qr() (in module mlx.core.linalg)": [[173, "mlx.core.linalg.qr"]], "svd() (in module mlx.core.linalg)": [[174, "mlx.core.linalg.svd"]], "linspace() (in module mlx.core)": [[175, "mlx.core.linspace"]], "load() (in module mlx.core)": [[176, "mlx.core.load"]], "log() (in module mlx.core)": [[177, "mlx.core.log"]], "log10() (in module mlx.core)": [[178, "mlx.core.log10"]], "log1p() (in module mlx.core)": [[179, "mlx.core.log1p"]], "log2() (in module mlx.core)": [[180, "mlx.core.log2"]], "logaddexp() (in module mlx.core)": [[181, "mlx.core.logaddexp"]], "logical_and() (in module mlx.core)": [[182, "mlx.core.logical_and"]], "logical_not() (in module mlx.core)": [[183, "mlx.core.logical_not"]], "logical_or() (in module mlx.core)": [[184, "mlx.core.logical_or"]], "logsumexp() (in module mlx.core)": [[185, "mlx.core.logsumexp"]], "matmul() (in module mlx.core)": [[186, "mlx.core.matmul"]], "max() (in module mlx.core)": [[187, "mlx.core.max"]], "maximum() (in module mlx.core)": [[188, "mlx.core.maximum"]], "mean() (in module mlx.core)": [[189, "mlx.core.mean"]], "meshgrid() (in module mlx.core)": [[190, "mlx.core.meshgrid"]], "clear_cache() (in module mlx.core.metal)": [[191, "mlx.core.metal.clear_cache"]], "device_info() (in module mlx.core.metal)": [[192, "mlx.core.metal.device_info"]], "get_active_memory() (in module mlx.core.metal)": [[193, "mlx.core.metal.get_active_memory"]], "get_cache_memory() (in module mlx.core.metal)": [[194, "mlx.core.metal.get_cache_memory"]], "get_peak_memory() (in module mlx.core.metal)": [[195, "mlx.core.metal.get_peak_memory"]], "is_available() (in module mlx.core.metal)": [[196, "mlx.core.metal.is_available"]], "reset_peak_memory() (in module mlx.core.metal)": [[197, "mlx.core.metal.reset_peak_memory"]], "set_cache_limit() (in module mlx.core.metal)": [[198, "mlx.core.metal.set_cache_limit"]], "set_memory_limit() (in module mlx.core.metal)": [[199, "mlx.core.metal.set_memory_limit"]], "start_capture() (in module mlx.core.metal)": [[200, "mlx.core.metal.start_capture"]], "stop_capture() (in module mlx.core.metal)": [[201, "mlx.core.metal.stop_capture"]], "min() (in module mlx.core)": [[202, "mlx.core.min"]], "minimum() (in module mlx.core)": [[203, "mlx.core.minimum"]], "moveaxis() (in module mlx.core)": [[204, "mlx.core.moveaxis"]], "multiply() (in module mlx.core)": [[205, "mlx.core.multiply"]], "nan_to_num() (in module mlx.core)": [[206, "mlx.core.nan_to_num"]], "negative() (in module mlx.core)": [[207, "mlx.core.negative"]], "new_stream() (in module mlx.core)": [[208, "mlx.core.new_stream"]], "not_equal() (in module mlx.core)": [[209, "mlx.core.not_equal"]], "ones() (in module mlx.core)": [[210, "mlx.core.ones"]], "ones_like() (in module mlx.core)": [[211, "mlx.core.ones_like"]], "outer() (in module mlx.core)": [[212, "mlx.core.outer"]], "pad() (in module mlx.core)": [[213, "mlx.core.pad"]], "partition() (in module mlx.core)": [[214, "mlx.core.partition"]], "power() (in module mlx.core)": [[215, "mlx.core.power"]], "prod() (in module mlx.core)": [[216, "mlx.core.prod"]], "quantize() (in module mlx.core)": [[217, "mlx.core.quantize"]], "quantized_matmul() (in module mlx.core)": [[218, "mlx.core.quantized_matmul"]], "radians() (in module mlx.core)": [[219, "mlx.core.radians"]], "bernoulli() (in module mlx.core.random)": [[220, "mlx.core.random.bernoulli"]], "categorical() (in module mlx.core.random)": [[221, "mlx.core.random.categorical"]], "gumbel() (in module mlx.core.random)": [[222, "mlx.core.random.gumbel"]], "key() (in module mlx.core.random)": [[223, "mlx.core.random.key"]], "laplace() (in module mlx.core.random)": [[224, "mlx.core.random.laplace"]], "multivariate_normal() (in module mlx.core.random)": [[225, "mlx.core.random.multivariate_normal"]], "normal() (in module mlx.core.random)": [[226, "mlx.core.random.normal"]], "randint() (in module mlx.core.random)": [[227, "mlx.core.random.randint"]], "seed() (in module mlx.core.random)": [[228, "mlx.core.random.seed"]], "split() (in module mlx.core.random)": [[229, "mlx.core.random.split"]], "truncated_normal() (in module mlx.core.random)": [[230, "mlx.core.random.truncated_normal"]], "uniform() (in module mlx.core.random)": [[231, "mlx.core.random.uniform"]], "reciprocal() (in module mlx.core)": [[232, "mlx.core.reciprocal"]], "remainder() (in module mlx.core)": [[233, "mlx.core.remainder"]], "repeat() (in module mlx.core)": [[234, "mlx.core.repeat"]], "reshape() (in module mlx.core)": [[235, "mlx.core.reshape"]], "right_shift() (in module mlx.core)": [[236, "mlx.core.right_shift"]], "round() (in module mlx.core)": [[237, "mlx.core.round"]], "rsqrt() (in module mlx.core)": [[238, "mlx.core.rsqrt"]], "save() (in module mlx.core)": [[239, "mlx.core.save"]], "save_gguf() (in module mlx.core)": [[240, "mlx.core.save_gguf"]], "save_safetensors() (in module mlx.core)": [[241, "mlx.core.save_safetensors"]], "savez() (in module mlx.core)": [[242, "mlx.core.savez"]], "savez_compressed() (in module mlx.core)": [[243, "mlx.core.savez_compressed"]], "set_default_device() (in module mlx.core)": [[244, "mlx.core.set_default_device"]], "set_default_stream() (in module mlx.core)": [[245, "mlx.core.set_default_stream"]], "sigmoid() (in module mlx.core)": [[246, "mlx.core.sigmoid"]], "sign() (in module mlx.core)": [[247, "mlx.core.sign"]], "sin() (in module mlx.core)": [[248, "mlx.core.sin"]], "sinh() (in module mlx.core)": [[249, "mlx.core.sinh"]], "softmax() (in module mlx.core)": [[250, "mlx.core.softmax"]], "sort() (in module mlx.core)": [[251, "mlx.core.sort"]], "split() (in module mlx.core)": [[252, "mlx.core.split"]], "sqrt() (in module mlx.core)": [[253, "mlx.core.sqrt"]], "square() (in module mlx.core)": [[254, "mlx.core.square"]], "squeeze() (in module mlx.core)": [[255, "mlx.core.squeeze"]], "stack() (in module mlx.core)": [[256, "mlx.core.stack"]], "std() (in module mlx.core)": [[257, "mlx.core.std"]], "stop_gradient() (in module mlx.core)": [[258, "mlx.core.stop_gradient"]], "stream() (in module mlx.core)": [[259, "mlx.core.stream"]], "subtract() (in module mlx.core)": [[260, "mlx.core.subtract"]], "sum() (in module mlx.core)": [[261, "mlx.core.sum"]], "swapaxes() (in module mlx.core)": [[262, "mlx.core.swapaxes"]], "synchronize() (in module mlx.core)": [[263, "mlx.core.synchronize"]], "take() (in module mlx.core)": [[264, "mlx.core.take"]], "take_along_axis() (in module mlx.core)": [[265, "mlx.core.take_along_axis"]], "tan() (in module mlx.core)": [[266, "mlx.core.tan"]], "tanh() (in module mlx.core)": [[267, "mlx.core.tanh"]], "tensordot() (in module mlx.core)": [[268, "mlx.core.tensordot"]], "tile() (in module mlx.core)": [[269, "mlx.core.tile"]], "topk() (in module mlx.core)": [[270, "mlx.core.topk"]], "trace() (in module mlx.core)": [[271, "mlx.core.trace"]], "transpose() (in module mlx.core)": [[272, "mlx.core.transpose"]], "tri() (in module mlx.core)": [[273, "mlx.core.tri"]], "tril() (in module mlx.core)": [[274, "mlx.core.tril"]], "triu() (in module mlx.core)": [[275, "mlx.core.triu"]], "value_and_grad() (in module mlx.core)": [[276, "mlx.core.value_and_grad"]], "var() (in module mlx.core)": [[277, "mlx.core.var"]], "view() (in module mlx.core)": [[278, "mlx.core.view"]], "vjp() (in module mlx.core)": [[279, "mlx.core.vjp"]], "vmap() (in module mlx.core)": [[280, "mlx.core.vmap"]], "where() (in module mlx.core)": [[281, "mlx.core.where"]], "zeros() (in module mlx.core)": [[282, "mlx.core.zeros"]], "zeros_like() (in module mlx.core)": [[283, "mlx.core.zeros_like"]], "quantize() (in module mlx.nn)": [[284, "mlx.nn.quantize"]], "value_and_grad() (in module mlx.nn)": [[285, "mlx.nn.value_and_grad"]], "clip_grad_norm() (in module mlx.optimizers)": [[286, "mlx.optimizers.clip_grad_norm"]], "tree_flatten() (in module mlx.utils)": [[287, "mlx.utils.tree_flatten"]], "tree_map() (in module mlx.utils)": [[288, "mlx.utils.tree_map"]], "tree_map_with_path() (in module mlx.utils)": [[289, "mlx.utils.tree_map_with_path"]], "tree_reduce() (in module mlx.utils)": [[290, "mlx.utils.tree_reduce"]], "tree_unflatten() (in module mlx.utils)": [[291, "mlx.utils.tree_unflatten"]], "stream (class in mlx.core)": [[292, "mlx.core.Stream"]], "__init__() (stream method)": [[292, "mlx.core.Stream.__init__"]], "alibi (class in mlx.nn)": [[302, "mlx.nn.ALiBi"]], "avgpool1d (class in mlx.nn)": [[303, "mlx.nn.AvgPool1d"]], "avgpool2d (class in mlx.nn)": [[304, "mlx.nn.AvgPool2d"]], "batchnorm (class in mlx.nn)": [[305, "mlx.nn.BatchNorm"]], "conv1d (class in mlx.nn)": [[306, "mlx.nn.Conv1d"]], "conv2d (class in mlx.nn)": [[307, "mlx.nn.Conv2d"]], "conv3d (class in mlx.nn)": [[308, "mlx.nn.Conv3d"]], "dropout (class in mlx.nn)": [[309, "mlx.nn.Dropout"]], "dropout2d (class in mlx.nn)": [[310, "mlx.nn.Dropout2d"]], "dropout3d (class in mlx.nn)": [[311, "mlx.nn.Dropout3d"]], "embedding (class in mlx.nn)": [[312, "mlx.nn.Embedding"]], "gelu (class in mlx.nn)": [[313, "mlx.nn.GELU"], [379, "mlx.nn.gelu"]], "glu (class in mlx.nn)": [[314, "mlx.nn.GLU"], [382, "mlx.nn.glu"]], "gru (class in mlx.nn)": [[315, "mlx.nn.GRU"]], "groupnorm (class in mlx.nn)": [[316, "mlx.nn.GroupNorm"]], "hardshrink (class in mlx.nn)": [[317, "mlx.nn.HardShrink"]], "hardtanh (class in mlx.nn)": [[318, "mlx.nn.HardTanh"]], "hardswish (class in mlx.nn)": [[319, "mlx.nn.Hardswish"], [385, "mlx.nn.hardswish"]], "instancenorm (class in mlx.nn)": [[320, "mlx.nn.InstanceNorm"]], "lstm (class in mlx.nn)": [[321, "mlx.nn.LSTM"]], "layernorm (class in mlx.nn)": [[322, "mlx.nn.LayerNorm"]], "leakyrelu (class in mlx.nn)": [[323, "mlx.nn.LeakyReLU"]], "linear (class in mlx.nn)": [[324, "mlx.nn.Linear"]], "maxpool1d (class in mlx.nn)": [[325, "mlx.nn.MaxPool1d"]], "maxpool2d (class in mlx.nn)": [[326, "mlx.nn.MaxPool2d"]], "mish (class in mlx.nn)": [[327, "mlx.nn.Mish"], [403, "mlx.nn.mish"]], "apply() (module method)": [[328, "mlx.nn.Module.apply"]], "apply_to_modules() (module method)": [[329, "mlx.nn.Module.apply_to_modules"]], "children() (module method)": [[330, "mlx.nn.Module.children"]], "eval() (module method)": [[331, "mlx.nn.Module.eval"]], "filter_and_map() (module method)": [[332, "mlx.nn.Module.filter_and_map"]], "freeze() (module method)": [[333, "mlx.nn.Module.freeze"]], "leaf_modules() (module method)": [[334, "mlx.nn.Module.leaf_modules"]], "load_weights() (module method)": [[335, "mlx.nn.Module.load_weights"]], "modules() (module method)": [[336, "mlx.nn.Module.modules"]], "named_modules() (module method)": [[337, "mlx.nn.Module.named_modules"]], "parameters() (module method)": [[338, "mlx.nn.Module.parameters"]], "save_weights() (module method)": [[339, "mlx.nn.Module.save_weights"]], "set_dtype() (module method)": [[340, "mlx.nn.Module.set_dtype"]], "state (module property)": [[341, "mlx.nn.Module.state"]], "train() (module method)": [[342, "mlx.nn.Module.train"]], "trainable_parameters() (module method)": [[343, "mlx.nn.Module.trainable_parameters"]], "training (module property)": [[344, "mlx.nn.Module.training"]], "unfreeze() (module method)": [[345, "mlx.nn.Module.unfreeze"]], "update() (module method)": [[346, "mlx.nn.Module.update"]], "update_modules() (module method)": [[347, "mlx.nn.Module.update_modules"]], "multiheadattention (class in mlx.nn)": [[348, "mlx.nn.MultiHeadAttention"]], "prelu (class in mlx.nn)": [[349, "mlx.nn.PReLU"], [404, "mlx.nn.prelu"]], "quantizedembedding (class in mlx.nn)": [[350, "mlx.nn.QuantizedEmbedding"]], "quantizedlinear (class in mlx.nn)": [[351, "mlx.nn.QuantizedLinear"]], "rmsnorm (class in mlx.nn)": [[352, "mlx.nn.RMSNorm"]], "rnn (class in mlx.nn)": [[353, "mlx.nn.RNN"]], "relu (class in mlx.nn)": [[354, "mlx.nn.ReLU"], [405, "mlx.nn.relu"]], "relu6 (class in mlx.nn)": [[355, "mlx.nn.ReLU6"], [406, "mlx.nn.relu6"]], "rope (class in mlx.nn)": [[356, "mlx.nn.RoPE"]], "selu (class in mlx.nn)": [[357, "mlx.nn.SELU"], [407, "mlx.nn.selu"]], "sequential (class in mlx.nn)": [[358, "mlx.nn.Sequential"]], "silu (class in mlx.nn)": [[359, "mlx.nn.SiLU"], [409, "mlx.nn.silu"]], "sinusoidalpositionalencoding (class in mlx.nn)": [[360, "mlx.nn.SinusoidalPositionalEncoding"]], "softmax (class in mlx.nn)": [[361, "mlx.nn.Softmax"], [410, "mlx.nn.softmax"]], "softmin (class in mlx.nn)": [[362, "mlx.nn.Softmin"], [411, "mlx.nn.softmin"]], "softplus (class in mlx.nn)": [[363, "mlx.nn.Softplus"], [412, "mlx.nn.softplus"]], "softshrink (class in mlx.nn)": [[364, "mlx.nn.Softshrink"], [413, "mlx.nn.softshrink"]], "softsign (class in mlx.nn)": [[365, "mlx.nn.Softsign"]], "step (class in mlx.nn)": [[366, "mlx.nn.Step"], [414, "mlx.nn.step"]], "tanh (class in mlx.nn)": [[367, "mlx.nn.Tanh"], [415, "mlx.nn.tanh"]], "transformer (class in mlx.nn)": [[368, "mlx.nn.Transformer"]], "upsample (class in mlx.nn)": [[369, "mlx.nn.Upsample"]], "constant() (in module mlx.nn.init)": [[370, "mlx.nn.init.constant"]], "glorot_normal() (in module mlx.nn.init)": [[371, "mlx.nn.init.glorot_normal"]], "glorot_uniform() (in module mlx.nn.init)": [[372, "mlx.nn.init.glorot_uniform"]], "he_normal() (in module mlx.nn.init)": [[373, "mlx.nn.init.he_normal"]], "he_uniform() (in module mlx.nn.init)": [[374, "mlx.nn.init.he_uniform"]], "identity() (in module mlx.nn.init)": [[375, "mlx.nn.init.identity"]], "normal() (in module mlx.nn.init)": [[376, "mlx.nn.init.normal"]], "uniform() (in module mlx.nn.init)": [[377, "mlx.nn.init.uniform"]], "elu (class in mlx.nn)": [[378, "mlx.nn.elu"]], "gelu_approx (class in mlx.nn)": [[380, "mlx.nn.gelu_approx"]], "gelu_fast_approx (class in mlx.nn)": [[381, "mlx.nn.gelu_fast_approx"]], "hard_shrink (class in mlx.nn)": [[383, "mlx.nn.hard_shrink"]], "hard_tanh (class in mlx.nn)": [[384, "mlx.nn.hard_tanh"]], "leaky_relu (class in mlx.nn)": [[386, "mlx.nn.leaky_relu"]], "log_sigmoid (class in mlx.nn)": [[387, "mlx.nn.log_sigmoid"]], "log_softmax (class in mlx.nn)": [[388, "mlx.nn.log_softmax"]], "binary_cross_entropy (class in mlx.nn.losses)": [[389, "mlx.nn.losses.binary_cross_entropy"]], "cosine_similarity_loss (class in mlx.nn.losses)": [[390, "mlx.nn.losses.cosine_similarity_loss"]], "cross_entropy (class in mlx.nn.losses)": [[391, "mlx.nn.losses.cross_entropy"]], "gaussian_nll_loss (class in mlx.nn.losses)": [[392, "mlx.nn.losses.gaussian_nll_loss"]], "hinge_loss (class in mlx.nn.losses)": [[393, "mlx.nn.losses.hinge_loss"]], "huber_loss (class in mlx.nn.losses)": [[394, "mlx.nn.losses.huber_loss"]], "kl_div_loss (class in mlx.nn.losses)": [[395, "mlx.nn.losses.kl_div_loss"]], "l1_loss (class in mlx.nn.losses)": [[396, "mlx.nn.losses.l1_loss"]], "log_cosh_loss (class in mlx.nn.losses)": [[397, "mlx.nn.losses.log_cosh_loss"]], "margin_ranking_loss (class in mlx.nn.losses)": [[398, "mlx.nn.losses.margin_ranking_loss"]], "mse_loss (class in mlx.nn.losses)": [[399, "mlx.nn.losses.mse_loss"]], "nll_loss (class in mlx.nn.losses)": [[400, "mlx.nn.losses.nll_loss"]], "smooth_l1_loss (class in mlx.nn.losses)": [[401, "mlx.nn.losses.smooth_l1_loss"]], "triplet_loss (class in mlx.nn.losses)": [[402, "mlx.nn.losses.triplet_loss"]], "sigmoid (class in mlx.nn)": [[408, "mlx.nn.sigmoid"]], "module (class in mlx.nn)": [[420, "mlx.nn.Module"]], "adadelta (class in mlx.optimizers)": [[423, "mlx.optimizers.AdaDelta"]], "adafactor (class in mlx.optimizers)": [[424, "mlx.optimizers.Adafactor"]], "adagrad (class in mlx.optimizers)": [[425, "mlx.optimizers.Adagrad"]], "adam (class in mlx.optimizers)": [[426, "mlx.optimizers.Adam"]], "adamw (class in mlx.optimizers)": [[427, "mlx.optimizers.AdamW"]], "adamax (class in mlx.optimizers)": [[428, "mlx.optimizers.Adamax"]], "lion (class in mlx.optimizers)": [[429, "mlx.optimizers.Lion"]], "apply_gradients() (optimizer method)": [[430, "mlx.optimizers.Optimizer.apply_gradients"]], "init() (optimizer method)": [[431, "mlx.optimizers.Optimizer.init"]], "state (optimizer property)": [[432, "mlx.optimizers.Optimizer.state"]], "update() (optimizer method)": [[433, "mlx.optimizers.Optimizer.update"]], "rmsprop (class in mlx.optimizers)": [[434, "mlx.optimizers.RMSprop"]], "sgd (class in mlx.optimizers)": [[435, "mlx.optimizers.SGD"]], "cosine_decay() (in module mlx.optimizers)": [[436, "mlx.optimizers.cosine_decay"]], "exponential_decay() (in module mlx.optimizers)": [[437, "mlx.optimizers.exponential_decay"]], "join_schedules() (in module mlx.optimizers)": [[438, "mlx.optimizers.join_schedules"]], "linear_schedule() (in module mlx.optimizers)": [[439, "mlx.optimizers.linear_schedule"]], "step_decay() (in module mlx.optimizers)": [[440, "mlx.optimizers.step_decay"]], "optimizer (class in mlx.optimizers)": [[442, "mlx.optimizers.Optimizer"]]}})