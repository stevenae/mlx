Search.setIndex({"docnames": ["cpp/ops", "dev/custom_metal_kernels", "dev/extensions", "dev/metal_debugger", "examples/linear_regression", "examples/llama-inference", "examples/mlp", "index", "install", "python/_autosummary/mlx.core.Device", "python/_autosummary/mlx.core.Dtype", "python/_autosummary/mlx.core.DtypeCategory", "python/_autosummary/mlx.core.abs", "python/_autosummary/mlx.core.add", "python/_autosummary/mlx.core.addmm", "python/_autosummary/mlx.core.all", "python/_autosummary/mlx.core.allclose", "python/_autosummary/mlx.core.any", "python/_autosummary/mlx.core.arange", "python/_autosummary/mlx.core.arccos", "python/_autosummary/mlx.core.arccosh", "python/_autosummary/mlx.core.arcsin", "python/_autosummary/mlx.core.arcsinh", "python/_autosummary/mlx.core.arctan", "python/_autosummary/mlx.core.arctan2", "python/_autosummary/mlx.core.arctanh", "python/_autosummary/mlx.core.argmax", "python/_autosummary/mlx.core.argmin", "python/_autosummary/mlx.core.argpartition", "python/_autosummary/mlx.core.argsort", "python/_autosummary/mlx.core.array", "python/_autosummary/mlx.core.array.T", "python/_autosummary/mlx.core.array.abs", "python/_autosummary/mlx.core.array.all", "python/_autosummary/mlx.core.array.any", "python/_autosummary/mlx.core.array.argmax", "python/_autosummary/mlx.core.array.argmin", "python/_autosummary/mlx.core.array.astype", "python/_autosummary/mlx.core.array.at", "python/_autosummary/mlx.core.array.conj", "python/_autosummary/mlx.core.array.cos", "python/_autosummary/mlx.core.array.cummax", "python/_autosummary/mlx.core.array.cummin", "python/_autosummary/mlx.core.array.cumprod", "python/_autosummary/mlx.core.array.cumsum", "python/_autosummary/mlx.core.array.diag", "python/_autosummary/mlx.core.array.diagonal", "python/_autosummary/mlx.core.array.dtype", "python/_autosummary/mlx.core.array.exp", "python/_autosummary/mlx.core.array.flatten", "python/_autosummary/mlx.core.array.item", "python/_autosummary/mlx.core.array.itemsize", "python/_autosummary/mlx.core.array.log", "python/_autosummary/mlx.core.array.log10", "python/_autosummary/mlx.core.array.log1p", "python/_autosummary/mlx.core.array.log2", "python/_autosummary/mlx.core.array.logsumexp", "python/_autosummary/mlx.core.array.max", "python/_autosummary/mlx.core.array.mean", "python/_autosummary/mlx.core.array.min", "python/_autosummary/mlx.core.array.moveaxis", "python/_autosummary/mlx.core.array.nbytes", "python/_autosummary/mlx.core.array.ndim", "python/_autosummary/mlx.core.array.prod", "python/_autosummary/mlx.core.array.reciprocal", "python/_autosummary/mlx.core.array.reshape", "python/_autosummary/mlx.core.array.round", "python/_autosummary/mlx.core.array.rsqrt", "python/_autosummary/mlx.core.array.shape", "python/_autosummary/mlx.core.array.sin", "python/_autosummary/mlx.core.array.size", "python/_autosummary/mlx.core.array.split", "python/_autosummary/mlx.core.array.sqrt", "python/_autosummary/mlx.core.array.square", "python/_autosummary/mlx.core.array.squeeze", "python/_autosummary/mlx.core.array.std", "python/_autosummary/mlx.core.array.sum", "python/_autosummary/mlx.core.array.swapaxes", "python/_autosummary/mlx.core.array.tolist", "python/_autosummary/mlx.core.array.transpose", "python/_autosummary/mlx.core.array.var", "python/_autosummary/mlx.core.array.view", "python/_autosummary/mlx.core.array_equal", "python/_autosummary/mlx.core.as_strided", "python/_autosummary/mlx.core.atleast_1d", "python/_autosummary/mlx.core.atleast_2d", "python/_autosummary/mlx.core.atleast_3d", "python/_autosummary/mlx.core.bitwise_and", "python/_autosummary/mlx.core.bitwise_or", "python/_autosummary/mlx.core.bitwise_xor", "python/_autosummary/mlx.core.block_masked_mm", "python/_autosummary/mlx.core.broadcast_to", "python/_autosummary/mlx.core.ceil", "python/_autosummary/mlx.core.clip", "python/_autosummary/mlx.core.compile", "python/_autosummary/mlx.core.concatenate", "python/_autosummary/mlx.core.conj", "python/_autosummary/mlx.core.conjugate", "python/_autosummary/mlx.core.conv1d", "python/_autosummary/mlx.core.conv2d", "python/_autosummary/mlx.core.conv3d", "python/_autosummary/mlx.core.conv_general", "python/_autosummary/mlx.core.conv_transpose1d", "python/_autosummary/mlx.core.conv_transpose2d", "python/_autosummary/mlx.core.conv_transpose3d", "python/_autosummary/mlx.core.convolve", "python/_autosummary/mlx.core.cos", "python/_autosummary/mlx.core.cosh", "python/_autosummary/mlx.core.cummax", "python/_autosummary/mlx.core.cummin", "python/_autosummary/mlx.core.cumprod", "python/_autosummary/mlx.core.cumsum", "python/_autosummary/mlx.core.custom_function", "python/_autosummary/mlx.core.default_device", "python/_autosummary/mlx.core.default_stream", "python/_autosummary/mlx.core.degrees", "python/_autosummary/mlx.core.dequantize", "python/_autosummary/mlx.core.diag", "python/_autosummary/mlx.core.diagonal", "python/_autosummary/mlx.core.disable_compile", "python/_autosummary/mlx.core.distributed.Group", "python/_autosummary/mlx.core.distributed.all_gather", "python/_autosummary/mlx.core.distributed.all_sum", "python/_autosummary/mlx.core.distributed.init", "python/_autosummary/mlx.core.distributed.is_available", "python/_autosummary/mlx.core.distributed.recv", "python/_autosummary/mlx.core.distributed.recv_like", "python/_autosummary/mlx.core.distributed.send", "python/_autosummary/mlx.core.divide", "python/_autosummary/mlx.core.divmod", "python/_autosummary/mlx.core.einsum", "python/_autosummary/mlx.core.einsum_path", "python/_autosummary/mlx.core.enable_compile", "python/_autosummary/mlx.core.equal", "python/_autosummary/mlx.core.erf", "python/_autosummary/mlx.core.erfinv", "python/_autosummary/mlx.core.eval", "python/_autosummary/mlx.core.exp", "python/_autosummary/mlx.core.expand_dims", "python/_autosummary/mlx.core.expm1", "python/_autosummary/mlx.core.eye", "python/_autosummary/mlx.core.fast.affine_quantize", "python/_autosummary/mlx.core.fast.layer_norm", "python/_autosummary/mlx.core.fast.metal_kernel", "python/_autosummary/mlx.core.fast.rms_norm", "python/_autosummary/mlx.core.fast.rope", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention", "python/_autosummary/mlx.core.fft.fft", "python/_autosummary/mlx.core.fft.fft2", "python/_autosummary/mlx.core.fft.fftn", "python/_autosummary/mlx.core.fft.ifft", "python/_autosummary/mlx.core.fft.ifft2", "python/_autosummary/mlx.core.fft.ifftn", "python/_autosummary/mlx.core.fft.irfft", "python/_autosummary/mlx.core.fft.irfft2", "python/_autosummary/mlx.core.fft.irfftn", "python/_autosummary/mlx.core.fft.rfft", "python/_autosummary/mlx.core.fft.rfft2", "python/_autosummary/mlx.core.fft.rfftn", "python/_autosummary/mlx.core.flatten", "python/_autosummary/mlx.core.floor", "python/_autosummary/mlx.core.floor_divide", "python/_autosummary/mlx.core.full", "python/_autosummary/mlx.core.gather_mm", "python/_autosummary/mlx.core.gather_qmm", "python/_autosummary/mlx.core.grad", "python/_autosummary/mlx.core.greater", "python/_autosummary/mlx.core.greater_equal", "python/_autosummary/mlx.core.hadamard_transform", "python/_autosummary/mlx.core.identity", "python/_autosummary/mlx.core.inner", "python/_autosummary/mlx.core.isclose", "python/_autosummary/mlx.core.isfinite", "python/_autosummary/mlx.core.isinf", "python/_autosummary/mlx.core.isnan", "python/_autosummary/mlx.core.isneginf", "python/_autosummary/mlx.core.isposinf", "python/_autosummary/mlx.core.issubdtype", "python/_autosummary/mlx.core.jvp", "python/_autosummary/mlx.core.left_shift", "python/_autosummary/mlx.core.less", "python/_autosummary/mlx.core.less_equal", "python/_autosummary/mlx.core.linalg.cholesky", "python/_autosummary/mlx.core.linalg.cholesky_inv", "python/_autosummary/mlx.core.linalg.cross", "python/_autosummary/mlx.core.linalg.inv", "python/_autosummary/mlx.core.linalg.norm", "python/_autosummary/mlx.core.linalg.qr", "python/_autosummary/mlx.core.linalg.svd", "python/_autosummary/mlx.core.linalg.tri_inv", "python/_autosummary/mlx.core.linspace", "python/_autosummary/mlx.core.load", "python/_autosummary/mlx.core.log", "python/_autosummary/mlx.core.log10", "python/_autosummary/mlx.core.log1p", "python/_autosummary/mlx.core.log2", "python/_autosummary/mlx.core.logaddexp", "python/_autosummary/mlx.core.logical_and", "python/_autosummary/mlx.core.logical_not", "python/_autosummary/mlx.core.logical_or", "python/_autosummary/mlx.core.logsumexp", "python/_autosummary/mlx.core.matmul", "python/_autosummary/mlx.core.max", "python/_autosummary/mlx.core.maximum", "python/_autosummary/mlx.core.mean", "python/_autosummary/mlx.core.meshgrid", "python/_autosummary/mlx.core.metal.clear_cache", "python/_autosummary/mlx.core.metal.device_info", "python/_autosummary/mlx.core.metal.get_active_memory", "python/_autosummary/mlx.core.metal.get_cache_memory", "python/_autosummary/mlx.core.metal.get_peak_memory", "python/_autosummary/mlx.core.metal.is_available", "python/_autosummary/mlx.core.metal.reset_peak_memory", "python/_autosummary/mlx.core.metal.set_cache_limit", "python/_autosummary/mlx.core.metal.set_memory_limit", "python/_autosummary/mlx.core.metal.start_capture", "python/_autosummary/mlx.core.metal.stop_capture", "python/_autosummary/mlx.core.min", "python/_autosummary/mlx.core.minimum", "python/_autosummary/mlx.core.moveaxis", "python/_autosummary/mlx.core.multiply", "python/_autosummary/mlx.core.nan_to_num", "python/_autosummary/mlx.core.negative", "python/_autosummary/mlx.core.new_stream", "python/_autosummary/mlx.core.not_equal", "python/_autosummary/mlx.core.ones", "python/_autosummary/mlx.core.ones_like", "python/_autosummary/mlx.core.outer", "python/_autosummary/mlx.core.pad", "python/_autosummary/mlx.core.partition", "python/_autosummary/mlx.core.power", "python/_autosummary/mlx.core.prod", "python/_autosummary/mlx.core.put_along_axis", "python/_autosummary/mlx.core.quantize", "python/_autosummary/mlx.core.quantized_matmul", "python/_autosummary/mlx.core.radians", "python/_autosummary/mlx.core.random.bernoulli", "python/_autosummary/mlx.core.random.categorical", "python/_autosummary/mlx.core.random.gumbel", "python/_autosummary/mlx.core.random.key", "python/_autosummary/mlx.core.random.laplace", "python/_autosummary/mlx.core.random.multivariate_normal", "python/_autosummary/mlx.core.random.normal", "python/_autosummary/mlx.core.random.permutation", "python/_autosummary/mlx.core.random.randint", "python/_autosummary/mlx.core.random.seed", "python/_autosummary/mlx.core.random.split", "python/_autosummary/mlx.core.random.truncated_normal", "python/_autosummary/mlx.core.random.uniform", "python/_autosummary/mlx.core.reciprocal", "python/_autosummary/mlx.core.remainder", "python/_autosummary/mlx.core.repeat", "python/_autosummary/mlx.core.reshape", "python/_autosummary/mlx.core.right_shift", "python/_autosummary/mlx.core.roll", "python/_autosummary/mlx.core.round", "python/_autosummary/mlx.core.rsqrt", "python/_autosummary/mlx.core.save", "python/_autosummary/mlx.core.save_gguf", "python/_autosummary/mlx.core.save_safetensors", "python/_autosummary/mlx.core.savez", "python/_autosummary/mlx.core.savez_compressed", "python/_autosummary/mlx.core.set_default_device", "python/_autosummary/mlx.core.set_default_stream", "python/_autosummary/mlx.core.sigmoid", "python/_autosummary/mlx.core.sign", "python/_autosummary/mlx.core.sin", "python/_autosummary/mlx.core.sinh", "python/_autosummary/mlx.core.softmax", "python/_autosummary/mlx.core.sort", "python/_autosummary/mlx.core.split", "python/_autosummary/mlx.core.sqrt", "python/_autosummary/mlx.core.square", "python/_autosummary/mlx.core.squeeze", "python/_autosummary/mlx.core.stack", "python/_autosummary/mlx.core.std", "python/_autosummary/mlx.core.stop_gradient", "python/_autosummary/mlx.core.stream", "python/_autosummary/mlx.core.subtract", "python/_autosummary/mlx.core.sum", "python/_autosummary/mlx.core.swapaxes", "python/_autosummary/mlx.core.synchronize", "python/_autosummary/mlx.core.take", "python/_autosummary/mlx.core.take_along_axis", "python/_autosummary/mlx.core.tan", "python/_autosummary/mlx.core.tanh", "python/_autosummary/mlx.core.tensordot", "python/_autosummary/mlx.core.tile", "python/_autosummary/mlx.core.topk", "python/_autosummary/mlx.core.trace", "python/_autosummary/mlx.core.transpose", "python/_autosummary/mlx.core.tri", "python/_autosummary/mlx.core.tril", "python/_autosummary/mlx.core.triu", "python/_autosummary/mlx.core.value_and_grad", "python/_autosummary/mlx.core.var", "python/_autosummary/mlx.core.view", "python/_autosummary/mlx.core.vjp", "python/_autosummary/mlx.core.vmap", "python/_autosummary/mlx.core.where", "python/_autosummary/mlx.core.zeros", "python/_autosummary/mlx.core.zeros_like", "python/_autosummary/mlx.nn.quantize", "python/_autosummary/mlx.nn.value_and_grad", "python/_autosummary/mlx.optimizers.clip_grad_norm", "python/_autosummary/mlx.utils.tree_flatten", "python/_autosummary/mlx.utils.tree_map", "python/_autosummary/mlx.utils.tree_map_with_path", "python/_autosummary/mlx.utils.tree_reduce", "python/_autosummary/mlx.utils.tree_unflatten", "python/_autosummary/stream_class", "python/array", "python/data_types", "python/devices_and_streams", "python/distributed", "python/fast", "python/fft", "python/linalg", "python/metal", "python/nn", "python/nn/_autosummary/mlx.nn.ALiBi", "python/nn/_autosummary/mlx.nn.AvgPool1d", "python/nn/_autosummary/mlx.nn.AvgPool2d", "python/nn/_autosummary/mlx.nn.BatchNorm", "python/nn/_autosummary/mlx.nn.CELU", "python/nn/_autosummary/mlx.nn.Conv1d", "python/nn/_autosummary/mlx.nn.Conv2d", "python/nn/_autosummary/mlx.nn.Conv3d", "python/nn/_autosummary/mlx.nn.ConvTranspose1d", "python/nn/_autosummary/mlx.nn.ConvTranspose2d", "python/nn/_autosummary/mlx.nn.ConvTranspose3d", "python/nn/_autosummary/mlx.nn.Dropout", "python/nn/_autosummary/mlx.nn.Dropout2d", "python/nn/_autosummary/mlx.nn.Dropout3d", "python/nn/_autosummary/mlx.nn.ELU", "python/nn/_autosummary/mlx.nn.Embedding", "python/nn/_autosummary/mlx.nn.GELU", "python/nn/_autosummary/mlx.nn.GLU", "python/nn/_autosummary/mlx.nn.GRU", "python/nn/_autosummary/mlx.nn.GroupNorm", "python/nn/_autosummary/mlx.nn.HardShrink", "python/nn/_autosummary/mlx.nn.HardTanh", "python/nn/_autosummary/mlx.nn.Hardswish", "python/nn/_autosummary/mlx.nn.InstanceNorm", "python/nn/_autosummary/mlx.nn.LSTM", "python/nn/_autosummary/mlx.nn.LayerNorm", "python/nn/_autosummary/mlx.nn.LeakyReLU", "python/nn/_autosummary/mlx.nn.Linear", "python/nn/_autosummary/mlx.nn.LogSigmoid", "python/nn/_autosummary/mlx.nn.LogSoftmax", "python/nn/_autosummary/mlx.nn.MaxPool1d", "python/nn/_autosummary/mlx.nn.MaxPool2d", "python/nn/_autosummary/mlx.nn.Mish", "python/nn/_autosummary/mlx.nn.Module.apply", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules", "python/nn/_autosummary/mlx.nn.Module.children", "python/nn/_autosummary/mlx.nn.Module.eval", "python/nn/_autosummary/mlx.nn.Module.filter_and_map", "python/nn/_autosummary/mlx.nn.Module.freeze", "python/nn/_autosummary/mlx.nn.Module.leaf_modules", "python/nn/_autosummary/mlx.nn.Module.load_weights", "python/nn/_autosummary/mlx.nn.Module.modules", "python/nn/_autosummary/mlx.nn.Module.named_modules", "python/nn/_autosummary/mlx.nn.Module.parameters", "python/nn/_autosummary/mlx.nn.Module.save_weights", "python/nn/_autosummary/mlx.nn.Module.set_dtype", "python/nn/_autosummary/mlx.nn.Module.state", "python/nn/_autosummary/mlx.nn.Module.train", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters", "python/nn/_autosummary/mlx.nn.Module.training", "python/nn/_autosummary/mlx.nn.Module.unfreeze", "python/nn/_autosummary/mlx.nn.Module.update", "python/nn/_autosummary/mlx.nn.Module.update_modules", "python/nn/_autosummary/mlx.nn.MultiHeadAttention", "python/nn/_autosummary/mlx.nn.PReLU", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding", "python/nn/_autosummary/mlx.nn.QuantizedLinear", "python/nn/_autosummary/mlx.nn.RMSNorm", "python/nn/_autosummary/mlx.nn.RNN", "python/nn/_autosummary/mlx.nn.ReLU", "python/nn/_autosummary/mlx.nn.ReLU6", "python/nn/_autosummary/mlx.nn.RoPE", "python/nn/_autosummary/mlx.nn.SELU", "python/nn/_autosummary/mlx.nn.Sequential", "python/nn/_autosummary/mlx.nn.SiLU", "python/nn/_autosummary/mlx.nn.Sigmoid", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding", "python/nn/_autosummary/mlx.nn.Softmax", "python/nn/_autosummary/mlx.nn.Softmin", "python/nn/_autosummary/mlx.nn.Softplus", "python/nn/_autosummary/mlx.nn.Softshrink", "python/nn/_autosummary/mlx.nn.Softsign", "python/nn/_autosummary/mlx.nn.Step", "python/nn/_autosummary/mlx.nn.Tanh", "python/nn/_autosummary/mlx.nn.Transformer", "python/nn/_autosummary/mlx.nn.Upsample", "python/nn/_autosummary/mlx.nn.init.constant", "python/nn/_autosummary/mlx.nn.init.glorot_normal", "python/nn/_autosummary/mlx.nn.init.glorot_uniform", "python/nn/_autosummary/mlx.nn.init.he_normal", "python/nn/_autosummary/mlx.nn.init.he_uniform", "python/nn/_autosummary/mlx.nn.init.identity", "python/nn/_autosummary/mlx.nn.init.normal", "python/nn/_autosummary/mlx.nn.init.uniform", "python/nn/_autosummary_functions/mlx.nn.celu", "python/nn/_autosummary_functions/mlx.nn.elu", "python/nn/_autosummary_functions/mlx.nn.gelu", "python/nn/_autosummary_functions/mlx.nn.gelu_approx", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx", "python/nn/_autosummary_functions/mlx.nn.glu", "python/nn/_autosummary_functions/mlx.nn.hard_shrink", "python/nn/_autosummary_functions/mlx.nn.hard_tanh", "python/nn/_autosummary_functions/mlx.nn.hardswish", "python/nn/_autosummary_functions/mlx.nn.leaky_relu", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid", "python/nn/_autosummary_functions/mlx.nn.log_softmax", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss", "python/nn/_autosummary_functions/mlx.nn.mish", "python/nn/_autosummary_functions/mlx.nn.prelu", "python/nn/_autosummary_functions/mlx.nn.relu", "python/nn/_autosummary_functions/mlx.nn.relu6", "python/nn/_autosummary_functions/mlx.nn.selu", "python/nn/_autosummary_functions/mlx.nn.sigmoid", "python/nn/_autosummary_functions/mlx.nn.silu", "python/nn/_autosummary_functions/mlx.nn.softmax", "python/nn/_autosummary_functions/mlx.nn.softmin", "python/nn/_autosummary_functions/mlx.nn.softplus", "python/nn/_autosummary_functions/mlx.nn.softshrink", "python/nn/_autosummary_functions/mlx.nn.step", "python/nn/_autosummary_functions/mlx.nn.tanh", "python/nn/functions", "python/nn/init", "python/nn/layers", "python/nn/losses", "python/nn/module", "python/ops", "python/optimizers", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta", "python/optimizers/_autosummary/mlx.optimizers.Adafactor", "python/optimizers/_autosummary/mlx.optimizers.Adagrad", "python/optimizers/_autosummary/mlx.optimizers.Adam", "python/optimizers/_autosummary/mlx.optimizers.AdamW", "python/optimizers/_autosummary/mlx.optimizers.Adamax", "python/optimizers/_autosummary/mlx.optimizers.Lion", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update", "python/optimizers/_autosummary/mlx.optimizers.RMSprop", "python/optimizers/_autosummary/mlx.optimizers.SGD", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay", "python/optimizers/_autosummary/mlx.optimizers.join_schedules", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule", "python/optimizers/_autosummary/mlx.optimizers.step_decay", "python/optimizers/common_optimizers", "python/optimizers/optimizer", "python/optimizers/schedulers", "python/random", "python/transforms", "python/tree_utils", "usage/compile", "usage/distributed", "usage/function_transforms", "usage/indexing", "usage/lazy_evaluation", "usage/numpy", "usage/quick_start", "usage/saving_and_loading", "usage/unified_memory", "usage/using_streams"], "filenames": ["cpp/ops.rst", "dev/custom_metal_kernels.rst", "dev/extensions.rst", "dev/metal_debugger.rst", "examples/linear_regression.rst", "examples/llama-inference.rst", "examples/mlp.rst", "index.rst", "install.rst", "python/_autosummary/mlx.core.Device.rst", "python/_autosummary/mlx.core.Dtype.rst", "python/_autosummary/mlx.core.DtypeCategory.rst", "python/_autosummary/mlx.core.abs.rst", "python/_autosummary/mlx.core.add.rst", "python/_autosummary/mlx.core.addmm.rst", "python/_autosummary/mlx.core.all.rst", "python/_autosummary/mlx.core.allclose.rst", "python/_autosummary/mlx.core.any.rst", "python/_autosummary/mlx.core.arange.rst", "python/_autosummary/mlx.core.arccos.rst", "python/_autosummary/mlx.core.arccosh.rst", "python/_autosummary/mlx.core.arcsin.rst", "python/_autosummary/mlx.core.arcsinh.rst", "python/_autosummary/mlx.core.arctan.rst", "python/_autosummary/mlx.core.arctan2.rst", "python/_autosummary/mlx.core.arctanh.rst", "python/_autosummary/mlx.core.argmax.rst", "python/_autosummary/mlx.core.argmin.rst", "python/_autosummary/mlx.core.argpartition.rst", "python/_autosummary/mlx.core.argsort.rst", "python/_autosummary/mlx.core.array.rst", "python/_autosummary/mlx.core.array.T.rst", "python/_autosummary/mlx.core.array.abs.rst", "python/_autosummary/mlx.core.array.all.rst", "python/_autosummary/mlx.core.array.any.rst", "python/_autosummary/mlx.core.array.argmax.rst", "python/_autosummary/mlx.core.array.argmin.rst", "python/_autosummary/mlx.core.array.astype.rst", "python/_autosummary/mlx.core.array.at.rst", "python/_autosummary/mlx.core.array.conj.rst", "python/_autosummary/mlx.core.array.cos.rst", "python/_autosummary/mlx.core.array.cummax.rst", "python/_autosummary/mlx.core.array.cummin.rst", "python/_autosummary/mlx.core.array.cumprod.rst", "python/_autosummary/mlx.core.array.cumsum.rst", "python/_autosummary/mlx.core.array.diag.rst", "python/_autosummary/mlx.core.array.diagonal.rst", "python/_autosummary/mlx.core.array.dtype.rst", "python/_autosummary/mlx.core.array.exp.rst", "python/_autosummary/mlx.core.array.flatten.rst", "python/_autosummary/mlx.core.array.item.rst", "python/_autosummary/mlx.core.array.itemsize.rst", "python/_autosummary/mlx.core.array.log.rst", "python/_autosummary/mlx.core.array.log10.rst", "python/_autosummary/mlx.core.array.log1p.rst", "python/_autosummary/mlx.core.array.log2.rst", "python/_autosummary/mlx.core.array.logsumexp.rst", "python/_autosummary/mlx.core.array.max.rst", "python/_autosummary/mlx.core.array.mean.rst", "python/_autosummary/mlx.core.array.min.rst", "python/_autosummary/mlx.core.array.moveaxis.rst", "python/_autosummary/mlx.core.array.nbytes.rst", "python/_autosummary/mlx.core.array.ndim.rst", "python/_autosummary/mlx.core.array.prod.rst", "python/_autosummary/mlx.core.array.reciprocal.rst", "python/_autosummary/mlx.core.array.reshape.rst", "python/_autosummary/mlx.core.array.round.rst", "python/_autosummary/mlx.core.array.rsqrt.rst", "python/_autosummary/mlx.core.array.shape.rst", "python/_autosummary/mlx.core.array.sin.rst", "python/_autosummary/mlx.core.array.size.rst", "python/_autosummary/mlx.core.array.split.rst", "python/_autosummary/mlx.core.array.sqrt.rst", "python/_autosummary/mlx.core.array.square.rst", "python/_autosummary/mlx.core.array.squeeze.rst", "python/_autosummary/mlx.core.array.std.rst", "python/_autosummary/mlx.core.array.sum.rst", "python/_autosummary/mlx.core.array.swapaxes.rst", "python/_autosummary/mlx.core.array.tolist.rst", "python/_autosummary/mlx.core.array.transpose.rst", "python/_autosummary/mlx.core.array.var.rst", "python/_autosummary/mlx.core.array.view.rst", "python/_autosummary/mlx.core.array_equal.rst", "python/_autosummary/mlx.core.as_strided.rst", "python/_autosummary/mlx.core.atleast_1d.rst", "python/_autosummary/mlx.core.atleast_2d.rst", "python/_autosummary/mlx.core.atleast_3d.rst", "python/_autosummary/mlx.core.bitwise_and.rst", "python/_autosummary/mlx.core.bitwise_or.rst", "python/_autosummary/mlx.core.bitwise_xor.rst", "python/_autosummary/mlx.core.block_masked_mm.rst", "python/_autosummary/mlx.core.broadcast_to.rst", "python/_autosummary/mlx.core.ceil.rst", "python/_autosummary/mlx.core.clip.rst", "python/_autosummary/mlx.core.compile.rst", "python/_autosummary/mlx.core.concatenate.rst", "python/_autosummary/mlx.core.conj.rst", "python/_autosummary/mlx.core.conjugate.rst", "python/_autosummary/mlx.core.conv1d.rst", "python/_autosummary/mlx.core.conv2d.rst", "python/_autosummary/mlx.core.conv3d.rst", "python/_autosummary/mlx.core.conv_general.rst", "python/_autosummary/mlx.core.conv_transpose1d.rst", "python/_autosummary/mlx.core.conv_transpose2d.rst", "python/_autosummary/mlx.core.conv_transpose3d.rst", "python/_autosummary/mlx.core.convolve.rst", "python/_autosummary/mlx.core.cos.rst", "python/_autosummary/mlx.core.cosh.rst", "python/_autosummary/mlx.core.cummax.rst", "python/_autosummary/mlx.core.cummin.rst", "python/_autosummary/mlx.core.cumprod.rst", "python/_autosummary/mlx.core.cumsum.rst", "python/_autosummary/mlx.core.custom_function.rst", "python/_autosummary/mlx.core.default_device.rst", "python/_autosummary/mlx.core.default_stream.rst", "python/_autosummary/mlx.core.degrees.rst", "python/_autosummary/mlx.core.dequantize.rst", "python/_autosummary/mlx.core.diag.rst", "python/_autosummary/mlx.core.diagonal.rst", "python/_autosummary/mlx.core.disable_compile.rst", "python/_autosummary/mlx.core.distributed.Group.rst", "python/_autosummary/mlx.core.distributed.all_gather.rst", "python/_autosummary/mlx.core.distributed.all_sum.rst", "python/_autosummary/mlx.core.distributed.init.rst", "python/_autosummary/mlx.core.distributed.is_available.rst", "python/_autosummary/mlx.core.distributed.recv.rst", "python/_autosummary/mlx.core.distributed.recv_like.rst", "python/_autosummary/mlx.core.distributed.send.rst", "python/_autosummary/mlx.core.divide.rst", "python/_autosummary/mlx.core.divmod.rst", "python/_autosummary/mlx.core.einsum.rst", "python/_autosummary/mlx.core.einsum_path.rst", "python/_autosummary/mlx.core.enable_compile.rst", "python/_autosummary/mlx.core.equal.rst", "python/_autosummary/mlx.core.erf.rst", "python/_autosummary/mlx.core.erfinv.rst", "python/_autosummary/mlx.core.eval.rst", "python/_autosummary/mlx.core.exp.rst", "python/_autosummary/mlx.core.expand_dims.rst", "python/_autosummary/mlx.core.expm1.rst", "python/_autosummary/mlx.core.eye.rst", "python/_autosummary/mlx.core.fast.affine_quantize.rst", "python/_autosummary/mlx.core.fast.layer_norm.rst", "python/_autosummary/mlx.core.fast.metal_kernel.rst", "python/_autosummary/mlx.core.fast.rms_norm.rst", "python/_autosummary/mlx.core.fast.rope.rst", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention.rst", "python/_autosummary/mlx.core.fft.fft.rst", "python/_autosummary/mlx.core.fft.fft2.rst", "python/_autosummary/mlx.core.fft.fftn.rst", "python/_autosummary/mlx.core.fft.ifft.rst", "python/_autosummary/mlx.core.fft.ifft2.rst", "python/_autosummary/mlx.core.fft.ifftn.rst", "python/_autosummary/mlx.core.fft.irfft.rst", "python/_autosummary/mlx.core.fft.irfft2.rst", "python/_autosummary/mlx.core.fft.irfftn.rst", "python/_autosummary/mlx.core.fft.rfft.rst", "python/_autosummary/mlx.core.fft.rfft2.rst", "python/_autosummary/mlx.core.fft.rfftn.rst", "python/_autosummary/mlx.core.flatten.rst", "python/_autosummary/mlx.core.floor.rst", "python/_autosummary/mlx.core.floor_divide.rst", "python/_autosummary/mlx.core.full.rst", "python/_autosummary/mlx.core.gather_mm.rst", "python/_autosummary/mlx.core.gather_qmm.rst", "python/_autosummary/mlx.core.grad.rst", "python/_autosummary/mlx.core.greater.rst", "python/_autosummary/mlx.core.greater_equal.rst", "python/_autosummary/mlx.core.hadamard_transform.rst", "python/_autosummary/mlx.core.identity.rst", "python/_autosummary/mlx.core.inner.rst", "python/_autosummary/mlx.core.isclose.rst", "python/_autosummary/mlx.core.isfinite.rst", "python/_autosummary/mlx.core.isinf.rst", "python/_autosummary/mlx.core.isnan.rst", "python/_autosummary/mlx.core.isneginf.rst", "python/_autosummary/mlx.core.isposinf.rst", "python/_autosummary/mlx.core.issubdtype.rst", "python/_autosummary/mlx.core.jvp.rst", "python/_autosummary/mlx.core.left_shift.rst", "python/_autosummary/mlx.core.less.rst", "python/_autosummary/mlx.core.less_equal.rst", "python/_autosummary/mlx.core.linalg.cholesky.rst", "python/_autosummary/mlx.core.linalg.cholesky_inv.rst", "python/_autosummary/mlx.core.linalg.cross.rst", "python/_autosummary/mlx.core.linalg.inv.rst", "python/_autosummary/mlx.core.linalg.norm.rst", "python/_autosummary/mlx.core.linalg.qr.rst", "python/_autosummary/mlx.core.linalg.svd.rst", "python/_autosummary/mlx.core.linalg.tri_inv.rst", "python/_autosummary/mlx.core.linspace.rst", "python/_autosummary/mlx.core.load.rst", "python/_autosummary/mlx.core.log.rst", "python/_autosummary/mlx.core.log10.rst", "python/_autosummary/mlx.core.log1p.rst", "python/_autosummary/mlx.core.log2.rst", "python/_autosummary/mlx.core.logaddexp.rst", "python/_autosummary/mlx.core.logical_and.rst", "python/_autosummary/mlx.core.logical_not.rst", "python/_autosummary/mlx.core.logical_or.rst", "python/_autosummary/mlx.core.logsumexp.rst", "python/_autosummary/mlx.core.matmul.rst", "python/_autosummary/mlx.core.max.rst", "python/_autosummary/mlx.core.maximum.rst", "python/_autosummary/mlx.core.mean.rst", "python/_autosummary/mlx.core.meshgrid.rst", "python/_autosummary/mlx.core.metal.clear_cache.rst", "python/_autosummary/mlx.core.metal.device_info.rst", "python/_autosummary/mlx.core.metal.get_active_memory.rst", "python/_autosummary/mlx.core.metal.get_cache_memory.rst", "python/_autosummary/mlx.core.metal.get_peak_memory.rst", "python/_autosummary/mlx.core.metal.is_available.rst", "python/_autosummary/mlx.core.metal.reset_peak_memory.rst", "python/_autosummary/mlx.core.metal.set_cache_limit.rst", "python/_autosummary/mlx.core.metal.set_memory_limit.rst", "python/_autosummary/mlx.core.metal.start_capture.rst", "python/_autosummary/mlx.core.metal.stop_capture.rst", "python/_autosummary/mlx.core.min.rst", "python/_autosummary/mlx.core.minimum.rst", "python/_autosummary/mlx.core.moveaxis.rst", "python/_autosummary/mlx.core.multiply.rst", "python/_autosummary/mlx.core.nan_to_num.rst", "python/_autosummary/mlx.core.negative.rst", "python/_autosummary/mlx.core.new_stream.rst", "python/_autosummary/mlx.core.not_equal.rst", "python/_autosummary/mlx.core.ones.rst", "python/_autosummary/mlx.core.ones_like.rst", "python/_autosummary/mlx.core.outer.rst", "python/_autosummary/mlx.core.pad.rst", "python/_autosummary/mlx.core.partition.rst", "python/_autosummary/mlx.core.power.rst", "python/_autosummary/mlx.core.prod.rst", "python/_autosummary/mlx.core.put_along_axis.rst", "python/_autosummary/mlx.core.quantize.rst", "python/_autosummary/mlx.core.quantized_matmul.rst", "python/_autosummary/mlx.core.radians.rst", "python/_autosummary/mlx.core.random.bernoulli.rst", "python/_autosummary/mlx.core.random.categorical.rst", "python/_autosummary/mlx.core.random.gumbel.rst", "python/_autosummary/mlx.core.random.key.rst", "python/_autosummary/mlx.core.random.laplace.rst", "python/_autosummary/mlx.core.random.multivariate_normal.rst", "python/_autosummary/mlx.core.random.normal.rst", "python/_autosummary/mlx.core.random.permutation.rst", "python/_autosummary/mlx.core.random.randint.rst", "python/_autosummary/mlx.core.random.seed.rst", "python/_autosummary/mlx.core.random.split.rst", "python/_autosummary/mlx.core.random.truncated_normal.rst", "python/_autosummary/mlx.core.random.uniform.rst", "python/_autosummary/mlx.core.reciprocal.rst", "python/_autosummary/mlx.core.remainder.rst", "python/_autosummary/mlx.core.repeat.rst", "python/_autosummary/mlx.core.reshape.rst", "python/_autosummary/mlx.core.right_shift.rst", "python/_autosummary/mlx.core.roll.rst", "python/_autosummary/mlx.core.round.rst", "python/_autosummary/mlx.core.rsqrt.rst", "python/_autosummary/mlx.core.save.rst", "python/_autosummary/mlx.core.save_gguf.rst", "python/_autosummary/mlx.core.save_safetensors.rst", "python/_autosummary/mlx.core.savez.rst", "python/_autosummary/mlx.core.savez_compressed.rst", "python/_autosummary/mlx.core.set_default_device.rst", "python/_autosummary/mlx.core.set_default_stream.rst", "python/_autosummary/mlx.core.sigmoid.rst", "python/_autosummary/mlx.core.sign.rst", "python/_autosummary/mlx.core.sin.rst", "python/_autosummary/mlx.core.sinh.rst", "python/_autosummary/mlx.core.softmax.rst", "python/_autosummary/mlx.core.sort.rst", "python/_autosummary/mlx.core.split.rst", "python/_autosummary/mlx.core.sqrt.rst", "python/_autosummary/mlx.core.square.rst", "python/_autosummary/mlx.core.squeeze.rst", "python/_autosummary/mlx.core.stack.rst", "python/_autosummary/mlx.core.std.rst", "python/_autosummary/mlx.core.stop_gradient.rst", "python/_autosummary/mlx.core.stream.rst", "python/_autosummary/mlx.core.subtract.rst", "python/_autosummary/mlx.core.sum.rst", "python/_autosummary/mlx.core.swapaxes.rst", "python/_autosummary/mlx.core.synchronize.rst", "python/_autosummary/mlx.core.take.rst", "python/_autosummary/mlx.core.take_along_axis.rst", "python/_autosummary/mlx.core.tan.rst", "python/_autosummary/mlx.core.tanh.rst", "python/_autosummary/mlx.core.tensordot.rst", "python/_autosummary/mlx.core.tile.rst", "python/_autosummary/mlx.core.topk.rst", "python/_autosummary/mlx.core.trace.rst", "python/_autosummary/mlx.core.transpose.rst", "python/_autosummary/mlx.core.tri.rst", "python/_autosummary/mlx.core.tril.rst", "python/_autosummary/mlx.core.triu.rst", "python/_autosummary/mlx.core.value_and_grad.rst", "python/_autosummary/mlx.core.var.rst", "python/_autosummary/mlx.core.view.rst", "python/_autosummary/mlx.core.vjp.rst", "python/_autosummary/mlx.core.vmap.rst", "python/_autosummary/mlx.core.where.rst", "python/_autosummary/mlx.core.zeros.rst", "python/_autosummary/mlx.core.zeros_like.rst", "python/_autosummary/mlx.nn.quantize.rst", "python/_autosummary/mlx.nn.value_and_grad.rst", "python/_autosummary/mlx.optimizers.clip_grad_norm.rst", "python/_autosummary/mlx.utils.tree_flatten.rst", "python/_autosummary/mlx.utils.tree_map.rst", "python/_autosummary/mlx.utils.tree_map_with_path.rst", "python/_autosummary/mlx.utils.tree_reduce.rst", "python/_autosummary/mlx.utils.tree_unflatten.rst", "python/_autosummary/stream_class.rst", "python/array.rst", "python/data_types.rst", "python/devices_and_streams.rst", "python/distributed.rst", "python/fast.rst", "python/fft.rst", "python/linalg.rst", "python/metal.rst", "python/nn.rst", "python/nn/_autosummary/mlx.nn.ALiBi.rst", "python/nn/_autosummary/mlx.nn.AvgPool1d.rst", "python/nn/_autosummary/mlx.nn.AvgPool2d.rst", "python/nn/_autosummary/mlx.nn.BatchNorm.rst", "python/nn/_autosummary/mlx.nn.CELU.rst", "python/nn/_autosummary/mlx.nn.Conv1d.rst", "python/nn/_autosummary/mlx.nn.Conv2d.rst", "python/nn/_autosummary/mlx.nn.Conv3d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose1d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose2d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose3d.rst", "python/nn/_autosummary/mlx.nn.Dropout.rst", "python/nn/_autosummary/mlx.nn.Dropout2d.rst", "python/nn/_autosummary/mlx.nn.Dropout3d.rst", "python/nn/_autosummary/mlx.nn.ELU.rst", "python/nn/_autosummary/mlx.nn.Embedding.rst", "python/nn/_autosummary/mlx.nn.GELU.rst", "python/nn/_autosummary/mlx.nn.GLU.rst", "python/nn/_autosummary/mlx.nn.GRU.rst", "python/nn/_autosummary/mlx.nn.GroupNorm.rst", "python/nn/_autosummary/mlx.nn.HardShrink.rst", "python/nn/_autosummary/mlx.nn.HardTanh.rst", "python/nn/_autosummary/mlx.nn.Hardswish.rst", "python/nn/_autosummary/mlx.nn.InstanceNorm.rst", "python/nn/_autosummary/mlx.nn.LSTM.rst", "python/nn/_autosummary/mlx.nn.LayerNorm.rst", "python/nn/_autosummary/mlx.nn.LeakyReLU.rst", "python/nn/_autosummary/mlx.nn.Linear.rst", "python/nn/_autosummary/mlx.nn.LogSigmoid.rst", "python/nn/_autosummary/mlx.nn.LogSoftmax.rst", "python/nn/_autosummary/mlx.nn.MaxPool1d.rst", "python/nn/_autosummary/mlx.nn.MaxPool2d.rst", "python/nn/_autosummary/mlx.nn.Mish.rst", "python/nn/_autosummary/mlx.nn.Module.apply.rst", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules.rst", "python/nn/_autosummary/mlx.nn.Module.children.rst", "python/nn/_autosummary/mlx.nn.Module.eval.rst", "python/nn/_autosummary/mlx.nn.Module.filter_and_map.rst", "python/nn/_autosummary/mlx.nn.Module.freeze.rst", "python/nn/_autosummary/mlx.nn.Module.leaf_modules.rst", "python/nn/_autosummary/mlx.nn.Module.load_weights.rst", "python/nn/_autosummary/mlx.nn.Module.modules.rst", "python/nn/_autosummary/mlx.nn.Module.named_modules.rst", "python/nn/_autosummary/mlx.nn.Module.parameters.rst", "python/nn/_autosummary/mlx.nn.Module.save_weights.rst", "python/nn/_autosummary/mlx.nn.Module.set_dtype.rst", "python/nn/_autosummary/mlx.nn.Module.state.rst", "python/nn/_autosummary/mlx.nn.Module.train.rst", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters.rst", "python/nn/_autosummary/mlx.nn.Module.training.rst", "python/nn/_autosummary/mlx.nn.Module.unfreeze.rst", "python/nn/_autosummary/mlx.nn.Module.update.rst", "python/nn/_autosummary/mlx.nn.Module.update_modules.rst", "python/nn/_autosummary/mlx.nn.MultiHeadAttention.rst", "python/nn/_autosummary/mlx.nn.PReLU.rst", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding.rst", "python/nn/_autosummary/mlx.nn.QuantizedLinear.rst", "python/nn/_autosummary/mlx.nn.RMSNorm.rst", "python/nn/_autosummary/mlx.nn.RNN.rst", "python/nn/_autosummary/mlx.nn.ReLU.rst", "python/nn/_autosummary/mlx.nn.ReLU6.rst", "python/nn/_autosummary/mlx.nn.RoPE.rst", "python/nn/_autosummary/mlx.nn.SELU.rst", "python/nn/_autosummary/mlx.nn.Sequential.rst", "python/nn/_autosummary/mlx.nn.SiLU.rst", "python/nn/_autosummary/mlx.nn.Sigmoid.rst", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding.rst", "python/nn/_autosummary/mlx.nn.Softmax.rst", "python/nn/_autosummary/mlx.nn.Softmin.rst", "python/nn/_autosummary/mlx.nn.Softplus.rst", "python/nn/_autosummary/mlx.nn.Softshrink.rst", "python/nn/_autosummary/mlx.nn.Softsign.rst", "python/nn/_autosummary/mlx.nn.Step.rst", "python/nn/_autosummary/mlx.nn.Tanh.rst", "python/nn/_autosummary/mlx.nn.Transformer.rst", "python/nn/_autosummary/mlx.nn.Upsample.rst", "python/nn/_autosummary/mlx.nn.init.constant.rst", "python/nn/_autosummary/mlx.nn.init.glorot_normal.rst", "python/nn/_autosummary/mlx.nn.init.glorot_uniform.rst", "python/nn/_autosummary/mlx.nn.init.he_normal.rst", "python/nn/_autosummary/mlx.nn.init.he_uniform.rst", "python/nn/_autosummary/mlx.nn.init.identity.rst", "python/nn/_autosummary/mlx.nn.init.normal.rst", "python/nn/_autosummary/mlx.nn.init.uniform.rst", "python/nn/_autosummary_functions/mlx.nn.celu.rst", "python/nn/_autosummary_functions/mlx.nn.elu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_approx.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx.rst", "python/nn/_autosummary_functions/mlx.nn.glu.rst", "python/nn/_autosummary_functions/mlx.nn.hard_shrink.rst", "python/nn/_autosummary_functions/mlx.nn.hard_tanh.rst", "python/nn/_autosummary_functions/mlx.nn.hardswish.rst", "python/nn/_autosummary_functions/mlx.nn.leaky_relu.rst", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.log_softmax.rst", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss.rst", "python/nn/_autosummary_functions/mlx.nn.mish.rst", "python/nn/_autosummary_functions/mlx.nn.prelu.rst", "python/nn/_autosummary_functions/mlx.nn.relu.rst", "python/nn/_autosummary_functions/mlx.nn.relu6.rst", "python/nn/_autosummary_functions/mlx.nn.selu.rst", "python/nn/_autosummary_functions/mlx.nn.sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.silu.rst", "python/nn/_autosummary_functions/mlx.nn.softmax.rst", "python/nn/_autosummary_functions/mlx.nn.softmin.rst", "python/nn/_autosummary_functions/mlx.nn.softplus.rst", "python/nn/_autosummary_functions/mlx.nn.softshrink.rst", "python/nn/_autosummary_functions/mlx.nn.step.rst", "python/nn/_autosummary_functions/mlx.nn.tanh.rst", "python/nn/functions.rst", "python/nn/init.rst", "python/nn/layers.rst", "python/nn/losses.rst", "python/nn/module.rst", "python/ops.rst", "python/optimizers.rst", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta.rst", "python/optimizers/_autosummary/mlx.optimizers.Adafactor.rst", "python/optimizers/_autosummary/mlx.optimizers.Adagrad.rst", "python/optimizers/_autosummary/mlx.optimizers.Adam.rst", "python/optimizers/_autosummary/mlx.optimizers.AdamW.rst", "python/optimizers/_autosummary/mlx.optimizers.Adamax.rst", "python/optimizers/_autosummary/mlx.optimizers.Lion.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update.rst", "python/optimizers/_autosummary/mlx.optimizers.RMSprop.rst", "python/optimizers/_autosummary/mlx.optimizers.SGD.rst", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.join_schedules.rst", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule.rst", "python/optimizers/_autosummary/mlx.optimizers.step_decay.rst", "python/optimizers/common_optimizers.rst", "python/optimizers/optimizer.rst", "python/optimizers/schedulers.rst", "python/random.rst", "python/transforms.rst", "python/tree_utils.rst", "usage/compile.rst", "usage/distributed.rst", "usage/function_transforms.rst", "usage/indexing.rst", "usage/lazy_evaluation.rst", "usage/numpy.rst", "usage/quick_start.rst", "usage/saving_and_loading.rst", "usage/unified_memory.rst", "usage/using_streams.rst"], "titles": ["Operations", "Custom Metal Kernels", "Custom Extensions in MLX", "Metal Debugger", "Linear Regression", "LLM inference", "Multi-Layer Perceptron", "MLX", "Build and Install", "mlx.core.Device", "mlx.core.Dtype", "mlx.core.DtypeCategory", "mlx.core.abs", "mlx.core.add", "mlx.core.addmm", "mlx.core.all", "mlx.core.allclose", "mlx.core.any", "mlx.core.arange", "mlx.core.arccos", "mlx.core.arccosh", "mlx.core.arcsin", "mlx.core.arcsinh", "mlx.core.arctan", "mlx.core.arctan2", "mlx.core.arctanh", "mlx.core.argmax", "mlx.core.argmin", "mlx.core.argpartition", "mlx.core.argsort", "mlx.core.array", "mlx.core.array.T", "mlx.core.array.abs", "mlx.core.array.all", "mlx.core.array.any", "mlx.core.array.argmax", "mlx.core.array.argmin", "mlx.core.array.astype", "mlx.core.array.at", "mlx.core.array.conj", "mlx.core.array.cos", "mlx.core.array.cummax", "mlx.core.array.cummin", "mlx.core.array.cumprod", "mlx.core.array.cumsum", "mlx.core.array.diag", "mlx.core.array.diagonal", "mlx.core.array.dtype", "mlx.core.array.exp", "mlx.core.array.flatten", "mlx.core.array.item", "mlx.core.array.itemsize", "mlx.core.array.log", "mlx.core.array.log10", "mlx.core.array.log1p", "mlx.core.array.log2", "mlx.core.array.logsumexp", "mlx.core.array.max", "mlx.core.array.mean", "mlx.core.array.min", "mlx.core.array.moveaxis", "mlx.core.array.nbytes", "mlx.core.array.ndim", "mlx.core.array.prod", "mlx.core.array.reciprocal", "mlx.core.array.reshape", "mlx.core.array.round", "mlx.core.array.rsqrt", "mlx.core.array.shape", "mlx.core.array.sin", "mlx.core.array.size", "mlx.core.array.split", "mlx.core.array.sqrt", "mlx.core.array.square", "mlx.core.array.squeeze", "mlx.core.array.std", "mlx.core.array.sum", "mlx.core.array.swapaxes", "mlx.core.array.tolist", "mlx.core.array.transpose", "mlx.core.array.var", "mlx.core.array.view", "mlx.core.array_equal", "mlx.core.as_strided", "mlx.core.atleast_1d", "mlx.core.atleast_2d", "mlx.core.atleast_3d", "mlx.core.bitwise_and", "mlx.core.bitwise_or", "mlx.core.bitwise_xor", "mlx.core.block_masked_mm", "mlx.core.broadcast_to", "mlx.core.ceil", "mlx.core.clip", "mlx.core.compile", "mlx.core.concatenate", "mlx.core.conj", "mlx.core.conjugate", "mlx.core.conv1d", "mlx.core.conv2d", "mlx.core.conv3d", "mlx.core.conv_general", "mlx.core.conv_transpose1d", "mlx.core.conv_transpose2d", "mlx.core.conv_transpose3d", "mlx.core.convolve", "mlx.core.cos", "mlx.core.cosh", "mlx.core.cummax", "mlx.core.cummin", "mlx.core.cumprod", "mlx.core.cumsum", "mlx.core.custom_function", "mlx.core.default_device", "mlx.core.default_stream", "mlx.core.degrees", "mlx.core.dequantize", "mlx.core.diag", "mlx.core.diagonal", "mlx.core.disable_compile", "mlx.core.distributed.Group", "mlx.core.distributed.all_gather", "mlx.core.distributed.all_sum", "mlx.core.distributed.init", "mlx.core.distributed.is_available", "mlx.core.distributed.recv", "mlx.core.distributed.recv_like", "mlx.core.distributed.send", "mlx.core.divide", "mlx.core.divmod", "mlx.core.einsum", "mlx.core.einsum_path", "mlx.core.enable_compile", "mlx.core.equal", "mlx.core.erf", "mlx.core.erfinv", "mlx.core.eval", "mlx.core.exp", "mlx.core.expand_dims", "mlx.core.expm1", "mlx.core.eye", "mlx.core.fast.affine_quantize", "mlx.core.fast.layer_norm", "mlx.core.fast.metal_kernel", "mlx.core.fast.rms_norm", "mlx.core.fast.rope", "mlx.core.fast.scaled_dot_product_attention", "mlx.core.fft.fft", "mlx.core.fft.fft2", "mlx.core.fft.fftn", "mlx.core.fft.ifft", "mlx.core.fft.ifft2", "mlx.core.fft.ifftn", "mlx.core.fft.irfft", "mlx.core.fft.irfft2", "mlx.core.fft.irfftn", "mlx.core.fft.rfft", "mlx.core.fft.rfft2", "mlx.core.fft.rfftn", "mlx.core.flatten", "mlx.core.floor", "mlx.core.floor_divide", "mlx.core.full", "mlx.core.gather_mm", "mlx.core.gather_qmm", "mlx.core.grad", "mlx.core.greater", "mlx.core.greater_equal", "mlx.core.hadamard_transform", "mlx.core.identity", "mlx.core.inner", "mlx.core.isclose", "mlx.core.isfinite", "mlx.core.isinf", "mlx.core.isnan", "mlx.core.isneginf", "mlx.core.isposinf", "mlx.core.issubdtype", "mlx.core.jvp", "mlx.core.left_shift", "mlx.core.less", "mlx.core.less_equal", "mlx.core.linalg.cholesky", "mlx.core.linalg.cholesky_inv", "mlx.core.linalg.cross", "mlx.core.linalg.inv", "mlx.core.linalg.norm", "mlx.core.linalg.qr", "mlx.core.linalg.svd", "mlx.core.linalg.tri_inv", "mlx.core.linspace", "mlx.core.load", "mlx.core.log", "mlx.core.log10", "mlx.core.log1p", "mlx.core.log2", "mlx.core.logaddexp", "mlx.core.logical_and", "mlx.core.logical_not", "mlx.core.logical_or", "mlx.core.logsumexp", "mlx.core.matmul", "mlx.core.max", "mlx.core.maximum", "mlx.core.mean", "mlx.core.meshgrid", "mlx.core.metal.clear_cache", "mlx.core.metal.device_info", "mlx.core.metal.get_active_memory", "mlx.core.metal.get_cache_memory", "mlx.core.metal.get_peak_memory", "mlx.core.metal.is_available", "mlx.core.metal.reset_peak_memory", "mlx.core.metal.set_cache_limit", "mlx.core.metal.set_memory_limit", "mlx.core.metal.start_capture", "mlx.core.metal.stop_capture", "mlx.core.min", "mlx.core.minimum", "mlx.core.moveaxis", "mlx.core.multiply", "mlx.core.nan_to_num", "mlx.core.negative", "mlx.core.new_stream", "mlx.core.not_equal", "mlx.core.ones", "mlx.core.ones_like", "mlx.core.outer", "mlx.core.pad", "mlx.core.partition", "mlx.core.power", "mlx.core.prod", "mlx.core.put_along_axis", "mlx.core.quantize", "mlx.core.quantized_matmul", "mlx.core.radians", "mlx.core.random.bernoulli", "mlx.core.random.categorical", "mlx.core.random.gumbel", "mlx.core.random.key", "mlx.core.random.laplace", "mlx.core.random.multivariate_normal", "mlx.core.random.normal", "mlx.core.random.permutation", "mlx.core.random.randint", "mlx.core.random.seed", "mlx.core.random.split", "mlx.core.random.truncated_normal", "mlx.core.random.uniform", "mlx.core.reciprocal", "mlx.core.remainder", "mlx.core.repeat", "mlx.core.reshape", "mlx.core.right_shift", "mlx.core.roll", "mlx.core.round", "mlx.core.rsqrt", "mlx.core.save", "mlx.core.save_gguf", "mlx.core.save_safetensors", "mlx.core.savez", "mlx.core.savez_compressed", "mlx.core.set_default_device", "mlx.core.set_default_stream", "mlx.core.sigmoid", "mlx.core.sign", "mlx.core.sin", "mlx.core.sinh", "mlx.core.softmax", "mlx.core.sort", "mlx.core.split", "mlx.core.sqrt", "mlx.core.square", "mlx.core.squeeze", "mlx.core.stack", "mlx.core.std", "mlx.core.stop_gradient", "mlx.core.stream", "mlx.core.subtract", "mlx.core.sum", "mlx.core.swapaxes", "mlx.core.synchronize", "mlx.core.take", "mlx.core.take_along_axis", "mlx.core.tan", "mlx.core.tanh", "mlx.core.tensordot", "mlx.core.tile", "mlx.core.topk", "mlx.core.trace", "mlx.core.transpose", "mlx.core.tri", "mlx.core.tril", "mlx.core.triu", "mlx.core.value_and_grad", "mlx.core.var", "mlx.core.view", "mlx.core.vjp", "mlx.core.vmap", "mlx.core.where", "mlx.core.zeros", "mlx.core.zeros_like", "mlx.nn.quantize", "mlx.nn.value_and_grad", "mlx.optimizers.clip_grad_norm", "mlx.utils.tree_flatten", "mlx.utils.tree_map", "mlx.utils.tree_map_with_path", "mlx.utils.tree_reduce", "mlx.utils.tree_unflatten", "mlx.core.Stream", "Array", "Data Types", "Devices and Streams", "Distributed Communication", "Fast", "FFT", "Linear Algebra", "Metal", "Neural Networks", "mlx.nn.ALiBi", "mlx.nn.AvgPool1d", "mlx.nn.AvgPool2d", "mlx.nn.BatchNorm", "mlx.nn.CELU", "mlx.nn.Conv1d", "mlx.nn.Conv2d", "mlx.nn.Conv3d", "mlx.nn.ConvTranspose1d", "mlx.nn.ConvTranspose2d", "mlx.nn.ConvTranspose3d", "mlx.nn.Dropout", "mlx.nn.Dropout2d", "mlx.nn.Dropout3d", "mlx.nn.ELU", "mlx.nn.Embedding", "mlx.nn.GELU", "mlx.nn.GLU", "mlx.nn.GRU", "mlx.nn.GroupNorm", "mlx.nn.HardShrink", "mlx.nn.HardTanh", "mlx.nn.Hardswish", "mlx.nn.InstanceNorm", "mlx.nn.LSTM", "mlx.nn.LayerNorm", "mlx.nn.LeakyReLU", "mlx.nn.Linear", "mlx.nn.LogSigmoid", "mlx.nn.LogSoftmax", "mlx.nn.MaxPool1d", "mlx.nn.MaxPool2d", "mlx.nn.Mish", "mlx.nn.Module.apply", "mlx.nn.Module.apply_to_modules", "mlx.nn.Module.children", "mlx.nn.Module.eval", "mlx.nn.Module.filter_and_map", "mlx.nn.Module.freeze", "mlx.nn.Module.leaf_modules", "mlx.nn.Module.load_weights", "mlx.nn.Module.modules", "mlx.nn.Module.named_modules", "mlx.nn.Module.parameters", "mlx.nn.Module.save_weights", "mlx.nn.Module.set_dtype", "mlx.nn.Module.state", "mlx.nn.Module.train", "mlx.nn.Module.trainable_parameters", "mlx.nn.Module.training", "mlx.nn.Module.unfreeze", "mlx.nn.Module.update", "mlx.nn.Module.update_modules", "mlx.nn.MultiHeadAttention", "mlx.nn.PReLU", "mlx.nn.QuantizedEmbedding", "mlx.nn.QuantizedLinear", "mlx.nn.RMSNorm", "mlx.nn.RNN", "mlx.nn.ReLU", "mlx.nn.ReLU6", "mlx.nn.RoPE", "mlx.nn.SELU", "mlx.nn.Sequential", "mlx.nn.SiLU", "mlx.nn.Sigmoid", "mlx.nn.SinusoidalPositionalEncoding", "mlx.nn.Softmax", "mlx.nn.Softmin", "mlx.nn.Softplus", "mlx.nn.Softshrink", "mlx.nn.Softsign", "mlx.nn.Step", "mlx.nn.Tanh", "mlx.nn.Transformer", "mlx.nn.Upsample", "mlx.nn.init.constant", "mlx.nn.init.glorot_normal", "mlx.nn.init.glorot_uniform", "mlx.nn.init.he_normal", "mlx.nn.init.he_uniform", "mlx.nn.init.identity", "mlx.nn.init.normal", "mlx.nn.init.uniform", "mlx.nn.celu", "mlx.nn.elu", "mlx.nn.gelu", "mlx.nn.gelu_approx", "mlx.nn.gelu_fast_approx", "mlx.nn.glu", "mlx.nn.hard_shrink", "mlx.nn.hard_tanh", "mlx.nn.hardswish", "mlx.nn.leaky_relu", "mlx.nn.log_sigmoid", "mlx.nn.log_softmax", "mlx.nn.losses.binary_cross_entropy", "mlx.nn.losses.cosine_similarity_loss", "mlx.nn.losses.cross_entropy", "mlx.nn.losses.gaussian_nll_loss", "mlx.nn.losses.hinge_loss", "mlx.nn.losses.huber_loss", "mlx.nn.losses.kl_div_loss", "mlx.nn.losses.l1_loss", "mlx.nn.losses.log_cosh_loss", "mlx.nn.losses.margin_ranking_loss", "mlx.nn.losses.mse_loss", "mlx.nn.losses.nll_loss", "mlx.nn.losses.smooth_l1_loss", "mlx.nn.losses.triplet_loss", "mlx.nn.mish", "mlx.nn.prelu", "mlx.nn.relu", "mlx.nn.relu6", "mlx.nn.selu", "mlx.nn.sigmoid", "mlx.nn.silu", "mlx.nn.softmax", "mlx.nn.softmin", "mlx.nn.softplus", "mlx.nn.softshrink", "mlx.nn.step", "mlx.nn.tanh", "Functions", "Initializers", "Layers", "Loss Functions", "Module", "Operations", "Optimizers", "mlx.optimizers.AdaDelta", "mlx.optimizers.Adafactor", "mlx.optimizers.Adagrad", "mlx.optimizers.Adam", "mlx.optimizers.AdamW", "mlx.optimizers.Adamax", "mlx.optimizers.Lion", "mlx.optimizers.Optimizer.apply_gradients", "mlx.optimizers.Optimizer.init", "mlx.optimizers.Optimizer.state", "mlx.optimizers.Optimizer.update", "mlx.optimizers.RMSprop", "mlx.optimizers.SGD", "mlx.optimizers.cosine_decay", "mlx.optimizers.exponential_decay", "mlx.optimizers.join_schedules", "mlx.optimizers.linear_schedule", "mlx.optimizers.step_decay", "Common Optimizers", "Optimizer", "Schedulers", "Random", "Transforms", "Tree Utils", "Compilation", "Distributed Communication", "Function Transforms", "Indexing Arrays", "Lazy Evaluation", "Conversion to NumPy and Other Frameworks", "Quick Start Guide", "Saving and Loading Arrays", "Unified Memory", "Using Streams"], "terms": {"arrai": [0, 1, 2, 5, 6, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 121, 122, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 319, 323, 344, 353, 360, 363, 368, 374, 395, 396, 397, 398, 399, 400, 401, 402, 403, 409, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 441, 444, 447, 450, 451, 452, 453, 454, 455, 456, 461, 462, 463, 464, 465, 466, 467, 474, 475, 476, 478, 479, 480, 482], "arang": [0, 1, 186, 243, 312, 395, 477, 479], "doubl": [0, 5], "start": [0, 1, 2, 4, 5, 7, 8, 18, 145, 190, 215, 270, 308, 474, 477, 482], "stop": [0, 2, 5, 18, 190, 216, 276, 476, 477], "step": [0, 3, 5, 6, 18, 319, 338, 344, 378, 451, 458, 463, 465, 466, 467, 474, 475], "dtype": [0, 1, 2, 5, 11, 18, 30, 37, 38, 78, 81, 125, 126, 140, 143, 159, 162, 169, 177, 186, 187, 190, 225, 238, 240, 241, 242, 244, 247, 248, 289, 291, 296, 300, 312, 365, 395, 396, 397, 398, 399, 400, 401, 402, 403, 416, 418, 425, 463, 464, 465, 466, 467, 474, 475, 476, 477, 479, 480, 481], "streamordevic": [0, 2], "": [0, 1, 2, 4, 5, 6, 47, 51, 62, 94, 114, 116, 141, 148, 149, 151, 152, 154, 155, 157, 158, 165, 183, 186, 188, 191, 204, 227, 233, 237, 255, 258, 259, 275, 277, 294, 295, 296, 298, 303, 319, 322, 338, 344, 351, 357, 358, 360, 364, 365, 366, 370, 378, 449, 458, 459, 471, 474, 476, 478, 479, 480, 481, 482], "A": [0, 2, 5, 7, 8, 9, 68, 82, 94, 142, 143, 144, 146, 165, 177, 178, 183, 186, 187, 188, 191, 200, 201, 202, 207, 217, 233, 236, 237, 238, 240, 241, 242, 243, 244, 247, 248, 270, 274, 277, 294, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 319, 323, 332, 338, 339, 343, 345, 357, 361, 362, 365, 371, 372, 377, 383, 386, 394, 397, 398, 400, 408, 429, 430, 447, 449, 453, 455, 457, 458, 460, 465, 474, 475, 476, 478, 479], "1d": [0, 98, 102, 105, 258, 283], "number": [0, 2, 11, 18, 61, 70, 94, 99, 100, 101, 103, 104, 116, 140, 141, 164, 165, 169, 178, 190, 221, 228, 233, 234, 237, 240, 242, 246, 248, 251, 254, 255, 286, 287, 291, 294, 297, 298, 302, 319, 323, 325, 326, 327, 328, 329, 330, 332, 333, 339, 343, 373, 374, 394, 395, 397, 398, 399, 400, 463, 465, 466, 471, 474, 476, 483], "option": [0, 3, 5, 14, 15, 17, 18, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 90, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 116, 117, 118, 121, 122, 123, 125, 126, 127, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 169, 175, 176, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 200, 202, 204, 205, 214, 217, 221, 225, 228, 229, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 248, 251, 252, 254, 268, 269, 270, 273, 274, 275, 279, 281, 282, 286, 288, 289, 290, 291, 292, 293, 294, 295, 298, 300, 302, 305, 306, 307, 308, 321, 322, 323, 325, 326, 327, 328, 329, 330, 338, 344, 347, 350, 351, 353, 357, 358, 360, 365, 370, 373, 375, 376, 378, 381, 386, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 450, 451, 452, 453, 454, 455, 456, 458, 461, 462, 463, 471, 474, 481, 483], "int": [0, 1, 2, 5, 6, 9, 15, 17, 18, 26, 27, 28, 29, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 49, 56, 57, 58, 59, 60, 63, 66, 68, 71, 74, 75, 76, 77, 78, 80, 83, 90, 91, 95, 98, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 116, 117, 118, 125, 126, 127, 131, 138, 140, 141, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 164, 165, 169, 177, 184, 186, 190, 200, 202, 204, 207, 208, 209, 210, 213, 214, 217, 219, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 254, 255, 268, 269, 270, 273, 274, 275, 279, 280, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 300, 302, 310, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 335, 337, 338, 339, 343, 344, 345, 347, 350, 351, 373, 375, 376, 377, 378, 381, 386, 394, 409, 417, 418, 422, 427, 429, 447, 463, 465, 466, 467], "linspac": 0, "num": [0, 5, 190, 246], "50": [0, 190], "float32": [0, 1, 2, 11, 18, 140, 143, 146, 168, 169, 177, 186, 187, 190, 225, 238, 240, 241, 242, 247, 248, 291, 300, 312, 395, 396, 397, 398, 399, 400, 401, 402, 403, 416, 418, 425, 463, 464, 465, 466, 467, 474, 475, 476, 477, 478, 479, 480, 481], "evenli": [0, 190], "space": [0, 2, 190, 416, 427], "rang": [0, 2, 3, 4, 5, 6, 8, 18, 159, 163, 190, 398, 400, 407, 408, 449, 463, 464, 465, 466, 467, 471, 474, 476, 478, 482], "astyp": [0, 1, 2, 5, 143, 353, 479], "convert": [0, 1, 2, 78, 84, 85, 86, 115, 159, 235, 375, 376, 478, 479, 480], "an": [0, 1, 2, 3, 5, 6, 8, 10, 15, 17, 30, 84, 85, 86, 91, 98, 99, 100, 101, 102, 103, 104, 120, 125, 126, 127, 136, 140, 142, 146, 159, 162, 169, 172, 182, 186, 191, 214, 219, 225, 226, 228, 231, 232, 233, 234, 243, 251, 252, 254, 255, 270, 273, 280, 282, 283, 286, 287, 291, 298, 300, 301, 305, 306, 307, 308, 319, 321, 322, 331, 336, 339, 344, 345, 347, 350, 351, 353, 373, 374, 376, 378, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 431, 444, 449, 450, 460, 464, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "given": [0, 2, 8, 15, 17, 28, 38, 83, 91, 93, 95, 108, 109, 110, 111, 116, 118, 131, 136, 138, 141, 147, 148, 149, 150, 151, 152, 156, 157, 158, 162, 163, 186, 200, 202, 204, 213, 217, 221, 223, 231, 241, 243, 244, 254, 255, 263, 268, 270, 275, 279, 281, 287, 288, 289, 291, 292, 293, 295, 310, 321, 322, 331, 350, 351, 357, 373, 417, 419, 425], "data": [0, 2, 6, 7, 10, 18, 125, 140, 156, 157, 162, 169, 190, 221, 225, 247, 289, 291, 296, 300, 333, 396, 397, 398, 399, 400, 401, 402, 403, 474, 475, 477, 479], "type": [0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 37, 68, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 213, 214, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 308, 319, 365, 394, 396, 397, 398, 399, 400, 401, 402, 403, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 474, 477], "as_strid": 0, "std": [0, 2, 402], "vector": [0, 2, 4, 7, 170, 178, 186, 282, 297, 298, 335, 418, 480], "shape": [0, 2, 3, 5, 6, 65, 82, 83, 90, 91, 94, 98, 99, 100, 101, 102, 103, 104, 118, 121, 125, 126, 143, 146, 147, 150, 153, 156, 157, 158, 162, 163, 168, 178, 185, 189, 201, 225, 226, 236, 237, 238, 240, 241, 242, 244, 247, 248, 252, 254, 296, 297, 299, 300, 301, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 338, 343, 344, 347, 350, 351, 360, 378, 396, 397, 398, 399, 400, 401, 402, 403, 418, 429, 449, 474, 476, 477, 480, 482], "size_t": [0, 2], "stride": [0, 2, 83, 98, 99, 100, 101, 102, 103, 104, 321, 322, 325, 326, 327, 328, 329, 330, 350, 351, 381, 477], "offset": [0, 1, 2, 5, 46, 83, 118, 142, 145, 289], "creat": [0, 2, 5, 8, 83, 123, 140, 169, 277, 319, 447, 449, 465, 474, 477, 479], "view": [0, 3, 83, 479], "copi": [0, 1, 2, 5, 7, 229, 269, 479], "anoth": [0, 93, 177, 201, 278, 299, 312, 319, 353, 474, 476, 477, 482], "full": [0, 1, 2, 6, 65, 79, 105, 268, 371, 372, 419, 474, 475, 478], "val": [0, 30, 162], "fill": [0, 2, 162, 226, 291, 301, 396, 397, 398, 399, 400, 402, 403], "valu": [0, 1, 4, 5, 11, 12, 16, 18, 26, 27, 50, 78, 82, 93, 140, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 171, 184, 186, 188, 190, 207, 221, 228, 232, 236, 237, 238, 240, 241, 242, 244, 247, 248, 254, 258, 282, 283, 294, 298, 303, 305, 306, 307, 308, 312, 322, 324, 331, 332, 333, 334, 340, 343, 347, 351, 357, 373, 374, 390, 392, 394, 396, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 441, 447, 451, 454, 463, 464, 466, 467, 476], "templat": [0, 1, 2, 143], "typenam": [0, 1, 2], "t": [0, 1, 2, 5, 8, 134, 143, 146, 164, 182, 183, 234, 294, 319, 321, 338, 344, 350, 378, 450, 451, 452, 453, 454, 455, 456, 461, 462, 474, 476, 482], "zero": [0, 140, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 184, 205, 212, 291, 292, 293, 301, 319, 321, 322, 331, 332, 333, 360, 396, 397, 398, 399, 400, 401, 402, 403, 444, 449, 451, 477], "const": [0, 1, 2, 419], "inlin": 0, "zeros_lik": 0, "ones": [0, 2, 5, 226, 260, 291, 371, 372, 449, 475, 477], "ones_lik": 0, "ey": [0, 5, 185, 189], "n": [0, 1, 2, 5, 30, 90, 98, 99, 100, 101, 102, 103, 104, 140, 147, 149, 150, 152, 153, 156, 158, 168, 169, 241, 275, 291, 295, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 338, 344, 350, 351, 378, 395, 424, 429, 475], "m": [0, 2, 5, 8, 90, 140, 163, 168, 186, 291, 321, 322, 350, 351, 450, 474], "k": [0, 5, 45, 90, 117, 140, 146, 163, 168, 288, 291, 292, 293, 321, 347, 350, 358], "specifi": [0, 2, 18, 37, 99, 100, 101, 103, 104, 118, 154, 155, 162, 165, 184, 186, 190, 219, 225, 232, 237, 251, 280, 282, 283, 286, 289, 290, 294, 298, 300, 323, 392, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 441, 475, 476, 482], "diagon": [0, 45, 117, 140, 289, 291, 292, 293], "everywher": 0, "els": [0, 2, 5, 319, 358, 475, 478], "ident": [0, 112, 140, 276, 319, 367], "squar": [0, 4, 5, 144, 169, 185, 189, 256, 271, 294, 306, 319, 377, 426, 428, 450, 451, 453, 454, 455, 476, 479], "matrix": [0, 4, 14, 45, 90, 116, 117, 140, 141, 163, 164, 168, 169, 182, 183, 185, 186, 187, 188, 189, 201, 205, 233, 234, 241, 375, 376, 401, 444], "major": [0, 2], "tri": 0, "tril": 0, "x": [0, 1, 2, 4, 5, 6, 38, 90, 112, 121, 122, 126, 127, 134, 139, 142, 143, 144, 164, 168, 169, 186, 234, 238, 243, 255, 260, 264, 292, 293, 299, 306, 308, 319, 321, 322, 323, 324, 334, 336, 337, 339, 343, 345, 346, 347, 350, 351, 352, 353, 374, 377, 379, 385, 386, 392, 395, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 447, 449, 456, 474, 475, 476, 477, 478, 479, 480, 482], "0": [0, 1, 2, 4, 5, 6, 8, 9, 14, 18, 38, 45, 46, 49, 66, 71, 75, 80, 83, 95, 98, 99, 100, 101, 102, 103, 104, 117, 118, 140, 143, 146, 159, 163, 165, 185, 186, 187, 189, 206, 213, 221, 228, 236, 240, 242, 243, 248, 251, 255, 270, 274, 275, 289, 291, 292, 293, 294, 295, 298, 304, 305, 307, 308, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 339, 340, 343, 345, 346, 350, 351, 374, 379, 381, 386, 390, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 410, 411, 412, 413, 416, 418, 420, 421, 425, 428, 429, 431, 432, 433, 434, 440, 441, 444, 447, 450, 451, 453, 454, 455, 456, 458, 461, 462, 463, 464, 465, 466, 467, 471, 474, 475, 476, 477, 478, 479, 480, 481], "triu": 0, "reshap": [0, 5, 186, 395, 477], "flatten": [0, 28, 29, 108, 109, 110, 111, 186, 227, 229, 232, 251, 254, 269, 282, 283, 288, 305], "start_axi": [0, 49, 159], "end_axi": [0, 49, 159], "1": [0, 1, 2, 3, 5, 6, 14, 18, 28, 29, 38, 46, 49, 98, 99, 100, 101, 102, 103, 104, 117, 118, 139, 143, 146, 147, 148, 150, 151, 153, 154, 155, 156, 157, 158, 159, 168, 170, 177, 183, 184, 186, 187, 201, 205, 214, 227, 229, 233, 237, 240, 241, 242, 248, 264, 269, 282, 288, 289, 294, 304, 307, 308, 312, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 343, 344, 345, 347, 350, 351, 374, 377, 378, 381, 385, 386, 392, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 427, 428, 429, 434, 435, 437, 438, 439, 441, 444, 447, 449, 450, 451, 452, 453, 454, 455, 456, 458, 461, 462, 463, 464, 465, 466, 467, 474, 475, 476, 477, 479, 480, 481, 482], "dimens": [0, 2, 5, 15, 17, 26, 27, 62, 68, 78, 84, 85, 86, 94, 99, 100, 101, 103, 104, 118, 138, 145, 154, 155, 157, 158, 159, 163, 164, 170, 182, 183, 185, 186, 187, 188, 189, 200, 201, 202, 204, 217, 231, 232, 233, 237, 246, 275, 279, 283, 286, 290, 295, 323, 325, 326, 327, 328, 329, 330, 332, 333, 337, 338, 339, 343, 344, 345, 373, 377, 378, 381, 394, 395, 409, 418, 474, 476], "hadamard_transform": 0, "float": [0, 1, 2, 11, 14, 16, 18, 78, 142, 143, 144, 145, 146, 161, 162, 168, 171, 177, 186, 221, 234, 236, 240, 242, 304, 312, 323, 331, 332, 333, 339, 343, 345, 353, 365, 377, 381, 386, 392, 394, 395, 396, 397, 398, 399, 400, 402, 403, 417, 418, 419, 421, 425, 428, 429, 440, 441, 450, 451, 452, 453, 454, 455, 456, 461, 462, 463, 464, 466, 467], "scale": [0, 2, 5, 14, 116, 141, 142, 144, 145, 146, 164, 168, 233, 234, 240, 242, 304, 332, 333, 345, 373, 381, 382, 386, 395, 434, 451], "nullopt": 0, "multipli": [0, 2, 38, 164, 233, 234, 331, 386, 395], "hadamard": [0, 168], "correspond": [0, 2, 15, 17, 78, 93, 116, 118, 141, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 200, 202, 217, 231, 279, 286, 298, 306, 476], "size": [0, 1, 2, 5, 6, 51, 68, 90, 99, 100, 103, 104, 116, 138, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 164, 168, 169, 177, 184, 186, 209, 214, 233, 234, 237, 252, 270, 273, 296, 302, 319, 321, 322, 325, 326, 327, 328, 329, 330, 335, 343, 350, 351, 375, 376, 395, 451, 475, 478, 479], "squeez": [0, 395, 474], "ax": [0, 2, 15, 17, 26, 27, 79, 112, 138, 148, 149, 151, 152, 154, 155, 157, 158, 159, 170, 186, 200, 202, 204, 217, 228, 231, 254, 268, 273, 275, 279, 280, 286, 290, 295, 476], "remov": [0, 118, 201, 237, 273, 418], "singleton": [0, 15, 17, 26, 27, 123, 200, 201, 202, 204, 217, 231, 275, 279, 295], "axi": [0, 2, 5, 6, 15, 17, 26, 27, 28, 29, 33, 34, 35, 36, 41, 42, 43, 44, 56, 57, 58, 59, 63, 71, 74, 75, 76, 80, 95, 108, 109, 110, 111, 118, 121, 138, 142, 144, 147, 150, 153, 154, 155, 156, 157, 158, 159, 168, 184, 186, 200, 202, 204, 217, 219, 228, 229, 231, 232, 237, 243, 251, 254, 268, 269, 270, 273, 274, 275, 279, 280, 282, 283, 287, 288, 289, 290, 295, 296, 298, 321, 322, 337, 350, 351, 378, 409, 415, 417, 418, 422, 427, 429, 437, 438, 477], "all": [0, 1, 2, 3, 6, 8, 16, 28, 38, 84, 85, 86, 94, 99, 100, 101, 103, 104, 112, 121, 122, 123, 140, 149, 152, 155, 158, 163, 164, 188, 201, 228, 229, 254, 273, 302, 319, 353, 354, 358, 361, 362, 363, 368, 370, 373, 386, 394, 395, 444, 447, 469, 471, 474, 477, 478, 480, 483], "expand_dim": 0, "add": [0, 1, 2, 3, 5, 14, 38, 138, 196, 228, 233, 325, 326, 327, 328, 329, 330, 476, 482], "slice": [0, 477], "each": [0, 1, 2, 68, 116, 136, 141, 145, 164, 177, 182, 183, 185, 188, 189, 201, 205, 228, 233, 234, 237, 251, 260, 261, 270, 287, 290, 296, 298, 299, 332, 333, 335, 338, 339, 344, 378, 381, 394, 416, 418, 471, 474, 475, 478], "slice_upd": 0, "src": [0, 125, 126], "updat": [0, 1, 2, 4, 5, 6, 38, 94, 302, 306, 308, 323, 353, 354, 360, 365, 366, 367, 372, 449, 451, 454, 456, 457, 458, 462, 463, 464, 465, 466, 467, 474, 475, 478], "from": [0, 1, 2, 5, 6, 7, 83, 115, 116, 118, 121, 122, 125, 126, 127, 141, 143, 154, 155, 157, 158, 162, 163, 168, 186, 191, 201, 205, 210, 213, 226, 233, 235, 236, 237, 238, 239, 240, 244, 247, 260, 273, 276, 278, 282, 283, 288, 289, 299, 301, 305, 306, 307, 308, 309, 319, 347, 358, 360, 373, 397, 398, 399, 400, 402, 403, 419, 428, 444, 449, 473, 474, 475, 476, 478, 479, 480, 481, 482], "sourc": [0, 1, 2, 3, 60, 125, 126, 143, 219, 290, 475], "split": [0, 337, 339, 409], "num_split": 0, "sub": [0, 6, 118, 246, 289, 302], "along": [0, 2, 26, 27, 94, 95, 108, 109, 110, 111, 121, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 168, 184, 186, 232, 243, 251, 254, 268, 270, 274, 282, 283, 286, 287, 288, 289, 296, 319, 337, 378, 409], "indic": [0, 2, 16, 26, 27, 28, 29, 38, 163, 164, 165, 171, 172, 173, 174, 175, 176, 177, 188, 232, 270, 282, 283, 294, 367, 369, 418, 425, 465, 477], "meshgrid": 0, "bool": [0, 1, 2, 15, 16, 17, 26, 27, 33, 34, 35, 36, 41, 42, 43, 44, 56, 57, 58, 59, 63, 75, 76, 78, 80, 82, 94, 101, 108, 109, 110, 111, 123, 124, 143, 145, 164, 171, 177, 182, 183, 186, 189, 191, 200, 202, 204, 205, 211, 214, 217, 231, 234, 275, 279, 295, 323, 325, 326, 327, 328, 329, 330, 338, 339, 343, 344, 345, 347, 353, 357, 358, 360, 365, 367, 370, 373, 376, 378, 381, 386, 394, 395, 416, 419, 451, 462], "spars": [0, 205], "fals": [0, 1, 2, 5, 15, 16, 17, 26, 27, 33, 34, 35, 36, 41, 42, 43, 44, 56, 57, 58, 59, 63, 75, 76, 80, 82, 94, 101, 108, 109, 110, 111, 123, 143, 171, 177, 182, 183, 186, 189, 191, 200, 202, 204, 205, 214, 217, 231, 275, 279, 295, 299, 302, 305, 306, 307, 308, 312, 339, 343, 345, 347, 358, 360, 370, 373, 376, 381, 386, 394, 395, 416, 419, 451, 462, 479], "string": [0, 2, 131, 143, 207, 228, 479, 481], "index": [0, 1, 2, 7, 9, 28, 38, 138, 140, 165, 205, 229, 282, 283, 294, 310], "xy": [0, 205], "coordin": [0, 205], "clip": [0, 304, 416, 451], "a_min": [0, 93], "a_max": [0, 93], "limit": [0, 2, 93, 213, 214, 477], "concaten": [0, 5, 121], "stack": [0, 474], "new": [0, 2, 6, 91, 118, 219, 223, 252, 274, 290, 296, 306, 307, 365, 373, 447, 449, 460, 465, 474, 477, 478, 479], "repeat": [0, 287], "arr": [0, 257, 477], "tile": [0, 146], "rep": [0, 287], "transpos": [0, 5, 31, 102, 103, 104, 164, 234, 328, 329, 330], "permut": [0, 6], "accord": [0, 238, 299, 302, 373, 397, 398, 399, 400], "initializer_list": 0, "swapax": [0, 112], "axis1": [0, 46, 77, 118, 280, 289], "axis2": [0, 46, 77, 118, 280, 289], "swap": [0, 105, 214, 280, 372], "two": [0, 2, 13, 14, 16, 24, 82, 85, 87, 88, 89, 90, 118, 128, 133, 148, 151, 157, 163, 164, 166, 167, 171, 180, 181, 182, 183, 184, 185, 187, 188, 189, 196, 201, 203, 218, 220, 224, 227, 280, 308, 322, 337, 344, 351, 409, 417, 474, 475, 476, 477, 482], "moveaxi": 0, "destin": [0, 2, 60, 127, 219, 232], "move": [0, 2, 219, 482], "pad": [0, 1, 98, 99, 100, 101, 102, 103, 104, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 321, 322, 325, 326, 327, 328, 329, 330, 350, 351], "low_pad_s": 0, "high_pad_s": 0, "pad_valu": 0, "mode": [0, 1, 2, 105, 228, 356, 367, 369, 395, 399, 400, 475], "constant": [0, 2, 5, 8, 142, 144, 228, 319, 323, 339, 345, 377, 419, 429, 461, 463, 474, 479], "pair": [0, 2, 228, 360, 381], "pad_width": [0, 228], "revers": [0, 2, 41, 42, 43, 44, 83, 108, 109, 110, 111, 290, 386], "order": [0, 1, 28, 83, 101, 131, 186, 229, 233, 288, 319, 339, 371, 383, 458, 474, 476], "broadcast_to": 0, "broadcast": [0, 2, 13, 16, 87, 88, 89, 91, 93, 128, 129, 133, 162, 166, 167, 171, 179, 180, 181, 196, 201, 203, 218, 220, 224, 230, 232, 236, 237, 241, 247, 248, 250, 253, 278, 283, 299, 373], "broadcast_arrai": [0, 2], "input": [0, 1, 2, 4, 5, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 117, 118, 121, 122, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 217, 218, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 243, 246, 249, 250, 251, 252, 253, 254, 255, 256, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 301, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 335, 337, 338, 339, 343, 344, 345, 347, 350, 351, 373, 376, 377, 378, 381, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 409, 416, 417, 419, 420, 421, 422, 424, 425, 427, 429, 441, 444, 474, 476, 477, 480, 481], "against": 0, "one": [0, 2, 5, 8, 38, 78, 84, 93, 99, 100, 101, 103, 104, 138, 140, 142, 144, 145, 186, 194, 201, 234, 237, 273, 278, 312, 370, 395, 418, 475, 482], "equal": [0, 16, 28, 82, 140, 167, 171, 181, 224, 229, 244, 270, 343, 347], "b": [0, 1, 2, 3, 5, 13, 14, 16, 24, 82, 87, 88, 89, 90, 128, 129, 133, 143, 161, 163, 166, 167, 170, 171, 179, 180, 181, 184, 186, 196, 197, 199, 201, 203, 218, 220, 224, 227, 230, 233, 240, 250, 253, 278, 286, 294, 307, 308, 337, 347, 378, 395, 409, 476, 477, 478, 479, 480, 481, 482], "return": [0, 1, 2, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 37, 50, 68, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 213, 214, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 319, 338, 344, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 367, 368, 370, 371, 372, 378, 396, 397, 398, 399, 400, 401, 402, 403, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 444, 447, 457, 473, 474, 475, 476, 477, 478, 479, 481, 482], "element": [0, 1, 2, 12, 13, 19, 20, 21, 22, 23, 24, 25, 28, 70, 83, 87, 88, 89, 92, 106, 107, 108, 109, 110, 111, 116, 128, 129, 133, 134, 135, 137, 139, 140, 141, 160, 161, 164, 166, 167, 171, 172, 173, 174, 175, 176, 179, 180, 181, 192, 193, 194, 195, 196, 197, 198, 199, 203, 205, 218, 220, 222, 224, 229, 230, 233, 234, 249, 250, 251, 253, 254, 256, 264, 265, 266, 267, 271, 272, 278, 282, 284, 285, 288, 294, 296, 299, 324, 331, 332, 333, 338, 342, 344, 352, 374, 378, 381, 385, 404, 411, 412, 414, 415, 430, 431, 433, 436, 437, 438, 439, 474, 476], "wise": [0, 2, 12, 13, 19, 20, 21, 22, 23, 24, 25, 87, 88, 89, 92, 106, 107, 128, 129, 133, 134, 135, 137, 139, 160, 161, 166, 167, 171, 179, 180, 181, 192, 193, 194, 195, 196, 197, 198, 199, 203, 218, 220, 222, 224, 230, 249, 250, 253, 256, 264, 265, 266, 267, 271, 272, 278, 284, 285, 324, 332, 333, 342, 352, 374, 385, 404, 411, 412, 414, 415, 430, 431, 433, 436, 437, 438, 439, 474], "not_equ": 0, "greater": [0, 5, 28, 139, 167, 229, 304, 392, 441], "greater_equ": 0, "less": [0, 5, 28, 181, 229, 381, 428], "less_equ": 0, "array_equ": [0, 16, 171], "equal_nan": [0, 16, 82, 171], "true": [0, 1, 2, 4, 5, 16, 41, 42, 43, 44, 82, 94, 108, 109, 110, 111, 143, 145, 164, 171, 177, 182, 183, 186, 191, 205, 214, 234, 268, 299, 302, 305, 306, 307, 308, 312, 319, 323, 325, 326, 327, 328, 329, 330, 338, 339, 343, 344, 345, 347, 357, 358, 360, 367, 370, 376, 378, 381, 386, 394, 395, 416, 424, 451], "have": [0, 1, 2, 5, 8, 16, 82, 84, 85, 86, 90, 121, 154, 155, 157, 158, 164, 171, 201, 215, 237, 296, 305, 344, 373, 383, 456, 458, 473, 474, 475, 477, 478, 482], "same": [0, 2, 5, 8, 16, 38, 82, 91, 94, 99, 100, 101, 103, 104, 105, 121, 142, 144, 153, 156, 157, 158, 164, 165, 171, 178, 228, 237, 254, 255, 296, 297, 299, 307, 319, 322, 323, 331, 339, 343, 351, 375, 396, 397, 398, 399, 400, 401, 402, 403, 418, 429, 447, 457, 471, 474, 475, 477, 482], "isnan": 0, "isinf": 0, "isfinit": 0, "isposinf": 0, "isneginf": 0, "where": [0, 6, 140, 171, 183, 233, 294, 298, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 339, 343, 344, 345, 347, 350, 351, 357, 374, 377, 378, 392, 399, 400, 405, 406, 408, 419, 425, 431, 434, 436, 441, 458, 475, 476, 477], "condit": [0, 2, 299, 482], "y": [0, 2, 4, 5, 6, 38, 112, 168, 299, 319, 323, 332, 339, 343, 345, 347, 377, 420, 425, 428, 449, 452, 474, 475, 476, 478, 479], "select": [0, 3, 8, 288, 299, 353, 357, 365], "depend": [0, 2, 3, 4, 8, 78, 186, 338, 344, 378, 475, 477, 481, 482], "nan_to_num": 0, "nan": [0, 16, 82, 171, 172, 174, 221], "0f": 0, "posinf": [0, 221], "neginf": [0, 221], "replac": [0, 5, 221, 371, 372, 394, 428], "infin": [0, 173, 175, 176, 221, 350, 351, 455], "finit": [0, 172, 221], "keepdim": [0, 15, 17, 26, 27, 33, 34, 35, 36, 56, 57, 58, 59, 63, 75, 76, 80, 186, 200, 202, 204, 217, 231, 268, 275, 279, 295], "ar": [0, 1, 2, 4, 5, 6, 7, 8, 16, 18, 82, 90, 91, 93, 94, 101, 105, 112, 118, 125, 126, 136, 140, 143, 148, 149, 151, 152, 154, 155, 157, 158, 159, 164, 165, 171, 172, 173, 174, 175, 176, 177, 178, 186, 187, 191, 201, 214, 227, 228, 229, 233, 234, 236, 237, 238, 243, 244, 247, 248, 254, 260, 261, 273, 274, 282, 294, 297, 298, 302, 305, 306, 312, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 343, 345, 347, 360, 373, 376, 395, 416, 418, 419, 443, 447, 449, 456, 458, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "non": [0, 1, 2, 8, 205, 368, 378, 430, 447], "allclos": [0, 1, 143], "rtol": [0, 16, 171], "1e": [0, 4, 6, 16, 171, 323, 339, 343, 345, 346, 377, 417, 419, 429, 449, 450, 451, 452, 453, 454, 455, 458, 461, 463, 464, 465, 466, 467], "5": [0, 1, 2, 4, 5, 8, 186, 214, 236, 308, 321, 323, 331, 332, 333, 336, 340, 343, 350, 390, 395, 396, 399, 400, 407, 410, 428, 440, 444, 449, 461, 463, 464, 474, 476, 477], "atol": [0, 16, 171], "8": [0, 1, 2, 5, 8, 186, 233, 312, 322, 343, 351, 394, 417, 450, 451, 452, 453, 454, 455, 461, 474, 477, 480, 482], "within": [0, 3, 28, 171], "toler": [0, 16, 171], "isclos": 0, "boolean": [0, 16, 82, 171, 172, 173, 174, 175, 176, 177, 197, 198, 199, 312, 369, 477], "reduc": [0, 1, 8, 15, 17, 26, 27, 122, 200, 202, 204, 217, 231, 275, 279, 295, 308, 323, 394, 424], "output": [0, 1, 2, 5, 8, 15, 16, 17, 18, 28, 83, 90, 91, 94, 96, 97, 108, 109, 110, 111, 112, 130, 140, 142, 143, 144, 145, 146, 153, 156, 157, 158, 162, 163, 165, 168, 169, 171, 186, 190, 200, 202, 204, 205, 217, 221, 225, 226, 229, 231, 232, 236, 237, 238, 240, 241, 242, 244, 247, 248, 260, 261, 268, 273, 275, 279, 283, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 321, 322, 323, 325, 326, 327, 328, 329, 330, 343, 347, 350, 351, 373, 376, 392, 394, 395, 397, 398, 399, 400, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 441, 444, 474, 475, 476, 477, 478, 479, 480, 481, 482], "i": [0, 1, 2, 3, 5, 6, 7, 8, 16, 18, 28, 37, 78, 83, 93, 99, 100, 101, 103, 104, 105, 108, 109, 110, 111, 112, 117, 118, 121, 122, 124, 125, 126, 127, 129, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 168, 171, 172, 177, 178, 182, 183, 184, 185, 186, 187, 188, 189, 191, 196, 200, 201, 205, 211, 214, 228, 229, 232, 233, 234, 241, 242, 243, 252, 254, 257, 258, 259, 264, 268, 270, 275, 276, 281, 282, 283, 286, 289, 290, 294, 295, 296, 297, 298, 299, 302, 304, 305, 306, 307, 308, 312, 314, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 339, 343, 344, 345, 347, 350, 351, 357, 358, 364, 366, 367, 369, 370, 372, 373, 374, 376, 377, 378, 381, 386, 392, 394, 395, 399, 400, 406, 408, 416, 417, 419, 424, 425, 428, 429, 431, 436, 441, 447, 449, 451, 454, 456, 457, 458, 463, 465, 466, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "ani": [0, 1, 2, 5, 7, 18, 94, 305, 306, 307, 308, 309, 319, 336, 353, 354, 357, 366, 376, 394, 395, 444, 466, 473, 474, 476, 478, 480, 481, 482], "sum": [0, 2, 4, 13, 111, 122, 170, 186, 200, 268, 286, 289, 319, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 475, 477, 479], "mean": [0, 1, 4, 5, 6, 144, 240, 241, 242, 294, 319, 323, 339, 358, 377, 402, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 474, 476, 479], "comput": [0, 1, 2, 4, 5, 6, 7, 8, 108, 109, 110, 111, 112, 116, 131, 139, 141, 145, 165, 178, 182, 183, 184, 185, 186, 189, 196, 204, 227, 233, 250, 268, 275, 276, 286, 294, 295, 297, 303, 319, 323, 338, 339, 343, 344, 345, 358, 371, 376, 377, 381, 394, 397, 398, 399, 400, 407, 408, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 449, 450, 451, 453, 454, 455, 456, 460, 474, 475, 476, 480, 482], "var": [0, 323, 339, 343, 345, 419], "ddof": [0, 75, 80, 275, 295], "varianc": [0, 275, 295, 323, 339, 419], "standard": [0, 1, 6, 50, 78, 201, 238, 242, 275, 394, 397, 399, 402, 475, 480], "deviat": [0, 242, 275, 397, 399, 402], "deviatoin": 0, "prod": [0, 1], "The": [0, 1, 2, 3, 5, 6, 7, 8, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 37, 47, 51, 61, 62, 68, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 213, 214, 215, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 259, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 314, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 343, 344, 345, 347, 350, 351, 353, 354, 358, 360, 364, 365, 366, 367, 370, 371, 372, 373, 375, 376, 377, 378, 381, 383, 386, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 409, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 441, 444, 447, 449, 450, 451, 452, 453, 454, 455, 456, 459, 461, 462, 463, 466, 469, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "product": [0, 2, 14, 83, 110, 170, 178, 184, 201, 227, 231, 286, 297, 373, 480], "max": [0, 1, 2, 186, 203, 324, 350, 351, 374, 404, 411, 412, 417, 419, 420, 425, 429, 431, 433, 451, 455, 474, 476, 482], "maximum": [0, 6, 26, 38, 93, 108, 210, 214, 304, 319, 346, 379, 386, 407, 408, 413, 432, 447, 478], "min": [0, 2, 186, 218, 324, 374, 404, 411, 412, 431, 433], "minimum": [0, 27, 38, 93, 109, 386, 416, 417], "argmin": 0, "argmax": [0, 6], "sort": [0, 28, 29, 229, 288], "argsort": 0, "partit": [0, 28], "kth": [0, 28, 229], "smaller": [0, 8, 229, 456, 474], "first": [0, 1, 2, 3, 4, 5, 6, 8, 118, 121, 159, 165, 177, 179, 188, 197, 199, 201, 229, 246, 253, 280, 286, 289, 294, 305, 307, 308, 319, 322, 339, 351, 395, 417, 425, 451, 453, 454, 455, 458, 474, 476, 479, 482], "argpartit": 0, "topk": 0, "logsumexp": 0, "ab": [0, 16, 171, 186, 294, 339, 343, 345, 352, 377, 408, 430, 474], "absolut": [0, 12, 16, 171, 407, 408, 428], "neg": [0, 118, 159, 175, 221, 254, 289, 346, 350, 351, 373, 419, 427, 429, 477], "negat": [0, 222], "sign": [0, 16, 171, 312, 456], "logical_not": 0, "logic": [0, 2, 197, 198, 199], "logical_and": 0, "logical_or": 0, "reciproc": [0, 256], "subtract": [0, 38], "divid": [0, 2, 38, 161, 233, 250, 475], "divmod": 0, "quotient": [0, 128, 129, 161], "remaind": [0, 129], "floor_divid": 0, "integ": [0, 11, 161, 163, 164, 177, 186, 207, 228, 233, 234, 236, 243, 244, 270, 282, 286, 298, 312, 335, 365, 465, 477], "divis": [0, 128, 161, 233, 250], "equival": [0, 2, 31, 65, 79, 126, 129, 161, 164, 168, 282, 324, 334, 336, 340, 341, 342, 348, 349, 372, 374, 376, 379, 380, 382, 384, 387, 388, 389, 390, 391, 393], "do": [0, 2, 5, 8, 296, 319, 359, 370, 444, 447, 454, 474, 475, 476, 478], "floor": [0, 1, 161], "between": [0, 2, 7, 93, 159, 394, 417, 420, 421, 424, 465, 475, 478, 479, 482], "ceil": 0, "exp": [0, 1, 139, 143, 196, 200, 238, 268, 324, 334, 385, 404, 405, 422, 434, 435, 439, 474, 482], "exponenti": [0, 137, 139, 324, 334, 382, 404, 405, 434, 464], "sin": [0, 112, 386, 476, 480], "sine": [0, 21, 22, 266, 267, 476], "co": [0, 2, 112, 386, 476], "cosin": [0, 19, 20, 106, 107, 417, 463, 465, 476], "tan": 0, "tangent": [0, 2, 23, 24, 25, 112, 178, 284, 285, 393, 442], "arcsin": 0, "arc": 0, "arcco": 0, "arctan": 0, "arctan2": 0, "invers": [0, 19, 20, 21, 22, 23, 24, 25, 135, 150, 151, 152, 153, 154, 155, 183, 185, 189], "ratio": [0, 24], "sinh": 0, "hyperbol": [0, 20, 22, 25, 107, 267, 285, 393, 442], "cosh": [0, 424], "tanh": [0, 319, 336, 338, 344, 352, 378, 407, 430], "arcsinh": 0, "arccosh": 0, "arctanh": 0, "degre": [0, 235, 429], "radian": [0, 115], "log": [0, 194, 196, 200, 348, 349, 414, 415, 416, 419, 422, 424, 427, 439], "natur": [0, 192, 194, 478], "logarithm": [0, 192, 193, 194, 195], "log2": 0, "base": [0, 2, 145, 186, 193, 195, 230, 381, 394, 447, 449, 455, 469, 471, 474, 477], "2": [0, 1, 2, 4, 5, 6, 38, 99, 103, 117, 118, 134, 148, 151, 153, 154, 155, 156, 157, 158, 159, 168, 177, 182, 183, 184, 185, 186, 187, 188, 189, 195, 201, 233, 241, 246, 286, 289, 291, 292, 293, 304, 308, 312, 319, 321, 322, 326, 329, 336, 346, 350, 351, 377, 386, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 418, 419, 421, 428, 429, 444, 447, 449, 450, 452, 453, 454, 458, 461, 474, 475, 476, 477, 478, 479, 480, 481, 482], "log10": 0, "10": [0, 3, 5, 6, 193, 255, 260, 306, 319, 360, 444, 465, 467, 474, 475, 477], "log1p": 0, "plu": [0, 194], "logaddexp": 0, "sigmoid": [0, 5, 319, 348, 384, 408, 414, 416, 436], "logist": [0, 4, 264, 408, 436], "erf": [0, 135, 474], "error": [0, 2, 8, 123, 134, 135, 214, 270, 336, 406, 407, 408, 424, 426, 476, 479], "function": [0, 1, 2, 3, 4, 5, 6, 7, 16, 18, 83, 94, 112, 129, 134, 135, 143, 165, 171, 178, 182, 183, 185, 186, 187, 188, 189, 201, 264, 294, 297, 298, 303, 304, 306, 307, 308, 319, 324, 334, 336, 337, 340, 341, 342, 348, 349, 352, 354, 358, 365, 370, 374, 378, 379, 380, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 430, 435, 437, 438, 439, 440, 441, 442, 444, 449, 458, 471, 473, 475, 477, 478, 479, 481], "erfinv": 0, "expm1": 0, "stop_gradi": [0, 476], "flow": [0, 276, 478], "gradient": [0, 4, 6, 112, 165, 276, 294, 303, 304, 319, 358, 371, 376, 394, 424, 447, 449, 450, 451, 453, 454, 455, 456, 457, 460, 462, 474, 475, 476, 477, 478, 479, 480], "round": [0, 233], "decim": [0, 66, 255], "point": [0, 2, 4, 5, 8, 83, 161, 234, 312], "matmul": [0, 163, 482], "multipl": [0, 1, 8, 14, 90, 142, 144, 163, 164, 201, 220, 233, 234, 373, 386, 464, 465, 467, 474, 478, 481], "gather": [0, 121, 163, 164], "slice_s": 0, "entri": [0, 243, 332, 333], "take": [0, 2, 5, 6, 87, 88, 89, 94, 163, 165, 178, 203, 218, 226, 234, 283, 294, 297, 298, 301, 307, 308, 373, 416, 471, 475, 476, 477, 481, 482, 483], "treat": [0, 2, 154, 155, 157, 158, 282, 395, 474], "take_along_axi": [0, 477], "put_along_axi": 0, "put": [0, 1, 6, 232, 474, 475], "scatter": 0, "paramet": [0, 1, 2, 4, 5, 6, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 37, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 213, 214, 215, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 350, 351, 353, 354, 357, 358, 360, 365, 366, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 383, 386, 390, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 409, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 441, 443, 444, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 474, 475, 476, 478], "determin": [0, 2, 118, 241, 308, 312, 364, 481], "locat": [0, 2, 83, 371, 372, 475, 482], "assum": [0, 2, 5, 90, 184, 187, 306, 319, 321, 322, 339, 350, 351], "d": [0, 1, 2, 5, 100, 104, 117, 118, 170, 186, 201, 205, 227, 282, 289, 291, 292, 293, 309, 327, 330, 333, 338, 344, 378, 450, 453, 455, 482], "simplic": 0, "which": [0, 1, 2, 5, 6, 7, 8, 18, 37, 83, 94, 101, 118, 121, 122, 125, 126, 127, 136, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 165, 172, 173, 174, 175, 176, 178, 182, 183, 184, 185, 186, 187, 188, 189, 191, 205, 215, 233, 237, 238, 251, 252, 254, 257, 258, 259, 260, 261, 273, 274, 282, 289, 294, 297, 298, 302, 322, 332, 333, 336, 351, 353, 357, 381, 416, 418, 421, 425, 428, 444, 457, 458, 471, 474, 475, 476, 477, 478, 482, 483], "appli": [0, 38, 145, 146, 163, 188, 306, 307, 308, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 367, 374, 376, 377, 378, 379, 380, 382, 384, 385, 387, 388, 389, 390, 391, 392, 393, 395, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 457, 460, 466, 469, 474, 475], "note": [0, 2, 5, 8, 16, 18, 83, 90, 94, 100, 103, 104, 112, 146, 154, 155, 164, 171, 186, 208, 233, 237, 296, 302, 319, 377, 395, 449, 479, 481], "assign": [0, 2, 38, 447], "henc": [0, 2, 233, 474], "If": [0, 1, 2, 5, 8, 15, 16, 17, 18, 26, 27, 28, 29, 78, 82, 83, 93, 95, 105, 108, 109, 110, 111, 117, 118, 121, 122, 123, 125, 126, 127, 136, 142, 145, 156, 157, 158, 161, 162, 165, 171, 182, 183, 184, 186, 191, 200, 201, 202, 204, 205, 213, 214, 217, 221, 225, 228, 229, 231, 232, 237, 241, 243, 251, 254, 268, 269, 270, 275, 279, 281, 282, 283, 286, 288, 289, 294, 295, 298, 300, 302, 306, 308, 323, 325, 326, 327, 328, 329, 330, 339, 345, 347, 358, 360, 370, 376, 378, 381, 383, 386, 395, 416, 418, 429, 451, 474, 475, 476, 478, 481, 482, 483], "provid": [0, 2, 5, 83, 116, 141, 165, 243, 254, 286, 294, 306, 308, 314, 319, 353, 358, 360, 370, 371, 372, 375, 376, 394, 395, 443, 447, 475, 481, 483], "rank": [0, 125, 126, 127, 425, 475], "must": [0, 1, 2, 3, 8, 90, 93, 145, 162, 164, 186, 236, 237, 241, 244, 247, 248, 299, 395, 479], "In": [0, 1, 2, 5, 6, 38, 201, 233, 306, 319, 332, 339, 447, 450, 452, 453, 455, 456, 457, 473, 474, 475, 476, 478, 481, 482], "other": [0, 2, 5, 7, 177, 186, 319, 359, 447, 456, 474, 475, 477, 478, 480], "word": 0, "ndim": [0, 1, 2, 159, 186, 188, 395], "lead": [0, 18, 83, 474], "remain": [0, 5, 294, 307, 331, 332, 333, 475], "For": [0, 1, 2, 5, 8, 38, 146, 163, 177, 186, 233, 309, 319, 323, 332, 336, 353, 358, 367, 370, 376, 381, 386, 395, 397, 398, 399, 400, 416, 444, 449, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482], "exampl": [0, 3, 4, 5, 6, 8, 18, 38, 112, 143, 159, 177, 186, 187, 277, 282, 304, 307, 308, 319, 321, 322, 323, 343, 350, 351, 358, 360, 367, 370, 395, 396, 397, 398, 399, 400, 401, 402, 403, 416, 418, 425, 444, 449, 458, 463, 464, 465, 466, 467, 471, 476, 477, 478, 479, 480, 481], "auto": [0, 2, 8], "4": [0, 1, 2, 5, 116, 141, 143, 159, 164, 186, 233, 234, 260, 302, 308, 312, 321, 322, 323, 343, 350, 351, 375, 376, 394, 395, 397, 398, 399, 416, 474, 475, 477, 480, 482], "3": [0, 1, 2, 5, 8, 100, 104, 159, 177, 184, 186, 187, 304, 308, 327, 330, 336, 395, 398, 400, 407, 412, 451, 456, 471, 474, 477, 479, 480], "out": [0, 1, 2, 8, 90, 143, 321, 322, 332, 333, 350, 351, 367, 474, 475, 476, 477], "produc": [0, 2, 8, 94, 373, 444], "thi": [0, 1, 2, 5, 6, 8, 15, 16, 17, 18, 26, 27, 28, 29, 83, 112, 132, 143, 163, 164, 168, 171, 178, 182, 183, 185, 186, 187, 188, 189, 196, 200, 201, 202, 204, 206, 208, 217, 229, 231, 237, 263, 268, 269, 270, 275, 279, 282, 288, 295, 304, 307, 308, 319, 331, 332, 333, 337, 338, 344, 354, 355, 357, 358, 361, 362, 363, 368, 370, 371, 372, 373, 376, 378, 392, 397, 398, 399, 400, 407, 408, 409, 416, 424, 441, 447, 458, 473, 474, 475, 476, 478, 479, 481], "row": [0, 1, 2, 83, 140, 143, 169, 233, 291], "posit": [0, 5, 28, 118, 145, 159, 165, 176, 182, 183, 219, 221, 229, 241, 254, 289, 294, 306, 319, 325, 326, 327, 328, 329, 330, 373, 381, 386, 419, 429], "ad": [0, 1, 2, 4, 8, 142, 343, 447, 450, 451, 452, 453, 454, 455, 461, 475, 478, 481], "we": [0, 1, 2, 4, 5, 6, 116, 125, 126, 141, 164, 233, 234, 319, 335, 375, 383, 454, 456, 471, 473, 474, 475, 476, 478, 482], "also": [0, 1, 2, 5, 6, 7, 8, 11, 13, 87, 88, 89, 119, 128, 129, 133, 149, 152, 155, 158, 166, 167, 179, 180, 181, 196, 203, 218, 220, 224, 230, 233, 250, 253, 278, 302, 303, 314, 319, 357, 371, 373, 375, 376, 384, 406, 434, 436, 443, 449, 474, 475, 476, 477, 478, 479, 480, 483], "To": [0, 2, 3, 4, 5, 6, 8, 213, 319, 444, 449, 474, 475, 476, 480], "control": [0, 346, 471, 478], "addit": [0, 2, 5, 8, 13, 14, 142, 144, 146, 191, 323, 339, 345, 373, 377, 447, 476], "item": [0, 2, 4, 5, 6, 306, 449, 478, 479, 480], "togeth": [0, 1, 2, 6, 233, 306, 307, 475], "doe": [0, 2, 3, 5, 8, 208, 296, 304, 319, 474, 477, 478, 479], "perform": [0, 1, 2, 3, 5, 7, 14, 90, 101, 108, 109, 110, 111, 127, 130, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 168, 201, 234, 255, 268, 282, 319, 339, 394, 399, 400, 449, 474, 475, 477, 478, 482], "bound": [0, 244, 247, 248, 336, 403, 474, 477, 482], "check": [0, 2, 8, 82, 124, 177, 211, 360, 476, 477], "access": [0, 5, 50, 319, 447, 458, 475, 478, 482], "undefin": [0, 28, 112, 182, 183, 229, 241, 477], "typic": [0, 146, 335, 449, 474, 478], "result": [0, 5, 14, 18, 38, 78, 83, 94, 142, 144, 164, 186, 201, 234, 241, 251, 274, 306, 307, 308, 386, 416, 474, 476, 479], "unintend": 0, "invalid": [0, 83], "memori": [0, 1, 2, 7, 83, 206, 208, 209, 210, 212, 213, 214, 394, 447, 451, 474, 478, 479], "write": [0, 1, 2, 5, 319, 479], "scatter_add": 0, "scatter_prod": 0, "scatter_max": 0, "linear": [0, 2, 5, 6, 7, 302, 306, 319, 324, 334, 336, 337, 346, 360, 376, 378, 379, 380, 382, 384, 395, 404, 405, 406, 407, 408, 409, 413, 432, 433, 434, 436, 444, 447, 458, 466, 474], "scatter_min": 0, "sqrt": [0, 5, 134, 146, 168, 323, 336, 339, 343, 345, 347, 377, 386, 397, 398, 399, 400, 407, 450, 452, 453, 454, 461, 474], "root": [0, 5, 144, 256, 271, 377], "rsqrt": 0, "softmax": [0, 5, 146, 319, 349, 415, 418], "precis": [0, 2, 5, 139, 146, 319, 336, 377, 416, 457, 474], "power": [0, 476, 479], "rais": [0, 5, 186, 214, 230, 270, 360], "cumsum": 0, "inclus": [0, 41, 42, 43, 44, 108, 109, 110, 111, 159], "cumul": [0, 83, 108, 109, 110, 111], "cumprod": 0, "cummax": 0, "cummin": 0, "conv_gener": 0, "weight": [0, 4, 98, 99, 100, 101, 102, 103, 104, 142, 144, 306, 319, 360, 364, 375, 376, 416, 418, 447, 451, 454, 456, 458, 462, 476, 478], "padding_lo": 0, "padding_hi": 0, "kernel_dil": [0, 101], "input_dil": [0, 101], "group": [0, 1, 98, 99, 100, 101, 102, 103, 104, 116, 121, 122, 123, 125, 126, 127, 141, 146, 164, 233, 234, 296, 302, 325, 339, 375, 376, 475], "flip": [0, 101, 105], "gener": [0, 1, 2, 3, 4, 11, 18, 101, 140, 143, 154, 155, 190, 205, 236, 241, 242, 243, 244, 247, 248, 394, 471, 474, 477, 478, 483], "convolut": [0, 98, 99, 100, 101, 102, 103, 104, 105, 325, 326, 327, 328, 329, 330, 332, 333], "filter": [0, 105, 325, 326, 327, 328, 329, 330, 353, 357], "conv1d": [0, 319], "dilat": [0, 98, 99, 100, 101, 102, 103, 104, 325, 326, 328, 329], "conv2d": [0, 319], "2d": [0, 99, 103, 118, 233, 323, 332], "conv3d": [0, 319], "tupl": [0, 30, 65, 68, 79, 95, 99, 100, 101, 103, 104, 125, 129, 131, 136, 138, 178, 186, 187, 188, 228, 233, 252, 254, 273, 294, 297, 305, 306, 307, 308, 309, 321, 322, 326, 327, 329, 330, 350, 351, 360, 362, 383, 395, 451, 453, 454, 455, 456, 473, 476], "3d": [0, 2, 100, 104, 323, 333, 395], "conv_transpose1d": 0, "conv_transpose2d": 0, "conv_transpose3d": 0, "quantized_matmul": 0, "w": [0, 1, 4, 99, 100, 103, 104, 116, 141, 164, 233, 234, 294, 307, 322, 323, 326, 327, 329, 330, 332, 333, 347, 351, 449, 462, 476], "bias": [0, 116, 141, 164, 233, 234, 338, 344, 358, 370, 373], "group_siz": [0, 116, 141, 164, 233, 234, 302, 375, 376], "64": [0, 1, 90, 116, 141, 164, 233, 234, 302, 312, 375, 376], "bit": [0, 116, 141, 164, 179, 233, 234, 253, 302, 312, 353, 375, 376, 377], "quantiz": [0, 116, 141, 164, 191, 234, 375, 376], "its": [0, 1, 2, 8, 183, 201, 229, 246, 291, 303, 309, 319, 376, 449, 453, 454, 455, 475, 479, 482], "last": [0, 1, 5, 29, 78, 142, 144, 149, 152, 154, 155, 157, 158, 159, 163, 164, 170, 182, 183, 185, 187, 188, 189, 201, 210, 237, 269, 286, 296, 325, 326, 327, 328, 329, 330, 332, 333, 339, 395, 479], "dequant": [0, 233], "gather_qmm": 0, "lhs_indic": [0, 163, 164], "rhs_indic": [0, 163, 164], "level": [0, 163, 164, 399, 400], "tensordot": 0, "contract": [0, 131], "over": [0, 2, 5, 6, 15, 17, 26, 27, 28, 29, 98, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 149, 152, 155, 158, 170, 186, 188, 190, 200, 202, 204, 217, 229, 231, 256, 268, 269, 275, 279, 286, 288, 295, 323, 325, 326, 327, 328, 329, 330, 339, 345, 377, 418, 463, 466, 475, 476], "axes_a": 0, "axes_b": 0, "outer": [0, 474, 478], "inner": [0, 474], "addmm": 0, "c": [0, 1, 2, 5, 14, 186, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 343, 344, 350, 351, 479, 480, 482], "alpha": [0, 2, 14, 233, 324, 334, 404, 405, 429, 431, 434, 454, 461], "f": [0, 2, 4, 6, 112, 186, 319, 344, 454, 474, 479], "beta": [0, 2, 14, 116, 141, 233, 323, 339, 343, 345, 428, 449, 453, 454, 455, 456], "block_masked_mm": 0, "block_siz": [0, 90], "mask_out": [0, 90], "mask_lh": [0, 90], "mask_rh": [0, 90], "block": [0, 2, 5, 90, 394], "mask": [0, 5, 90, 146, 367, 373, 477], "gather_mm": [0, 164], "extract": [0, 5, 45, 117, 118, 319, 357, 447, 475], "construct": [0, 2, 6, 45, 117, 162, 225, 287, 300], "diag": [0, 188], "trace": [0, 3, 474], "implement": [0, 1, 4, 6, 145, 146, 186, 335, 357, 373, 381, 383, 386, 392, 394, 395, 441, 450, 451, 452, 453, 455, 456, 457, 469, 474, 476], "allow": [0, 1, 2, 177, 304, 319, 372, 447, 469, 475, 477, 480], "inject": 0, "ensur": [0, 1, 2, 8, 143, 304, 424, 475], "been": [0, 2, 5, 209, 478], "when": [0, 1, 2, 5, 7, 8, 94, 101, 112, 127, 182, 183, 185, 186, 188, 189, 191, 325, 326, 327, 328, 329, 330, 395, 399, 400, 416, 422, 428, 447, 449, 465, 471, 474, 475, 482], "atleast_1d": 0, "atleast": 0, "atleast_2d": 0, "atleast_3d": 0, "number_of_el": 0, "invert": 0, "int32": [0, 1, 11, 18, 38, 159, 177, 186, 244, 312, 395, 477, 480], "some": [0, 2, 4, 5, 6, 358, 370, 449, 458, 474, 476, 478], "scalar": [0, 2, 13, 14, 16, 30, 50, 78, 82, 87, 88, 89, 90, 91, 93, 128, 129, 133, 161, 162, 165, 166, 167, 168, 171, 179, 180, 181, 190, 196, 197, 198, 199, 201, 203, 218, 220, 221, 224, 228, 230, 236, 244, 247, 248, 250, 253, 258, 278, 294, 296, 299, 303, 429, 476, 478, 480], "us": [0, 3, 4, 5, 6, 7, 8, 18, 38, 83, 112, 116, 119, 121, 122, 125, 126, 127, 129, 141, 143, 145, 159, 164, 179, 182, 183, 184, 185, 186, 187, 188, 189, 201, 208, 209, 210, 213, 233, 234, 251, 252, 253, 254, 281, 305, 308, 312, 314, 319, 322, 332, 335, 336, 338, 344, 347, 351, 353, 357, 364, 371, 373, 375, 376, 378, 381, 386, 394, 395, 399, 400, 407, 408, 417, 444, 447, 449, 450, 451, 453, 454, 455, 456, 457, 458, 471, 473, 474, 475, 476, 477, 480, 482], "shapeless": [0, 94], "compil": [0, 3, 7, 8, 119, 132, 143, 475, 476, 478], "pun": 0, "intend": [0, 474], "conjug": [0, 96], "bitwise_and": 0, "bitwis": [0, 87, 88, 89, 179, 253], "bitwise_or": 0, "bitwise_xor": 0, "exclus": [0, 83, 89], "left_shift": 0, "shift": [0, 179, 253, 254, 323], "left": [0, 5, 145, 179, 186, 233, 254, 321, 322, 336, 350, 351, 381, 395, 407, 408, 419, 421, 429], "right_shift": 0, "right": [0, 1, 2, 8, 233, 253, 254, 321, 322, 336, 350, 351, 395, 407, 408, 419, 421, 429], "roll": 0, "introduc": [0, 254], "them": [0, 2, 5, 121, 319, 358, 370, 475, 482], "side": [0, 228, 321, 322, 350, 351, 474], "mlx": [1, 3, 4, 5, 6, 8, 314, 319, 444, 447, 449, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "support": [1, 2, 5, 7, 8, 16, 90, 100, 103, 104, 146, 159, 168, 171, 182, 183, 185, 187, 188, 189, 191, 201, 233, 241, 475, 476, 477, 479, 481], "through": [1, 2, 276, 394, 456, 474, 476, 479], "python": [1, 3, 5, 50, 68, 78, 136, 305, 306, 307, 308, 309, 447, 457, 458, 460, 473, 475, 476, 479], "api": [1, 2, 336, 475, 476], "let": [1, 2, 4, 5, 183, 474, 476, 478, 479], "elementwis": [1, 96, 97], "def": [1, 2, 4, 5, 6, 112, 143, 294, 319, 447, 474, 475, 476, 477, 478, 479, 482], "exp_elementwis": [1, 143], "mx": [1, 2, 3, 4, 5, 6, 38, 96, 97, 112, 123, 126, 143, 159, 177, 186, 187, 191, 243, 260, 294, 304, 319, 321, 322, 323, 334, 343, 346, 350, 351, 353, 360, 364, 379, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 413, 416, 417, 418, 422, 425, 432, 442, 444, 447, 449, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "uint": [1, 2, 143], "elem": [1, 143], "thread_position_in_grid": [1, 2, 143], "tmp": [1, 143], "inp": [1, 143], "fast": [1, 7, 336, 408, 475, 482], "metal_kernel": 1, "name": [1, 2, 143, 164, 191, 233, 234, 258, 259, 260, 261, 319, 339, 357, 360, 362, 475, 477, 481], "myexp": [1, 143], "input_nam": [1, 143], "output_nam": [1, 143], "threadgroup": [1, 2, 143], "256": [1, 2, 6, 143], "output_shap": [1, 143], "output_dtyp": [1, 143], "random": [1, 2, 3, 4, 5, 6, 7, 143, 321, 322, 323, 343, 350, 351, 360, 367, 474, 476, 482, 483], "normal": [1, 2, 4, 5, 142, 143, 144, 241, 247, 319, 321, 322, 323, 339, 343, 345, 350, 351, 377, 394, 397, 399, 479, 482], "16": [1, 143, 312, 321, 343, 350, 353, 447], "float16": [1, 2, 11, 143, 168, 191, 312, 353, 478, 479], "assert": [1, 2, 143], "onli": [1, 2, 5, 7, 8, 82, 90, 99, 100, 101, 103, 104, 186, 233, 241, 296, 319, 357, 358, 360, 365, 367, 370, 371, 372, 447, 474, 475, 476, 481, 482], "requir": [1, 2, 5, 319, 475, 478, 479], "pass": [1, 2, 5, 6, 65, 79, 227, 228, 294, 303, 305, 306, 307, 319, 358, 370, 371, 372, 383, 474, 475, 478], "bodi": [1, 143], "signatur": [1, 143], "abov": [1, 2, 5, 233, 292, 319, 395, 454, 475, 476, 477, 478, 482], "kei": [1, 3, 5, 146, 207, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 248, 305, 306, 357, 358, 370, 373, 458, 471, 473, 476], "so": [1, 2, 5, 8, 165, 168, 294, 331, 395, 449, 474, 475, 478, 482], "devic": [1, 2, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 121, 122, 125, 126, 127, 128, 129, 130, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 299, 300, 301, 310, 482, 483], "float16_t": [1, 2], "inp_shap": 1, "inp_strid": 1, "inp_ndim": 1, "conveni": [1, 2, 6, 177], "thei": [1, 2, 4, 5, 8, 16, 105, 164, 171, 383, 420, 447, 456, 473, 474, 475, 478, 480, 481, 482], "present": 1, "list": [1, 5, 10, 15, 17, 30, 71, 78, 83, 84, 85, 86, 91, 94, 95, 101, 131, 136, 143, 148, 149, 151, 152, 154, 155, 157, 158, 162, 165, 178, 186, 200, 202, 204, 205, 217, 225, 228, 231, 236, 237, 238, 240, 241, 242, 244, 247, 248, 258, 268, 270, 274, 275, 279, 286, 287, 290, 294, 295, 297, 300, 305, 308, 309, 319, 358, 360, 361, 362, 363, 368, 370, 371, 372, 447, 449, 453, 454, 455, 456, 465, 473, 474, 475, 476, 478], "instanti": [1, 2, 6, 478], "custom_kernel_myexp_float": 1, "can": [1, 2, 3, 5, 7, 8, 13, 18, 65, 79, 83, 87, 88, 89, 94, 118, 119, 120, 128, 129, 133, 136, 166, 167, 179, 180, 181, 186, 196, 203, 218, 220, 224, 230, 236, 237, 244, 247, 248, 250, 253, 258, 278, 289, 294, 308, 319, 322, 335, 336, 351, 357, 370, 375, 383, 395, 418, 444, 447, 449, 457, 458, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "core": [1, 2, 3, 4, 5, 6, 302, 319, 321, 322, 323, 343, 350, 351, 360, 363, 365, 368, 395, 396, 397, 398, 399, 400, 401, 402, 403, 416, 418, 425, 444, 447, 449, 474, 475, 479, 480], "attribut": [1, 9, 10, 11, 30, 310, 366, 447, 469], "These": [1, 2, 94, 232, 283, 418, 482], "argument": [1, 31, 65, 79, 94, 136, 165, 294, 306, 307, 308, 319, 395, 471, 475, 476, 481, 482, 483], "defin": [1, 2, 4, 5, 6, 8, 112, 126, 143, 164, 184, 186, 234, 302, 305, 479], "tabl": [1, 186, 312, 335], "shade": [1, 2], "languag": [1, 2], "specif": [1, 2, 8, 475, 476], "follow": [1, 2, 5, 6, 7, 8, 18, 105, 116, 141, 163, 186, 228, 233, 307, 319, 407, 408, 422, 450, 451, 452, 453, 454, 455, 456, 462, 471, 474, 475, 476, 482], "void": [1, 2], "buffer": [1, 2, 208, 479], "uint3": 1, "host_nam": [1, 2], "decltyp": 1, "verbos": [1, 143], "__call__": [1, 5, 6, 319, 447], "print": [1, 2, 4, 5, 6, 8, 304, 305, 306, 307, 309, 319, 471, 474, 475, 476, 477, 478, 479, 480], "code": [1, 143, 474, 475, 478], "debug": [1, 3, 475], "purpos": [1, 186], "ensure_row_contigu": [1, 143], "default": [1, 2, 8, 14, 15, 16, 17, 18, 26, 27, 28, 29, 82, 83, 90, 94, 95, 98, 99, 100, 101, 102, 103, 104, 112, 113, 114, 116, 117, 118, 121, 122, 123, 125, 126, 127, 140, 141, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 164, 165, 168, 169, 171, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 200, 202, 204, 205, 213, 214, 217, 221, 225, 228, 229, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 248, 251, 252, 255, 262, 263, 269, 270, 273, 274, 275, 277, 279, 281, 286, 288, 289, 290, 291, 292, 293, 294, 295, 298, 300, 302, 312, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 334, 337, 338, 340, 343, 344, 346, 347, 350, 351, 353, 358, 360, 365, 367, 370, 373, 374, 375, 376, 378, 381, 386, 390, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 409, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 447, 450, 451, 452, 453, 454, 455, 456, 461, 462, 463, 471, 473, 474, 476, 479, 481, 483], "need": [1, 2, 5, 6, 7, 8, 82, 233, 319, 371, 372, 386, 394, 471, 475, 476, 478, 479, 480, 482], "befor": [1, 2, 5, 8, 28, 143, 229, 357, 394, 458, 475, 477, 478], "launch": [1, 2, 123, 475, 477], "layout": 1, "contigu": [1, 2, 83, 143], "make": [1, 2, 3, 5, 6, 8, 201, 223, 263, 319, 463, 464, 466, 467, 474, 478, 480, 482], "easier": [1, 478], "sinc": [1, 2, 5, 6, 164, 210, 447, 456, 465, 479, 482], "don": [1, 8, 474, 482], "worri": [1, 478], "about": [1, 2, 5, 6, 131, 207, 478, 482], "gap": 1, "dim": [1, 5, 145, 146, 335, 339, 343, 345, 373, 375, 377, 381, 386, 394], "want": [1, 5, 475, 476, 482], "avoid": [1, 2, 365, 474], "automat": [1, 2, 7, 143, 191, 475, 480, 481, 482], "a_shap": 1, "a_strid": 1, "a_ndim": 1, "built": [1, 2, 8, 478], "util": [1, 2, 5, 7, 8, 260, 319, 449, 475], "fetch": 1, "thread": [1, 2], "arbitrarili": [1, 94, 319, 473, 476, 480], "without": [1, 5, 7, 276, 373, 443, 473, 474, 475, 478, 479, 482], "reli": [1, 2], "backend": [1, 8, 123, 124], "h": [1, 2, 98, 99, 100, 102, 103, 104, 186, 322, 323, 326, 327, 329, 330, 332, 333, 338, 344, 351, 378, 476, 478], "includ": [1, 2, 108, 109, 110, 111, 143, 208, 209, 214, 345, 354, 366, 376, 419, 449, 474, 476, 477, 480, 481, 483], "loc": [1, 240, 242], "elem_to_loc": [1, 2], "alwai": [1, 83, 208, 305, 476], "myexp_strid": 1, "more": [1, 2, 3, 6, 10, 78, 118, 163, 182, 183, 185, 188, 189, 201, 213, 214, 258, 259, 312, 319, 323, 332, 381, 386, 394, 395, 397, 398, 399, 400, 416, 471, 474, 475, 476, 477, 480, 482], "grid_sampl": 1, "bilinear": [1, 395], "ll": [1, 4, 6, 421, 474, 476], "op": [1, 2, 227, 296, 358, 478], "grid_sample_ref": 1, "h_in": 1, "w_in": 1, "_": [1, 3, 4, 5, 307, 319, 463, 464, 465, 466, 467, 471, 474, 478, 482], "ix": 1, "ii": 1, "ix_nw": 1, "iy_nw": 1, "ix_n": 1, "iy_n": 1, "ix_sw": 1, "iy_sw": 1, "ix_s": 1, "iy_s": 1, "nw": 1, "ne": 1, "sw": 1, "se": 1, "i_nw": 1, "none": [1, 2, 5, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 121, 122, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 212, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 305, 306, 307, 308, 310, 321, 322, 336, 350, 351, 353, 357, 358, 365, 370, 373, 378, 386, 394, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 451, 469, 477], "i_n": 1, "i_sw": 1, "i_s": 1, "mask_nw": 1, "mask_n": 1, "mask_sw": 1, "mask_s": 1, "now": [1, 2, 5, 8, 376, 474, 475, 479], "custom_funct": 1, "gpu": [1, 3, 7, 8, 207, 474, 477, 482], "both": [1, 2, 13, 87, 88, 89, 128, 129, 133, 166, 167, 177, 179, 180, 181, 186, 196, 203, 218, 220, 224, 230, 237, 250, 253, 278, 302, 321, 322, 343, 344, 350, 351, 449, 474, 475, 476, 480, 482], "forward": [1, 2, 294, 474, 478], "backward": [1, 474, 476], "fuse": [1, 474], "4d": [1, 395], "gn": 1, "gm": 1, "out_shap": [1, 2], "x_shape": 1, "gh": 1, "grid_shap": 1, "gw": 1, "w_stride": 1, "h_stride": 1, "b_stride": 1, "grid_idx": 1, "batch_idx": 1, "channel_idx": 1, "base_idx": 1, "np": [1, 5, 6, 475, 479, 480], "reason": [1, 5, 477], "1024": [1, 5], "On": [1, 474, 476, 478], "m1": [1, 5, 474, 476, 482], "see": [1, 2, 5, 6, 8, 10, 11, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 186, 213, 258, 259, 302, 312, 319, 323, 324, 332, 334, 336, 340, 341, 342, 348, 349, 356, 374, 375, 376, 379, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 393, 395, 397, 398, 399, 400, 406, 407, 408, 434, 474, 475, 476, 477, 480, 482], "big": [1, 474], "improv": [1, 2, 3, 5, 416, 450, 451, 452, 453, 454, 455, 461, 474, 475], "55": 1, "7m": 1, "6": [1, 2, 5, 186, 260, 380, 394, 398, 407, 408, 412, 419, 429, 433, 461, 474, 477, 480], "8x": 1, "speed": [1, 2], "up": [1, 2, 5, 112, 474], "decor": [1, 112], "transform": [1, 5, 7, 112, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 168, 303, 319, 323, 339, 345, 347, 357, 358, 370, 376, 381, 477], "differenti": [1, 2, 7, 324, 404], "atom": [1, 143], "x_grad": 1, "grid_grad": 1, "few": [1, 2, 5, 6, 7, 8, 475, 478, 480], "extra": [1, 306, 307], "featur": [1, 7, 98, 99, 100, 101, 102, 103, 104, 145, 323, 338, 339, 343, 344, 345, 347, 376, 377, 378, 381, 394, 395, 474, 478], "init_valu": 1, "initi": [1, 3, 4, 5, 123, 308, 319, 323, 339, 343, 345, 347, 374, 377, 396, 397, 398, 399, 400, 401, 402, 403, 447, 458, 463, 464, 466, 467, 474, 475, 478], "run": [1, 2, 3, 5, 6, 7, 8, 9, 143, 227, 310, 323, 353, 450, 451, 453, 454, 455, 474, 475, 478, 482, 483], "u": [1, 2, 182, 188, 347, 372, 469, 478], "part": [1, 2, 476, 477], "atomic_output": [1, 143], "design": [1, 4, 7, 471, 482], "simultan": 1, "section": [1, 5, 8, 270, 429, 474, 475, 476], "15": [1, 8, 186, 308, 474], "detail": [1, 2, 10, 213, 319, 332, 381, 386, 395, 397, 398, 399, 400, 450, 452, 453, 455, 456, 477, 480], "grid_sample_vjp": 1, "primal": [1, 2, 112, 178, 297], "cotang": [1, 2, 112, 297], "nearest": [1, 395], "larger": [1, 145, 381, 456], "simdgroup": 1, "c_pad": 1, "ceildiv": 1, "threads_per_simdgroup": 1, "gix": 1, "gii": 1, "cot_index": 1, "cot": 1, "atomic_fetch_add_explicit": 1, "memory_order_relax": 1, "gix_mult": 1, "giy_mult": 1, "across": [1, 2, 339, 475], "much": [1, 2, 5, 321, 322, 350, 351, 474, 478], "faster": [1, 2, 8, 129, 406, 416, 474, 476], "than": [1, 2, 5, 78, 105, 118, 129, 145, 163, 166, 167, 180, 181, 182, 183, 185, 188, 189, 201, 213, 304, 306, 381, 392, 395, 425, 428, 441, 451, 456, 474, 476, 482], "pure": [1, 319, 449], "simd_sum": 1, "thread_index_in_simdgroup": 1, "grid_sample_grad": 1, "channel": [1, 98, 99, 100, 101, 102, 103, 104, 323, 325, 326, 327, 328, 329, 330, 332, 333], "simd": 1, "our": [1, 2, 5, 6, 383, 450, 451, 452, 453, 455, 456, 475], "overlap": 1, "simdgroup_s": 1, "32": [1, 5, 6, 90, 233, 234, 312, 322, 351, 377, 474], "grid_siz": 1, "There": [1, 2, 319, 395, 474], "even": [1, 2, 5, 94, 474, 478, 479], "676": 1, "4m": 1, "40x": 1, "you": [2, 3, 5, 6, 7, 8, 319, 386, 394, 444, 471, 474, 475, 476, 477, 479, 481, 482], "extend": [2, 228], "guid": [2, 7], "explain": 2, "how": [2, 5, 6, 319, 321, 322, 325, 326, 327, 328, 329, 330, 335, 350, 351, 375, 395, 457, 474, 477, 482], "simpl": [2, 5, 6, 319, 335, 443, 449, 474, 475, 476, 478], "sai": [2, 5, 444, 478], "would": [2, 5, 395, 475, 477, 478, 479, 482], "like": [2, 5, 7, 126, 177, 226, 301, 333, 424, 458, 460, 474, 475, 476, 478, 479, 480, 482], "coeffici": [2, 450, 451, 453, 454, 455, 456], "respect": [2, 4, 6, 142, 144, 163, 164, 165, 233, 294, 306, 319, 323, 336, 339, 343, 345, 447, 476, 480], "get": [2, 4, 6, 8, 99, 100, 101, 103, 104, 113, 114, 207, 208, 209, 210, 239, 319, 474, 476, 478, 482], "z": [2, 338, 474, 478], "directli": [2, 5, 83], "import": [2, 3, 4, 5, 6, 8, 112, 168, 186, 260, 294, 305, 306, 307, 308, 309, 319, 321, 322, 323, 343, 350, 351, 360, 395, 416, 418, 425, 444, 447, 449, 474, 475, 476, 477, 478, 479, 480], "simple_axpbi": 2, "while": [2, 3, 5, 8, 252, 381, 478, 479], "leav": [2, 136, 306, 307, 308], "howev": [2, 112, 319, 336, 339, 458, 471, 474, 475, 478, 479], "mai": [2, 186, 302, 332, 475, 476, 477], "underli": [2, 296], "perhap": [2, 5], "tutori": 2, "go": [2, 5, 476], "It": [2, 5, 8, 126, 165, 263, 294, 304, 308, 319, 372, 376, 457, 469, 479, 481], "cover": 2, "structur": [2, 457, 476], "librari": [2, 8, 314, 319], "redirect": 2, "acceler": [2, 323], "appropri": [2, 474], "metal": [2, 7, 143], "vjp": [2, 112, 480], "jvp": [2, 112, 480], "graph": [2, 5, 6, 7, 476], "rule": [2, 449], "evalu": [2, 5, 6, 7, 127, 136, 178, 297, 319, 356, 367, 447, 449, 474, 480], "discuss": 2, "front": 2, "axpbi": 2, "numpi": [2, 5, 6, 7, 13, 16, 18, 87, 88, 89, 91, 128, 129, 133, 166, 167, 171, 179, 180, 181, 196, 201, 203, 218, 220, 224, 230, 250, 253, 278, 478, 480, 481], "style": [2, 13, 16, 87, 88, 89, 128, 129, 133, 166, 167, 171, 179, 180, 181, 196, 201, 203, 218, 220, 224, 230, 250, 253, 278], "upcast": 2, "factor": [2, 14, 168, 182, 183, 187, 395, 418, 464, 467], "stream": [2, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 121, 122, 125, 126, 127, 128, 129, 130, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 299, 300, 301, 475, 482], "schedul": [2, 214, 449, 463, 464, 465, 466, 467, 469, 482], "simplest": [2, 319, 475], "wai": [2, 5, 8, 319, 395, 474, 475, 476, 477], "term": [2, 419, 450, 451, 452, 453, 454, 455, 461], "exist": [2, 3, 5, 358, 370], "themselv": [2, 474], "contain": [2, 5, 8, 28, 29, 68, 94, 118, 131, 153, 154, 155, 163, 164, 186, 197, 198, 199, 233, 270, 299, 304, 319, 357, 359, 360, 366, 394, 425, 444, 447, 474, 475, 476], "act": [2, 424], "nor": [2, 165, 294], "rather": [2, 476, 482], "easi": [2, 319, 475], "interfac": 2, "further": [2, 8, 476], "ha": [2, 3, 5, 6, 7, 8, 78, 94, 118, 127, 153, 154, 156, 157, 158, 165, 182, 183, 185, 188, 189, 205, 209, 237, 323, 338, 344, 347, 378, 447, 449, 474, 477, 478, 480, 482], "method": [2, 5, 9, 10, 30, 112, 120, 302, 310, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 364, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 447, 450, 451, 452, 453, 454, 455, 456, 458, 461, 462, 469], "concret": [2, 338, 344, 347, 378, 478, 482], "class": [2, 5, 6, 9, 10, 11, 30, 112, 120, 310, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 447, 450, 451, 452, 453, 454, 455, 456, 461, 462, 469], "public": [2, 319], "explicit": [2, 458, 471, 479], "alpha_": 2, "beta_": 2, "know": [2, 5], "itself": [2, 302, 458], "popul": 2, "unnecessari": [2, 5], "alloc": [2, 209, 213, 214, 447], "respons": 2, "eval_cpu": 2, "overrid": [2, 132], "eval_gpu": 2, "jacobian": [2, 178, 297, 480], "argnum": [2, 165, 294, 476], "cotan": [2, 112], "repres": [2, 5, 120, 123, 164, 425, 429, 479], "virtual": 2, "vmap": [2, 112, 476, 478, 480], "ostream": 2, "o": [2, 8, 146, 344], "is_equival": 2, "privat": 2, "fall": [2, 112], "eval": [2, 3, 4, 5, 6, 319, 447, 449, 474, 475, 476, 478, 480], "deriv": [2, 476, 478], "reimplement": 2, "promot": 2, "promoted_dtyp": 2, "promote_typ": 2, "out_dtyp": 2, "is_floating_point": 2, "cast": [2, 37, 156, 157, 158, 191, 353, 365, 479], "x_cast": 2, "y_cast": 2, "broadcasted_input": 2, "unique_ptr": 2, "make_shar": 2, "to_stream": 2, "handl": [2, 319, 474], "resolv": 2, "No": [2, 5], "happen": [2, 5, 142, 394, 449, 474, 478], "call": [2, 3, 5, 6, 31, 126, 161, 206, 210, 319, 335, 358, 370, 375, 383, 447, 449, 458, 474, 475, 476, 478], "alon": [2, 479], "execut": [2, 8, 84, 85, 86, 210, 479, 482], "user": [2, 5, 319], "naiv": [2, 476], "version": [2, 8, 116, 141, 196, 200, 233, 268, 298, 471, 476, 477], "declar": 2, "member": [2, 319, 363, 368], "earlier": 2, "find": [2, 4, 8, 475], "captur": [2, 3, 94, 215, 216, 319, 474], "axpby_impl": 2, "readi": 2, "malloc_or_wait": 2, "synchron": [2, 474], "avail": [2, 4, 5, 6, 8, 10, 124, 211, 314, 482], "wait": [2, 5, 214], "here": [2, 5, 449, 474, 476, 478, 481, 482], "request": 2, "under": [2, 186], "pressur": 2, "set_data": 2, "nbyte": 2, "collect": [2, 306, 307, 473], "pointer": 2, "x_ptr": 2, "y_ptr": 2, "out_ptr": 2, "relev": 2, "static_cast": 2, "out_idx": 2, "map": [2, 6, 38, 191, 306, 335, 353], "x_offset": 2, "y_offset": 2, "regularli": 2, "doesn": [2, 319], "should": [2, 4, 5, 6, 8, 83, 118, 121, 142, 143, 144, 146, 178, 206, 215, 232, 233, 283, 289, 294, 297, 302, 305, 319, 325, 326, 327, 328, 329, 330, 332, 333, 367, 373, 383, 418, 420, 425, 447, 473, 474, 475, 476, 478, 479, 483], "work": [2, 3, 5, 214, 474, 475, 476, 477, 478], "incom": 2, "accordingli": 2, "dispatch": 2, "bfloat16": [2, 11, 168, 312, 479], "complex64": [2, 11, 312], "throw": [2, 94, 123], "encount": [2, 476], "unexpect": [2, 18], "correct": [2, 8, 453, 454, 455, 477, 478], "bfloat16_t": 2, "complex64_t": 2, "runtime_error": 2, "good": [2, 8, 449, 474, 475, 482], "fallback": 2, "routin": 2, "framework": [2, 7], "certain": [2, 367, 474], "case": [2, 5, 121, 122, 123, 125, 126, 127, 149, 152, 153, 155, 156, 157, 158, 159, 182, 183, 184, 185, 187, 188, 189, 201, 252, 273, 322, 332, 351, 392, 410, 428, 434, 440, 441, 457, 458, 474, 476, 480, 481, 482, 483], "half": [2, 18, 244, 248, 381, 478], "fix": [2, 5, 8, 478], "direct": [2, 5, 355, 456, 482], "column": [2, 140, 169, 233], "place": [2, 5, 38, 254, 255, 302, 475, 478, 479], "expect": [2, 5, 325, 326, 327, 328, 329, 330, 331, 332, 333, 386, 394, 419, 474, 477], "catlas_saxpbi": 2, "axpby_impl_acceler": 2, "special": 2, "copy_inplac": 2, "copytyp": 2, "inplac": [2, 8], "incx": 2, "inci": 2, "fit": [2, 233, 482], "criteria": 2, "With": 2, "mind": [2, 5], "finish": 2, "singl": [2, 6, 136, 178, 191, 205, 228, 297, 322, 351, 474, 477, 481], "flag": [2, 8, 474, 479], "row_contigu": 2, "col_contigu": 2, "common": [2, 449, 474, 478], "just": [2, 6, 345, 474, 477], "enough": [2, 478], "plan": [2, 474], "enjoi": 2, "appl": [2, 5, 7, 8, 482], "silicon": [2, 5, 7, 8, 482], "address": 2, "kernel": [2, 7, 8, 98, 99, 100, 101, 102, 103, 104, 143, 321, 322, 350, 351, 474, 477], "written": 2, "help": [2, 5, 474, 482], "resourc": 2, "walkthrough": 2, "pipelin": 2, "document": [2, 3, 65, 79, 258, 259, 312, 474, 476, 477], "cpp": 2, "keep": [2, 15, 17, 26, 27, 200, 202, 204, 217, 231, 275, 279, 295, 319, 357, 476, 478], "exactli": [2, 5, 145, 360, 476], "mani": [2, 83, 270, 325, 326, 327, 328, 329, 330, 335, 375, 474, 475, 478], "pick": 2, "axpby_gener": 2, "x_stride": 2, "y_stride": 2, "7": [2, 5, 186, 233, 477], "give": [2, 5, 6, 28, 474], "uniqu": [2, 471], "host": 2, "identifi": [2, 305, 473], "instantiate_axpbi": 2, "type_nam": 2, "axpby_general_": 2, "set": [2, 5, 6, 8, 94, 112, 119, 121, 122, 123, 125, 126, 127, 132, 142, 145, 207, 213, 214, 262, 263, 277, 336, 345, 347, 356, 358, 365, 366, 367, 370, 371, 376, 381, 392, 417, 429, 441, 447, 449, 451, 458, 471, 476, 478], "grid": [2, 143, 205], "shown": 2, "below": [2, 8, 186, 291, 293, 312, 395, 478], "prepar": [2, 5], "carri": 2, "ostringstream": 2, "kname": 2, "axpby_": 2, "general_": 2, "type_to_nam": 2, "sure": [2, 3, 5, 8, 319, 474], "register_librari": 2, "mlx_ext": 2, "get_kernel": 2, "str": [2, 105, 130, 131, 143, 165, 186, 191, 205, 207, 215, 257, 258, 259, 260, 261, 294, 305, 309, 353, 354, 357, 358, 360, 362, 364, 370, 395, 399, 400, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429], "encod": [2, 145, 381, 386, 394, 418], "compute_encod": 2, "get_command_encod": 2, "setcomputepipelinest": 2, "regist": [2, 6], "those": [2, 5, 319], "nelem": 2, "set_input_arrai": 2, "set_output_arrai": 2, "setbyt": 2, "sizeof": 2, "higher": [2, 170, 425, 476], "tgp_size": 2, "maxtotalthreadsperthreadgroup": 2, "mtl": 2, "group_dim": 2, "grid_dim": 2, "among": 2, "dispatchthread": 2, "thing": [2, 5, 475], "track": [2, 319, 323], "activ": [2, 8, 208, 332, 392, 394, 410, 430, 440, 441, 443, 474], "command_buff": 2, "mtlcommandbuff": 2, "associ": [2, 260, 261, 478], "command": [2, 3, 8, 475], "instead": [2, 8, 112, 319, 372, 386, 475, 476, 478], "end_encod": 2, "until": [2, 478, 480], "hit": 2, "flush": 2, "next": [2, 5, 6, 213], "top": [2, 288, 347, 395], "diff": 2, "push": 2, "similarli": [2, 8, 201, 476, 478], "scale_arr": 2, "contribut": 2, "tangent_x": 2, "tangent_i": 2, "unus": 2, "arg": [2, 5, 10, 18, 120, 136, 260, 261], "push_back": 2, "fulli": [2, 7, 474, 475, 479, 482], "look": [2, 5, 475], "overal": 2, "directori": [2, 5, 8], "mlx_sample_extens": 2, "__init__": [2, 5, 6, 9, 10, 11, 30, 112, 120, 310, 319, 447], "py": [2, 5, 8, 475], "cmakelist": 2, "txt": 2, "setup": [2, 4, 6, 8, 474], "packag": [2, 4, 6, 8, 314, 444, 475], "hold": [2, 5, 10, 11, 186, 474], "instal": 2, "nanobind": [2, 394], "compon": [2, 5], "etc": [2, 233, 319, 395, 475], "alreadi": [2, 3, 5, 475], "nb_modul": 2, "_ext": 2, "doc": [2, 6, 475], "sampl": [2, 4, 5, 190, 236, 237, 238, 240, 241, 244, 247, 248, 397, 398, 399, 400, 402, 403, 419, 425, 429, 471, 474], "_a": 2, "nb": 2, "kw_onli": 2, "r": [2, 5, 187, 294, 332, 338], "most": [2, 237, 319, 460, 474, 475, 476, 477, 478], "complex": [2, 96, 97, 154, 155, 156, 157, 158, 305, 312, 319, 372, 474, 476], "come": [2, 5, 475, 476], "bell": 2, "whistl": 2, "liter": [2, 228, 395, 399, 400, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429], "modul": [2, 5, 6, 302, 303, 383, 394, 444, 460, 473, 474, 478], "caster": 2, "find_packag": 2, "config": [2, 475], "link": [2, 8], "your": [2, 5, 8, 447, 476, 478], "add_librari": 2, "target_sourc": 2, "cmake_current_list_dir": 2, "header": [2, 143], "target_include_directori": 2, "target_link_librari": 2, "attach": 2, "mlx_build_metallib": 2, "metallib": [2, 8], "target": [2, 294, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 474], "what": [2, 5, 306], "practic": [2, 474], "mlx_build_met": [2, 8], "mlx_ext_metallib": 2, "titl": 2, "include_dir": 2, "project_source_dir": 2, "mlx_include_dir": 2, "output_directori": 2, "cmake_library_output_directori": 2, "add_depend": 2, "endif": 2, "final": [2, 4, 5, 6, 168, 463, 466], "nanobind_add_modul": 2, "nb_static": 2, "stable_abi": 2, "lto": 2, "nomins": 2, "nb_domain": 2, "build_shared_lib": [2, 8], "target_link_opt": 2, "wl": 2, "rpath": 2, "loader_path": 2, "onc": [2, 8, 474], "describ": [2, 478], "__name__": [2, 5], "__main__": [2, 5], "descript": [2, 5, 312], "ext_modul": 2, "cmakeextens": 2, "cmdclass": 2, "build_ext": [2, 8], "cmakebuild": 2, "package_data": 2, "dylib": 2, "extras_requir": 2, "dev": [2, 8], "zip_saf": 2, "python_requir": 2, "though": [2, 5, 474, 478, 479], "pip": [2, 8], "develop": [2, 8], "j8": 2, "libmlx_ext": 2, "cpython": 2, "3x": 2, "darwin": 2, "try": [2, 8], "after": [2, 5, 6, 28, 159, 161, 164, 206, 229, 233, 323, 339, 345, 353, 354, 358, 360, 367, 370, 371, 372, 373, 394, 428, 474, 482], "abl": [2, 233], "simpli": [2, 5, 8, 334, 346, 379, 405, 413, 432, 442, 447, 474, 475, 476], "plai": [2, 5], "quick": [2, 7], "benchmark": [2, 474], "compar": [2, 82, 474], "time": [2, 5, 8, 214, 287, 319, 321, 322, 338, 344, 350, 351, 378, 474, 476, 478, 482], "set_default_devic": 2, "512": [2, 3, 5, 394, 482], "bench": 2, "warm": [2, 474], "100": [2, 4, 5, 416, 466, 474, 476, 478, 482], "5000": 2, "e": [2, 6, 8, 112, 134, 143, 163, 164, 178, 264, 323, 325, 326, 327, 328, 329, 330, 332, 333, 339, 343, 345, 358, 377, 414, 415, 437, 438, 443, 449, 452, 474, 478, 483], "simple_tim": 2, "custom_tim": 2, "3f": [2, 6, 474], "114": 2, "109": 2, "modest": 2, "awai": [2, 5], "nn": [2, 5, 6, 260, 306, 319, 444, 447, 449, 458, 460, 474, 478], "grad": [2, 4, 6, 294, 304, 449, 457, 474, 475, 476, 477, 478, 480], "profil": 3, "optim": [3, 4, 6, 7, 371, 474, 475, 476, 478], "build": [3, 5, 7, 399, 447, 474], "mlx_metal_debug": [3, 8], "record": [3, 210, 478], "dure": [3, 94, 331, 332, 333, 395, 479], "later": [3, 8, 449], "inspect": [3, 474, 480], "label": [3, 4, 418, 425], "object": [3, 10, 30, 50, 78, 94, 143, 177, 260, 298, 305, 306, 307, 308, 312, 332, 394, 473], "queue": 3, "readabl": 3, "enabl": [3, 5, 8, 94, 132, 462], "prepend": [3, 201], "cmake_arg": 3, "dmlx_metal_debug": 3, "ON": [3, 8], "start_captur": 3, "applic": [3, 8], "mtl_capture_en": 3, "uniform": [3, 319, 347, 360, 398, 400, 444, 471, 474, 476, 482], "trace_fil": 3, "mlx_trace": 3, "gputrac": [3, 215], "path": [3, 8, 131, 215, 260, 261, 302, 307, 360, 475], "stop_captur": 3, "open": [3, 8, 18, 244, 248], "replai": 3, "great": 3, "overview": 3, "oper": [3, 5, 7, 9, 37, 84, 85, 86, 101, 146, 163, 164, 230, 232, 268, 276, 283, 310, 319, 394, 456, 474, 475, 476, 477, 478, 479, 480, 482, 483], "checkout": [3, 474], "inform": [3, 5, 6, 8, 131, 207, 258, 259, 312, 319, 323, 336, 373, 476, 482], "skip": [3, 83], "save": [3, 5, 7, 191, 215, 233, 258, 259, 260, 261, 364, 478], "project": [3, 5, 373], "cmake": [3, 8], "mkdir": [3, 8], "cd": [3, 8], "g": [3, 8, 112, 143, 186, 233, 344, 443, 461, 462, 478, 483], "xcodeproj": 3, "metal_captur": 3, "schema": 3, "basic": [4, 255, 476], "model": [4, 6, 7, 260, 302, 303, 306, 307, 319, 353, 356, 358, 360, 364, 367, 369, 370, 371, 373, 394, 444, 447, 449, 457, 458, 460, 474, 475, 478], "learn": [4, 6, 7, 323, 339, 343, 345, 374, 377, 449, 450, 451, 452, 453, 454, 455, 456, 461, 462], "problem": [4, 6, 319], "metadata": [4, 191, 258, 259], "num_featur": [4, 323], "num_exampl": 4, "1_000": 4, "num_it": 4, "10_000": 4, "iter": [4, 6, 188, 306, 307, 471, 474, 478], "sgd": [4, 6, 449, 456, 458, 463, 464, 467, 474], "lr": [4, 456], "01": [4, 346, 413, 454], "rate": [4, 449, 450, 451, 452, 453, 454, 455, 456, 461, 462], "synthet": 4, "dataset": [4, 475, 478], "ground": [4, 5, 418, 428], "truth": [4, 418, 428], "w_star": 4, "gaussian": [4, 336, 406, 407, 408, 419], "nois": 4, "noisi": 4, "ep": [4, 142, 144, 323, 339, 343, 345, 377, 417, 419, 429, 449, 450, 451, 452, 453, 454, 455, 461], "loss": [4, 6, 294, 319, 449, 474, 475, 476, 478], "loss_fn": [4, 6, 449, 474, 476], "grad_fn": [4, 474, 476], "randomli": [4, 5, 243, 331, 332, 333], "Then": [4, 8], "repeatedli": 4, "verifi": [4, 8], "close": [4, 7, 8, 16, 171], "error_norm": 4, "5f": 4, "someth": [4, 5, 477], "00005": 4, "00364": 4, "complet": [4, 5, 8, 214, 371, 372, 476, 482], "github": [4, 6, 8, 474], "repo": [4, 6, 8, 474], "effici": [5, 7, 163, 332, 381, 478, 480], "larg": [5, 319, 373, 424, 474, 475, 478], "ish": 5, "compromis": 5, "eas": 5, "llama": 5, "famili": 5, "200": [5, 465], "line": [5, 475, 478, 479], "neural": [5, 7, 335, 397, 398, 430, 444, 447, 461], "network": [5, 7, 323, 332, 335, 397, 398, 444, 447, 461, 475], "concis": 5, "architectur": [5, 8, 207, 319, 372, 482], "notabl": [5, 7], "rope": [5, 319], "cach": [5, 8, 206, 208, 209, 213, 474], "llamaattent": 5, "self": [5, 6, 9, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 112, 310, 319, 430, 447], "num_head": [5, 373, 394], "super": [5, 6, 319, 447], "tradit": [5, 145, 332, 333, 381], "query_proj": 5, "bia": [5, 116, 141, 142, 164, 233, 234, 306, 319, 325, 326, 327, 328, 329, 330, 338, 344, 345, 347, 358, 360, 370, 373, 376, 378, 453, 454, 455, 458, 476], "key_proj": 5, "value_proj": 5, "out_proj": [5, 447], "queri": [5, 146, 373], "l": [5, 6, 182, 183, 319, 321, 323, 325, 328, 338, 344, 350, 378, 428], "combin": [5, 188, 308], "key_cach": 5, "value_cach": 5, "math": [5, 429, 474], "score": [5, 146, 425], "values_hat": 5, "possibli": [5, 14, 90, 163, 201, 304], "rm": [5, 8, 144, 451], "swiglu": 5, "rmsnorm": [5, 319], "llamaencoderlay": 5, "mlp_dim": [5, 394], "norm1": 5, "norm2": 5, "linear1": 5, "linear2": 5, "linear3": 5, "instanc": [5, 38, 112, 233, 309, 319, 343, 353, 354, 355, 358, 360, 361, 362, 367, 370, 371, 372, 383, 447, 479], "embed": [5, 302, 319, 375, 381, 386, 417], "emb": [5, 335, 375, 386], "token": [5, 335, 375], "num_lay": [5, 6, 449], "vocab_s": 5, "norm": [5, 144, 304, 339, 429, 455, 456], "multiheadattent": [5, 319], "create_additive_causal_mask": 5, "still": [5, 8, 186, 474, 478], "consid": [5, 16, 82, 171, 305, 306, 307, 339, 473], "train": [5, 6, 319, 323, 331, 332, 333, 356, 358, 370, 397, 398], "process": [5, 101, 105, 120, 121, 122, 123, 125, 126, 127, 306, 307, 333, 335, 394, 473, 475], "ignor": [5, 38, 93, 94, 136, 451], "whatsoev": 5, "rest": [5, 145, 306, 307, 381], "subsect": 5, "prompt": 5, "autoregress": 5, "yield": [5, 6, 471], "temp": 5, "causal": 5, "append": [5, 201, 474, 478], "store": 5, "per": [5, 6, 116, 141, 164, 233, 234, 302, 323, 339, 343, 345, 377, 469, 474, 475, 478], "care": [5, 478], "logit": [5, 237, 416, 418, 474], "categor": 5, "lazili": [5, 319], "noth": [5, 319, 478], "yet": [5, 186, 319, 447, 458, 476, 477, 478, 480], "forc": [5, 6, 319, 475, 480], "choos": [5, 145, 381], "pars": 5, "feed": 5, "back": [5, 112, 211, 479], "loop": [5, 6, 474, 475, 476, 478], "unsqueez": 5, "sequenc": [5, 15, 17, 33, 34, 56, 57, 58, 59, 63, 71, 74, 75, 76, 80, 83, 91, 101, 125, 138, 143, 148, 149, 151, 152, 154, 155, 157, 158, 162, 200, 202, 204, 217, 225, 231, 236, 237, 238, 240, 241, 242, 244, 247, 248, 252, 268, 270, 273, 275, 279, 286, 287, 290, 295, 300, 323, 325, 328, 338, 344, 378, 394, 471, 482], "length": [5, 273, 323, 325, 328, 338, 344, 378, 465], "len": [5, 149, 152, 155, 158, 168, 465], "overwrit": 5, "discard": [5, 305], "old": 5, "moment": [5, 451, 453, 454, 455], "anymor": 5, "everyth": [5, 475], "small": [5, 139, 142, 144, 323, 339, 345, 377, 419, 424, 429, 474, 475, 482], "12": [5, 168, 465], "8192": [5, 168], "actual": [5, 18, 360, 447, 478], "materi": [5, 7], "could": [5, 319], "20_000": 5, "machin": [5, 7, 8, 461, 475], "8gb": 5, "ram": 5, "44": 5, "bracket": 5, "becaus": [5, 208, 319, 478], "batch": [5, 14, 90, 163, 164, 201, 241, 323, 325, 326, 327, 328, 329, 330, 332, 333, 338, 344, 373, 378, 395, 478], "zip": [5, 6], "haven": 5, "anyth": [5, 294, 478], "veri": [5, 373, 475, 478, 482], "similar": [5, 164, 177, 306, 371, 372, 373, 417, 479, 481], "runtim": [5, 123, 314, 474, 475], "origin": [5, 118, 304, 323, 366, 397, 398, 399, 400, 450, 451, 452, 453, 455, 456, 479], "sentencepiec": 5, "pytorch": [5, 7, 336, 339, 476], "compat": [5, 237, 241, 336, 481], "npz": [5, 191, 260, 261, 360, 364, 481], "file": [5, 8, 191, 257, 258, 259, 260, 261, 360, 364, 475, 476, 481], "argpars": 5, "itertool": [5, 306], "starmap": [5, 306], "torch": [5, 479], "map_torch_to_mlx": 5, "tok_embed": 5, "elif": 5, "attention_norm": 5, "ffn_norm": 5, "wq": 5, "wk": 5, "wv": 5, "wo": 5, "w1": [5, 304], "w2": [5, 304], "w3": 5, "ffn": 5, "separ": [5, 65, 79, 339, 425], "submodul": [5, 6, 319, 354, 358, 359, 370, 372], "feed_forward": 5, "parser": 5, "argumentpars": 5, "add_argu": 5, "torch_weight": 5, "output_fil": 5, "parse_arg": 5, "state": [5, 6, 319, 338, 344, 378, 449, 458, 471, 474], "savez": [5, 364, 481], "v": [5, 105, 146, 319, 358, 479], "disk": 5, "text": [5, 321, 322, 336, 338, 344, 350, 351, 352, 378, 385, 392, 397, 398, 399, 400, 407, 410, 411, 412, 419, 420, 421, 424, 425, 428, 430, 431, 434, 435, 440, 441, 451, 456], "format": [5, 191, 257, 258, 259, 260, 261, 479], "dictionari": [5, 94, 191, 207, 258, 259, 304, 305, 308, 319, 357, 366, 371, 372, 459, 473, 481], "represent": [5, 233, 296, 305, 309], "tree_unflatten": [5, 449], "helper": [5, 143, 474], "weight_fil": 5, "incur": [5, 8], "sever": [5, 8, 98, 99, 100, 101, 102, 103, 104, 260, 261, 474, 481], "futur": [5, 376, 477, 478], "pth": 5, "current": [5, 7, 8, 83, 90, 100, 103, 104, 127, 207, 209, 233, 308, 319, 451, 475, 478], "around": 5, "ultra": 5, "7b": 5, "me": 5, "ishmael": 5, "year": 5, "ago": 5, "never": [5, 478], "long": 5, "info": [5, 8], "247": 5, "press": [5, 186], "enter": 5, "littl": 5, "monei": 5, "my": [5, 8], "purs": 5, "consequ": 5, "walk": 5, "down": [5, 304], "gower": 5, "street": 5, "afternoon": 5, "heavi": 5, "rain": 5, "saw": [5, 476], "off": [5, 8, 478], "man": 5, "rag": 5, "who": 5, "sat": 5, "upon": [5, 306, 307], "hi": [5, 344], "bundl": 5, "hard": 5, "wet": 5, "he": [5, 399, 400], "were": [5, 482], "cry": 5, "watch": [5, 474], "him": 5, "observ": 5, "numer": [5, 142, 144, 186, 196, 200, 268, 323, 339, 343, 345, 377, 416, 417, 419, 429, 450, 451, 452, 453, 454, 455, 461, 474, 478], "crowd": 5, "wa": [5, 83, 125, 126, 475, 478], "hurri": 5, "437": 5, "330": 5, "second": [5, 8, 118, 177, 179, 197, 199, 201, 253, 280, 289, 294, 322, 351, 417, 425, 451, 453, 454, 455, 476, 482], "spent": 5, "amount": [5, 210, 321, 350], "39": 5, "By": [5, 302, 365, 416, 476, 479], "bigger": [5, 451], "well": [5, 319, 358, 370, 373, 478], "almost": 5, "nobodi": 5, "took": 5, "least": [5, 84, 85, 86, 93, 182, 183, 185, 187, 188, 189, 233], "notic": [5, 476, 481], "distanc": [5, 429], "had": 5, "doubt": 5, "minut": 5, "straight": 5, "slowli": 5, "speak": [5, 186], "resum": 5, "postur": 5, "stood": 5, "feel": 5, "pain": 5, "heart": 5, "said": 5, "smile": 5, "face": 5, "am": 5, "someon": 5, "three": [5, 86, 395], "quarter": 5, "hour": 5, "made": [5, 314], "immedi": [5, 353], "repli": 5, "again": [5, 8, 319, 474], "hand": [5, 476, 478], "did": 5, "accustom": 5, "thu": [5, 319], "question": [5, 478], "tell": [5, 474, 479], "understand": [5, 397, 398], "579": 5, "690": 5, "500": [5, 482], "628": 5, "went": 5, "nervou": 5, "trembl": 5, "told": 5, "why": 5, "And": [5, 395], "surpris": 5, "matter": [5, 319], "shall": 5, "anyhow": 5, "friend": 5, "ye": 5, "slight": [5, 478], "kind": 5, "longer": [5, 105, 476], "soon": 5, "unless": [5, 16, 171, 186, 447], "unlik": [5, 16, 171, 332, 333, 366], "strang": 5, "amus": 5, "That": 5, "secret": 5, "disappoint": 5, "mine": 5, "cannot": [5, 93, 477, 479], "happi": 5, "ask": [5, 475], "shop": 5, "bui": 5, "food": 5, "633": 5, "21": [5, 467], "475": 5, "su": 5, "j": [5, 8, 186, 332, 452, 453, 455], "lu": 5, "pan": 5, "murtadha": 5, "wen": 5, "liu": 5, "2021": 5, "roform": [5, 381], "enhanc": [5, 381, 478], "rotari": [5, 145, 381], "arxiv": [5, 339, 343, 345, 352, 377, 408, 430, 450, 456], "preprint": [5, 450, 456], "2104": 5, "09864": 5, "zhang": 5, "sennrich": 5, "2019": [5, 454], "advanc": [5, 474], "system": [5, 8, 207, 208, 209], "shazeer": 5, "2020": 5, "glu": [5, 319], "variant": [5, 428, 455], "2002": 5, "05202": 5, "classifi": 6, "mnist": 6, "As": [6, 38, 282, 319, 474], "mlp": [6, 319, 394, 449], "inherit": [6, 473], "idiom": [6, 474], "input_dim": [6, 319, 347, 376], "hidden_dim": [6, 447, 449], "output_dim": [6, 319, 347, 376], "layer_s": 6, "idim": 6, "odim": 6, "cross": [6, 101, 416, 418], "entropi": [6, 416, 418], "commonli": [6, 371, 444, 474], "cross_entropi": [6, 319], "accuraci": 6, "valid": [6, 105, 159, 298, 305, 358, 370, 473], "eval_fn": 6, "load": [6, 7, 314, 360, 475], "loader": 6, "num_class": [6, 449], "batch_siz": [6, 449], "num_epoch": [6, 449], "learning_r": [6, 449, 450, 451, 452, 453, 454, 455, 456, 458, 461, 462, 463, 464, 465, 466, 467, 474], "train_imag": [6, 449], "train_label": [6, 449], "test_imag": 6, "test_label": 6, "re": [6, 8, 444], "shuffl": 6, "minibatch": 6, "batch_iter": [6, 449], "perm": 6, "id": [6, 8], "trainabl": [6, 303, 319, 447], "loss_and_grad_fn": [6, 449, 474, 476], "value_and_grad": [6, 112, 319, 371, 447, 449, 460, 474, 476, 479, 480], "epoch": 6, "test": [6, 8, 475], "confus": 6, "decent": 6, "95": 6, "flexibl": 7, "brought": 7, "research": 7, "except": [7, 140, 153, 154, 156, 157, 158, 339, 360, 477, 479], "main": [7, 118, 140, 143, 289, 306, 307, 319, 475], "differ": [7, 177, 278, 296, 428, 476], "compos": [7, 319, 474, 476, 480], "lazi": [7, 447, 480], "multi": [7, 146, 325, 326, 327, 328, 329, 330, 477, 479], "cpu": [7, 8, 187, 474, 482], "inspir": 7, "jax": [7, 471], "arrayfir": 7, "unifi": 7, "live": [7, 143, 482], "share": [7, 116, 141, 164, 233, 234, 296, 475], "convers": 7, "distribut": [7, 8, 236, 237, 238, 240, 241, 242, 247, 248, 347, 397, 398, 399, 400, 402, 403, 419, 422, 427, 429, 444], "commun": [7, 120, 123, 124], "regress": [7, 424], "layer": [7, 142, 302, 319, 321, 322, 332, 333, 338, 339, 344, 345, 347, 350, 351, 367, 372, 375, 376, 378, 383, 394, 443, 447], "perceptron": 7, "llm": 7, "infer": [7, 162, 191, 289, 475], "fft": 7, "algebra": 7, "tree": [7, 94, 136, 165, 294, 298, 305, 306, 307, 308, 309, 457, 458, 460, 469, 476], "custom": [7, 112, 143, 394], "extens": [7, 191, 215, 364, 481], "debugg": 7, "pypi": 8, "own": [8, 479], "meet": 8, "seri": 8, "chip": 8, "nativ": 8, "maco": 8, "13": 8, "highli": 8, "recommend": [8, 214, 456], "14": 8, "sonoma": 8, "conda": [8, 475], "forg": 8, "match": [8, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 208, 360, 395, 418, 475, 477, 479], "probabl": [8, 244, 331, 332, 333, 376, 416, 418, 422, 482], "platform": 8, "processor": 8, "arm": 8, "i386": 8, "switch": 8, "17": 8, "clang": 8, "24": 8, "xcode": 8, "sdk": 8, "environ": [8, 119, 132, 475], "via": [8, 112, 457, 460, 475, 478, 479], "rosetta": 8, "unam": 8, "p": [8, 236, 319, 331, 332, 333, 429, 453, 455], "clone": 8, "git": 8, "com": [8, 475], "ml": 8, "explor": 8, "cmake_build_parallel_level": 8, "edit": [8, 372], "unittest": 8, "discov": 8, "stub": 8, "generate_stub": 8, "either": [8, 13, 65, 78, 79, 87, 88, 89, 93, 128, 129, 133, 161, 166, 167, 179, 180, 181, 186, 196, 201, 203, 218, 220, 224, 230, 250, 253, 278, 294, 322, 351, 383, 395, 399, 400, 479], "static": 8, "libmlx": 8, "preprocessor": 8, "metal_path": 8, "mlx_build_test": 8, "mlx_build_exampl": 8, "mlx_build_benchmark": 8, "mlx_build_cpu": 8, "mlx_build_python_bind": 8, "mlx_build_safetensor": 8, "mlx_build_gguf": 8, "mlx_metal_jit": 8, "wish": 8, "variabl": [8, 94, 119, 132, 165, 178, 294, 297, 298, 475], "export": 8, "developer_dir": 8, "app": 8, "content": [8, 357, 474], "xcrun": 8, "macosx": 8, "show": [8, 312, 474], "cmake_build_typ": 8, "minsizerel": 8, "safetensor": [8, 191, 259, 360, 364, 449, 478, 481], "gguf": [8, 191, 258, 481], "dcmake_build_typ": 8, "dbuild_shared_lib": 8, "dmlx_build_cpu": 8, "dmlx_build_safetensor": 8, "dmlx_build_gguf": 8, "dmlx_metal_jit": 8, "THE": 8, "pre": [8, 146, 416], "substanti": 8, "cold": 8, "cost": [8, 451, 475, 478], "anwywher": 8, "hundr": 8, "millisecond": [8, 474, 482], "persist": 8, "accross": 8, "reboot": 8, "unabl": 8, "tool": 8, "sudo": 8, "ouptut": 8, "finder": 8, "iterm": 8, "termin": 8, "click": 8, "uncheck": 8, "window": [8, 321, 322, 350, 351], "restart": 8, "grep": 8, "cmake_host_system_processor": 8, "arm64": 8, "x86_64": 8, "wipe": 8, "cahc": 8, "rf": 8, "devicetyp": 9, "kwarg": [10, 120, 260, 261, 483], "categori": [11, 177, 312], "bool_": [11, 312], "unsignedinteg": 11, "uint8": [11, 312], "uint16": [11, 312], "uint32": [11, 26, 27, 28, 29, 237, 312], "uint64": [11, 312], "signedinteg": [11, 177], "int8": [11, 312], "int64": [11, 312], "inexact": [11, 177], "complexflo": 11, "issubdtyp": [11, 312], "semant": [13, 87, 88, 89, 91, 128, 129, 133, 166, 167, 179, 180, 181, 196, 201, 203, 218, 220, 224, 230, 250, 253, 278, 482], "reduct": [15, 17, 122, 200, 202, 217, 231, 308, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 475], "unspecifi": [15, 17, 18, 26, 27, 28, 29, 95, 108, 109, 110, 111, 162, 200, 202, 204, 217, 225, 229, 231, 251, 268, 269, 275, 279, 282, 288, 289, 295, 300, 483], "entir": [15, 17, 26, 27, 200, 202, 204, 217, 231, 275, 279, 295, 332, 333], "05": [16, 171, 323, 339, 343, 345, 377], "08": [16, 171, 417, 452, 453, 454, 455, 461], "approxim": [16, 336, 406, 407, 408], "comparison": [16, 133, 166, 167, 180, 181, 224], "infinit": [16, 171, 172], "rel": [16, 171, 451, 474], "overload": 18, "union": [18, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 84, 85, 86, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 175, 176, 177, 207, 258, 277], "interv": [18, 190, 244, 248], "increment": 18, "otherwis": [18, 101, 123, 214, 243, 302, 305, 306, 307, 308, 358, 360, 370, 392, 394, 395, 410, 416, 421, 428, 440, 441, 478, 479], "convent": [18, 105, 130, 131, 395, 454], "fraction": 18, "integr": [18, 282, 478], "dimension": [30, 142, 144, 147, 148, 149, 150, 151, 152, 156, 157, 158, 321, 322, 323, 325, 326, 327, 328, 329, 330, 335, 347, 350, 351, 375, 376, 386, 477, 479], "ndarrai": [30, 477, 478, 480], "properti": [31, 38, 47, 51, 61, 62, 68, 70, 366, 369, 459, 476], "regular": [38, 332, 430, 454, 474, 477], "idx": [38, 477], "correctli": 38, "syntax": [38, 477], "datatyp": 51, "byte": [51, 61, 208, 209, 210, 213, 214, 312], "indices_or_sect": [71, 270], "nest": [78, 94, 308, 319, 447, 473, 476], "regardless": [83, 146], "storag": 83, "caution": 83, "chang": [83, 94, 263, 296, 371, 376, 395, 421, 428, 474, 479], "crash": [83, 474], "begin": [83, 183, 210, 233, 322, 338, 344, 351, 392, 410, 421, 428, 434, 440, 441], "ari": [84, 85, 86], "xor": 89, "lhs_mask": 90, "lceil": 90, "rceil": 90, "rhs_mask": 90, "out_mask": 90, "edg": [93, 228, 395, 474], "At": 93, "fun": [94, 165, 178, 294, 297, 298, 474, 477, 478, 482], "callabl": [94, 112, 143, 165, 178, 294, 297, 298, 302, 303, 305, 306, 307, 308, 353, 354, 357, 365, 378, 383, 394, 396, 397, 398, 399, 400, 401, 402, 403, 450, 451, 452, 453, 454, 455, 456, 461, 462, 463, 464, 465, 466, 467], "dict": [94, 136, 191, 207, 258, 259, 260, 304, 363, 368, 371, 372, 447, 449, 457, 458, 460, 473, 476, 481], "leaf": [94, 302, 305, 306, 307, 308, 357], "node": [94, 136, 298, 307, 308], "recompil": [94, 474], "Not": [94, 224, 474], "attempt": 94, "alia": [96, 97, 336], "conj": 97, "c_in": [98, 99, 100, 101, 102, 103, 104], "c_out": [98, 99, 100, 101, 102, 103, 104], "convolv": [98, 99, 100, 101, 102, 103, 104], "spatial": [99, 100, 101, 103, 104, 321, 339, 350, 395], "symmetr": [99, 100, 103, 104, 182, 183], "correl": [101, 332], "discret": [105, 147, 148, 149, 150, 151, 152, 156, 157, 158, 335, 375], "conv": 105, "signal": [105, 395], "th": [108, 109, 110, 111, 117, 140, 465], "definit": [112, 182, 183, 241], "meant": 112, "behav": 112, "wrap": [112, 319], "behaviour": [112, 182, 183], "usag": [112, 394, 474], "f_vjp": 112, "f_jvp": 112, "dx": 112, "dy": 112, "f_vmap": 112, "ai": 112, "angl": [115, 235, 346], "configur": [116, 141, 475], "formal": [116, 141, 233], "notat": [116, 141, 305, 362], "w_i": [116, 141, 233], "hat": [116, 141, 233], "occupi": [116, 141, 164, 233, 234], "subarrai": [118, 270], "insert": [118, 138, 482], "end": [118, 183, 211, 233, 254, 322, 338, 344, 351, 392, 410, 421, 428, 434, 440, 441, 463, 466], "taken": [118, 282, 289], "global": [119, 121, 122, 123, 125, 126, 127, 132, 245, 304, 471, 474], "disabl": [119, 213, 474], "mlx_disable_compil": [119, 132, 474], "independ": [120, 332, 333], "particip": [121, 122, 125, 126, 127], "strict": [123, 166, 180, 358, 360, 370], "is_avail": 123, "receiv": [125, 126, 302, 465, 479], "recv": 126, "dst": 127, "sned": 127, "empti": [127, 241], "fuction": 129, "subscript": [130, 131], "operand": [130, 131, 163], "einstein": [130, 131], "summat": [130, 131], "equat": [130, 131], "einsum": 131, "chosen": 131, "mathrm": [134, 264, 343], "frac": [134, 233, 264, 321, 322, 323, 331, 332, 333, 339, 343, 345, 347, 350, 351, 377, 385, 397, 398, 399, 400, 417, 419, 421, 424, 435, 437, 438, 450, 452, 453, 454, 455, 461], "pi": [134, 336, 386, 407, 476], "int_0": 134, "dt": 134, "minu": 139, "whose": [140, 302, 303], "translat": [142, 345], "stabil": [142, 144, 323, 339, 343, 345, 377, 416, 417, 419, 450, 451, 452, 453, 454, 455, 461], "jit": 143, "outsid": [143, 159], "whether": [143, 164, 189, 234, 338, 344, 357, 373, 378, 416, 419, 425], "freq": 145, "rotat": [145, 381], "unchang": [145, 276, 381], "consecut": [145, 233, 381], "angular": [145, 381], "frequenc": [145, 381, 386], "q": [146, 187], "head": [146, 373, 394], "attent": [146, 358, 373, 386, 394], "One": [147, 150, 156, 228, 256, 474, 476], "fourier": [147, 148, 149, 150, 151, 152, 156, 157, 158], "truncat": [147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 247], "dft": [147, 148, 149, 150, 151, 152, 156, 157, 158], "rfft": 153, "real": [153, 154, 155, 156, 157, 158, 182, 183], "rfft2": 154, "rfftn": 155, "silent": [156, 157, 158], "clamp": 159, "explicitli": [163, 319, 471], "flat": [163, 164, 305, 309], "a1": 163, "a2": 163, "AS": 163, "b1": 163, "b2": 163, "pack": [164, 233, 234], "unsign": [164, 233, 234, 312], "argnam": [165, 294], "neither": [165, 294], "keyword": [165, 260, 261, 294, 306, 319, 471, 481, 483], "walsh": 168, "scipi": 168, "linalg": 168, "20": [168, 186], "28": 168, "16384": 168, "orthonorm": 168, "ordinari": 170, "inifn": 173, "arg1": 177, "dtypecategori": [177, 312], "arg2": 177, "subtyp": [177, 312], "subdtyp": 177, "float64": 177, "too": [177, 474, 478], "upper": [182, 183, 189, 233, 244, 247, 248, 403], "decomposit": [182, 183, 188], "semi": [182, 183, 241], "triangular": [182, 183, 189], "lower": [182, 183, 189, 233, 244, 247, 248, 291, 403], "dot": [182, 185, 189, 286, 305, 362, 373], "choleski": 183, "mathbf": 183, "align": [183, 233, 322, 338, 344, 351], "third": 184, "ainv": [185, 189], "ord": 186, "frobeniu": 186, "matric": [186, 187, 188], "strictli": 186, "mathemat": 186, "variou": 186, "calcul": [186, 416, 419, 425, 451], "fro": 186, "inf": [186, 221, 373], "largest": [186, 221, 288], "sing": 186, "smallest": 186, "singular": [186, 188], "nuclear": 186, "_f": 186, "sum_": [186, 321, 322, 424], "a_": 186, "valueerror": [186, 360, 476], "refer": [186, 343, 352, 366, 397, 398, 399, 400, 408, 430, 477], "golub": 186, "van": 186, "loan": 186, "baltimor": 186, "md": 186, "john": 186, "hopkin": 186, "univers": 186, "1985": 186, "pg": 186, "la": 186, "9": [186, 418, 450, 453, 454, 455, 456, 458, 464, 467, 479], "74597": 186, "84804": 186, "41421": 186, "23607": [186, 187], "74166": 186, "24264": 186, "11": 186, "225": 186, "894427": 187, "447214": 187, "57771": 187, "vt": 188, "return_metadata": 191, "binari": [191, 257, 258, 259, 260, 261, 296, 392, 416, 441, 474], "npy": [191, 257, 481], "matadata": 191, "unsupport": 191, "tensor": [191, 286, 321, 322, 350, 351, 429, 479], "stabl": [196, 200, 268, 424], "multidimension": 205, "dens": [205, 482], "cartesian": 205, "ij": 205, "clear": 206, "get_cache_memori": 206, "max_buffer_s": 207, "max_recommended_working_set_s": 207, "memory_s": 207, "report": [208, 214], "peak": [210, 212], "program": [210, 475], "reset_peak_memori": 210, "reset": 212, "free": 213, "reclaim": 213, "set_memory_limit": 213, "previou": [213, 214], "relax": 214, "task": [214, 424], "exceed": 214, "potenti": 214, "beforehand": 227, "constant_valu": 228, "before_1": 228, "after_1": 228, "before_2": 228, "after_2": 228, "before_n": 228, "after_n": 228, "before_i": 228, "after_i": 228, "exclud": [232, 283], "prior": [232, 282, 283], "everi": [233, 306, 449, 467, 476], "particular": [233, 339], "w_1": 233, "w_g": 233, "max_i": 233, "min_i": 233, "textrm": [233, 336, 337, 406, 409], "1st": 233, "signific": 233, "2nd": 233, "w_q": 233, "prng": [236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 471], "num_sampl": 237, "unnorm": [237, 416, 418], "draw": 237, "cdf": [238, 336, 406], "seed": 239, "cov": 241, "jointli": 241, "covari": [241, 323], "behavior": [241, 424, 477, 478], "permtuat": 243, "low": [244, 248, 403, 444], "high": [244, 248, 319, 335, 403, 444], "roadcast": 244, "domain": [247, 475], "uniformli": 248, "repetit": 251, "preserv": [252, 476], "beyond": [254, 463, 466], "beggin": 254, "vice": 254, "versa": 254, "restor": 254, "obj": 258, "uncompress": 260, "my_path": 260, "tree_flatten": [260, 306, 309, 319, 449], "transformerencod": 260, "128": [260, 319], "flat_param": 260, "compress": 261, "possibl": [270, 335, 375, 474, 475, 477, 482], "divisor": [275, 295], "being": [276, 319], "prevent": [276, 429, 479], "streamcontext": 277, "context": 277, "manag": [277, 471, 475, 482], "necessarili": 288, "elsewher": [291, 477], "col": 291, "triangl": 291, "mse": 294, "param": [294, 319, 444, 476], "lvalu": 294, "dlvalu": 294, "dparam": 294, "lasso": 294, "l1": [294, 421, 423, 424, 428], "impli": 296, "gaurante": 296, "in_ax": [298, 476], "out_ax": [298, 476], "prefix": [298, 305], "class_pred": 302, "predic": [302, 365], "to_quant": 302, "fn": [303, 306, 307, 308, 480], "wrt": 303, "max_norm": 304, "exce": 304, "proportion": 304, "clipped_grad": 304, "total_norm": 304, "rescal": 304, "is_leaf": [305, 306, 307, 308], "arbitrari": [305, 447], "depth": [305, 327, 330, 333, 476], "hello": [305, 309], "charact": 305, "superset": [306, 457], "closer": 306, "decid": [306, 357], "constitut": 306, "dict_kei": [306, 458], "lambda": [306, 307, 308, 319, 340, 353, 358, 365, 390, 410, 434, 440, 450, 451, 452, 453, 454, 455, 456, 461, 462, 474, 475, 476], "tree_map": [307, 319, 475], "new_tre": 307, "accumul": [308, 377], "acc": 308, "recreat": [309, 449], "world": [309, 475], "42": 309, "int16": 312, "brain": 312, "e8": 312, "m7": 312, "ieee": 312, "e5": 312, "m10": 312, "hierarchi": 312, "mpi": 314, "done": [319, 331, 377, 474, 475, 478, 479], "manual": 319, "solv": 319, "intuit": 319, "freez": [319, 370, 447], "finetun": 319, "in_dim": [319, 447], "out_dim": [319, 447], "enumer": 319, "caus": [319, 474, 478], "local": [319, 332, 475], "scope": 319, "l2_loss": 319, "y_hat": 319, "trainable_paramet": [319, 357, 458], "loss_and_grad": 319, "workhors": 319, "Its": 319, "recurs": [319, 357, 358, 363, 368, 370, 447], "frozen": [319, 358, 368, 370, 376, 447], "individu": [319, 332, 333], "subset": [319, 357], "action": 319, "displai": 319, "count": [319, 465], "num_param": 319, "preclud": 319, "pattern": [319, 478], "achiev": [319, 475], "other_input": 319, "necessari": 319, "apply_to_modul": [319, 358], "children": 319, "filter_and_map": 319, "leaf_modul": 319, "load_weight": [319, 478], "named_modul": 319, "save_weight": 319, "set_dtyp": 319, "unfreez": [319, 358], "update_modul": 319, "alibi": 319, "avgpool1d": 319, "avgpool2d": 319, "batchnorm": 319, "celu": 319, "convtranspose1d": 319, "convtranspose2d": 319, "convtranspose3d": 319, "dropout": [319, 332, 333, 367, 394, 474], "dropout2d": 319, "dropout3d": 319, "elu": [319, 434], "gelu": [319, 407, 408, 474], "groupnorm": 319, "gru": 319, "hardshrink": [319, 410], "hardtanh": [319, 411], "hardswish": 319, "instancenorm": 319, "layernorm": 319, "leakyrelu": 319, "logsigmoid": 319, "logsoftmax": 319, "lstm": 319, "maxpool1d": 319, "maxpool2d": 319, "mish": 319, "prelu": 319, "quantizedembed": 319, "quantizedlinear": 319, "relu": [319, 374, 394, 431, 444], "relu6": 319, "rnn": [319, 338], "selu": 319, "sequenti": [319, 444], "silu": 319, "sinusoidalpositionalencod": 319, "softmin": 319, "softshrink": 319, "softsign": 319, "softplu": [319, 352, 430], "upsampl": 319, "gelu_approx": [319, 336, 406], "gelu_fast_approx": [319, 336, 406], "hard_shrink": [319, 340], "hard_tanh": [319, 341], "leaky_relu": 319, "log_sigmoid": [319, 348], "log_softmax": [319, 349], "binary_cross_entropi": [319, 474], "cosine_similarity_loss": 319, "gaussian_nll_loss": 319, "hinge_loss": 319, "huber_loss": 319, "kl_div_loss": 319, "l1_loss": 319, "log_cosh_loss": 319, "margin_ranking_loss": 319, "mse_loss": 319, "nll_loss": 319, "smooth_l1_loss": 319, "triplet_loss": 319, "init": [319, 374, 444, 449, 463, 464, 466, 467, 475], "glorot_norm": 319, "glorot_uniform": 319, "he_norm": 319, "he_uniform": 319, "kernel_s": [321, 322, 325, 326, 327, 328, 329, 330, 350, 351], "averag": [321, 322, 450, 451, 453, 454, 455, 475], "pool": [321, 322, 350, 351, 482], "l_": [321, 350, 421], "n_i": [321, 322, 350, 351], "c_j": [321, 322, 350, 351], "ldot": [321, 322, 350, 351], "lfloor": [321, 322, 350, 351], "_size": [321, 322, 350, 351], "rfloor": [321, 322, 350, 351], "k_h": [322, 351], "k_w": [322, 351], "h_": [322, 338, 344, 351, 378], "w_": [322, 338, 344, 351, 378, 450, 451, 452, 453, 454, 455, 456, 461, 462], "height": [322, 323, 326, 327, 329, 330, 332, 333, 351], "width": [322, 323, 326, 327, 329, 330, 332, 333, 351, 375, 376], "momentum": [323, 456, 458, 462, 474], "affin": [323, 339, 343, 345, 347, 376], "track_running_stat": 323, "epsilon": [323, 339, 343, 345, 377, 417, 419, 450, 452, 453, 454, 455, 461], "gamma": [323, 339, 343, 345, 377, 397, 398, 399, 400], "nc": 323, "nlc": [323, 325, 328], "four": 323, "nhwc": [323, 326, 329], "paper": [323, 386, 450, 451, 452, 453, 455, 456], "deep": [323, 397, 398, 399, 400], "intern": 323, "bn": 323, "continu": [324, 404, 476], "unit": [324, 334, 336, 337, 338, 346, 379, 380, 382, 384, 397, 398, 399, 400, 404, 405, 406, 407, 408, 409, 413, 432, 433, 434, 436], "formul": [324, 334], "in_channel": [325, 326, 327, 328, 329, 330], "out_channel": [325, 326, 327, 328, 329, 330], "learnabl": [325, 326, 327, 328, 329, 330, 383], "imag": [326, 327, 329, 330, 332, 333, 395], "ndhwc": [327, 330, 333], "portion": 331, "nwhc": 332, "whc": 332, "maintain": [332, 333, 456], "benefici": [332, 333, 478], "earli": 332, "adjac": 332, "pixel": 332, "effect": [332, 474, 478], "thompson": 332, "goroshin": 332, "jain": 332, "lecun": 332, "bregler": 332, "2015": [332, 453, 455], "cvpr": 332, "dhwc": 333, "often": 333, "medic": 333, "video": 333, "num_embed": [335, 375], "lookup": 335, "usual": [335, 375, 473, 478], "vocabulari": [335, 375], "approx": 336, "phi": [336, 406], "geluapprox": 336, "044715": [336, 407], "gelufast": 336, "sigma": [336, 337, 338, 344, 385, 397, 398, 399, 400, 408, 409, 414, 435, 436], "702": [336, 408], "regard": 336, "gate": [337, 338, 409], "halv": [337, 409], "input_s": [338, 344, 378], "hidden_s": [338, 344, 378], "recurr": [338, 344, 378], "nld": [338, 344, 378], "ld": [338, 344, 378], "r_t": 338, "xr": 338, "x_t": [338, 344, 378], "hr": 338, "h_t": [338, 344, 378], "b_": [338, 344], "z_t": 338, "xz": 338, "hz": 338, "n_t": 338, "xn": 338, "odot": [338, 344], "hn": 338, "hidden": [338, 344, 378, 394], "nh": [338, 344, 378], "nlh": [338, 344, 378], "lh": [338, 344, 378], "num_group": 339, "pytorch_compat": 339, "preced": 339, "http": [339, 343, 345, 352, 377, 408, 430], "org": [339, 343, 345, 352, 377, 408, 430], "1803": 339, "08494": 339, "lambd": [340, 390, 410, 440], "denomin": [343, 417, 450, 452, 453, 454, 455, 461], "inorm": 343, "1607": [343, 345], "08022": 343, "i_t": 344, "xi": 344, "f_t": 344, "xf": 344, "hf": 344, "g_t": [344, 450, 452, 453, 454, 455, 456, 461, 462], "xg": 344, "hg": 344, "o_t": 344, "xo": 344, "ho": 344, "c_": [344, 456], "c_t": [344, 456], "cell": 344, "06450": 345, "realli": 345, "negative_slop": [346, 413], "leaki": [346, 413], "rectifi": [346, 379, 380, 399, 400, 413, 432, 433], "slope": 346, "mathcal": 347, "d_i": 347, "max_": [350, 351], "1908": [352, 430], "08681": [352, 430], "map_fn": [353, 357], "filter_fn": [353, 357], "valid_parameter_filt": 353, "apply_fn": 354, "descend": 355, "is_leaf_fn": 357, "found": 357, "drop": 357, "idempot": [358, 370], "endswith": 358, "file_or_weight": 360, "miss": [360, 481], "ok": [360, 476], "save_safetensor": [364, 449, 481], "reflect": [366, 474, 477, 479], "ie": [370, 475], "noop": 370, "unfrozen": 370, "tracer": 371, "partial": [371, 372, 474, 478], "child": 372, "flexibli": 372, "programmat": 372, "query_input_dim": 373, "key_input_dim": 373, "value_input_dim": 373, "value_dim": 373, "value_output_dim": 373, "aggreg": 373, "linearli": 373, "attend": 373, "num_paramet": 374, "25": [374, 395], "parametr": [374, 431], "from_embed": 375, "classmethod": [375, 376], "from_linear": 376, "1910": 377, "07467": 377, "nonlinear": [378, 474], "elman": 378, "ih": 378, "hh": 378, "func": 378, "10000": 381, "slightli": [381, 482], "plain": 383, "known": [384, 436], "swish": [384, 436], "min_freq": 386, "0001": 386, "max_freq": 386, "cos_first": 386, "full_turn": 386, "sinusoid": 386, "threshold": [392, 421, 428, 441], "geq": [392, 441], "num_encoder_lay": 394, "num_decoder_lay": 394, "nb_func": 394, "custom_encod": 394, "custom_decod": 394, "norm_first": 394, "checkpoint": [394, 449], "decod": 394, "interact": 394, "mechan": 394, "expens": 394, "scale_factor": 395, "align_corn": 395, "audio": 395, "forth": 395, "algorithm": [395, 456], "neighbor": 395, "interpol": 395, "cubic": 395, "trilinear": 395, "bicub": 395, "corner": 395, "bottom": 395, "75": 395, "33333": 395, "66667": 395, "init_fn": [396, 397, 398, 399, 400, 401, 402, 403, 444], "glorot": [397, 398], "fan_in": [397, 398, 399, 400], "fan_out": [397, 398, 399, 400], "fan": [397, 398, 399, 400], "_in": [397, 398], "_out": [397, 398], "difficulti": [397, 398], "feedforward": [397, 398], "191107": 397, "61278": 397, "150594": 397, "363207": 397, "gain": [397, 398, 399, 400], "89613": 397, "53947": 397, "48095": 397, "995016": 397, "223404": 398, "890597": 398, "379159": 398, "776856": 398, "90041": 398, "02264": 398, "912766": 398, "12451": 398, "delv": [399, 400], "surpass": [399, 400], "human": [399, 400], "imagenet": [399, 400], "classif": [399, 400], "25211": 399, "458835": 399, "177208": 399, "0137595": 399, "6967": 399, "02765": 399, "15268": 399, "75787": 399, "kaim": 400, "0300242": 400, "0184009": 400, "793615": 400, "666329": 400, "64331": 400, "16506": 400, "08619": 400, "79854": 400, "982273": 402, "534422": 402, "380709": 402, "0645099": 402, "883935": 403, "863726": 403, "617261": 403, "417497": 403, "exact": [407, 408], "0005": 407, "015": 408, "cdot": [408, 417, 420, 436], "hendryck": 408, "1606": 408, "08415": 408, "min_val": 411, "max_val": 411, "_val": 411, "sum_i": 415, "x_i": [415, 437, 438], "with_logit": 416, "predict": [416, 419, 420, 421, 422, 423, 424, 426, 427, 428], "105361": 416, "223144": 416, "20397": 416, "916291": 416, "539245": 416, "prob": 416, "510826": 416, "x1": 417, "x2": 417, "x_1": [417, 425], "x_2": [417, 425], "label_smooth": 418, "hot": 418, "smooth": [418, 428, 461], "0485873": 418, "348587": 418, "06": [419, 429, 450], "likelihood": [419, 427], "nll": [419, 427], "hing": 420, "y_": [420, 424], "pred": [420, 424], "delta": [421, 450], "huber": 421, "leq": [421, 434], "l2": [421, 424, 462], "kullback": 422, "leibler": 422, "diverg": 422, "logcosh": 424, "sensit": 424, "outlier": 424, "dual": 424, "offer": 424, "balanc": 424, "robust": 424, "approach": [424, 476], "inputs1": 425, "inputs2": 425, "margin": [425, 429], "573409": 425, "765166": 425, "0638": 425, "75596": 425, "225763": 425, "256995": 425, "773433": 425, "formula": 428, "anchor": 429, "triplet": 429, "_p": 429, "pairwis": 429, "instabl": 429, "monoton": 430, "0507": 434, "67326": 434, "sum_j": [437, 438], "x_j": [437, 438], "subclass": 447, "concept": 447, "mymlp": 447, "in_proj": 447, "involv": [449, 474], "subsequ": 449, "far": 449, "serial": 449, "adam": [449, 455, 456, 465, 466], "configu": 449, "thumb": 449, "apply_gradi": 449, "rmsprop": 449, "adagrad": 449, "adafactor": 449, "adadelta": 449, "adamw": [449, 456], "adamax": 449, "lion": 449, "cosine_decai": [449, 465], "exponential_decai": 449, "join_schedul": 449, "linear_schedul": [449, 465], "step_decai": 449, "rho": 450, "zeiler": 450, "2012": [450, 461], "adapt": [450, 451, 452, 475], "1212": 450, "5701": 450, "v_": [450, 452, 453, 454, 455, 461, 462], "v_t": [450, 452, 453, 454, 455, 461, 462], "u_t": 450, "u_": 450, "w_t": [450, 452, 453, 454, 455, 456, 461, 462], "30": 451, "001": 451, "clip_threshold": 451, "decay_r": [451, 464, 467], "beta_1": [451, 453, 454, 455, 456], "weight_decai": [451, 454, 456, 462], "scale_paramet": 451, "relative_step": 451, "warmup_init": 451, "sublinear": 451, "epsilon_1": 451, "epsilon_2": 451, "parameter_scal": 451, "unscal": 451, "decai": [451, 454, 456, 462, 463, 464, 467], "duchi": 452, "hazan": 452, "singer": 452, "2011": 452, "subgradi": 452, "onlin": 452, "stochast": [452, 453, 455, 462, 478], "jmlr": 452, "999": [453, 454, 455], "omit": [453, 455, 475], "estim": [453, 455], "kingma": [453, 455], "ba": [453, 455], "iclr": [453, 454, 455], "m_": [453, 454, 455, 456], "m_t": [453, 454, 455, 456], "beta_2": [453, 454, 455, 456], "contrast": 454, "loshchilov": 454, "hutter": 454, "decoupl": 454, "99": [456, 461], "tend": 456, "10x": 456, "strength": [456, 462], "wd": 456, "chen": 456, "symbol": 456, "discoveri": 456, "2302": 456, "06675": 456, "eta": 456, "opt": [457, 475], "tieleman": 461, "hinton": 461, "lectur": 461, "coursera": 461, "dampen": 462, "nesterov": 462, "descent": [462, 474, 478], "mu": 462, "tau": 462, "penalti": 462, "decay_step": 463, "lr_schedul": [463, 464, 465, 467], "1000": [463, 474], "0999961": 463, "06561": 464, "boundari": 465, "join": 465, "transit": 465, "warmup": [465, 466], "0999938": 465, "101": 466, "step_siz": 467, "081": 467, "basi": 469, "implicit": [471, 474, 476], "fine": [471, 478], "grain": 471, "pseudo": 471, "altern": 471, "splittabl": 471, "threefri": 471, "counter": 471, "cycl": 473, "merg": 474, "awar": [474, 478], "36788": 474, "compiled_fun": 474, "slow": 474, "rerun": [474, 478], "frequent": [474, 478], "destroi": 474, "anonym": 474, "unari": 474, "overhead": [474, 478, 482], "bandwidth": [474, 475], "fusibl": 474, "consider": 474, "versu": 474, "timeit": [474, 476], "tic": 474, "perf_count": 474, "toc": 474, "tpi": 474, "1e3": 474, "4096": [474, 476, 482], "five": 474, "latest": 474, "won": 474, "placehold": 474, "insid": 474, "disable_compil": 474, "okai": [474, 478], "deal": 474, "pretti": [474, 478], "inconveni": 474, "functool": 474, "particularli": 474, "compiled_grad_fn": 474, "71828": 474, "opportun": 474, "physic": 475, "lot": [475, 476], "figur": 475, "best": 475, "mac": 475, "abil": 475, "talk": 475, "minim": 475, "all_sum": 475, "mpirun": 475, "mpiexec": 475, "send": 475, "homebrew": 475, "anaconda": 475, "openmpi": 475, "libmpi": 475, "dyld": 475, "dyld_library_path": 475, "lib": 475, "connect": 475, "ssh": 475, "checklist": 475, "issu": [475, 476, 479], "hostnam": 475, "password": 475, "confirm": 475, "foo": 475, "bar": 475, "host1": 475, "host2": 475, "qualifi": 475, "ip": 475, "slot": 475, "hostfil": 475, "parallel": [475, 482], "snippet": 475, "loss_grad_fn": 475, "all_avg": 475, "all_reduce_grad": 475, "latenc": 475, "mca": 475, "btl_tcp_link": 475, "tcp": 475, "idea": [476, 478], "behind": 476, "dfdx": [476, 477], "d2fdx2": 476, "zero_grad": 476, "detach": 476, "requires_grad": 476, "dloss_dw": 476, "dloss_dx": 476, "redund": 476, "suppos": [476, 482], "nice": [476, 478], "propag": [476, 477], "autom": 476, "contriv": [476, 482], "sake": 476, "clariti": 476, "quit": [476, 479], "difficult": 476, "primit": 476, "priorit": 476, "naive_add": 476, "vmap_add": 476, "total": 476, "390": 476, "wherea": 476, "025": 476, "ten": [476, 478], "Of": 476, "cours": 476, "better": [476, 482], "handi": 476, "ellipsi": 477, "mix": 477, "lack": 477, "extrem": [477, 478], "ineffici": [477, 478], "nonzero": 477, "dynam": 478, "fun1": 478, "expensive_fun": 478, "consum": 478, "eager": 478, "thank": 478, "weights_fp16": 478, "trade": 478, "bad": 478, "grow": 478, "computation": 478, "costli": 478, "luckili": 478, "wide": 478, "thousand": 478, "value_and_grad_fn": 478, "implicitli": 478, "anytim": 478, "memoryview": [478, 479], "perfectli": 478, "first_lay": 478, "second_layer_a": 478, "second_layer_b": 478, "protocol": 479, "dlpack": 479, "pep": 479, "3118": 479, "a_view": 479, "owndata": 479, "extern": 479, "demonstr": 479, "x_view": 479, "modifi": 479, "df": 479, "x\u00b2": 479, "2x": 479, "indirectli": 479, "modif": 479, "seen": 479, "occur": 479, "incorpor": 479, "aris": 479, "incorrect": 479, "experiment": 479, "break": 479, "advis": 479, "intermedi": 479, "jnp": 479, "tf": 479, "page": 480, "composit": 480, "archiv": 481, "savez_compress": 481, "save_gguf": 481, "arr_0": 481, "advantag": 482, "race": 482, "interest": 482, "albeit": 482, "d1": 482, "d2": 482, "But": 482, "twice": 482, "measur": 482, "default_stream": 483, "default_devic": 483, "my_devic": 483}, "objects": {"": [[0, 0, 1, "_CPPv43absRK5array14StreamOrDevice", "abs"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::a"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::s"], [0, 0, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::a"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::b"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::s"], [0, 0, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::a"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::alpha"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::b"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::beta"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::c"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::s"], [0, 0, 1, "_CPPv43allRK5array14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::axes"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::axis"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::s"], [0, 0, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::a"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::atol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::b"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::equal_nan"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::rtol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::s"], [0, 0, 1, "_CPPv43anyRK5array14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::axes"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::axis"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::s"], [0, 0, 1, "_CPPv46aranged14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangei14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeii14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeiii14StreamOrDevice", "arange"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::stop"], [0, 0, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::a"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::s"], [0, 0, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::a"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::s"], [0, 0, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::a"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::s"], [0, 0, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::a"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::s"], [0, 0, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan"], [0, 0, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::a"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::b"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::s"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::a"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::s"], [0, 0, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::a"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::s"], [0, 0, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::axis"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::s"], [0, 0, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::axis"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::s"], [0, 0, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition"], [0, 0, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::axis"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::s"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::s"], [0, 0, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort"], [0, 0, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::axis"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::s"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::s"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::equal_nan"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::s"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::s"], [0, 0, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::a"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::offset"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::s"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::shape"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::strides"], [0, 0, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::a"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::dtype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::s"], [0, 0, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d"], [0, 0, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::s"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::s"], [0, 0, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d"], [0, 0, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::s"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::s"], [0, 0, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d"], [0, 0, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::s"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::s"], [0, 0, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::a"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::b"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::s"], [0, 0, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::a"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::b"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::s"], [0, 0, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::a"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::b"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::s"], [0, 0, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::a"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::b"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::block_size"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_lhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_out"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_rhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::s"], [0, 0, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::inputs"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::s"], [0, 0, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::a"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::s"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::shape"], [0, 0, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::a"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::s"], [0, 0, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_max"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_min"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::s"], [0, 0, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate"], [0, 0, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::axis"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::s"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::s"], [0, 0, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::a"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::s"], [0, 0, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::dilation"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::groups"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::input"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::padding"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::s"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::stride"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::weight"], [0, 0, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::dilation"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::groups"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::input"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::padding"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::s"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::stride"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::weight"], [0, 0, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::dilation"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::groups"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::input"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::padding"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::s"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::stride"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::weight"], [0, 0, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 0, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_hi"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_lo"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 0, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::dilation"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::groups"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::input"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::padding"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::s"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::stride"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::weight"], [0, 0, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::dilation"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::groups"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::input"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::padding"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::s"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::stride"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::weight"], [0, 0, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::dilation"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::groups"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::input"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::padding"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::s"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::stride"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::weight"], [0, 0, 1, "_CPPv44copy5array14StreamOrDevice", "copy"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::a"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::s"], [0, 0, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::a"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::s"], [0, 0, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::a"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::s"], [0, 0, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::a"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::axis"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::inclusive"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::reverse"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::s"], [0, 0, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::a"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::axis"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::inclusive"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::reverse"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::s"], [0, 0, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::a"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::axis"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::inclusive"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::reverse"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::s"], [0, 0, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::a"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::axis"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::inclusive"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::reverse"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::s"], [0, 0, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::a"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::s"], [0, 0, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::dependencies"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::inputs"], [0, 0, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::biases"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::bits"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::group_size"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::s"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::scales"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::w"], [0, 0, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::a"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::k"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::s"], [0, 0, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::a"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis1"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis2"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::offset"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::s"], [0, 0, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::a"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::b"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::s"], [0, 0, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::a"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::b"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::s"], [0, 0, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::a"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::b"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::s"], [0, 0, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::a"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::s"], [0, 0, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::a"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::s"], [0, 0, 1, "_CPPv43expRK5array14StreamOrDevice", "exp"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::a"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::s"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::axes"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::axis"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::s"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::s"], [0, 0, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::a"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::s"], [0, 0, 1, "_CPPv43eyei14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::s"], [0, 0, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten"], [0, 0, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::end_axis"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::start_axis"], [0, 0, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::a"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::s"], [0, 0, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::a"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::b"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::s"], [0, 0, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full"], [0, 0, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full"], [0, 2, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::T"], [0, 2, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::T"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::vals"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::vals"], [0, 0, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather"], [0, 0, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::axes"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::axis"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::slice_sizes"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::slice_sizes"], [0, 0, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::a"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::b"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::lhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::rhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::s"], [0, 0, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::biases"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::bits"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::group_size"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::lhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::rhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::s"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::scales"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::transpose"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::w"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::x"], [0, 0, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::a"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::b"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::s"], [0, 0, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::a"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::b"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::s"], [0, 0, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::a"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::s"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::scale"], [0, 0, 1, "_CPPv48identityi14StreamOrDevice", "identity"], [0, 0, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::dtype"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::s"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::s"], [0, 0, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::a"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::b"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::s"], [0, 0, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::a"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::atol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::b"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::equal_nan"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::rtol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::s"], [0, 0, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite"], [0, 1, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite::a"], [0, 1, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite::s"], [0, 0, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::a"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::s"], [0, 0, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::a"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::s"], [0, 0, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::a"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::s"], [0, 0, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::a"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::s"], [0, 0, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::a"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::b"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::s"], [0, 0, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::a"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::b"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::s"], [0, 0, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::a"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::b"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::s"], [0, 0, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::dtype"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::num"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::s"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::start"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::stop"], [0, 0, 1, "_CPPv43logRK5array14StreamOrDevice", "log"], [0, 0, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::a"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::s"], [0, 0, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::a"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::s"], [0, 0, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::a"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::s"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::a"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::s"], [0, 0, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::a"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::b"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::s"], [0, 0, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::a"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::b"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::s"], [0, 0, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::a"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::s"], [0, 0, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::a"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::b"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::s"], [0, 0, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::axes"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::axis"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::s"], [0, 0, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::a"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::b"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::s"], [0, 0, 1, "_CPPv43maxRK5array14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::axes"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::axis"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::s"], [0, 0, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::a"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::b"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::s"], [0, 0, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::axes"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::axis"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::s"], [0, 0, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::arrays"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::indexing"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::s"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::sparse"], [0, 0, 1, "_CPPv43minRK5array14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::axes"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::axis"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::s"], [0, 0, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::a"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::b"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::s"], [0, 0, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::a"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::destination"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::s"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::source"], [0, 0, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::a"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::b"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::s"], [0, 0, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::a"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::nan"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::neginf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::posinf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::s"], [0, 0, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::a"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::s"], [0, 0, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::a"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::b"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::s"], [0, 0, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::a"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::axes"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::dtype"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::inverted"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::s"], [0, 0, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones"], [0, 0, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::dtype"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones::shape"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::shape"], [0, 0, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::a"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::s"], [0, 0, 1, "_CPPv4I0Ene5array1TRK5array", "operator!="], [0, 0, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!="], [0, 0, 1, "_CPPv4neRK5arrayRK5array", "operator!="], [0, 2, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::T"], [0, 2, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::T"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::a"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::b"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::b"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::b"], [0, 0, 1, "_CPPv4I0Erm5array1TRK5array", "operator%"], [0, 0, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%"], [0, 0, 1, "_CPPv4rmRK5arrayRK5array", "operator%"], [0, 2, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::T"], [0, 2, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::T"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::a"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::b"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::b"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::b"], [0, 0, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;"], [0, 0, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::a"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::b"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::a"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::b"], [0, 0, 1, "_CPPv4I0Eml5array1TRK5array", "operator*"], [0, 0, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*"], [0, 0, 1, "_CPPv4mlRK5arrayRK5array", "operator*"], [0, 2, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::T"], [0, 2, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::T"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::a"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::b"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::b"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::b"], [0, 0, 1, "_CPPv4I0Epl5array1TRK5array", "operator+"], [0, 0, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+"], [0, 0, 1, "_CPPv4plRK5arrayRK5array", "operator+"], [0, 2, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::T"], [0, 2, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::T"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::a"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::b"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::b"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::b"], [0, 0, 1, "_CPPv4I0Emi5array1TRK5array", "operator-"], [0, 0, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-"], [0, 0, 1, "_CPPv4miRK5array", "operator-"], [0, 0, 1, "_CPPv4miRK5arrayRK5array", "operator-"], [0, 2, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::T"], [0, 2, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::T"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::a"], [0, 1, 1, "_CPPv4miRK5array", "operator-::a"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::b"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::b"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::b"], [0, 0, 1, "_CPPv4dvRK5arrayRK5array", "operator/"], [0, 0, 1, "_CPPv4dvRK5arrayd", "operator/"], [0, 0, 1, "_CPPv4dvdRK5array", "operator/"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::a"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::b"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::b"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::b"], [0, 0, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;"], [0, 0, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;"], [0, 0, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;"], [0, 2, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::T"], [0, 2, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::T"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::a"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::b"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::b"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::b"], [0, 0, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::a"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::b"], [0, 0, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;="], [0, 0, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;="], [0, 0, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;="], [0, 2, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::T"], [0, 2, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::T"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::a"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::b"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::b"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::b"], [0, 0, 1, "_CPPv4I0Eeq5array1TRK5array", "operator=="], [0, 0, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator=="], [0, 0, 1, "_CPPv4eqRK5arrayRK5array", "operator=="], [0, 2, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::T"], [0, 2, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::T"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::a"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::b"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::b"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::b"], [0, 0, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;"], [0, 0, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;"], [0, 0, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;"], [0, 2, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::T"], [0, 2, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::T"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::a"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::b"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::b"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::b"], [0, 0, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;="], [0, 0, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;="], [0, 0, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;="], [0, 2, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::T"], [0, 2, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::T"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::a"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::b"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::b"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::b"], [0, 0, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::a"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::b"], [0, 0, 1, "_CPPv4eoRK5arrayRK5array", "operator^"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::a"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::b"], [0, 0, 1, "_CPPv4orRK5arrayRK5array", "operator|"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::a"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::b"], [0, 0, 1, "_CPPv4ooRK5arrayRK5array", "operator||"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::a"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::b"], [0, 0, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::a"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::b"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::s"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::axes"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::high_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::low_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 0, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition"], [0, 0, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::axis"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::s"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::s"], [0, 0, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::a"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::b"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::s"], [0, 0, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::axes"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::axis"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::s"], [0, 0, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::a"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::axis"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::indices"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::s"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::values"], [0, 0, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::bits"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::group_size"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::s"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::w"], [0, 0, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::biases"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::bits"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::group_size"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::s"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::scales"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::transpose"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::w"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::x"], [0, 0, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::a"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::s"], [0, 0, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::a"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::s"], [0, 0, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::a"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::b"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::s"], [0, 0, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat"], [0, 0, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::axis"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::s"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::s"], [0, 0, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::a"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::s"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::shape"], [0, 0, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::a"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::b"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::s"], [0, 0, 1, "_CPPv44rollRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll"], [0, 1, 1, "_CPPv44rollRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "roll::axes"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::axes"], [0, 1, 1, "_CPPv44rollRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "roll::axis"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::axis"], [0, 1, 1, "_CPPv44rollRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::shift"], [0, 0, 1, "_CPPv45roundRK5array14StreamOrDevice", "round"], [0, 0, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::decimals"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::s"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::s"], [0, 0, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::a"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::s"], [0, 0, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter"], [0, 0, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::axes"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::axis"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::updates"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::updates"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::axes"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::axis"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::updates"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::updates"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::axes"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::axis"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::updates"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::updates"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::axes"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::axis"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::updates"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::updates"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::axes"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::axis"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::updates"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::updates"], [0, 0, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::a"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::s"], [0, 0, 1, "_CPPv44signRK5array14StreamOrDevice", "sign"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::a"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::s"], [0, 0, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::a"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::s"], [0, 0, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::a"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::s"], [0, 0, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::strides"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::strides"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 0, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::axes"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::axis"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::s"], [0, 0, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort"], [0, 0, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::axis"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::s"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::s"], [0, 0, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::s"], [0, 0, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::a"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::s"], [0, 0, 1, "_CPPv46squareRK5array14StreamOrDevice", "square"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::a"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::s"], [0, 0, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::axes"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::axis"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::s"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::axis"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::s"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::s"], [0, 0, 1, "_CPPv4StRK5array14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::axes"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::axis"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::s"], [0, 0, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::a"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::s"], [0, 0, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::a"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::b"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::s"], [0, 0, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::axes"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::axis"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::s"], [0, 0, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::a"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis1"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis2"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::s"], [0, 0, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take::index"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::index"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::s"], [0, 0, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::a"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::indices"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::s"], [0, 0, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::a"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::s"], [0, 0, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::a"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::s"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::axis"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::s"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::s"], [0, 0, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::arr"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::reps"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::s"], [0, 0, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk"], [0, 0, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::axis"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::s"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::s"], [0, 0, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::dtype"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::s"], [0, 0, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::s"], [0, 0, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri"], [0, 0, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::k"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::m"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::type"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::type"], [0, 0, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::k"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::s"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::x"], [0, 0, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::k"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::s"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::x"], [0, 0, 1, "_CPPv43varRK5array14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::axes"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::axis"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::s"], [0, 0, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::a"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::dtype"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::s"], [0, 0, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::condition"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::s"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::x"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::y"], [0, 0, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros"], [0, 0, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::dtype"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros::shape"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::shape"], [0, 0, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::a"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::s"]], "mlx.core": [[9, 3, 1, "", "Device"], [10, 3, 1, "", "Dtype"], [11, 3, 1, "", "DtypeCategory"], [310, 3, 1, "", "Stream"], [12, 5, 1, "", "abs"], [13, 5, 1, "", "add"], [14, 5, 1, "", "addmm"], [15, 5, 1, "", "all"], [16, 5, 1, "", "allclose"], [17, 5, 1, "", "any"], [18, 5, 1, "", "arange"], [19, 5, 1, "", "arccos"], [20, 5, 1, "", "arccosh"], [21, 5, 1, "", "arcsin"], [22, 5, 1, "", "arcsinh"], [23, 5, 1, "", "arctan"], [24, 5, 1, "", "arctan2"], [25, 5, 1, "", "arctanh"], [26, 5, 1, "", "argmax"], [27, 5, 1, "", "argmin"], [28, 5, 1, "", "argpartition"], [29, 5, 1, "", "argsort"], [30, 3, 1, "", "array"], [82, 5, 1, "", "array_equal"], [83, 5, 1, "", "as_strided"], [84, 5, 1, "", "atleast_1d"], [85, 5, 1, "", "atleast_2d"], [86, 5, 1, "", "atleast_3d"], [87, 5, 1, "", "bitwise_and"], [88, 5, 1, "", "bitwise_or"], [89, 5, 1, "", "bitwise_xor"], [90, 5, 1, "", "block_masked_mm"], [91, 5, 1, "", "broadcast_to"], [92, 5, 1, "", "ceil"], [93, 5, 1, "", "clip"], [94, 5, 1, "", "compile"], [95, 5, 1, "", "concatenate"], [96, 5, 1, "", "conj"], [97, 5, 1, "", "conjugate"], [98, 5, 1, "", "conv1d"], [99, 5, 1, "", "conv2d"], [100, 5, 1, "", "conv3d"], [101, 5, 1, "", "conv_general"], [102, 5, 1, "", "conv_transpose1d"], [103, 5, 1, "", "conv_transpose2d"], [104, 5, 1, "", "conv_transpose3d"], [105, 5, 1, "", "convolve"], [106, 5, 1, "", "cos"], [107, 5, 1, "", "cosh"], [108, 5, 1, "", "cummax"], [109, 5, 1, "", "cummin"], [110, 5, 1, "", "cumprod"], [111, 5, 1, "", "cumsum"], [112, 3, 1, "", "custom_function"], [113, 5, 1, "", "default_device"], [114, 5, 1, "", "default_stream"], [115, 5, 1, "", "degrees"], [116, 5, 1, "", "dequantize"], [117, 5, 1, "", "diag"], [118, 5, 1, "", "diagonal"], [119, 5, 1, "", "disable_compile"], [128, 5, 1, "", "divide"], [129, 5, 1, "", "divmod"], [130, 5, 1, "", "einsum"], [131, 5, 1, "", "einsum_path"], [132, 5, 1, "", "enable_compile"], [133, 5, 1, "", "equal"], [134, 5, 1, "", "erf"], [135, 5, 1, "", "erfinv"], [136, 5, 1, "", "eval"], [137, 5, 1, "", "exp"], [138, 5, 1, "", "expand_dims"], [139, 5, 1, "", "expm1"], [140, 5, 1, "", "eye"], [159, 5, 1, "", "flatten"], [160, 5, 1, "", "floor"], [161, 5, 1, "", "floor_divide"], [162, 5, 1, "", "full"], [163, 5, 1, "", "gather_mm"], [164, 5, 1, "", "gather_qmm"], [165, 5, 1, "", "grad"], [166, 5, 1, "", "greater"], [167, 5, 1, "", "greater_equal"], [168, 5, 1, "", "hadamard_transform"], [169, 5, 1, "", "identity"], [170, 5, 1, "", "inner"], [171, 5, 1, "", "isclose"], [172, 5, 1, "", "isfinite"], [173, 5, 1, "", "isinf"], [174, 5, 1, "", "isnan"], [175, 5, 1, "", "isneginf"], [176, 5, 1, "", "isposinf"], [177, 5, 1, "", "issubdtype"], [178, 5, 1, "", "jvp"], [179, 5, 1, "", "left_shift"], [180, 5, 1, "", "less"], [181, 5, 1, "", "less_equal"], [190, 5, 1, "", "linspace"], [191, 5, 1, "", "load"], [192, 5, 1, "", "log"], [193, 5, 1, "", "log10"], [194, 5, 1, "", "log1p"], [195, 5, 1, "", "log2"], [196, 5, 1, "", "logaddexp"], [197, 5, 1, "", "logical_and"], [198, 5, 1, "", "logical_not"], [199, 5, 1, "", "logical_or"], [200, 5, 1, "", "logsumexp"], [201, 5, 1, "", "matmul"], [202, 5, 1, "", "max"], [203, 5, 1, "", "maximum"], [204, 5, 1, "", "mean"], [205, 5, 1, "", "meshgrid"], [217, 5, 1, "", "min"], [218, 5, 1, "", "minimum"], [219, 5, 1, "", "moveaxis"], [220, 5, 1, "", "multiply"], [221, 5, 1, "", "nan_to_num"], [222, 5, 1, "", "negative"], [223, 5, 1, "", "new_stream"], [224, 5, 1, "", "not_equal"], [225, 5, 1, "", "ones"], [226, 5, 1, "", "ones_like"], [227, 5, 1, "", "outer"], [228, 5, 1, "", "pad"], [229, 5, 1, "", "partition"], [230, 5, 1, "", "power"], [231, 5, 1, "", "prod"], [232, 5, 1, "", "put_along_axis"], [233, 5, 1, "", "quantize"], [234, 5, 1, "", "quantized_matmul"], [235, 5, 1, "", "radians"], [249, 5, 1, "", "reciprocal"], [250, 5, 1, "", "remainder"], [251, 5, 1, "", "repeat"], [252, 5, 1, "", "reshape"], [253, 5, 1, "", "right_shift"], [254, 5, 1, "", "roll"], [255, 5, 1, "", "round"], [256, 5, 1, "", "rsqrt"], [257, 5, 1, "", "save"], [258, 5, 1, "", "save_gguf"], [259, 5, 1, "", "save_safetensors"], [260, 5, 1, "", "savez"], [261, 5, 1, "", "savez_compressed"], [262, 5, 1, "", "set_default_device"], [263, 5, 1, "", "set_default_stream"], [264, 5, 1, "", "sigmoid"], [265, 5, 1, "", "sign"], [266, 5, 1, "", "sin"], [267, 5, 1, "", "sinh"], [268, 5, 1, "", "softmax"], [269, 5, 1, "", "sort"], [270, 5, 1, "", "split"], [271, 5, 1, "", "sqrt"], [272, 5, 1, "", "square"], [273, 5, 1, "", "squeeze"], [274, 5, 1, "", "stack"], [275, 5, 1, "", "std"], [276, 5, 1, "", "stop_gradient"], [277, 5, 1, "", "stream"], [278, 5, 1, "", "subtract"], [279, 5, 1, "", "sum"], [280, 5, 1, "", "swapaxes"], [281, 5, 1, "", "synchronize"], [282, 5, 1, "", "take"], [283, 5, 1, "", "take_along_axis"], [284, 5, 1, "", "tan"], [285, 5, 1, "", "tanh"], [286, 5, 1, "", "tensordot"], [287, 5, 1, "", "tile"], [288, 5, 1, "", "topk"], [289, 5, 1, "", "trace"], [290, 5, 1, "", "transpose"], [291, 5, 1, "", "tri"], [292, 5, 1, "", "tril"], [293, 5, 1, "", "triu"], [294, 5, 1, "", "value_and_grad"], [295, 5, 1, "", "var"], [296, 5, 1, "", "view"], [297, 5, 1, "", "vjp"], [298, 5, 1, "", "vmap"], [299, 5, 1, "", "where"], [300, 5, 1, "", "zeros"], [301, 5, 1, "", "zeros_like"]], "mlx.core.Device": [[9, 4, 1, "", "__init__"]], "mlx.core.Dtype": [[10, 4, 1, "", "__init__"]], "mlx.core.DtypeCategory": [[11, 4, 1, "", "__init__"]], "mlx.core.Stream": [[310, 4, 1, "", "__init__"]], "mlx.core.array": [[31, 6, 1, "", "T"], [30, 4, 1, "", "__init__"], [32, 4, 1, "", "abs"], [33, 4, 1, "", "all"], [34, 4, 1, "", "any"], [35, 4, 1, "", "argmax"], [36, 4, 1, "", "argmin"], [37, 4, 1, "", "astype"], [38, 6, 1, "", "at"], [39, 4, 1, "", "conj"], [40, 4, 1, "", "cos"], [41, 4, 1, "", "cummax"], [42, 4, 1, "", "cummin"], [43, 4, 1, "", "cumprod"], [44, 4, 1, "", "cumsum"], [45, 4, 1, "", "diag"], [46, 4, 1, "", "diagonal"], [47, 6, 1, "", "dtype"], [48, 4, 1, "", "exp"], [49, 4, 1, "", "flatten"], [50, 4, 1, "", "item"], [51, 6, 1, "", "itemsize"], [52, 4, 1, "", "log"], [53, 4, 1, "", "log10"], [54, 4, 1, "", "log1p"], [55, 4, 1, "", "log2"], [56, 4, 1, "", "logsumexp"], [57, 4, 1, "", "max"], [58, 4, 1, "", "mean"], [59, 4, 1, "", "min"], [60, 4, 1, "", "moveaxis"], [61, 6, 1, "", "nbytes"], [62, 6, 1, "", "ndim"], [63, 4, 1, "", "prod"], [64, 4, 1, "", "reciprocal"], [65, 4, 1, "", "reshape"], [66, 4, 1, "", "round"], [67, 4, 1, "", "rsqrt"], [68, 6, 1, "", "shape"], [69, 4, 1, "", "sin"], [70, 6, 1, "", "size"], [71, 4, 1, "", "split"], [72, 4, 1, "", "sqrt"], [73, 4, 1, "", "square"], [74, 4, 1, "", "squeeze"], [75, 4, 1, "", "std"], [76, 4, 1, "", "sum"], [77, 4, 1, "", "swapaxes"], [78, 4, 1, "", "tolist"], [79, 4, 1, "", "transpose"], [80, 4, 1, "", "var"], [81, 4, 1, "", "view"]], "mlx.core.custom_function": [[112, 4, 1, "", "__init__"]], "mlx.core.distributed": [[120, 3, 1, "", "Group"], [121, 5, 1, "", "all_gather"], [122, 5, 1, "", "all_sum"], [123, 5, 1, "", "init"], [124, 5, 1, "", "is_available"], [125, 5, 1, "", "recv"], [126, 5, 1, "", "recv_like"], [127, 5, 1, "", "send"]], "mlx.core.distributed.Group": [[120, 4, 1, "", "__init__"]], "mlx.core.fast": [[141, 5, 1, "", "affine_quantize"], [142, 5, 1, "", "layer_norm"], [143, 5, 1, "", "metal_kernel"], [144, 5, 1, "", "rms_norm"], [145, 5, 1, "", "rope"], [146, 5, 1, "", "scaled_dot_product_attention"]], "mlx.core.fft": [[147, 5, 1, "", "fft"], [148, 5, 1, "", "fft2"], [149, 5, 1, "", "fftn"], [150, 5, 1, "", "ifft"], [151, 5, 1, "", "ifft2"], [152, 5, 1, "", "ifftn"], [153, 5, 1, "", "irfft"], [154, 5, 1, "", "irfft2"], [155, 5, 1, "", "irfftn"], [156, 5, 1, "", "rfft"], [157, 5, 1, "", "rfft2"], [158, 5, 1, "", "rfftn"]], "mlx.core.linalg": [[182, 5, 1, "", "cholesky"], [183, 5, 1, "", "cholesky_inv"], [184, 5, 1, "", "cross"], [185, 5, 1, "", "inv"], [186, 5, 1, "", "norm"], [187, 5, 1, "", "qr"], [188, 5, 1, "", "svd"], [189, 5, 1, "", "tri_inv"]], "mlx.core.metal": [[206, 5, 1, "", "clear_cache"], [207, 5, 1, "", "device_info"], [208, 5, 1, "", "get_active_memory"], [209, 5, 1, "", "get_cache_memory"], [210, 5, 1, "", "get_peak_memory"], [211, 5, 1, "", "is_available"], [212, 5, 1, "", "reset_peak_memory"], [213, 5, 1, "", "set_cache_limit"], [214, 5, 1, "", "set_memory_limit"], [215, 5, 1, "", "start_capture"], [216, 5, 1, "", "stop_capture"]], "mlx.core.random": [[236, 5, 1, "", "bernoulli"], [237, 5, 1, "", "categorical"], [238, 5, 1, "", "gumbel"], [239, 5, 1, "", "key"], [240, 5, 1, "", "laplace"], [241, 5, 1, "", "multivariate_normal"], [242, 5, 1, "", "normal"], [243, 5, 1, "", "permutation"], [244, 5, 1, "", "randint"], [245, 5, 1, "", "seed"], [246, 5, 1, "", "split"], [247, 5, 1, "", "truncated_normal"], [248, 5, 1, "", "uniform"]], "mlx.nn": [[320, 3, 1, "", "ALiBi"], [321, 3, 1, "", "AvgPool1d"], [322, 3, 1, "", "AvgPool2d"], [323, 3, 1, "", "BatchNorm"], [324, 3, 1, "", "CELU"], [325, 3, 1, "", "Conv1d"], [326, 3, 1, "", "Conv2d"], [327, 3, 1, "", "Conv3d"], [328, 3, 1, "", "ConvTranspose1d"], [329, 3, 1, "", "ConvTranspose2d"], [330, 3, 1, "", "ConvTranspose3d"], [331, 3, 1, "", "Dropout"], [332, 3, 1, "", "Dropout2d"], [333, 3, 1, "", "Dropout3d"], [334, 3, 1, "", "ELU"], [335, 3, 1, "", "Embedding"], [336, 3, 1, "", "GELU"], [337, 3, 1, "", "GLU"], [338, 3, 1, "", "GRU"], [339, 3, 1, "", "GroupNorm"], [340, 3, 1, "", "HardShrink"], [341, 3, 1, "", "HardTanh"], [342, 3, 1, "", "Hardswish"], [343, 3, 1, "", "InstanceNorm"], [344, 3, 1, "", "LSTM"], [345, 3, 1, "", "LayerNorm"], [346, 3, 1, "", "LeakyReLU"], [347, 3, 1, "", "Linear"], [348, 3, 1, "", "LogSigmoid"], [349, 3, 1, "", "LogSoftmax"], [350, 3, 1, "", "MaxPool1d"], [351, 3, 1, "", "MaxPool2d"], [352, 3, 1, "", "Mish"], [447, 3, 1, "", "Module"], [373, 3, 1, "", "MultiHeadAttention"], [374, 3, 1, "", "PReLU"], [375, 3, 1, "", "QuantizedEmbedding"], [376, 3, 1, "", "QuantizedLinear"], [377, 3, 1, "", "RMSNorm"], [378, 3, 1, "", "RNN"], [379, 3, 1, "", "ReLU"], [380, 3, 1, "", "ReLU6"], [381, 3, 1, "", "RoPE"], [382, 3, 1, "", "SELU"], [383, 3, 1, "", "Sequential"], [384, 3, 1, "", "SiLU"], [385, 3, 1, "", "Sigmoid"], [386, 3, 1, "", "SinusoidalPositionalEncoding"], [387, 3, 1, "", "Softmax"], [388, 3, 1, "", "Softmin"], [389, 3, 1, "", "Softplus"], [390, 3, 1, "", "Softshrink"], [391, 3, 1, "", "Softsign"], [392, 3, 1, "", "Step"], [393, 3, 1, "", "Tanh"], [394, 3, 1, "", "Transformer"], [395, 3, 1, "", "Upsample"], [404, 3, 1, "", "celu"], [405, 3, 1, "", "elu"], [406, 3, 1, "", "gelu"], [407, 3, 1, "", "gelu_approx"], [408, 3, 1, "", "gelu_fast_approx"], [409, 3, 1, "", "glu"], [410, 3, 1, "", "hard_shrink"], [411, 3, 1, "", "hard_tanh"], [412, 3, 1, "", "hardswish"], [413, 3, 1, "", "leaky_relu"], [414, 3, 1, "", "log_sigmoid"], [415, 3, 1, "", "log_softmax"], [430, 3, 1, "", "mish"], [431, 3, 1, "", "prelu"], [302, 5, 1, "", "quantize"], [432, 3, 1, "", "relu"], [433, 3, 1, "", "relu6"], [434, 3, 1, "", "selu"], [435, 3, 1, "", "sigmoid"], [436, 3, 1, "", "silu"], [437, 3, 1, "", "softmax"], [438, 3, 1, "", "softmin"], [439, 3, 1, "", "softplus"], [440, 3, 1, "", "softshrink"], [441, 3, 1, "", "step"], [442, 3, 1, "", "tanh"], [303, 5, 1, "", "value_and_grad"]], "mlx.nn.Module": [[353, 4, 1, "", "apply"], [354, 4, 1, "", "apply_to_modules"], [355, 4, 1, "", "children"], [356, 4, 1, "", "eval"], [357, 4, 1, "", "filter_and_map"], [358, 4, 1, "", "freeze"], [359, 4, 1, "", "leaf_modules"], [360, 4, 1, "", "load_weights"], [361, 4, 1, "", "modules"], [362, 4, 1, "", "named_modules"], [363, 4, 1, "", "parameters"], [364, 4, 1, "", "save_weights"], [365, 4, 1, "", "set_dtype"], [366, 6, 1, "", "state"], [367, 4, 1, "", "train"], [368, 4, 1, "", "trainable_parameters"], [369, 6, 1, "", "training"], [370, 4, 1, "", "unfreeze"], [371, 4, 1, "", "update"], [372, 4, 1, "", "update_modules"]], "mlx.nn.init": [[396, 5, 1, "", "constant"], [397, 5, 1, "", "glorot_normal"], [398, 5, 1, "", "glorot_uniform"], [399, 5, 1, "", "he_normal"], [400, 5, 1, "", "he_uniform"], [401, 5, 1, "", "identity"], [402, 5, 1, "", "normal"], [403, 5, 1, "", "uniform"]], "mlx.nn.losses": [[416, 3, 1, "", "binary_cross_entropy"], [417, 3, 1, "", "cosine_similarity_loss"], [418, 3, 1, "", "cross_entropy"], [419, 3, 1, "", "gaussian_nll_loss"], [420, 3, 1, "", "hinge_loss"], [421, 3, 1, "", "huber_loss"], [422, 3, 1, "", "kl_div_loss"], [423, 3, 1, "", "l1_loss"], [424, 3, 1, "", "log_cosh_loss"], [425, 3, 1, "", "margin_ranking_loss"], [426, 3, 1, "", "mse_loss"], [427, 3, 1, "", "nll_loss"], [428, 3, 1, "", "smooth_l1_loss"], [429, 3, 1, "", "triplet_loss"]], "mlx.optimizers": [[450, 3, 1, "", "AdaDelta"], [451, 3, 1, "", "Adafactor"], [452, 3, 1, "", "Adagrad"], [453, 3, 1, "", "Adam"], [454, 3, 1, "", "AdamW"], [455, 3, 1, "", "Adamax"], [456, 3, 1, "", "Lion"], [469, 3, 1, "", "Optimizer"], [461, 3, 1, "", "RMSprop"], [462, 3, 1, "", "SGD"], [304, 5, 1, "", "clip_grad_norm"], [463, 5, 1, "", "cosine_decay"], [464, 5, 1, "", "exponential_decay"], [465, 5, 1, "", "join_schedules"], [466, 5, 1, "", "linear_schedule"], [467, 5, 1, "", "step_decay"]], "mlx.optimizers.Optimizer": [[457, 4, 1, "", "apply_gradients"], [458, 4, 1, "", "init"], [459, 6, 1, "", "state"], [460, 4, 1, "", "update"]], "mlx.utils": [[305, 5, 1, "", "tree_flatten"], [306, 5, 1, "", "tree_map"], [307, 5, 1, "", "tree_map_with_path"], [308, 5, 1, "", "tree_reduce"], [309, 5, 1, "", "tree_unflatten"]]}, "objtypes": {"0": "cpp:function", "1": "cpp:functionParam", "2": "cpp:templateParam", "3": "py:class", "4": "py:method", "5": "py:function", "6": "py:property"}, "objnames": {"0": ["cpp", "function", "C++ function"], "1": ["cpp", "functionParam", "C++ function parameter"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "titleterms": {"oper": [0, 2, 448], "custom": [1, 2], "metal": [1, 3, 8, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 318], "kernel": 1, "simpl": [1, 482], "exampl": [1, 2, 7, 474, 475, 482], "us": [1, 2, 478, 483], "shape": [1, 68], "stride": 1, "complex": 1, "grid": 1, "sampl": 1, "vjp": [1, 297], "extens": 2, "mlx": [2, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467], "introduc": 2, "primit": 2, "implement": [2, 5], "cpu": 2, "back": 2, "end": 2, "gpu": 2, "transform": [2, 394, 472, 474, 476, 478, 480], "build": [2, 8], "bind": 2, "python": [2, 7, 8], "cmake": 2, "setuptool": 2, "usag": [2, 7], "result": 2, "script": [2, 5], "download": [2, 5], "code": [2, 5], "debugg": 3, "xcode": 3, "workflow": 3, "linear": [4, 317, 347], "regress": 4, "llm": 5, "infer": 5, "model": 5, "attent": 5, "layer": [5, 6, 445], "encod": 5, "full": [5, 162], "gener": 5, "put": 5, "all": [5, 15, 33, 475], "togeth": 5, "convert": 5, "weight": 5, "load": [5, 191, 449, 481], "benchmark": 5, "multi": 6, "perceptron": 6, "instal": [7, 8, 475], "api": [7, 8], "refer": 7, "c": [7, 8], "further": 7, "read": 7, "troubleshoot": 8, "from": [8, 477], "sourc": 8, "requir": 8, "option": 8, "binari": 8, "size": [8, 70], "minim": 8, "found": 8, "x86": 8, "shell": 8, "core": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 310], "devic": [9, 313], "dtype": [10, 47], "dtypecategori": 11, "ab": [12, 32], "add": 13, "addmm": 14, "allclos": 16, "ani": [17, 34], "arang": 18, "arcco": 19, "arccosh": 20, "arcsin": 21, "arcsinh": 22, "arctan": 23, "arctan2": 24, "arctanh": 25, "argmax": [26, 35], "argmin": [27, 36], "argpartit": 28, "argsort": 29, "arrai": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 311, 477, 481], "t": 31, "astyp": 37, "conj": [39, 96], "co": [40, 106], "cummax": [41, 108], "cummin": [42, 109], "cumprod": [43, 110], "cumsum": [44, 111], "diag": [45, 117], "diagon": [46, 118], "exp": [48, 137], "flatten": [49, 159], "item": 50, "items": 51, "log": [52, 192], "log10": [53, 193], "log1p": [54, 194], "log2": [55, 195], "logsumexp": [56, 200], "max": [57, 202], "mean": [58, 204], "min": [59, 217], "moveaxi": [60, 219], "nbyte": 61, "ndim": 62, "prod": [63, 231], "reciproc": [64, 249], "reshap": [65, 252], "round": [66, 255], "rsqrt": [67, 256], "sin": [69, 266], "split": [71, 246, 270], "sqrt": [72, 271], "squar": [73, 272], "squeez": [74, 273], "std": [75, 275], "sum": [76, 279], "swapax": [77, 280], "tolist": 78, "transpos": [79, 290], "var": [80, 295], "view": [81, 296], "array_equ": 82, "as_strid": 83, "atleast_1d": 84, "atleast_2d": 85, "atleast_3d": 86, "bitwise_and": 87, "bitwise_or": 88, "bitwise_xor": 89, "block_masked_mm": 90, "broadcast_to": 91, "ceil": 92, "clip": 93, "compil": [94, 474], "concaten": 95, "conjug": 97, "conv1d": [98, 325], "conv2d": [99, 326], "conv3d": [100, 327], "conv_gener": 101, "conv_transpose1d": 102, "conv_transpose2d": 103, "conv_transpose3d": 104, "convolv": 105, "cosh": 107, "custom_funct": 112, "default_devic": 113, "default_stream": 114, "degre": 115, "dequant": 116, "disable_compil": 119, "distribut": [120, 121, 122, 123, 124, 125, 126, 127, 314, 475], "group": 120, "all_gath": 121, "all_sum": 122, "init": [123, 396, 397, 398, 399, 400, 401, 402, 403, 458], "is_avail": [124, 211], "recv": 125, "recv_lik": 126, "send": 127, "divid": 128, "divmod": 129, "einsum": 130, "einsum_path": 131, "enable_compil": 132, "equal": 133, "erf": 134, "erfinv": 135, "eval": [136, 356], "expand_dim": 138, "expm1": 139, "ey": 140, "fast": [141, 142, 143, 144, 145, 146, 315], "affine_quant": 141, "layer_norm": 142, "metal_kernel": 143, "rms_norm": 144, "rope": [145, 381], "scaled_dot_product_attent": 146, "fft": [147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 316], "fft2": 148, "fftn": 149, "ifft": 150, "ifft2": 151, "ifftn": 152, "irfft": 153, "irfft2": 154, "irfftn": 155, "rfft": 156, "rfft2": 157, "rfftn": 158, "floor": 160, "floor_divid": 161, "gather_mm": 163, "gather_qmm": 164, "grad": [165, 319], "greater": 166, "greater_equ": 167, "hadamard_transform": 168, "ident": [169, 401], "inner": 170, "isclos": 171, "isfinit": 172, "isinf": 173, "isnan": 174, "isneginf": 175, "isposinf": 176, "issubdtyp": 177, "jvp": 178, "left_shift": 179, "less": 180, "less_equ": 181, "linalg": [182, 183, 184, 185, 186, 187, 188, 189], "choleski": 182, "cholesky_inv": 183, "cross": 184, "inv": 185, "norm": 186, "qr": 187, "svd": 188, "tri_inv": 189, "linspac": 190, "logaddexp": 196, "logical_and": 197, "logical_not": 198, "logical_or": 199, "matmul": 201, "maximum": 203, "meshgrid": 205, "clear_cach": 206, "device_info": 207, "get_active_memori": 208, "get_cache_memori": 209, "get_peak_memori": 210, "reset_peak_memori": 212, "set_cache_limit": 213, "set_memory_limit": 214, "start_captur": 215, "stop_captur": 216, "minimum": 218, "multipli": 220, "nan_to_num": 221, "neg": 222, "new_stream": 223, "not_equ": 224, "ones": 225, "ones_lik": 226, "outer": 227, "pad": 228, "partit": 229, "power": 230, "put_along_axi": 232, "quantiz": [233, 302], "quantized_matmul": 234, "radian": 235, "random": [236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 471], "bernoulli": 236, "categor": 237, "gumbel": 238, "kei": 239, "laplac": 240, "multivariate_norm": 241, "normal": [242, 402], "permut": 243, "randint": 244, "seed": 245, "truncated_norm": 247, "uniform": [248, 403], "remaind": 250, "repeat": 251, "right_shift": 253, "roll": 254, "save": [257, 449, 481], "save_gguf": 258, "save_safetensor": 259, "savez": 260, "savez_compress": 261, "set_default_devic": 262, "set_default_stream": 263, "sigmoid": [264, 385, 435], "sign": 265, "sinh": 267, "softmax": [268, 387, 437], "sort": 269, "stack": 274, "stop_gradi": 276, "stream": [277, 310, 313, 483], "subtract": 278, "synchron": 281, "take": 282, "take_along_axi": 283, "tan": 284, "tanh": [285, 393, 442], "tensordot": 286, "tile": 287, "topk": 288, "trace": 289, "tri": 291, "tril": 292, "triu": 293, "value_and_grad": [294, 303], "vmap": 298, "where": 299, "zero": 300, "zeros_lik": 301, "nn": [302, 303, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442], "optim": [304, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469], "clip_grad_norm": 304, "util": [305, 306, 307, 308, 309, 473], "tree_flatten": 305, "tree_map": 306, "tree_map_with_path": 307, "tree_reduc": 308, "tree_unflatten": 309, "data": 312, "type": 312, "support": 312, "commun": [314, 475], "algebra": 317, "neural": 319, "network": 319, "quick": [319, 480], "start": [319, 475, 480], "The": 319, "modul": [319, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 447], "class": 319, "paramet": [319, 363], "updat": [319, 371, 460, 477], "inspect": 319, "valu": 319, "alibi": 320, "avgpool1d": 321, "avgpool2d": 322, "batchnorm": 323, "celu": [324, 404], "convtranspose1d": 328, "convtranspose2d": 329, "convtranspose3d": 330, "dropout": 331, "dropout2d": 332, "dropout3d": 333, "elu": [334, 405], "embed": 335, "gelu": [336, 406], "glu": [337, 409], "gru": 338, "groupnorm": 339, "hardshrink": 340, "hardtanh": 341, "hardswish": [342, 412], "instancenorm": 343, "lstm": 344, "layernorm": 345, "leakyrelu": 346, "logsigmoid": 348, "logsoftmax": 349, "maxpool1d": 350, "maxpool2d": 351, "mish": [352, 430], "appli": 353, "apply_to_modul": 354, "children": 355, "filter_and_map": 357, "freez": 358, "leaf_modul": 359, "load_weight": 360, "named_modul": 362, "save_weight": 364, "set_dtyp": 365, "state": [366, 459], "train": [367, 369, 474, 475], "trainable_paramet": 368, "unfreez": 370, "update_modul": 372, "multiheadattent": 373, "prelu": [374, 431], "quantizedembed": 375, "quantizedlinear": 376, "rmsnorm": 377, "rnn": 378, "relu": [379, 432], "relu6": [380, 433], "selu": [382, 434], "sequenti": 383, "silu": [384, 436], "sinusoidalpositionalencod": 386, "softmin": [388, 438], "softplu": [389, 439], "softshrink": [390, 440], "softsign": 391, "step": [392, 441], "upsampl": 395, "constant": 396, "glorot_norm": 397, "glorot_uniform": 398, "he_norm": 399, "he_uniform": 400, "gelu_approx": 407, "gelu_fast_approx": 408, "hard_shrink": 410, "hard_tanh": 411, "leaky_relu": 413, "log_sigmoid": 414, "log_softmax": 415, "loss": [416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 446], "binary_cross_entropi": 416, "cosine_similarity_loss": 417, "cross_entropi": 418, "gaussian_nll_loss": 419, "hinge_loss": 420, "huber_loss": 421, "kl_div_loss": 422, "l1_loss": 423, "log_cosh_loss": 424, "margin_ranking_loss": 425, "mse_loss": 426, "nll_loss": 427, "smooth_l1_loss": 428, "triplet_loss": 429, "function": [443, 446, 474, 476, 480], "initi": 444, "adadelta": 450, "adafactor": 451, "adagrad": 452, "adam": 453, "adamw": 454, "adamax": 455, "lion": 456, "apply_gradi": 457, "rmsprop": 461, "sgd": 462, "cosine_decai": 463, "exponential_decai": 464, "join_schedul": 465, "linear_schedul": 466, "step_decai": 467, "common": 468, "schedul": 470, "tree": 473, "basic": [474, 480], "speedup": 474, "debug": 474, "pure": 474, "graph": [474, 478, 480], "get": 475, "mpi": 475, "set": 475, "up": 475, "remot": 475, "host": 475, "tune": 475, "reduc": 475, "automat": 476, "differenti": 476, "vector": 476, "index": 477, "differ": 477, "numpi": [477, 479], "In": 477, "place": 477, "lazi": 478, "evalu": 478, "why": 478, "comput": 478, "onli": 478, "what": 478, "you": 478, "when": 478, "convers": 479, "other": 479, "framework": 479, "pytorch": 479, "jax": 479, "tensorflow": 479, "guid": 480, "serial": 481, "format": 481, "unifi": 482, "memori": 482, "A": 482, "specifi": 483}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Operations": [[0, "operations"], [2, "operations"], [448, "operations"]], "Custom Metal Kernels": [[1, "custom-metal-kernels"]], "Simple Example": [[1, "simple-example"]], "Using Shape/Strides": [[1, "using-shape-strides"]], "Complex Example": [[1, "complex-example"]], "Grid Sample VJP": [[1, "grid-sample-vjp"]], "Custom Extensions in MLX": [[2, "custom-extensions-in-mlx"]], "Introducing the Example": [[2, "introducing-the-example"]], "Operations and Primitives": [[2, "operations-and-primitives"]], "Primitives": [[2, "primitives"]], "Using the Primitive": [[2, "using-the-primitive"]], "Implementing the Primitive": [[2, "implementing-the-primitive"]], "Implementing the CPU Back-end": [[2, "implementing-the-cpu-back-end"]], "Implementing the GPU Back-end": [[2, "implementing-the-gpu-back-end"]], "Primitive Transforms": [[2, "primitive-transforms"]], "Building and Binding": [[2, "building-and-binding"]], "Binding to Python": [[2, "binding-to-python"]], "Building with CMake": [[2, "building-with-cmake"]], "Building with setuptools": [[2, "building-with-setuptools"]], "Usage": [[2, "usage"], [7, null]], "Results": [[2, "results"]], "Scripts": [[2, "scripts"], [5, "scripts"]], "Download the code": [[2, null], [5, null]], "Metal Debugger": [[3, "metal-debugger"]], "Xcode Workflow": [[3, "xcode-workflow"]], "Linear Regression": [[4, "linear-regression"]], "LLM inference": [[5, "llm-inference"]], "Implementing the model": [[5, "implementing-the-model"]], "Attention layer": [[5, "attention-layer"]], "Encoder layer": [[5, "encoder-layer"]], "Full model": [[5, "full-model"]], "Generation": [[5, "generation"]], "Putting it all together": [[5, "putting-it-all-together"]], "Converting the weights": [[5, "converting-the-weights"]], "Weight loading and benchmarking": [[5, "weight-loading-and-benchmarking"]], "Multi-Layer Perceptron": [[6, "multi-layer-perceptron"]], "MLX": [[7, "mlx"]], "Install": [[7, null]], "Examples": [[7, null]], "Python API Reference": [[7, null]], "C++ API Reference": [[7, null]], "Further Reading": [[7, null]], "Build and Install": [[8, "build-and-install"]], "Python Installation": [[8, "python-installation"]], "Troubleshooting": [[8, "troubleshooting"], [8, "id2"]], "Build from source": [[8, "build-from-source"]], "Build Requirements": [[8, "build-requirements"]], "Python API": [[8, "python-api"]], "C++ API": [[8, "c-api"]], "Build Options": [[8, "id3"]], "Binary Size Minimization": [[8, "binary-size-minimization"]], "Metal not found": [[8, "metal-not-found"]], "x86 Shell": [[8, "x86-shell"]], "mlx.core.distributed.Group": [[120, "mlx-core-distributed-group"]], "mlx.core.distributed.all_gather": [[121, "mlx-core-distributed-all-gather"]], "mlx.core.distributed.all_sum": [[122, "mlx-core-distributed-all-sum"]], "mlx.core.distributed.init": [[123, "mlx-core-distributed-init"]], "mlx.core.distributed.is_available": [[124, "mlx-core-distributed-is-available"]], "mlx.core.distributed.recv": [[125, "mlx-core-distributed-recv"]], "mlx.core.distributed.recv_like": [[126, "mlx-core-distributed-recv-like"]], "mlx.core.distributed.send": [[127, "mlx-core-distributed-send"]], "mlx.core.fast.affine_quantize": [[141, "mlx-core-fast-affine-quantize"]], "mlx.core.fast.layer_norm": [[142, "mlx-core-fast-layer-norm"]], "mlx.core.fast.metal_kernel": [[143, "mlx-core-fast-metal-kernel"]], "mlx.core.fast.rms_norm": [[144, "mlx-core-fast-rms-norm"]], "mlx.core.fast.rope": [[145, "mlx-core-fast-rope"]], "mlx.core.fast.scaled_dot_product_attention": [[146, "mlx-core-fast-scaled-dot-product-attention"]], "mlx.core.fft.fft": [[147, "mlx-core-fft-fft"]], "mlx.core.fft.fft2": [[148, "mlx-core-fft-fft2"]], "mlx.core.fft.fftn": [[149, "mlx-core-fft-fftn"]], "mlx.core.fft.ifft": [[150, "mlx-core-fft-ifft"]], "mlx.core.fft.ifft2": [[151, "mlx-core-fft-ifft2"]], "mlx.core.fft.ifftn": [[152, "mlx-core-fft-ifftn"]], "mlx.core.fft.irfft": [[153, "mlx-core-fft-irfft"]], "mlx.core.fft.irfft2": [[154, "mlx-core-fft-irfft2"]], "mlx.core.fft.irfftn": [[155, "mlx-core-fft-irfftn"]], "mlx.core.fft.rfft": [[156, "mlx-core-fft-rfft"]], "mlx.core.fft.rfft2": [[157, "mlx-core-fft-rfft2"]], "mlx.core.fft.rfftn": [[158, "mlx-core-fft-rfftn"]], "mlx.core.linalg.cholesky": [[182, "mlx-core-linalg-cholesky"]], "mlx.core.linalg.cholesky_inv": [[183, "mlx-core-linalg-cholesky-inv"]], "mlx.core.linalg.cross": [[184, "mlx-core-linalg-cross"]], "mlx.core.linalg.inv": [[185, "mlx-core-linalg-inv"]], "mlx.core.linalg.norm": [[186, "mlx-core-linalg-norm"]], "mlx.core.linalg.qr": [[187, "mlx-core-linalg-qr"]], "mlx.core.linalg.svd": [[188, "mlx-core-linalg-svd"]], "mlx.core.linalg.tri_inv": [[189, "mlx-core-linalg-tri-inv"]], "mlx.core.metal.clear_cache": [[206, "mlx-core-metal-clear-cache"]], "mlx.core.metal.device_info": [[207, "mlx-core-metal-device-info"]], "mlx.core.metal.get_active_memory": [[208, "mlx-core-metal-get-active-memory"]], "mlx.core.metal.get_cache_memory": [[209, "mlx-core-metal-get-cache-memory"]], "mlx.core.metal.get_peak_memory": [[210, "mlx-core-metal-get-peak-memory"]], "mlx.core.metal.is_available": [[211, "mlx-core-metal-is-available"]], "mlx.core.metal.reset_peak_memory": [[212, "mlx-core-metal-reset-peak-memory"]], "mlx.core.metal.set_cache_limit": [[213, "mlx-core-metal-set-cache-limit"]], "mlx.core.metal.set_memory_limit": [[214, "mlx-core-metal-set-memory-limit"]], "mlx.core.metal.start_capture": [[215, "mlx-core-metal-start-capture"]], "mlx.core.metal.stop_capture": [[216, "mlx-core-metal-stop-capture"]], "mlx.core.random.bernoulli": [[236, "mlx-core-random-bernoulli"]], "mlx.core.random.categorical": [[237, "mlx-core-random-categorical"]], "mlx.core.random.gumbel": [[238, "mlx-core-random-gumbel"]], "mlx.core.random.key": [[239, "mlx-core-random-key"]], "mlx.core.random.laplace": [[240, "mlx-core-random-laplace"]], "mlx.core.random.multivariate_normal": [[241, "mlx-core-random-multivariate-normal"]], "mlx.core.random.normal": [[242, "mlx-core-random-normal"]], "mlx.core.random.permutation": [[243, "mlx-core-random-permutation"]], "mlx.core.random.randint": [[244, "mlx-core-random-randint"]], "mlx.core.random.seed": [[245, "mlx-core-random-seed"]], "mlx.core.random.split": [[246, "mlx-core-random-split"]], "mlx.core.random.truncated_normal": [[247, "mlx-core-random-truncated-normal"]], "mlx.core.random.uniform": [[248, "mlx-core-random-uniform"]], "mlx.nn.quantize": [[302, "mlx-nn-quantize"]], "mlx.nn.value_and_grad": [[303, "mlx-nn-value-and-grad"]], "mlx.optimizers.clip_grad_norm": [[304, "mlx-optimizers-clip-grad-norm"]], "mlx.utils.tree_flatten": [[305, "mlx-utils-tree-flatten"]], "mlx.utils.tree_map": [[306, "mlx-utils-tree-map"]], "mlx.utils.tree_map_with_path": [[307, "mlx-utils-tree-map-with-path"]], "mlx.utils.tree_reduce": [[308, "mlx-utils-tree-reduce"]], "mlx.utils.tree_unflatten": [[309, "mlx-utils-tree-unflatten"]], "Array": [[311, "array"]], "Data Types": [[312, "data-types"]], "Supported Data Types": [[312, "id2"]], "Devices and Streams": [[313, "devices-and-streams"]], "Distributed Communication": [[314, "distributed-communication"], [475, "distributed-communication"]], "Fast": [[315, "fast"]], "FFT": [[316, "fft"]], "Linear Algebra": [[317, "linear-algebra"]], "Metal": [[318, "metal"]], "Neural Networks": [[319, "neural-networks"]], "Quick Start with Neural Networks": [[319, "quick-start-with-neural-networks"]], "The Module Class": [[319, "the-module-class"]], "Parameters": [[319, "parameters"]], "Updating the Parameters": [[319, "updating-the-parameters"]], "Inspecting Modules": [[319, "inspecting-modules"]], "Value and Grad": [[319, "value-and-grad"]], "mlx.nn.ALiBi": [[320, "mlx-nn-alibi"]], "mlx.nn.AvgPool1d": [[321, "mlx-nn-avgpool1d"]], "mlx.nn.AvgPool2d": [[322, "mlx-nn-avgpool2d"]], "mlx.nn.BatchNorm": [[323, "mlx-nn-batchnorm"]], "mlx.nn.CELU": [[324, "mlx-nn-celu"]], "mlx.nn.Conv1d": [[325, "mlx-nn-conv1d"]], "mlx.nn.Conv2d": [[326, "mlx-nn-conv2d"]], "mlx.nn.Conv3d": [[327, "mlx-nn-conv3d"]], "mlx.nn.ConvTranspose1d": [[328, "mlx-nn-convtranspose1d"]], "mlx.nn.ConvTranspose2d": [[329, "mlx-nn-convtranspose2d"]], "mlx.nn.ConvTranspose3d": [[330, "mlx-nn-convtranspose3d"]], "mlx.nn.Dropout": [[331, "mlx-nn-dropout"]], "mlx.nn.Dropout2d": [[332, "mlx-nn-dropout2d"]], "mlx.nn.Dropout3d": [[333, "mlx-nn-dropout3d"]], "mlx.nn.ELU": [[334, "mlx-nn-elu"]], "mlx.nn.Embedding": [[335, "mlx-nn-embedding"]], "mlx.nn.GELU": [[336, "mlx-nn-gelu"]], "mlx.nn.GLU": [[337, "mlx-nn-glu"]], "mlx.nn.GRU": [[338, "mlx-nn-gru"]], "mlx.nn.GroupNorm": [[339, "mlx-nn-groupnorm"]], "mlx.nn.HardShrink": [[340, "mlx-nn-hardshrink"]], "mlx.nn.HardTanh": [[341, "mlx-nn-hardtanh"]], "mlx.nn.Hardswish": [[342, "mlx-nn-hardswish"]], "mlx.nn.InstanceNorm": [[343, "mlx-nn-instancenorm"]], "mlx.nn.LSTM": [[344, "mlx-nn-lstm"]], "mlx.nn.LayerNorm": [[345, "mlx-nn-layernorm"]], "mlx.nn.LeakyReLU": [[346, "mlx-nn-leakyrelu"]], "mlx.nn.Linear": [[347, "mlx-nn-linear"]], "mlx.nn.LogSigmoid": [[348, "mlx-nn-logsigmoid"]], "mlx.nn.LogSoftmax": [[349, "mlx-nn-logsoftmax"]], "mlx.nn.MaxPool1d": [[350, "mlx-nn-maxpool1d"]], "mlx.nn.MaxPool2d": [[351, "mlx-nn-maxpool2d"]], "mlx.nn.Mish": [[352, "mlx-nn-mish"]], "mlx.nn.Module.apply": [[353, "mlx-nn-module-apply"]], "mlx.nn.Module.apply_to_modules": [[354, "mlx-nn-module-apply-to-modules"]], "mlx.nn.Module.children": [[355, "mlx-nn-module-children"]], "mlx.nn.Module.eval": [[356, "mlx-nn-module-eval"]], "mlx.nn.Module.filter_and_map": [[357, "mlx-nn-module-filter-and-map"]], "mlx.nn.Module.freeze": [[358, "mlx-nn-module-freeze"]], "mlx.nn.Module.leaf_modules": [[359, "mlx-nn-module-leaf-modules"]], "mlx.nn.Module.load_weights": [[360, "mlx-nn-module-load-weights"]], "mlx.nn.Module.modules": [[361, "mlx-nn-module-modules"]], "mlx.nn.Module.named_modules": [[362, "mlx-nn-module-named-modules"]], "mlx.nn.Module.parameters": [[363, "mlx-nn-module-parameters"]], "mlx.nn.Module.save_weights": [[364, "mlx-nn-module-save-weights"]], "mlx.nn.Module.set_dtype": [[365, "mlx-nn-module-set-dtype"]], "mlx.nn.Module.state": [[366, "mlx-nn-module-state"]], "mlx.nn.Module.train": [[367, "mlx-nn-module-train"]], "mlx.nn.Module.trainable_parameters": [[368, "mlx-nn-module-trainable-parameters"]], "mlx.nn.Module.training": [[369, "mlx-nn-module-training"]], "mlx.nn.Module.unfreeze": [[370, "mlx-nn-module-unfreeze"]], "mlx.nn.Module.update": [[371, "mlx-nn-module-update"]], "mlx.nn.Module.update_modules": [[372, "mlx-nn-module-update-modules"]], "mlx.nn.MultiHeadAttention": [[373, "mlx-nn-multiheadattention"]], "mlx.nn.PReLU": [[374, "mlx-nn-prelu"]], "mlx.nn.QuantizedEmbedding": [[375, "mlx-nn-quantizedembedding"]], "mlx.nn.QuantizedLinear": [[376, "mlx-nn-quantizedlinear"]], "mlx.nn.RMSNorm": [[377, "mlx-nn-rmsnorm"]], "mlx.nn.RNN": [[378, "mlx-nn-rnn"]], "mlx.nn.ReLU": [[379, "mlx-nn-relu"]], "mlx.nn.ReLU6": [[380, "mlx-nn-relu6"]], "mlx.nn.RoPE": [[381, "mlx-nn-rope"]], "mlx.nn.SELU": [[382, "mlx-nn-selu"]], "mlx.nn.Sequential": [[383, "mlx-nn-sequential"]], "mlx.nn.SiLU": [[384, "mlx-nn-silu"]], "mlx.nn.Sigmoid": [[385, "mlx-nn-sigmoid"]], "mlx.nn.SinusoidalPositionalEncoding": [[386, "mlx-nn-sinusoidalpositionalencoding"]], "mlx.nn.Softmax": [[387, "mlx-nn-softmax"]], "mlx.nn.Softmin": [[388, "mlx-nn-softmin"]], "mlx.nn.Softplus": [[389, "mlx-nn-softplus"]], "mlx.nn.Softshrink": [[390, "mlx-nn-softshrink"]], "mlx.nn.Softsign": [[391, "mlx-nn-softsign"]], "mlx.nn.Step": [[392, "mlx-nn-step"]], "mlx.nn.Tanh": [[393, "mlx-nn-tanh"]], "mlx.nn.Transformer": [[394, "mlx-nn-transformer"]], "mlx.nn.Upsample": [[395, "mlx-nn-upsample"]], "mlx.nn.init.constant": [[396, "mlx-nn-init-constant"]], "mlx.nn.init.glorot_normal": [[397, "mlx-nn-init-glorot-normal"]], "mlx.nn.init.glorot_uniform": [[398, "mlx-nn-init-glorot-uniform"]], "mlx.nn.init.he_normal": [[399, "mlx-nn-init-he-normal"]], "mlx.nn.init.he_uniform": [[400, "mlx-nn-init-he-uniform"]], "mlx.nn.init.identity": [[401, "mlx-nn-init-identity"]], "mlx.nn.init.normal": [[402, "mlx-nn-init-normal"]], "mlx.nn.init.uniform": [[403, "mlx-nn-init-uniform"]], "mlx.nn.celu": [[404, "mlx-nn-celu"]], "mlx.nn.elu": [[405, "mlx-nn-elu"]], "mlx.nn.gelu": [[406, "mlx-nn-gelu"]], "mlx.nn.gelu_approx": [[407, "mlx-nn-gelu-approx"]], "mlx.nn.gelu_fast_approx": [[408, "mlx-nn-gelu-fast-approx"]], "mlx.nn.glu": [[409, "mlx-nn-glu"]], "mlx.nn.hard_shrink": [[410, "mlx-nn-hard-shrink"]], "mlx.nn.hard_tanh": [[411, "mlx-nn-hard-tanh"]], "mlx.nn.hardswish": [[412, "mlx-nn-hardswish"]], "mlx.nn.leaky_relu": [[413, "mlx-nn-leaky-relu"]], "mlx.nn.log_sigmoid": [[414, "mlx-nn-log-sigmoid"]], "mlx.nn.log_softmax": [[415, "mlx-nn-log-softmax"]], "mlx.nn.losses.binary_cross_entropy": [[416, "mlx-nn-losses-binary-cross-entropy"]], "mlx.nn.losses.cosine_similarity_loss": [[417, "mlx-nn-losses-cosine-similarity-loss"]], "mlx.nn.losses.cross_entropy": [[418, "mlx-nn-losses-cross-entropy"]], "mlx.nn.losses.gaussian_nll_loss": [[419, "mlx-nn-losses-gaussian-nll-loss"]], "mlx.nn.losses.hinge_loss": [[420, "mlx-nn-losses-hinge-loss"]], "mlx.nn.losses.huber_loss": [[421, "mlx-nn-losses-huber-loss"]], "mlx.nn.losses.kl_div_loss": [[422, "mlx-nn-losses-kl-div-loss"]], "mlx.nn.losses.l1_loss": [[423, "mlx-nn-losses-l1-loss"]], "mlx.nn.losses.log_cosh_loss": [[424, "mlx-nn-losses-log-cosh-loss"]], "mlx.nn.losses.margin_ranking_loss": [[425, "mlx-nn-losses-margin-ranking-loss"]], "mlx.nn.losses.mse_loss": [[426, "mlx-nn-losses-mse-loss"]], "mlx.nn.losses.nll_loss": [[427, "mlx-nn-losses-nll-loss"]], "mlx.nn.losses.smooth_l1_loss": [[428, "mlx-nn-losses-smooth-l1-loss"]], "mlx.nn.losses.triplet_loss": [[429, "mlx-nn-losses-triplet-loss"]], "mlx.nn.mish": [[430, "mlx-nn-mish"]], "mlx.nn.prelu": [[431, "mlx-nn-prelu"]], "mlx.nn.relu": [[432, "mlx-nn-relu"]], "mlx.nn.relu6": [[433, "mlx-nn-relu6"]], "mlx.nn.selu": [[434, "mlx-nn-selu"]], "mlx.nn.sigmoid": [[435, "mlx-nn-sigmoid"]], "mlx.nn.silu": [[436, "mlx-nn-silu"]], "mlx.nn.softmax": [[437, "mlx-nn-softmax"]], "mlx.nn.softmin": [[438, "mlx-nn-softmin"]], "mlx.nn.softplus": [[439, "mlx-nn-softplus"]], "mlx.nn.softshrink": [[440, "mlx-nn-softshrink"]], "mlx.nn.step": [[441, "mlx-nn-step"]], "mlx.nn.tanh": [[442, "mlx-nn-tanh"]], "Functions": [[443, "functions"]], "Initializers": [[444, "initializers"]], "Layers": [[445, "layers"]], "Loss Functions": [[446, "loss-functions"]], "Module": [[447, "module"]], "Optimizers": [[449, "optimizers"]], "Saving and Loading": [[449, "saving-and-loading"]], "mlx.optimizers.AdaDelta": [[450, "mlx-optimizers-adadelta"]], "mlx.optimizers.Adafactor": [[451, "mlx-optimizers-adafactor"]], "mlx.optimizers.Adagrad": [[452, "mlx-optimizers-adagrad"]], "mlx.optimizers.Adam": [[453, "mlx-optimizers-adam"]], "mlx.optimizers.AdamW": [[454, "mlx-optimizers-adamw"]], "mlx.optimizers.Adamax": [[455, "mlx-optimizers-adamax"]], "mlx.optimizers.Lion": [[456, "mlx-optimizers-lion"]], "mlx.optimizers.Optimizer.apply_gradients": [[457, "mlx-optimizers-optimizer-apply-gradients"]], "mlx.optimizers.Optimizer.init": [[458, "mlx-optimizers-optimizer-init"]], "mlx.optimizers.Optimizer.state": [[459, "mlx-optimizers-optimizer-state"]], "mlx.optimizers.Optimizer.update": [[460, "mlx-optimizers-optimizer-update"]], "mlx.optimizers.RMSprop": [[461, "mlx-optimizers-rmsprop"]], "mlx.optimizers.SGD": [[462, "mlx-optimizers-sgd"]], "mlx.optimizers.cosine_decay": [[463, "mlx-optimizers-cosine-decay"]], "mlx.optimizers.exponential_decay": [[464, "mlx-optimizers-exponential-decay"]], "mlx.optimizers.join_schedules": [[465, "mlx-optimizers-join-schedules"]], "mlx.optimizers.linear_schedule": [[466, "mlx-optimizers-linear-schedule"]], "mlx.optimizers.step_decay": [[467, "mlx-optimizers-step-decay"]], "Common Optimizers": [[468, "common-optimizers"]], "Optimizer": [[469, "optimizer"]], "Schedulers": [[470, "schedulers"]], "Random": [[471, "random"]], "Transforms": [[472, "transforms"]], "Tree Utils": [[473, "tree-utils"]], "Compilation": [[474, "compilation"]], "Basics of Compile": [[474, "basics-of-compile"]], "Example Speedup": [[474, "example-speedup"]], "Debugging": [[474, "debugging"]], "Pure Functions": [[474, "pure-functions"]], "Compiling Training Graphs": [[474, "compiling-training-graphs"]], "Transformations with Compile": [[474, "transformations-with-compile"]], "Getting Started": [[475, "getting-started"]], "Installing MPI": [[475, "installing-mpi"]], "Setting up Remote Hosts": [[475, "setting-up-remote-hosts"]], "Training Example": [[475, "training-example"]], "Tuning All Reduce": [[475, "tuning-all-reduce"]], "Function Transforms": [[476, "function-transforms"]], "Automatic Differentiation": [[476, "automatic-differentiation"]], "Automatic Vectorization": [[476, "automatic-vectorization"]], "Indexing Arrays": [[477, "indexing-arrays"]], "Differences from NumPy": [[477, "differences-from-numpy"]], "In Place Updates": [[477, "in-place-updates"]], "Lazy Evaluation": [[478, "lazy-evaluation"]], "Why Lazy Evaluation": [[478, "why-lazy-evaluation"]], "Transforming Compute Graphs": [[478, "transforming-compute-graphs"]], "Only Compute What You Use": [[478, "only-compute-what-you-use"]], "When to Evaluate": [[478, "when-to-evaluate"]], "Conversion to NumPy and Other Frameworks": [[479, "conversion-to-numpy-and-other-frameworks"]], "PyTorch": [[479, "pytorch"]], "JAX": [[479, "jax"]], "TensorFlow": [[479, "tensorflow"]], "Quick Start Guide": [[480, "quick-start-guide"]], "Basics": [[480, "basics"]], "Function and Graph Transformations": [[480, "function-and-graph-transformations"]], "Saving and Loading Arrays": [[481, "saving-and-loading-arrays"]], "Serialization Formats": [[481, "id1"]], "Unified Memory": [[482, "unified-memory"]], "A Simple Example": [[482, "a-simple-example"]], "Using Streams": [[483, "using-streams"]], "Specifying the Stream": [[483, "specifying-the-stream"]], "mlx.core.Device": [[9, "mlx-core-device"]], "mlx.core.Dtype": [[10, "mlx-core-dtype"]], "mlx.core.DtypeCategory": [[11, "mlx-core-dtypecategory"]], "mlx.core.abs": [[12, "mlx-core-abs"]], "mlx.core.add": [[13, "mlx-core-add"]], "mlx.core.addmm": [[14, "mlx-core-addmm"]], "mlx.core.all": [[15, "mlx-core-all"]], "mlx.core.allclose": [[16, "mlx-core-allclose"]], "mlx.core.any": [[17, "mlx-core-any"]], "mlx.core.arange": [[18, "mlx-core-arange"]], "mlx.core.arccos": [[19, "mlx-core-arccos"]], "mlx.core.arccosh": [[20, "mlx-core-arccosh"]], "mlx.core.arcsin": [[21, "mlx-core-arcsin"]], "mlx.core.arcsinh": [[22, "mlx-core-arcsinh"]], "mlx.core.arctan": [[23, "mlx-core-arctan"]], "mlx.core.arctan2": [[24, "mlx-core-arctan2"]], "mlx.core.arctanh": [[25, "mlx-core-arctanh"]], "mlx.core.argmax": [[26, "mlx-core-argmax"]], "mlx.core.argmin": [[27, "mlx-core-argmin"]], "mlx.core.argpartition": [[28, "mlx-core-argpartition"]], "mlx.core.argsort": [[29, "mlx-core-argsort"]], "mlx.core.array": [[30, "mlx-core-array"]], "mlx.core.array.T": [[31, "mlx-core-array-t"]], "mlx.core.array.abs": [[32, "mlx-core-array-abs"]], "mlx.core.array.all": [[33, "mlx-core-array-all"]], "mlx.core.array.any": [[34, "mlx-core-array-any"]], "mlx.core.array.argmax": [[35, "mlx-core-array-argmax"]], "mlx.core.array.argmin": [[36, "mlx-core-array-argmin"]], "mlx.core.array.astype": [[37, "mlx-core-array-astype"]], "mlx.core.array.at": [[38, "mlx-core-array-at"]], "mlx.core.array.conj": [[39, "mlx-core-array-conj"]], "mlx.core.array.cos": [[40, "mlx-core-array-cos"]], "mlx.core.array.cummax": [[41, "mlx-core-array-cummax"]], "mlx.core.array.cummin": [[42, "mlx-core-array-cummin"]], "mlx.core.array.cumprod": [[43, "mlx-core-array-cumprod"]], "mlx.core.array.cumsum": [[44, "mlx-core-array-cumsum"]], "mlx.core.array.diag": [[45, "mlx-core-array-diag"]], "mlx.core.array.diagonal": [[46, "mlx-core-array-diagonal"]], "mlx.core.array.dtype": [[47, "mlx-core-array-dtype"]], "mlx.core.array.exp": [[48, "mlx-core-array-exp"]], "mlx.core.array.flatten": [[49, "mlx-core-array-flatten"]], "mlx.core.array.item": [[50, "mlx-core-array-item"]], "mlx.core.array.itemsize": [[51, "mlx-core-array-itemsize"]], "mlx.core.array.log": [[52, "mlx-core-array-log"]], "mlx.core.array.log10": [[53, "mlx-core-array-log10"]], "mlx.core.array.log1p": [[54, "mlx-core-array-log1p"]], "mlx.core.array.log2": [[55, "mlx-core-array-log2"]], "mlx.core.array.logsumexp": [[56, "mlx-core-array-logsumexp"]], "mlx.core.array.max": [[57, "mlx-core-array-max"]], "mlx.core.array.mean": [[58, "mlx-core-array-mean"]], "mlx.core.array.min": [[59, "mlx-core-array-min"]], "mlx.core.array.moveaxis": [[60, "mlx-core-array-moveaxis"]], "mlx.core.array.nbytes": [[61, "mlx-core-array-nbytes"]], "mlx.core.array.ndim": [[62, "mlx-core-array-ndim"]], "mlx.core.array.prod": [[63, "mlx-core-array-prod"]], "mlx.core.array.reciprocal": [[64, "mlx-core-array-reciprocal"]], "mlx.core.array.reshape": [[65, "mlx-core-array-reshape"]], "mlx.core.array.round": [[66, "mlx-core-array-round"]], "mlx.core.array.rsqrt": [[67, "mlx-core-array-rsqrt"]], "mlx.core.array.shape": [[68, "mlx-core-array-shape"]], "mlx.core.array.sin": [[69, "mlx-core-array-sin"]], "mlx.core.array.size": [[70, "mlx-core-array-size"]], "mlx.core.array.split": [[71, "mlx-core-array-split"]], "mlx.core.array.sqrt": [[72, "mlx-core-array-sqrt"]], "mlx.core.array.square": [[73, "mlx-core-array-square"]], "mlx.core.array.squeeze": [[74, "mlx-core-array-squeeze"]], "mlx.core.array.std": [[75, "mlx-core-array-std"]], "mlx.core.array.sum": [[76, "mlx-core-array-sum"]], "mlx.core.array.swapaxes": [[77, "mlx-core-array-swapaxes"]], "mlx.core.array.tolist": [[78, "mlx-core-array-tolist"]], "mlx.core.array.transpose": [[79, "mlx-core-array-transpose"]], "mlx.core.array.var": [[80, "mlx-core-array-var"]], "mlx.core.array.view": [[81, "mlx-core-array-view"]], "mlx.core.array_equal": [[82, "mlx-core-array-equal"]], "mlx.core.as_strided": [[83, "mlx-core-as-strided"]], "mlx.core.atleast_1d": [[84, "mlx-core-atleast-1d"]], "mlx.core.atleast_2d": [[85, "mlx-core-atleast-2d"]], "mlx.core.atleast_3d": [[86, "mlx-core-atleast-3d"]], "mlx.core.bitwise_and": [[87, "mlx-core-bitwise-and"]], "mlx.core.bitwise_or": [[88, "mlx-core-bitwise-or"]], "mlx.core.bitwise_xor": [[89, "mlx-core-bitwise-xor"]], "mlx.core.block_masked_mm": [[90, "mlx-core-block-masked-mm"]], "mlx.core.broadcast_to": [[91, "mlx-core-broadcast-to"]], "mlx.core.ceil": [[92, "mlx-core-ceil"]], "mlx.core.clip": [[93, "mlx-core-clip"]], "mlx.core.compile": [[94, "mlx-core-compile"]], "mlx.core.concatenate": [[95, "mlx-core-concatenate"]], "mlx.core.conj": [[96, "mlx-core-conj"]], "mlx.core.conjugate": [[97, "mlx-core-conjugate"]], "mlx.core.conv1d": [[98, "mlx-core-conv1d"]], "mlx.core.conv2d": [[99, "mlx-core-conv2d"]], "mlx.core.conv3d": [[100, "mlx-core-conv3d"]], "mlx.core.conv_general": [[101, "mlx-core-conv-general"]], "mlx.core.conv_transpose1d": [[102, "mlx-core-conv-transpose1d"]], "mlx.core.conv_transpose2d": [[103, "mlx-core-conv-transpose2d"]], "mlx.core.conv_transpose3d": [[104, "mlx-core-conv-transpose3d"]], "mlx.core.convolve": [[105, "mlx-core-convolve"]], "mlx.core.cos": [[106, "mlx-core-cos"]], "mlx.core.cosh": [[107, "mlx-core-cosh"]], "mlx.core.cummax": [[108, "mlx-core-cummax"]], "mlx.core.cummin": [[109, "mlx-core-cummin"]], "mlx.core.cumprod": [[110, "mlx-core-cumprod"]], "mlx.core.cumsum": [[111, "mlx-core-cumsum"]], "mlx.core.custom_function": [[112, "mlx-core-custom-function"]], "mlx.core.default_device": [[113, "mlx-core-default-device"]], "mlx.core.default_stream": [[114, "mlx-core-default-stream"]], "mlx.core.degrees": [[115, "mlx-core-degrees"]], "mlx.core.dequantize": [[116, "mlx-core-dequantize"]], "mlx.core.diag": [[117, "mlx-core-diag"]], "mlx.core.diagonal": [[118, "mlx-core-diagonal"]], "mlx.core.disable_compile": [[119, "mlx-core-disable-compile"]], "mlx.core.divide": [[128, "mlx-core-divide"]], "mlx.core.divmod": [[129, "mlx-core-divmod"]], "mlx.core.einsum": [[130, "mlx-core-einsum"]], "mlx.core.einsum_path": [[131, "mlx-core-einsum-path"]], "mlx.core.enable_compile": [[132, "mlx-core-enable-compile"]], "mlx.core.equal": [[133, "mlx-core-equal"]], "mlx.core.erf": [[134, "mlx-core-erf"]], "mlx.core.erfinv": [[135, "mlx-core-erfinv"]], "mlx.core.eval": [[136, "mlx-core-eval"]], "mlx.core.exp": [[137, "mlx-core-exp"]], "mlx.core.expand_dims": [[138, "mlx-core-expand-dims"]], "mlx.core.expm1": [[139, "mlx-core-expm1"]], "mlx.core.eye": [[140, "mlx-core-eye"]], "mlx.core.flatten": [[159, "mlx-core-flatten"]], "mlx.core.floor": [[160, "mlx-core-floor"]], "mlx.core.floor_divide": [[161, "mlx-core-floor-divide"]], "mlx.core.full": [[162, "mlx-core-full"]], "mlx.core.gather_mm": [[163, "mlx-core-gather-mm"]], "mlx.core.gather_qmm": [[164, "mlx-core-gather-qmm"]], "mlx.core.grad": [[165, "mlx-core-grad"]], "mlx.core.greater": [[166, "mlx-core-greater"]], "mlx.core.greater_equal": [[167, "mlx-core-greater-equal"]], "mlx.core.hadamard_transform": [[168, "mlx-core-hadamard-transform"]], "mlx.core.identity": [[169, "mlx-core-identity"]], "mlx.core.inner": [[170, "mlx-core-inner"]], "mlx.core.isclose": [[171, "mlx-core-isclose"]], "mlx.core.isfinite": [[172, "mlx-core-isfinite"]], "mlx.core.isinf": [[173, "mlx-core-isinf"]], "mlx.core.isnan": [[174, "mlx-core-isnan"]], "mlx.core.isneginf": [[175, "mlx-core-isneginf"]], "mlx.core.isposinf": [[176, "mlx-core-isposinf"]], "mlx.core.issubdtype": [[177, "mlx-core-issubdtype"]], "mlx.core.jvp": [[178, "mlx-core-jvp"]], "mlx.core.left_shift": [[179, "mlx-core-left-shift"]], "mlx.core.less": [[180, "mlx-core-less"]], "mlx.core.less_equal": [[181, "mlx-core-less-equal"]], "mlx.core.linspace": [[190, "mlx-core-linspace"]], "mlx.core.load": [[191, "mlx-core-load"]], "mlx.core.log": [[192, "mlx-core-log"]], "mlx.core.log10": [[193, "mlx-core-log10"]], "mlx.core.log1p": [[194, "mlx-core-log1p"]], "mlx.core.log2": [[195, "mlx-core-log2"]], "mlx.core.logaddexp": [[196, "mlx-core-logaddexp"]], "mlx.core.logical_and": [[197, "mlx-core-logical-and"]], "mlx.core.logical_not": [[198, "mlx-core-logical-not"]], "mlx.core.logical_or": [[199, "mlx-core-logical-or"]], "mlx.core.logsumexp": [[200, "mlx-core-logsumexp"]], "mlx.core.matmul": [[201, "mlx-core-matmul"]], "mlx.core.max": [[202, "mlx-core-max"]], "mlx.core.maximum": [[203, "mlx-core-maximum"]], "mlx.core.mean": [[204, "mlx-core-mean"]], "mlx.core.meshgrid": [[205, "mlx-core-meshgrid"]], "mlx.core.min": [[217, "mlx-core-min"]], "mlx.core.minimum": [[218, "mlx-core-minimum"]], "mlx.core.moveaxis": [[219, "mlx-core-moveaxis"]], "mlx.core.multiply": [[220, "mlx-core-multiply"]], "mlx.core.nan_to_num": [[221, "mlx-core-nan-to-num"]], "mlx.core.negative": [[222, "mlx-core-negative"]], "mlx.core.new_stream": [[223, "mlx-core-new-stream"]], "mlx.core.not_equal": [[224, "mlx-core-not-equal"]], "mlx.core.ones": [[225, "mlx-core-ones"]], "mlx.core.ones_like": [[226, "mlx-core-ones-like"]], "mlx.core.outer": [[227, "mlx-core-outer"]], "mlx.core.pad": [[228, "mlx-core-pad"]], "mlx.core.partition": [[229, "mlx-core-partition"]], "mlx.core.power": [[230, "mlx-core-power"]], "mlx.core.prod": [[231, "mlx-core-prod"]], "mlx.core.put_along_axis": [[232, "mlx-core-put-along-axis"]], "mlx.core.quantize": [[233, "mlx-core-quantize"]], "mlx.core.quantized_matmul": [[234, "mlx-core-quantized-matmul"]], "mlx.core.radians": [[235, "mlx-core-radians"]], "mlx.core.reciprocal": [[249, "mlx-core-reciprocal"]], "mlx.core.remainder": [[250, "mlx-core-remainder"]], "mlx.core.repeat": [[251, "mlx-core-repeat"]], "mlx.core.reshape": [[252, "mlx-core-reshape"]], "mlx.core.right_shift": [[253, "mlx-core-right-shift"]], "mlx.core.roll": [[254, "mlx-core-roll"]], "mlx.core.round": [[255, "mlx-core-round"]], "mlx.core.rsqrt": [[256, "mlx-core-rsqrt"]], "mlx.core.save": [[257, "mlx-core-save"]], "mlx.core.save_gguf": [[258, "mlx-core-save-gguf"]], "mlx.core.save_safetensors": [[259, "mlx-core-save-safetensors"]], "mlx.core.savez": [[260, "mlx-core-savez"]], "mlx.core.savez_compressed": [[261, "mlx-core-savez-compressed"]], "mlx.core.set_default_device": [[262, "mlx-core-set-default-device"]], "mlx.core.set_default_stream": [[263, "mlx-core-set-default-stream"]], "mlx.core.sigmoid": [[264, "mlx-core-sigmoid"]], "mlx.core.sign": [[265, "mlx-core-sign"]], "mlx.core.sin": [[266, "mlx-core-sin"]], "mlx.core.sinh": [[267, "mlx-core-sinh"]], "mlx.core.softmax": [[268, "mlx-core-softmax"]], "mlx.core.sort": [[269, "mlx-core-sort"]], "mlx.core.split": [[270, "mlx-core-split"]], "mlx.core.sqrt": [[271, "mlx-core-sqrt"]], "mlx.core.square": [[272, "mlx-core-square"]], "mlx.core.squeeze": [[273, "mlx-core-squeeze"]], "mlx.core.stack": [[274, "mlx-core-stack"]], "mlx.core.std": [[275, "mlx-core-std"]], "mlx.core.stop_gradient": [[276, "mlx-core-stop-gradient"]], "mlx.core.stream": [[277, "mlx-core-stream"]], "mlx.core.subtract": [[278, "mlx-core-subtract"]], "mlx.core.sum": [[279, "mlx-core-sum"]], "mlx.core.swapaxes": [[280, "mlx-core-swapaxes"]], "mlx.core.synchronize": [[281, "mlx-core-synchronize"]], "mlx.core.take": [[282, "mlx-core-take"]], "mlx.core.take_along_axis": [[283, "mlx-core-take-along-axis"]], "mlx.core.tan": [[284, "mlx-core-tan"]], "mlx.core.tanh": [[285, "mlx-core-tanh"]], "mlx.core.tensordot": [[286, "mlx-core-tensordot"]], "mlx.core.tile": [[287, "mlx-core-tile"]], "mlx.core.topk": [[288, "mlx-core-topk"]], "mlx.core.trace": [[289, "mlx-core-trace"]], "mlx.core.transpose": [[290, "mlx-core-transpose"]], "mlx.core.tri": [[291, "mlx-core-tri"]], "mlx.core.tril": [[292, "mlx-core-tril"]], "mlx.core.triu": [[293, "mlx-core-triu"]], "mlx.core.value_and_grad": [[294, "mlx-core-value-and-grad"]], "mlx.core.var": [[295, "mlx-core-var"]], "mlx.core.view": [[296, "mlx-core-view"]], "mlx.core.vjp": [[297, "mlx-core-vjp"]], "mlx.core.vmap": [[298, "mlx-core-vmap"]], "mlx.core.where": [[299, "mlx-core-where"]], "mlx.core.zeros": [[300, "mlx-core-zeros"]], "mlx.core.zeros_like": [[301, "mlx-core-zeros-like"]], "mlx.core.Stream": [[310, "mlx-core-stream"]]}, "indexentries": {"abs (c++ function)": [[0, "_CPPv43absRK5array14StreamOrDevice"]], "add (c++ function)": [[0, "_CPPv43addRK5arrayRK5array14StreamOrDevice"]], "addmm (c++ function)": [[0, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice"]], "all (c++ function)": [[0, "_CPPv43allRK5array14StreamOrDevice"], [0, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43allRK5arrayb14StreamOrDevice"], [0, "_CPPv43allRK5arrayib14StreamOrDevice"]], "allclose (c++ function)": [[0, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice"]], "any (c++ function)": [[0, "_CPPv43anyRK5array14StreamOrDevice"], [0, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43anyRK5arrayb14StreamOrDevice"], [0, "_CPPv43anyRK5arrayib14StreamOrDevice"]], "arange (c++ function)": [[0, "_CPPv46aranged14StreamOrDevice"], [0, "_CPPv46aranged5Dtype14StreamOrDevice"], [0, "_CPPv46arangedd14StreamOrDevice"], [0, "_CPPv46arangedd5Dtype14StreamOrDevice"], [0, "_CPPv46arangeddd14StreamOrDevice"], [0, "_CPPv46arangeddd5Dtype14StreamOrDevice"], [0, "_CPPv46arangei14StreamOrDevice"], [0, "_CPPv46arangeii14StreamOrDevice"], [0, "_CPPv46arangeiii14StreamOrDevice"]], "arccos (c++ function)": [[0, "_CPPv46arccosRK5array14StreamOrDevice"]], "arccosh (c++ function)": [[0, "_CPPv47arccoshRK5array14StreamOrDevice"]], "arcsin (c++ function)": [[0, "_CPPv46arcsinRK5array14StreamOrDevice"]], "arcsinh (c++ function)": [[0, "_CPPv47arcsinhRK5array14StreamOrDevice"]], "arctan (c++ function)": [[0, "_CPPv46arctanRK5array14StreamOrDevice"]], "arctan2 (c++ function)": [[0, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice"]], "arctanh (c++ function)": [[0, "_CPPv47arctanhRK5array14StreamOrDevice"]], "argmax (c++ function)": [[0, "_CPPv46argmaxRK5array14StreamOrDevice"], [0, "_CPPv46argmaxRK5arrayb14StreamOrDevice"], [0, "_CPPv46argmaxRK5arrayib14StreamOrDevice"]], "argmin (c++ function)": [[0, "_CPPv46argminRK5array14StreamOrDevice"], [0, "_CPPv46argminRK5arrayb14StreamOrDevice"], [0, "_CPPv46argminRK5arrayib14StreamOrDevice"]], "argpartition (c++ function)": [[0, "_CPPv412argpartitionRK5arrayi14StreamOrDevice"], [0, "_CPPv412argpartitionRK5arrayii14StreamOrDevice"]], "argsort (c++ function)": [[0, "_CPPv47argsortRK5array14StreamOrDevice"], [0, "_CPPv47argsortRK5arrayi14StreamOrDevice"]], "array_equal (c++ function)": [[0, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice"], [0, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice"]], "as_strided (c++ function)": [[0, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice"]], "astype (c++ function)": [[0, "_CPPv46astype5array5Dtype14StreamOrDevice"]], "atleast_1d (c++ function)": [[0, "_CPPv410atleast_1dRK5array14StreamOrDevice"], [0, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice"]], "atleast_2d (c++ function)": [[0, "_CPPv410atleast_2dRK5array14StreamOrDevice"], [0, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice"]], "atleast_3d (c++ function)": [[0, "_CPPv410atleast_3dRK5array14StreamOrDevice"], [0, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice"]], "bitwise_and (c++ function)": [[0, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice"]], "bitwise_or (c++ function)": [[0, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice"]], "bitwise_xor (c++ function)": [[0, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice"]], "block_masked_mm (c++ function)": [[0, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice"]], "broadcast_arrays (c++ function)": [[0, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice"]], "broadcast_to (c++ function)": [[0, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "ceil (c++ function)": [[0, "_CPPv44ceilRK5array14StreamOrDevice"]], "clip (c++ function)": [[0, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice"]], "concatenate (c++ function)": [[0, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice"], [0, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice"]], "conjugate (c++ function)": [[0, "_CPPv49conjugateRK5array14StreamOrDevice"]], "conv1d (c++ function)": [[0, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice"]], "conv2d (c++ function)": [[0, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice"]], "conv3d (c++ function)": [[0, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice"]], "conv_general (c++ function)": [[0, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice"], [0, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice"]], "conv_transpose1d (c++ function)": [[0, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice"]], "conv_transpose2d (c++ function)": [[0, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice"]], "conv_transpose3d (c++ function)": [[0, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice"]], "copy (c++ function)": [[0, "_CPPv44copy5array14StreamOrDevice"]], "cos (c++ function)": [[0, "_CPPv43cosRK5array14StreamOrDevice"]], "cosh (c++ function)": [[0, "_CPPv44coshRK5array14StreamOrDevice"]], "cummax (c++ function)": [[0, "_CPPv46cummaxRK5arrayibb14StreamOrDevice"]], "cummin (c++ function)": [[0, "_CPPv46cumminRK5arrayibb14StreamOrDevice"]], "cumprod (c++ function)": [[0, "_CPPv47cumprodRK5arrayibb14StreamOrDevice"]], "cumsum (c++ function)": [[0, "_CPPv46cumsumRK5arrayibb14StreamOrDevice"]], "degrees (c++ function)": [[0, "_CPPv47degreesRK5array14StreamOrDevice"]], "depends (c++ function)": [[0, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE"]], "dequantize (c++ function)": [[0, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice"]], "diag (c++ function)": [[0, "_CPPv44diagRK5arrayi14StreamOrDevice"]], "diagonal (c++ function)": [[0, "_CPPv48diagonalRK5arrayiii14StreamOrDevice"]], "divide (c++ function)": [[0, "_CPPv46divideRK5arrayRK5array14StreamOrDevice"]], "divmod (c++ function)": [[0, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice"]], "equal (c++ function)": [[0, "_CPPv45equalRK5arrayRK5array14StreamOrDevice"]], "erf (c++ function)": [[0, "_CPPv43erfRK5array14StreamOrDevice"]], "erfinv (c++ function)": [[0, "_CPPv46erfinvRK5array14StreamOrDevice"]], "exp (c++ function)": [[0, "_CPPv43expRK5array14StreamOrDevice"]], "expand_dims (c++ function)": [[0, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice"]], "expm1 (c++ function)": [[0, "_CPPv45expm1RK5array14StreamOrDevice"]], "eye (c++ function)": [[0, "_CPPv43eyei14StreamOrDevice"], [0, "_CPPv43eyei5Dtype14StreamOrDevice"], [0, "_CPPv43eyeii14StreamOrDevice"], [0, "_CPPv43eyeiii14StreamOrDevice"], [0, "_CPPv43eyeiii5Dtype14StreamOrDevice"]], "flatten (c++ function)": [[0, "_CPPv47flattenRK5array14StreamOrDevice"], [0, "_CPPv47flattenRK5arrayii14StreamOrDevice"]], "floor (c++ function)": [[0, "_CPPv45floorRK5array14StreamOrDevice"]], "floor_divide (c++ function)": [[0, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice"]], "full (c++ function)": [[0, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice"], [0, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice"], [0, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice"], [0, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice"]], "gather (c++ function)": [[0, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice"]], "gather_mm (c++ function)": [[0, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice"]], "gather_qmm (c++ function)": [[0, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice"]], "greater (c++ function)": [[0, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice"]], "greater_equal (c++ function)": [[0, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice"]], "hadamard_transform (c++ function)": [[0, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice"]], "identity (c++ function)": [[0, "_CPPv48identityi14StreamOrDevice"], [0, "_CPPv48identityi5Dtype14StreamOrDevice"]], "inner (c++ function)": [[0, "_CPPv45innerRK5arrayRK5array14StreamOrDevice"]], "isclose (c++ function)": [[0, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice"]], "isfinite (c++ function)": [[0, "_CPPv48isfiniteRK5array14StreamOrDevice"]], "isinf (c++ function)": [[0, "_CPPv45isinfRK5array14StreamOrDevice"]], "isnan (c++ function)": [[0, "_CPPv45isnanRK5array14StreamOrDevice"]], "isneginf (c++ function)": [[0, "_CPPv48isneginfRK5array14StreamOrDevice"]], "isposinf (c++ function)": [[0, "_CPPv48isposinfRK5array14StreamOrDevice"]], "left_shift (c++ function)": [[0, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice"]], "less (c++ function)": [[0, "_CPPv44lessRK5arrayRK5array14StreamOrDevice"]], "less_equal (c++ function)": [[0, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice"]], "linspace (c++ function)": [[0, "_CPPv48linspaceddi5Dtype14StreamOrDevice"]], "log (c++ function)": [[0, "_CPPv43logRK5array14StreamOrDevice"]], "log10 (c++ function)": [[0, "_CPPv45log10RK5array14StreamOrDevice"]], "log1p (c++ function)": [[0, "_CPPv45log1pRK5array14StreamOrDevice"]], "log2 (c++ function)": [[0, "_CPPv44log2RK5array14StreamOrDevice"]], "logaddexp (c++ function)": [[0, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice"]], "logical_and (c++ function)": [[0, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice"]], "logical_not (c++ function)": [[0, "_CPPv411logical_notRK5array14StreamOrDevice"]], "logical_or (c++ function)": [[0, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice"]], "logsumexp (c++ function)": [[0, "_CPPv49logsumexpRK5array14StreamOrDevice"], [0, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv49logsumexpRK5arrayb14StreamOrDevice"], [0, "_CPPv49logsumexpRK5arrayib14StreamOrDevice"]], "matmul (c++ function)": [[0, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice"]], "max (c++ function)": [[0, "_CPPv43maxRK5array14StreamOrDevice"], [0, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43maxRK5arrayb14StreamOrDevice"], [0, "_CPPv43maxRK5arrayib14StreamOrDevice"]], "maximum (c++ function)": [[0, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice"]], "mean (c++ function)": [[0, "_CPPv44meanRK5array14StreamOrDevice"], [0, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv44meanRK5arrayb14StreamOrDevice"], [0, "_CPPv44meanRK5arrayib14StreamOrDevice"]], "meshgrid (c++ function)": [[0, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice"]], "min (c++ function)": [[0, "_CPPv43minRK5array14StreamOrDevice"], [0, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43minRK5arrayb14StreamOrDevice"], [0, "_CPPv43minRK5arrayib14StreamOrDevice"]], "minimum (c++ function)": [[0, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice"]], "moveaxis (c++ function)": [[0, "_CPPv48moveaxisRK5arrayii14StreamOrDevice"]], "multiply (c++ function)": [[0, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice"]], "nan_to_num (c++ function)": [[0, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice"]], "negative (c++ function)": [[0, "_CPPv48negativeRK5array14StreamOrDevice"]], "not_equal (c++ function)": [[0, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice"]], "number_of_elements (c++ function)": [[0, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice"]], "ones (c++ function)": [[0, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice"]], "ones_like (c++ function)": [[0, "_CPPv49ones_likeRK5array14StreamOrDevice"]], "operator!= (c++ function)": [[0, "_CPPv4I0Ene5array1TRK5array"], [0, "_CPPv4I0Ene5arrayRK5array1T"], [0, "_CPPv4neRK5arrayRK5array"]], "operator% (c++ function)": [[0, "_CPPv4I0Erm5array1TRK5array"], [0, "_CPPv4I0Erm5arrayRK5array1T"], [0, "_CPPv4rmRK5arrayRK5array"]], "operator& (c++ function)": [[0, "_CPPv4anRK5arrayRK5array"]], "operator&& (c++ function)": [[0, "_CPPv4aaRK5arrayRK5array"]], "operator* (c++ function)": [[0, "_CPPv4I0Eml5array1TRK5array"], [0, "_CPPv4I0Eml5arrayRK5array1T"], [0, "_CPPv4mlRK5arrayRK5array"]], "operator+ (c++ function)": [[0, "_CPPv4I0Epl5array1TRK5array"], [0, "_CPPv4I0Epl5arrayRK5array1T"], [0, "_CPPv4plRK5arrayRK5array"]], "operator- (c++ function)": [[0, "_CPPv4I0Emi5array1TRK5array"], [0, "_CPPv4I0Emi5arrayRK5array1T"], [0, "_CPPv4miRK5array"], [0, "_CPPv4miRK5arrayRK5array"]], "operator/ (c++ function)": [[0, "_CPPv4dvRK5arrayRK5array"], [0, "_CPPv4dvRK5arrayd"], [0, "_CPPv4dvdRK5array"]], "operator< (c++ function)": [[0, "_CPPv4I0Elt5array1TRK5array"], [0, "_CPPv4I0Elt5arrayRK5array1T"], [0, "_CPPv4ltRK5arrayRK5array"]], "operator<< (c++ function)": [[0, "_CPPv4lsRK5arrayRK5array"]], "operator<= (c++ function)": [[0, "_CPPv4I0Ele5array1TRK5array"], [0, "_CPPv4I0Ele5arrayRK5array1T"], [0, "_CPPv4leRK5arrayRK5array"]], "operator== (c++ function)": [[0, "_CPPv4I0Eeq5array1TRK5array"], [0, "_CPPv4I0Eeq5arrayRK5array1T"], [0, "_CPPv4eqRK5arrayRK5array"]], "operator> (c++ function)": [[0, "_CPPv4I0Egt5array1TRK5array"], [0, "_CPPv4I0Egt5arrayRK5array1T"], [0, "_CPPv4gtRK5arrayRK5array"]], "operator>= (c++ function)": [[0, "_CPPv4I0Ege5array1TRK5array"], [0, "_CPPv4I0Ege5arrayRK5array1T"], [0, "_CPPv4geRK5arrayRK5array"]], "operator>> (c++ function)": [[0, "_CPPv4rsRK5arrayRK5array"]], "operator^ (c++ function)": [[0, "_CPPv4eoRK5arrayRK5array"]], "operator| (c++ function)": [[0, "_CPPv4orRK5arrayRK5array"]], "operator|| (c++ function)": [[0, "_CPPv4ooRK5arrayRK5array"]], "outer (c++ function)": [[0, "_CPPv45outerRK5arrayRK5array14StreamOrDevice"]], "pad (c++ function)": [[0, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice"], [0, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice"], [0, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice"], [0, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice"]], "partition (c++ function)": [[0, "_CPPv49partitionRK5arrayi14StreamOrDevice"], [0, "_CPPv49partitionRK5arrayii14StreamOrDevice"]], "power (c++ function)": [[0, "_CPPv45powerRK5arrayRK5array14StreamOrDevice"]], "prod (c++ function)": [[0, "_CPPv44prodRK5array14StreamOrDevice"], [0, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv44prodRK5arrayb14StreamOrDevice"], [0, "_CPPv44prodRK5arrayib14StreamOrDevice"]], "put_along_axis (c++ function)": [[0, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice"]], "quantize (c++ function)": [[0, "_CPPv48quantizeRK5arrayii14StreamOrDevice"]], "quantized_matmul (c++ function)": [[0, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice"]], "radians (c++ function)": [[0, "_CPPv47radiansRK5array14StreamOrDevice"]], "reciprocal (c++ function)": [[0, "_CPPv410reciprocalRK5array14StreamOrDevice"]], "remainder (c++ function)": [[0, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice"]], "repeat (c++ function)": [[0, "_CPPv46repeatRK5arrayi14StreamOrDevice"], [0, "_CPPv46repeatRK5arrayii14StreamOrDevice"]], "reshape (c++ function)": [[0, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice"]], "right_shift (c++ function)": [[0, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice"]], "roll (c++ function)": [[0, "_CPPv44rollRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv44rollRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv44rollRK5arrayRKNSt6vectorIiEEi14StreamOrDevice"], [0, "_CPPv44rollRK5arrayi14StreamOrDevice"], [0, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv44rollRK5arrayii14StreamOrDevice"]], "round (c++ function)": [[0, "_CPPv45roundRK5array14StreamOrDevice"], [0, "_CPPv45roundRK5arrayi14StreamOrDevice"]], "rsqrt (c++ function)": [[0, "_CPPv45rsqrtRK5array14StreamOrDevice"]], "scatter (c++ function)": [[0, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_add (c++ function)": [[0, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_max (c++ function)": [[0, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_min (c++ function)": [[0, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_prod (c++ function)": [[0, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "sigmoid (c++ function)": [[0, "_CPPv47sigmoidRK5array14StreamOrDevice"]], "sign (c++ function)": [[0, "_CPPv44signRK5array14StreamOrDevice"]], "sin (c++ function)": [[0, "_CPPv43sinRK5array14StreamOrDevice"]], "sinh (c++ function)": [[0, "_CPPv44sinhRK5array14StreamOrDevice"]], "slice (c++ function)": [[0, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"]], "slice_update (c++ function)": [[0, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"]], "softmax (c++ function)": [[0, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv47softmaxRK5arrayb14StreamOrDevice"], [0, "_CPPv47softmaxRK5arrayib14StreamOrDevice"]], "sort (c++ function)": [[0, "_CPPv44sortRK5array14StreamOrDevice"], [0, "_CPPv44sortRK5arrayi14StreamOrDevice"]], "split (c++ function)": [[0, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice"], [0, "_CPPv45splitRK5arrayi14StreamOrDevice"], [0, "_CPPv45splitRK5arrayii14StreamOrDevice"]], "sqrt (c++ function)": [[0, "_CPPv44sqrtRK5array14StreamOrDevice"]], "square (c++ function)": [[0, "_CPPv46squareRK5array14StreamOrDevice"]], "squeeze (c++ function)": [[0, "_CPPv47squeezeRK5array14StreamOrDevice"], [0, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv47squeezeRK5arrayi14StreamOrDevice"]], "stack (c++ function)": [[0, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice"], [0, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice"]], "std (c++ function)": [[0, "_CPPv4StRK5array14StreamOrDevice"], [0, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice"], [0, "_CPPv4StRK5arraybi14StreamOrDevice"], [0, "_CPPv4StRK5arrayibi14StreamOrDevice"]], "stop_gradient (c++ function)": [[0, "_CPPv413stop_gradientRK5array14StreamOrDevice"]], "subtract (c++ function)": [[0, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice"]], "sum (c++ function)": [[0, "_CPPv43sumRK5array14StreamOrDevice"], [0, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43sumRK5arrayb14StreamOrDevice"], [0, "_CPPv43sumRK5arrayib14StreamOrDevice"]], "swapaxes (c++ function)": [[0, "_CPPv48swapaxesRK5arrayii14StreamOrDevice"]], "take (c++ function)": [[0, "_CPPv44takeRK5arrayRK5array14StreamOrDevice"], [0, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv44takeRK5arrayi14StreamOrDevice"], [0, "_CPPv44takeRK5arrayii14StreamOrDevice"]], "take_along_axis (c++ function)": [[0, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice"]], "tan (c++ function)": [[0, "_CPPv43tanRK5array14StreamOrDevice"]], "tanh (c++ function)": [[0, "_CPPv44tanhRK5array14StreamOrDevice"]], "tensordot (c++ function)": [[0, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice"], [0, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice"]], "tile (c++ function)": [[0, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice"]], "topk (c++ function)": [[0, "_CPPv44topkRK5arrayi14StreamOrDevice"], [0, "_CPPv44topkRK5arrayii14StreamOrDevice"]], "trace (c++ function)": [[0, "_CPPv45traceRK5array14StreamOrDevice"], [0, "_CPPv45traceRK5arrayiii14StreamOrDevice"], [0, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice"]], "transpose (c++ function)": [[0, "_CPPv49transposeRK5array14StreamOrDevice"], [0, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice"], [0, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice"]], "tri (c++ function)": [[0, "_CPPv43trii5Dtype14StreamOrDevice"], [0, "_CPPv43triiii5Dtype14StreamOrDevice"]], "tril (c++ function)": [[0, "_CPPv44tril5arrayi14StreamOrDevice"]], "triu (c++ function)": [[0, "_CPPv44triu5arrayi14StreamOrDevice"]], "var (c++ function)": [[0, "_CPPv43varRK5array14StreamOrDevice"], [0, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice"], [0, "_CPPv43varRK5arraybi14StreamOrDevice"], [0, "_CPPv43varRK5arrayibi14StreamOrDevice"]], "view (c++ function)": [[0, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice"]], "where (c++ function)": [[0, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice"]], "zeros (c++ function)": [[0, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice"]], "zeros_like (c++ function)": [[0, "_CPPv410zeros_likeRK5array14StreamOrDevice"]], "device (class in mlx.core)": [[9, "mlx.core.Device"]], "__init__() (device method)": [[9, "mlx.core.Device.__init__"]], "dtype (class in mlx.core)": [[10, "mlx.core.Dtype"]], "__init__() (dtype method)": [[10, "mlx.core.Dtype.__init__"]], "dtypecategory (class in mlx.core)": [[11, "mlx.core.DtypeCategory"]], "__init__() (dtypecategory method)": [[11, "mlx.core.DtypeCategory.__init__"]], "abs() (in module mlx.core)": [[12, "mlx.core.abs"]], "add() (in module mlx.core)": [[13, "mlx.core.add"]], "addmm() (in module mlx.core)": [[14, "mlx.core.addmm"]], "all() (in module mlx.core)": [[15, "mlx.core.all"]], "allclose() (in module mlx.core)": [[16, "mlx.core.allclose"]], "any() (in module mlx.core)": [[17, "mlx.core.any"]], "arange() (in module mlx.core)": [[18, "mlx.core.arange"]], "arccos() (in module mlx.core)": [[19, "mlx.core.arccos"]], "arccosh() (in module mlx.core)": [[20, "mlx.core.arccosh"]], "arcsin() (in module mlx.core)": [[21, "mlx.core.arcsin"]], "arcsinh() (in module mlx.core)": [[22, "mlx.core.arcsinh"]], "arctan() (in module mlx.core)": [[23, "mlx.core.arctan"]], "arctan2() (in module mlx.core)": [[24, "mlx.core.arctan2"]], "arctanh() (in module mlx.core)": [[25, "mlx.core.arctanh"]], "argmax() (in module mlx.core)": [[26, "mlx.core.argmax"]], "argmin() (in module mlx.core)": [[27, "mlx.core.argmin"]], "argpartition() (in module mlx.core)": [[28, "mlx.core.argpartition"]], "argsort() (in module mlx.core)": [[29, "mlx.core.argsort"]], "__init__() (array method)": [[30, "mlx.core.array.__init__"]], "array (class in mlx.core)": [[30, "mlx.core.array"]], "t (array property)": [[31, "mlx.core.array.T"]], "abs() (array method)": [[32, "mlx.core.array.abs"]], "all() (array method)": [[33, "mlx.core.array.all"]], "any() (array method)": [[34, "mlx.core.array.any"]], "argmax() (array method)": [[35, "mlx.core.array.argmax"]], "argmin() (array method)": [[36, "mlx.core.array.argmin"]], "astype() (array method)": [[37, "mlx.core.array.astype"]], "at (array property)": [[38, "mlx.core.array.at"]], "conj() (array method)": [[39, "mlx.core.array.conj"]], "cos() (array method)": [[40, "mlx.core.array.cos"]], "cummax() (array method)": [[41, "mlx.core.array.cummax"]], "cummin() (array method)": [[42, "mlx.core.array.cummin"]], "cumprod() (array method)": [[43, "mlx.core.array.cumprod"]], "cumsum() (array method)": [[44, "mlx.core.array.cumsum"]], "diag() (array method)": [[45, "mlx.core.array.diag"]], "diagonal() (array method)": [[46, "mlx.core.array.diagonal"]], "dtype (array property)": [[47, "mlx.core.array.dtype"]], "exp() (array method)": [[48, "mlx.core.array.exp"]], "flatten() (array method)": [[49, "mlx.core.array.flatten"]], "item() (array method)": [[50, "mlx.core.array.item"]], "itemsize (array property)": [[51, "mlx.core.array.itemsize"]], "log() (array method)": [[52, "mlx.core.array.log"]], "log10() (array method)": [[53, "mlx.core.array.log10"]], "log1p() (array method)": [[54, "mlx.core.array.log1p"]], "log2() (array method)": [[55, "mlx.core.array.log2"]], "logsumexp() (array method)": [[56, "mlx.core.array.logsumexp"]], "max() (array method)": [[57, "mlx.core.array.max"]], "mean() (array method)": [[58, "mlx.core.array.mean"]], "min() (array method)": [[59, "mlx.core.array.min"]], "moveaxis() (array method)": [[60, "mlx.core.array.moveaxis"]], "nbytes (array property)": [[61, "mlx.core.array.nbytes"]], "ndim (array property)": [[62, "mlx.core.array.ndim"]], "prod() (array method)": [[63, "mlx.core.array.prod"]], "reciprocal() (array method)": [[64, "mlx.core.array.reciprocal"]], "reshape() (array method)": [[65, "mlx.core.array.reshape"]], "round() (array method)": [[66, "mlx.core.array.round"]], "rsqrt() (array method)": [[67, "mlx.core.array.rsqrt"]], "shape (array property)": [[68, "mlx.core.array.shape"]], "sin() (array method)": [[69, "mlx.core.array.sin"]], "size (array property)": [[70, "mlx.core.array.size"]], "split() (array method)": [[71, "mlx.core.array.split"]], "sqrt() (array method)": [[72, "mlx.core.array.sqrt"]], "square() (array method)": [[73, "mlx.core.array.square"]], "squeeze() (array method)": [[74, "mlx.core.array.squeeze"]], "std() (array method)": [[75, "mlx.core.array.std"]], "sum() (array method)": [[76, "mlx.core.array.sum"]], "swapaxes() (array method)": [[77, "mlx.core.array.swapaxes"]], "tolist() (array method)": [[78, "mlx.core.array.tolist"]], "transpose() (array method)": [[79, "mlx.core.array.transpose"]], "var() (array method)": [[80, "mlx.core.array.var"]], "view() (array method)": [[81, "mlx.core.array.view"]], "array_equal() (in module mlx.core)": [[82, "mlx.core.array_equal"]], "as_strided() (in module mlx.core)": [[83, "mlx.core.as_strided"]], "atleast_1d() (in module mlx.core)": [[84, "mlx.core.atleast_1d"]], "atleast_2d() (in module mlx.core)": [[85, "mlx.core.atleast_2d"]], "atleast_3d() (in module mlx.core)": [[86, "mlx.core.atleast_3d"]], "bitwise_and() (in module mlx.core)": [[87, "mlx.core.bitwise_and"]], "bitwise_or() (in module mlx.core)": [[88, "mlx.core.bitwise_or"]], "bitwise_xor() (in module mlx.core)": [[89, "mlx.core.bitwise_xor"]], "block_masked_mm() (in module mlx.core)": [[90, "mlx.core.block_masked_mm"]], "broadcast_to() (in module mlx.core)": [[91, "mlx.core.broadcast_to"]], "ceil() (in module mlx.core)": [[92, "mlx.core.ceil"]], "clip() (in module mlx.core)": [[93, "mlx.core.clip"]], "compile() (in module mlx.core)": [[94, "mlx.core.compile"]], "concatenate() (in module mlx.core)": [[95, "mlx.core.concatenate"]], "conj() (in module mlx.core)": [[96, "mlx.core.conj"]], "conjugate() (in module mlx.core)": [[97, "mlx.core.conjugate"]], "conv1d() (in module mlx.core)": [[98, "mlx.core.conv1d"]], "conv2d() (in module mlx.core)": [[99, "mlx.core.conv2d"]], "conv3d() (in module mlx.core)": [[100, "mlx.core.conv3d"]], "conv_general() (in module mlx.core)": [[101, "mlx.core.conv_general"]], "conv_transpose1d() (in module mlx.core)": [[102, "mlx.core.conv_transpose1d"]], "conv_transpose2d() (in module mlx.core)": [[103, "mlx.core.conv_transpose2d"]], "conv_transpose3d() (in module mlx.core)": [[104, "mlx.core.conv_transpose3d"]], "convolve() (in module mlx.core)": [[105, "mlx.core.convolve"]], "cos() (in module mlx.core)": [[106, "mlx.core.cos"]], "cosh() (in module mlx.core)": [[107, "mlx.core.cosh"]], "cummax() (in module mlx.core)": [[108, "mlx.core.cummax"]], "cummin() (in module mlx.core)": [[109, "mlx.core.cummin"]], "cumprod() (in module mlx.core)": [[110, "mlx.core.cumprod"]], "cumsum() (in module mlx.core)": [[111, "mlx.core.cumsum"]], "__init__() (custom_function method)": [[112, "mlx.core.custom_function.__init__"]], "custom_function (class in mlx.core)": [[112, "mlx.core.custom_function"]], "default_device() (in module mlx.core)": [[113, "mlx.core.default_device"]], "default_stream() (in module mlx.core)": [[114, "mlx.core.default_stream"]], "degrees() (in module mlx.core)": [[115, "mlx.core.degrees"]], "dequantize() (in module mlx.core)": [[116, "mlx.core.dequantize"]], "diag() (in module mlx.core)": [[117, "mlx.core.diag"]], "diagonal() (in module mlx.core)": [[118, "mlx.core.diagonal"]], "disable_compile() (in module mlx.core)": [[119, "mlx.core.disable_compile"]], "group (class in mlx.core.distributed)": [[120, "mlx.core.distributed.Group"]], "__init__() (group method)": [[120, "mlx.core.distributed.Group.__init__"]], "all_gather() (in module mlx.core.distributed)": [[121, "mlx.core.distributed.all_gather"]], "all_sum() (in module mlx.core.distributed)": [[122, "mlx.core.distributed.all_sum"]], "init() (in module mlx.core.distributed)": [[123, "mlx.core.distributed.init"]], "is_available() (in module mlx.core.distributed)": [[124, "mlx.core.distributed.is_available"]], "recv() (in module mlx.core.distributed)": [[125, "mlx.core.distributed.recv"]], "recv_like() (in module mlx.core.distributed)": [[126, "mlx.core.distributed.recv_like"]], "send() (in module mlx.core.distributed)": [[127, "mlx.core.distributed.send"]], "divide() (in module mlx.core)": [[128, "mlx.core.divide"]], "divmod() (in module mlx.core)": [[129, "mlx.core.divmod"]], "einsum() (in module mlx.core)": [[130, "mlx.core.einsum"]], "einsum_path() (in module mlx.core)": [[131, "mlx.core.einsum_path"]], "enable_compile() (in module mlx.core)": [[132, "mlx.core.enable_compile"]], "equal() (in module mlx.core)": [[133, "mlx.core.equal"]], "erf() (in module mlx.core)": [[134, "mlx.core.erf"]], "erfinv() (in module mlx.core)": [[135, "mlx.core.erfinv"]], "eval() (in module mlx.core)": [[136, "mlx.core.eval"]], "exp() (in module mlx.core)": [[137, "mlx.core.exp"]], "expand_dims() (in module mlx.core)": [[138, "mlx.core.expand_dims"]], "expm1() (in module mlx.core)": [[139, "mlx.core.expm1"]], "eye() (in module mlx.core)": [[140, "mlx.core.eye"]], "affine_quantize() (in module mlx.core.fast)": [[141, "mlx.core.fast.affine_quantize"]], "layer_norm() (in module mlx.core.fast)": [[142, "mlx.core.fast.layer_norm"]], "metal_kernel() (in module mlx.core.fast)": [[143, "mlx.core.fast.metal_kernel"]], "rms_norm() (in module mlx.core.fast)": [[144, "mlx.core.fast.rms_norm"]], "rope() (in module mlx.core.fast)": [[145, "mlx.core.fast.rope"]], "scaled_dot_product_attention() (in module mlx.core.fast)": [[146, "mlx.core.fast.scaled_dot_product_attention"]], "fft() (in module mlx.core.fft)": [[147, "mlx.core.fft.fft"]], "fft2() (in module mlx.core.fft)": [[148, "mlx.core.fft.fft2"]], "fftn() (in module mlx.core.fft)": [[149, "mlx.core.fft.fftn"]], "ifft() (in module mlx.core.fft)": [[150, "mlx.core.fft.ifft"]], "ifft2() (in module mlx.core.fft)": [[151, "mlx.core.fft.ifft2"]], "ifftn() (in module mlx.core.fft)": [[152, "mlx.core.fft.ifftn"]], "irfft() (in module mlx.core.fft)": [[153, "mlx.core.fft.irfft"]], "irfft2() (in module mlx.core.fft)": [[154, "mlx.core.fft.irfft2"]], "irfftn() (in module mlx.core.fft)": [[155, "mlx.core.fft.irfftn"]], "rfft() (in module mlx.core.fft)": [[156, "mlx.core.fft.rfft"]], "rfft2() (in module mlx.core.fft)": [[157, "mlx.core.fft.rfft2"]], "rfftn() (in module mlx.core.fft)": [[158, "mlx.core.fft.rfftn"]], "flatten() (in module mlx.core)": [[159, "mlx.core.flatten"]], "floor() (in module mlx.core)": [[160, "mlx.core.floor"]], "floor_divide() (in module mlx.core)": [[161, "mlx.core.floor_divide"]], "full() (in module mlx.core)": [[162, "mlx.core.full"]], "gather_mm() (in module mlx.core)": [[163, "mlx.core.gather_mm"]], "gather_qmm() (in module mlx.core)": [[164, "mlx.core.gather_qmm"]], "grad() (in module mlx.core)": [[165, "mlx.core.grad"]], "greater() (in module mlx.core)": [[166, "mlx.core.greater"]], "greater_equal() (in module mlx.core)": [[167, "mlx.core.greater_equal"]], "hadamard_transform() (in module mlx.core)": [[168, "mlx.core.hadamard_transform"]], "identity() (in module mlx.core)": [[169, "mlx.core.identity"]], "inner() (in module mlx.core)": [[170, "mlx.core.inner"]], "isclose() (in module mlx.core)": [[171, "mlx.core.isclose"]], "isfinite() (in module mlx.core)": [[172, "mlx.core.isfinite"]], "isinf() (in module mlx.core)": [[173, "mlx.core.isinf"]], "isnan() (in module mlx.core)": [[174, "mlx.core.isnan"]], "isneginf() (in module mlx.core)": [[175, "mlx.core.isneginf"]], "isposinf() (in module mlx.core)": [[176, "mlx.core.isposinf"]], "issubdtype() (in module mlx.core)": [[177, "mlx.core.issubdtype"]], "jvp() (in module mlx.core)": [[178, "mlx.core.jvp"]], "left_shift() (in module mlx.core)": [[179, "mlx.core.left_shift"]], "less() (in module mlx.core)": [[180, "mlx.core.less"]], "less_equal() (in module mlx.core)": [[181, "mlx.core.less_equal"]], "cholesky() (in module mlx.core.linalg)": [[182, "mlx.core.linalg.cholesky"]], "cholesky_inv() (in module mlx.core.linalg)": [[183, "mlx.core.linalg.cholesky_inv"]], "cross() (in module mlx.core.linalg)": [[184, "mlx.core.linalg.cross"]], "inv() (in module mlx.core.linalg)": [[185, "mlx.core.linalg.inv"]], "norm() (in module mlx.core.linalg)": [[186, "mlx.core.linalg.norm"]], "qr() (in module mlx.core.linalg)": [[187, "mlx.core.linalg.qr"]], "svd() (in module mlx.core.linalg)": [[188, "mlx.core.linalg.svd"]], "tri_inv() (in module mlx.core.linalg)": [[189, "mlx.core.linalg.tri_inv"]], "linspace() (in module mlx.core)": [[190, "mlx.core.linspace"]], "load() (in module mlx.core)": [[191, "mlx.core.load"]], "log() (in module mlx.core)": [[192, "mlx.core.log"]], "log10() (in module mlx.core)": [[193, "mlx.core.log10"]], "log1p() (in module mlx.core)": [[194, "mlx.core.log1p"]], "log2() (in module mlx.core)": [[195, "mlx.core.log2"]], "logaddexp() (in module mlx.core)": [[196, "mlx.core.logaddexp"]], "logical_and() (in module mlx.core)": [[197, "mlx.core.logical_and"]], "logical_not() (in module mlx.core)": [[198, "mlx.core.logical_not"]], "logical_or() (in module mlx.core)": [[199, "mlx.core.logical_or"]], "logsumexp() (in module mlx.core)": [[200, "mlx.core.logsumexp"]], "matmul() (in module mlx.core)": [[201, "mlx.core.matmul"]], "max() (in module mlx.core)": [[202, "mlx.core.max"]], "maximum() (in module mlx.core)": [[203, "mlx.core.maximum"]], "mean() (in module mlx.core)": [[204, "mlx.core.mean"]], "meshgrid() (in module mlx.core)": [[205, "mlx.core.meshgrid"]], "clear_cache() (in module mlx.core.metal)": [[206, "mlx.core.metal.clear_cache"]], "device_info() (in module mlx.core.metal)": [[207, "mlx.core.metal.device_info"]], "get_active_memory() (in module mlx.core.metal)": [[208, "mlx.core.metal.get_active_memory"]], "get_cache_memory() (in module mlx.core.metal)": [[209, "mlx.core.metal.get_cache_memory"]], "get_peak_memory() (in module mlx.core.metal)": [[210, "mlx.core.metal.get_peak_memory"]], "is_available() (in module mlx.core.metal)": [[211, "mlx.core.metal.is_available"]], "reset_peak_memory() (in module mlx.core.metal)": [[212, "mlx.core.metal.reset_peak_memory"]], "set_cache_limit() (in module mlx.core.metal)": [[213, "mlx.core.metal.set_cache_limit"]], "set_memory_limit() (in module mlx.core.metal)": [[214, "mlx.core.metal.set_memory_limit"]], "start_capture() (in module mlx.core.metal)": [[215, "mlx.core.metal.start_capture"]], "stop_capture() (in module mlx.core.metal)": [[216, "mlx.core.metal.stop_capture"]], "min() (in module mlx.core)": [[217, "mlx.core.min"]], "minimum() (in module mlx.core)": [[218, "mlx.core.minimum"]], "moveaxis() (in module mlx.core)": [[219, "mlx.core.moveaxis"]], "multiply() (in module mlx.core)": [[220, "mlx.core.multiply"]], "nan_to_num() (in module mlx.core)": [[221, "mlx.core.nan_to_num"]], "negative() (in module mlx.core)": [[222, "mlx.core.negative"]], "new_stream() (in module mlx.core)": [[223, "mlx.core.new_stream"]], "not_equal() (in module mlx.core)": [[224, "mlx.core.not_equal"]], "ones() (in module mlx.core)": [[225, "mlx.core.ones"]], "ones_like() (in module mlx.core)": [[226, "mlx.core.ones_like"]], "outer() (in module mlx.core)": [[227, "mlx.core.outer"]], "pad() (in module mlx.core)": [[228, "mlx.core.pad"]], "partition() (in module mlx.core)": [[229, "mlx.core.partition"]], "power() (in module mlx.core)": [[230, "mlx.core.power"]], "prod() (in module mlx.core)": [[231, "mlx.core.prod"]], "put_along_axis() (in module mlx.core)": [[232, "mlx.core.put_along_axis"]], "quantize() (in module mlx.core)": [[233, "mlx.core.quantize"]], "quantized_matmul() (in module mlx.core)": [[234, "mlx.core.quantized_matmul"]], "radians() (in module mlx.core)": [[235, "mlx.core.radians"]], "bernoulli() (in module mlx.core.random)": [[236, "mlx.core.random.bernoulli"]], "categorical() (in module mlx.core.random)": [[237, "mlx.core.random.categorical"]], "gumbel() (in module mlx.core.random)": [[238, "mlx.core.random.gumbel"]], "key() (in module mlx.core.random)": [[239, "mlx.core.random.key"]], "laplace() (in module mlx.core.random)": [[240, "mlx.core.random.laplace"]], "multivariate_normal() (in module mlx.core.random)": [[241, "mlx.core.random.multivariate_normal"]], "normal() (in module mlx.core.random)": [[242, "mlx.core.random.normal"]], "permutation() (in module mlx.core.random)": [[243, "mlx.core.random.permutation"]], "randint() (in module mlx.core.random)": [[244, "mlx.core.random.randint"]], "seed() (in module mlx.core.random)": [[245, "mlx.core.random.seed"]], "split() (in module mlx.core.random)": [[246, "mlx.core.random.split"]], "truncated_normal() (in module mlx.core.random)": [[247, "mlx.core.random.truncated_normal"]], "uniform() (in module mlx.core.random)": [[248, "mlx.core.random.uniform"]], "reciprocal() (in module mlx.core)": [[249, "mlx.core.reciprocal"]], "remainder() (in module mlx.core)": [[250, "mlx.core.remainder"]], "repeat() (in module mlx.core)": [[251, "mlx.core.repeat"]], "reshape() (in module mlx.core)": [[252, "mlx.core.reshape"]], "right_shift() (in module mlx.core)": [[253, "mlx.core.right_shift"]], "roll() (in module mlx.core)": [[254, "mlx.core.roll"]], "round() (in module mlx.core)": [[255, "mlx.core.round"]], "rsqrt() (in module mlx.core)": [[256, "mlx.core.rsqrt"]], "save() (in module mlx.core)": [[257, "mlx.core.save"]], "save_gguf() (in module mlx.core)": [[258, "mlx.core.save_gguf"]], "save_safetensors() (in module mlx.core)": [[259, "mlx.core.save_safetensors"]], "savez() (in module mlx.core)": [[260, "mlx.core.savez"]], "savez_compressed() (in module mlx.core)": [[261, "mlx.core.savez_compressed"]], "set_default_device() (in module mlx.core)": [[262, "mlx.core.set_default_device"]], "set_default_stream() (in module mlx.core)": [[263, "mlx.core.set_default_stream"]], "sigmoid() (in module mlx.core)": [[264, "mlx.core.sigmoid"]], "sign() (in module mlx.core)": [[265, "mlx.core.sign"]], "sin() (in module mlx.core)": [[266, "mlx.core.sin"]], "sinh() (in module mlx.core)": [[267, "mlx.core.sinh"]], "softmax() (in module mlx.core)": [[268, "mlx.core.softmax"]], "sort() (in module mlx.core)": [[269, "mlx.core.sort"]], "split() (in module mlx.core)": [[270, "mlx.core.split"]], "sqrt() (in module mlx.core)": [[271, "mlx.core.sqrt"]], "square() (in module mlx.core)": [[272, "mlx.core.square"]], "squeeze() (in module mlx.core)": [[273, "mlx.core.squeeze"]], "stack() (in module mlx.core)": [[274, "mlx.core.stack"]], "std() (in module mlx.core)": [[275, "mlx.core.std"]], "stop_gradient() (in module mlx.core)": [[276, "mlx.core.stop_gradient"]], "stream() (in module mlx.core)": [[277, "mlx.core.stream"]], "subtract() (in module mlx.core)": [[278, "mlx.core.subtract"]], "sum() (in module mlx.core)": [[279, "mlx.core.sum"]], "swapaxes() (in module mlx.core)": [[280, "mlx.core.swapaxes"]], "synchronize() (in module mlx.core)": [[281, "mlx.core.synchronize"]], "take() (in module mlx.core)": [[282, "mlx.core.take"]], "take_along_axis() (in module mlx.core)": [[283, "mlx.core.take_along_axis"]], "tan() (in module mlx.core)": [[284, "mlx.core.tan"]], "tanh() (in module mlx.core)": [[285, "mlx.core.tanh"]], "tensordot() (in module mlx.core)": [[286, "mlx.core.tensordot"]], "tile() (in module mlx.core)": [[287, "mlx.core.tile"]], "topk() (in module mlx.core)": [[288, "mlx.core.topk"]], "trace() (in module mlx.core)": [[289, "mlx.core.trace"]], "transpose() (in module mlx.core)": [[290, "mlx.core.transpose"]], "tri() (in module mlx.core)": [[291, "mlx.core.tri"]], "tril() (in module mlx.core)": [[292, "mlx.core.tril"]], "triu() (in module mlx.core)": [[293, "mlx.core.triu"]], "value_and_grad() (in module mlx.core)": [[294, "mlx.core.value_and_grad"]], "var() (in module mlx.core)": [[295, "mlx.core.var"]], "view() (in module mlx.core)": [[296, "mlx.core.view"]], "vjp() (in module mlx.core)": [[297, "mlx.core.vjp"]], "vmap() (in module mlx.core)": [[298, "mlx.core.vmap"]], "where() (in module mlx.core)": [[299, "mlx.core.where"]], "zeros() (in module mlx.core)": [[300, "mlx.core.zeros"]], "zeros_like() (in module mlx.core)": [[301, "mlx.core.zeros_like"]], "quantize() (in module mlx.nn)": [[302, "mlx.nn.quantize"]], "value_and_grad() (in module mlx.nn)": [[303, "mlx.nn.value_and_grad"]], "clip_grad_norm() (in module mlx.optimizers)": [[304, "mlx.optimizers.clip_grad_norm"]], "tree_flatten() (in module mlx.utils)": [[305, "mlx.utils.tree_flatten"]], "tree_map() (in module mlx.utils)": [[306, "mlx.utils.tree_map"]], "tree_map_with_path() (in module mlx.utils)": [[307, "mlx.utils.tree_map_with_path"]], "tree_reduce() (in module mlx.utils)": [[308, "mlx.utils.tree_reduce"]], "tree_unflatten() (in module mlx.utils)": [[309, "mlx.utils.tree_unflatten"]], "stream (class in mlx.core)": [[310, "mlx.core.Stream"]], "__init__() (stream method)": [[310, "mlx.core.Stream.__init__"]], "alibi (class in mlx.nn)": [[320, "mlx.nn.ALiBi"]], "avgpool1d (class in mlx.nn)": [[321, "mlx.nn.AvgPool1d"]], "avgpool2d (class in mlx.nn)": [[322, "mlx.nn.AvgPool2d"]], "batchnorm (class in mlx.nn)": [[323, "mlx.nn.BatchNorm"]], "celu (class in mlx.nn)": [[324, "mlx.nn.CELU"], [404, "mlx.nn.celu"]], "conv1d (class in mlx.nn)": [[325, "mlx.nn.Conv1d"]], "conv2d (class in mlx.nn)": [[326, "mlx.nn.Conv2d"]], "conv3d (class in mlx.nn)": [[327, "mlx.nn.Conv3d"]], "convtranspose1d (class in mlx.nn)": [[328, "mlx.nn.ConvTranspose1d"]], "convtranspose2d (class in mlx.nn)": [[329, "mlx.nn.ConvTranspose2d"]], "convtranspose3d (class in mlx.nn)": [[330, "mlx.nn.ConvTranspose3d"]], "dropout (class in mlx.nn)": [[331, "mlx.nn.Dropout"]], "dropout2d (class in mlx.nn)": [[332, "mlx.nn.Dropout2d"]], "dropout3d (class in mlx.nn)": [[333, "mlx.nn.Dropout3d"]], "elu (class in mlx.nn)": [[334, "mlx.nn.ELU"], [405, "mlx.nn.elu"]], "embedding (class in mlx.nn)": [[335, "mlx.nn.Embedding"]], "gelu (class in mlx.nn)": [[336, "mlx.nn.GELU"], [406, "mlx.nn.gelu"]], "glu (class in mlx.nn)": [[337, "mlx.nn.GLU"], [409, "mlx.nn.glu"]], "gru (class in mlx.nn)": [[338, "mlx.nn.GRU"]], "groupnorm (class in mlx.nn)": [[339, "mlx.nn.GroupNorm"]], "hardshrink (class in mlx.nn)": [[340, "mlx.nn.HardShrink"]], "hardtanh (class in mlx.nn)": [[341, "mlx.nn.HardTanh"]], "hardswish (class in mlx.nn)": [[342, "mlx.nn.Hardswish"], [412, "mlx.nn.hardswish"]], "instancenorm (class in mlx.nn)": [[343, "mlx.nn.InstanceNorm"]], "lstm (class in mlx.nn)": [[344, "mlx.nn.LSTM"]], "layernorm (class in mlx.nn)": [[345, "mlx.nn.LayerNorm"]], "leakyrelu (class in mlx.nn)": [[346, "mlx.nn.LeakyReLU"]], "linear (class in mlx.nn)": [[347, "mlx.nn.Linear"]], "logsigmoid (class in mlx.nn)": [[348, "mlx.nn.LogSigmoid"]], "logsoftmax (class in mlx.nn)": [[349, "mlx.nn.LogSoftmax"]], "maxpool1d (class in mlx.nn)": [[350, "mlx.nn.MaxPool1d"]], "maxpool2d (class in mlx.nn)": [[351, "mlx.nn.MaxPool2d"]], "mish (class in mlx.nn)": [[352, "mlx.nn.Mish"], [430, "mlx.nn.mish"]], "apply() (module method)": [[353, "mlx.nn.Module.apply"]], "apply_to_modules() (module method)": [[354, "mlx.nn.Module.apply_to_modules"]], "children() (module method)": [[355, "mlx.nn.Module.children"]], "eval() (module method)": [[356, "mlx.nn.Module.eval"]], "filter_and_map() (module method)": [[357, "mlx.nn.Module.filter_and_map"]], "freeze() (module method)": [[358, "mlx.nn.Module.freeze"]], "leaf_modules() (module method)": [[359, "mlx.nn.Module.leaf_modules"]], "load_weights() (module method)": [[360, "mlx.nn.Module.load_weights"]], "modules() (module method)": [[361, "mlx.nn.Module.modules"]], "named_modules() (module method)": [[362, "mlx.nn.Module.named_modules"]], "parameters() (module method)": [[363, "mlx.nn.Module.parameters"]], "save_weights() (module method)": [[364, "mlx.nn.Module.save_weights"]], "set_dtype() (module method)": [[365, "mlx.nn.Module.set_dtype"]], "state (module property)": [[366, "mlx.nn.Module.state"]], "train() (module method)": [[367, "mlx.nn.Module.train"]], "trainable_parameters() (module method)": [[368, "mlx.nn.Module.trainable_parameters"]], "training (module property)": [[369, "mlx.nn.Module.training"]], "unfreeze() (module method)": [[370, "mlx.nn.Module.unfreeze"]], "update() (module method)": [[371, "mlx.nn.Module.update"]], "update_modules() (module method)": [[372, "mlx.nn.Module.update_modules"]], "multiheadattention (class in mlx.nn)": [[373, "mlx.nn.MultiHeadAttention"]], "prelu (class in mlx.nn)": [[374, "mlx.nn.PReLU"], [431, "mlx.nn.prelu"]], "quantizedembedding (class in mlx.nn)": [[375, "mlx.nn.QuantizedEmbedding"]], "quantizedlinear (class in mlx.nn)": [[376, "mlx.nn.QuantizedLinear"]], "rmsnorm (class in mlx.nn)": [[377, "mlx.nn.RMSNorm"]], "rnn (class in mlx.nn)": [[378, "mlx.nn.RNN"]], "relu (class in mlx.nn)": [[379, "mlx.nn.ReLU"], [432, "mlx.nn.relu"]], "relu6 (class in mlx.nn)": [[380, "mlx.nn.ReLU6"], [433, "mlx.nn.relu6"]], "rope (class in mlx.nn)": [[381, "mlx.nn.RoPE"]], "selu (class in mlx.nn)": [[382, "mlx.nn.SELU"], [434, "mlx.nn.selu"]], "sequential (class in mlx.nn)": [[383, "mlx.nn.Sequential"]], "silu (class in mlx.nn)": [[384, "mlx.nn.SiLU"], [436, "mlx.nn.silu"]], "sigmoid (class in mlx.nn)": [[385, "mlx.nn.Sigmoid"], [435, "mlx.nn.sigmoid"]], "sinusoidalpositionalencoding (class in mlx.nn)": [[386, "mlx.nn.SinusoidalPositionalEncoding"]], "softmax (class in mlx.nn)": [[387, "mlx.nn.Softmax"], [437, "mlx.nn.softmax"]], "softmin (class in mlx.nn)": [[388, "mlx.nn.Softmin"], [438, "mlx.nn.softmin"]], "softplus (class in mlx.nn)": [[389, "mlx.nn.Softplus"], [439, "mlx.nn.softplus"]], "softshrink (class in mlx.nn)": [[390, "mlx.nn.Softshrink"], [440, "mlx.nn.softshrink"]], "softsign (class in mlx.nn)": [[391, "mlx.nn.Softsign"]], "step (class in mlx.nn)": [[392, "mlx.nn.Step"], [441, "mlx.nn.step"]], "tanh (class in mlx.nn)": [[393, "mlx.nn.Tanh"], [442, "mlx.nn.tanh"]], "transformer (class in mlx.nn)": [[394, "mlx.nn.Transformer"]], "upsample (class in mlx.nn)": [[395, "mlx.nn.Upsample"]], "constant() (in module mlx.nn.init)": [[396, "mlx.nn.init.constant"]], "glorot_normal() (in module mlx.nn.init)": [[397, "mlx.nn.init.glorot_normal"]], "glorot_uniform() (in module mlx.nn.init)": [[398, "mlx.nn.init.glorot_uniform"]], "he_normal() (in module mlx.nn.init)": [[399, "mlx.nn.init.he_normal"]], "he_uniform() (in module mlx.nn.init)": [[400, "mlx.nn.init.he_uniform"]], "identity() (in module mlx.nn.init)": [[401, "mlx.nn.init.identity"]], "normal() (in module mlx.nn.init)": [[402, "mlx.nn.init.normal"]], "uniform() (in module mlx.nn.init)": [[403, "mlx.nn.init.uniform"]], "gelu_approx (class in mlx.nn)": [[407, "mlx.nn.gelu_approx"]], "gelu_fast_approx (class in mlx.nn)": [[408, "mlx.nn.gelu_fast_approx"]], "hard_shrink (class in mlx.nn)": [[410, "mlx.nn.hard_shrink"]], "hard_tanh (class in mlx.nn)": [[411, "mlx.nn.hard_tanh"]], "leaky_relu (class in mlx.nn)": [[413, "mlx.nn.leaky_relu"]], "log_sigmoid (class in mlx.nn)": [[414, "mlx.nn.log_sigmoid"]], "log_softmax (class in mlx.nn)": [[415, "mlx.nn.log_softmax"]], "binary_cross_entropy (class in mlx.nn.losses)": [[416, "mlx.nn.losses.binary_cross_entropy"]], "cosine_similarity_loss (class in mlx.nn.losses)": [[417, "mlx.nn.losses.cosine_similarity_loss"]], "cross_entropy (class in mlx.nn.losses)": [[418, "mlx.nn.losses.cross_entropy"]], "gaussian_nll_loss (class in mlx.nn.losses)": [[419, "mlx.nn.losses.gaussian_nll_loss"]], "hinge_loss (class in mlx.nn.losses)": [[420, "mlx.nn.losses.hinge_loss"]], "huber_loss (class in mlx.nn.losses)": [[421, "mlx.nn.losses.huber_loss"]], "kl_div_loss (class in mlx.nn.losses)": [[422, "mlx.nn.losses.kl_div_loss"]], "l1_loss (class in mlx.nn.losses)": [[423, "mlx.nn.losses.l1_loss"]], "log_cosh_loss (class in mlx.nn.losses)": [[424, "mlx.nn.losses.log_cosh_loss"]], "margin_ranking_loss (class in mlx.nn.losses)": [[425, "mlx.nn.losses.margin_ranking_loss"]], "mse_loss (class in mlx.nn.losses)": [[426, "mlx.nn.losses.mse_loss"]], "nll_loss (class in mlx.nn.losses)": [[427, "mlx.nn.losses.nll_loss"]], "smooth_l1_loss (class in mlx.nn.losses)": [[428, "mlx.nn.losses.smooth_l1_loss"]], "triplet_loss (class in mlx.nn.losses)": [[429, "mlx.nn.losses.triplet_loss"]], "module (class in mlx.nn)": [[447, "mlx.nn.Module"]], "adadelta (class in mlx.optimizers)": [[450, "mlx.optimizers.AdaDelta"]], "adafactor (class in mlx.optimizers)": [[451, "mlx.optimizers.Adafactor"]], "adagrad (class in mlx.optimizers)": [[452, "mlx.optimizers.Adagrad"]], "adam (class in mlx.optimizers)": [[453, "mlx.optimizers.Adam"]], "adamw (class in mlx.optimizers)": [[454, "mlx.optimizers.AdamW"]], "adamax (class in mlx.optimizers)": [[455, "mlx.optimizers.Adamax"]], "lion (class in mlx.optimizers)": [[456, "mlx.optimizers.Lion"]], "apply_gradients() (optimizer method)": [[457, "mlx.optimizers.Optimizer.apply_gradients"]], "init() (optimizer method)": [[458, "mlx.optimizers.Optimizer.init"]], "state (optimizer property)": [[459, "mlx.optimizers.Optimizer.state"]], "update() (optimizer method)": [[460, "mlx.optimizers.Optimizer.update"]], "rmsprop (class in mlx.optimizers)": [[461, "mlx.optimizers.RMSprop"]], "sgd (class in mlx.optimizers)": [[462, "mlx.optimizers.SGD"]], "cosine_decay() (in module mlx.optimizers)": [[463, "mlx.optimizers.cosine_decay"]], "exponential_decay() (in module mlx.optimizers)": [[464, "mlx.optimizers.exponential_decay"]], "join_schedules() (in module mlx.optimizers)": [[465, "mlx.optimizers.join_schedules"]], "linear_schedule() (in module mlx.optimizers)": [[466, "mlx.optimizers.linear_schedule"]], "step_decay() (in module mlx.optimizers)": [[467, "mlx.optimizers.step_decay"]], "optimizer (class in mlx.optimizers)": [[469, "mlx.optimizers.Optimizer"]]}})