Search.setIndex({"docnames": ["cpp/ops", "dev/extensions", "dev/metal_debugger", "examples/linear_regression", "examples/llama-inference", "examples/mlp", "index", "install", "python/_autosummary/mlx.core.Device", "python/_autosummary/mlx.core.Dtype", "python/_autosummary/mlx.core.DtypeCategory", "python/_autosummary/mlx.core.abs", "python/_autosummary/mlx.core.add", "python/_autosummary/mlx.core.all", "python/_autosummary/mlx.core.allclose", "python/_autosummary/mlx.core.any", "python/_autosummary/mlx.core.arange", "python/_autosummary/mlx.core.arccos", "python/_autosummary/mlx.core.arccosh", "python/_autosummary/mlx.core.arcsin", "python/_autosummary/mlx.core.arcsinh", "python/_autosummary/mlx.core.arctan", "python/_autosummary/mlx.core.arctan2", "python/_autosummary/mlx.core.arctanh", "python/_autosummary/mlx.core.argmax", "python/_autosummary/mlx.core.argmin", "python/_autosummary/mlx.core.argpartition", "python/_autosummary/mlx.core.argsort", "python/_autosummary/mlx.core.array", "python/_autosummary/mlx.core.array.T", "python/_autosummary/mlx.core.array.abs", "python/_autosummary/mlx.core.array.all", "python/_autosummary/mlx.core.array.any", "python/_autosummary/mlx.core.array.argmax", "python/_autosummary/mlx.core.array.argmin", "python/_autosummary/mlx.core.array.astype", "python/_autosummary/mlx.core.array.at", "python/_autosummary/mlx.core.array.cos", "python/_autosummary/mlx.core.array.cummax", "python/_autosummary/mlx.core.array.cummin", "python/_autosummary/mlx.core.array.cumprod", "python/_autosummary/mlx.core.array.cumsum", "python/_autosummary/mlx.core.array.diag", "python/_autosummary/mlx.core.array.diagonal", "python/_autosummary/mlx.core.array.dtype", "python/_autosummary/mlx.core.array.exp", "python/_autosummary/mlx.core.array.flatten", "python/_autosummary/mlx.core.array.item", "python/_autosummary/mlx.core.array.itemsize", "python/_autosummary/mlx.core.array.log", "python/_autosummary/mlx.core.array.log10", "python/_autosummary/mlx.core.array.log1p", "python/_autosummary/mlx.core.array.log2", "python/_autosummary/mlx.core.array.logsumexp", "python/_autosummary/mlx.core.array.max", "python/_autosummary/mlx.core.array.mean", "python/_autosummary/mlx.core.array.min", "python/_autosummary/mlx.core.array.moveaxis", "python/_autosummary/mlx.core.array.nbytes", "python/_autosummary/mlx.core.array.ndim", "python/_autosummary/mlx.core.array.prod", "python/_autosummary/mlx.core.array.reciprocal", "python/_autosummary/mlx.core.array.reshape", "python/_autosummary/mlx.core.array.round", "python/_autosummary/mlx.core.array.rsqrt", "python/_autosummary/mlx.core.array.shape", "python/_autosummary/mlx.core.array.sin", "python/_autosummary/mlx.core.array.size", "python/_autosummary/mlx.core.array.split", "python/_autosummary/mlx.core.array.sqrt", "python/_autosummary/mlx.core.array.square", "python/_autosummary/mlx.core.array.squeeze", "python/_autosummary/mlx.core.array.sum", "python/_autosummary/mlx.core.array.swapaxes", "python/_autosummary/mlx.core.array.tolist", "python/_autosummary/mlx.core.array.transpose", "python/_autosummary/mlx.core.array.var", "python/_autosummary/mlx.core.array_equal", "python/_autosummary/mlx.core.atleast_1d", "python/_autosummary/mlx.core.atleast_2d", "python/_autosummary/mlx.core.atleast_3d", "python/_autosummary/mlx.core.bitwise_and", "python/_autosummary/mlx.core.bitwise_or", "python/_autosummary/mlx.core.bitwise_xor", "python/_autosummary/mlx.core.block_masked_mm", "python/_autosummary/mlx.core.block_sparse_mm", "python/_autosummary/mlx.core.broadcast_to", "python/_autosummary/mlx.core.ceil", "python/_autosummary/mlx.core.clip", "python/_autosummary/mlx.core.compile", "python/_autosummary/mlx.core.concatenate", "python/_autosummary/mlx.core.conj", "python/_autosummary/mlx.core.conjugate", "python/_autosummary/mlx.core.conv1d", "python/_autosummary/mlx.core.conv2d", "python/_autosummary/mlx.core.conv_general", "python/_autosummary/mlx.core.convolve", "python/_autosummary/mlx.core.cos", "python/_autosummary/mlx.core.cosh", "python/_autosummary/mlx.core.cummax", "python/_autosummary/mlx.core.cummin", "python/_autosummary/mlx.core.cumprod", "python/_autosummary/mlx.core.cumsum", "python/_autosummary/mlx.core.default_device", "python/_autosummary/mlx.core.default_stream", "python/_autosummary/mlx.core.degrees", "python/_autosummary/mlx.core.dequantize", "python/_autosummary/mlx.core.diag", "python/_autosummary/mlx.core.diagonal", "python/_autosummary/mlx.core.disable_compile", "python/_autosummary/mlx.core.divide", "python/_autosummary/mlx.core.divmod", "python/_autosummary/mlx.core.enable_compile", "python/_autosummary/mlx.core.equal", "python/_autosummary/mlx.core.erf", "python/_autosummary/mlx.core.erfinv", "python/_autosummary/mlx.core.eval", "python/_autosummary/mlx.core.exp", "python/_autosummary/mlx.core.expand_dims", "python/_autosummary/mlx.core.expm1", "python/_autosummary/mlx.core.eye", "python/_autosummary/mlx.core.fast.layer_norm", "python/_autosummary/mlx.core.fast.rms_norm", "python/_autosummary/mlx.core.fast.rope", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention", "python/_autosummary/mlx.core.fft.fft", "python/_autosummary/mlx.core.fft.fft2", "python/_autosummary/mlx.core.fft.fftn", "python/_autosummary/mlx.core.fft.ifft", "python/_autosummary/mlx.core.fft.ifft2", "python/_autosummary/mlx.core.fft.ifftn", "python/_autosummary/mlx.core.fft.irfft", "python/_autosummary/mlx.core.fft.irfft2", "python/_autosummary/mlx.core.fft.irfftn", "python/_autosummary/mlx.core.fft.rfft", "python/_autosummary/mlx.core.fft.rfft2", "python/_autosummary/mlx.core.fft.rfftn", "python/_autosummary/mlx.core.flatten", "python/_autosummary/mlx.core.floor", "python/_autosummary/mlx.core.floor_divide", "python/_autosummary/mlx.core.full", "python/_autosummary/mlx.core.grad", "python/_autosummary/mlx.core.greater", "python/_autosummary/mlx.core.greater_equal", "python/_autosummary/mlx.core.identity", "python/_autosummary/mlx.core.inner", "python/_autosummary/mlx.core.isclose", "python/_autosummary/mlx.core.isinf", "python/_autosummary/mlx.core.isnan", "python/_autosummary/mlx.core.isneginf", "python/_autosummary/mlx.core.isposinf", "python/_autosummary/mlx.core.issubdtype", "python/_autosummary/mlx.core.jvp", "python/_autosummary/mlx.core.left_shift", "python/_autosummary/mlx.core.less", "python/_autosummary/mlx.core.less_equal", "python/_autosummary/mlx.core.linalg.norm", "python/_autosummary/mlx.core.linalg.qr", "python/_autosummary/mlx.core.linspace", "python/_autosummary/mlx.core.load", "python/_autosummary/mlx.core.log", "python/_autosummary/mlx.core.log10", "python/_autosummary/mlx.core.log1p", "python/_autosummary/mlx.core.log2", "python/_autosummary/mlx.core.logaddexp", "python/_autosummary/mlx.core.logical_and", "python/_autosummary/mlx.core.logical_not", "python/_autosummary/mlx.core.logical_or", "python/_autosummary/mlx.core.logsumexp", "python/_autosummary/mlx.core.matmul", "python/_autosummary/mlx.core.max", "python/_autosummary/mlx.core.maximum", "python/_autosummary/mlx.core.mean", "python/_autosummary/mlx.core.meshgrid", "python/_autosummary/mlx.core.metal.clear_cache", "python/_autosummary/mlx.core.metal.device_info", "python/_autosummary/mlx.core.metal.get_active_memory", "python/_autosummary/mlx.core.metal.get_cache_memory", "python/_autosummary/mlx.core.metal.get_peak_memory", "python/_autosummary/mlx.core.metal.is_available", "python/_autosummary/mlx.core.metal.reset_peak_memory", "python/_autosummary/mlx.core.metal.set_cache_limit", "python/_autosummary/mlx.core.metal.set_memory_limit", "python/_autosummary/mlx.core.metal.start_capture", "python/_autosummary/mlx.core.metal.stop_capture", "python/_autosummary/mlx.core.min", "python/_autosummary/mlx.core.minimum", "python/_autosummary/mlx.core.moveaxis", "python/_autosummary/mlx.core.multiply", "python/_autosummary/mlx.core.negative", "python/_autosummary/mlx.core.new_stream", "python/_autosummary/mlx.core.not_equal", "python/_autosummary/mlx.core.ones", "python/_autosummary/mlx.core.ones_like", "python/_autosummary/mlx.core.outer", "python/_autosummary/mlx.core.pad", "python/_autosummary/mlx.core.partition", "python/_autosummary/mlx.core.prod", "python/_autosummary/mlx.core.quantize", "python/_autosummary/mlx.core.quantized_matmul", "python/_autosummary/mlx.core.radians", "python/_autosummary/mlx.core.random.bernoulli", "python/_autosummary/mlx.core.random.categorical", "python/_autosummary/mlx.core.random.gumbel", "python/_autosummary/mlx.core.random.key", "python/_autosummary/mlx.core.random.multivariate_normal", "python/_autosummary/mlx.core.random.normal", "python/_autosummary/mlx.core.random.randint", "python/_autosummary/mlx.core.random.seed", "python/_autosummary/mlx.core.random.split", "python/_autosummary/mlx.core.random.truncated_normal", "python/_autosummary/mlx.core.random.uniform", "python/_autosummary/mlx.core.reciprocal", "python/_autosummary/mlx.core.repeat", "python/_autosummary/mlx.core.reshape", "python/_autosummary/mlx.core.right_shift", "python/_autosummary/mlx.core.round", "python/_autosummary/mlx.core.rsqrt", "python/_autosummary/mlx.core.save", "python/_autosummary/mlx.core.save_gguf", "python/_autosummary/mlx.core.save_safetensors", "python/_autosummary/mlx.core.savez", "python/_autosummary/mlx.core.savez_compressed", "python/_autosummary/mlx.core.set_default_device", "python/_autosummary/mlx.core.set_default_stream", "python/_autosummary/mlx.core.sigmoid", "python/_autosummary/mlx.core.sign", "python/_autosummary/mlx.core.sin", "python/_autosummary/mlx.core.sinh", "python/_autosummary/mlx.core.softmax", "python/_autosummary/mlx.core.sort", "python/_autosummary/mlx.core.split", "python/_autosummary/mlx.core.sqrt", "python/_autosummary/mlx.core.square", "python/_autosummary/mlx.core.squeeze", "python/_autosummary/mlx.core.stack", "python/_autosummary/mlx.core.std", "python/_autosummary/mlx.core.stop_gradient", "python/_autosummary/mlx.core.stream", "python/_autosummary/mlx.core.subtract", "python/_autosummary/mlx.core.sum", "python/_autosummary/mlx.core.swapaxes", "python/_autosummary/mlx.core.synchronize", "python/_autosummary/mlx.core.take", "python/_autosummary/mlx.core.take_along_axis", "python/_autosummary/mlx.core.tan", "python/_autosummary/mlx.core.tanh", "python/_autosummary/mlx.core.tensordot", "python/_autosummary/mlx.core.tile", "python/_autosummary/mlx.core.topk", "python/_autosummary/mlx.core.transpose", "python/_autosummary/mlx.core.tri", "python/_autosummary/mlx.core.tril", "python/_autosummary/mlx.core.triu", "python/_autosummary/mlx.core.value_and_grad", "python/_autosummary/mlx.core.var", "python/_autosummary/mlx.core.vjp", "python/_autosummary/mlx.core.vmap", "python/_autosummary/mlx.core.where", "python/_autosummary/mlx.core.zeros", "python/_autosummary/mlx.core.zeros_like", "python/_autosummary/mlx.nn.quantize", "python/_autosummary/mlx.nn.value_and_grad", "python/_autosummary/mlx.optimizers.clip_grad_norm", "python/_autosummary/mlx.utils.tree_flatten", "python/_autosummary/mlx.utils.tree_map", "python/_autosummary/mlx.utils.tree_map_with_path", "python/_autosummary/mlx.utils.tree_reduce", "python/_autosummary/mlx.utils.tree_unflatten", "python/_autosummary/stream_class", "python/array", "python/data_types", "python/devices_and_streams", "python/fast", "python/fft", "python/linalg", "python/metal", "python/nn", "python/nn/_autosummary/mlx.nn.ALiBi", "python/nn/_autosummary/mlx.nn.AvgPool1d", "python/nn/_autosummary/mlx.nn.AvgPool2d", "python/nn/_autosummary/mlx.nn.BatchNorm", "python/nn/_autosummary/mlx.nn.Conv1d", "python/nn/_autosummary/mlx.nn.Conv2d", "python/nn/_autosummary/mlx.nn.Dropout", "python/nn/_autosummary/mlx.nn.Dropout2d", "python/nn/_autosummary/mlx.nn.Dropout3d", "python/nn/_autosummary/mlx.nn.Embedding", "python/nn/_autosummary/mlx.nn.GELU", "python/nn/_autosummary/mlx.nn.GRU", "python/nn/_autosummary/mlx.nn.GroupNorm", "python/nn/_autosummary/mlx.nn.InstanceNorm", "python/nn/_autosummary/mlx.nn.LSTM", "python/nn/_autosummary/mlx.nn.LayerNorm", "python/nn/_autosummary/mlx.nn.Linear", "python/nn/_autosummary/mlx.nn.MaxPool1d", "python/nn/_autosummary/mlx.nn.MaxPool2d", "python/nn/_autosummary/mlx.nn.Mish", "python/nn/_autosummary/mlx.nn.Module.apply", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules", "python/nn/_autosummary/mlx.nn.Module.children", "python/nn/_autosummary/mlx.nn.Module.eval", "python/nn/_autosummary/mlx.nn.Module.filter_and_map", "python/nn/_autosummary/mlx.nn.Module.freeze", "python/nn/_autosummary/mlx.nn.Module.leaf_modules", "python/nn/_autosummary/mlx.nn.Module.load_weights", "python/nn/_autosummary/mlx.nn.Module.modules", "python/nn/_autosummary/mlx.nn.Module.named_modules", "python/nn/_autosummary/mlx.nn.Module.parameters", "python/nn/_autosummary/mlx.nn.Module.save_weights", "python/nn/_autosummary/mlx.nn.Module.set_dtype", "python/nn/_autosummary/mlx.nn.Module.state", "python/nn/_autosummary/mlx.nn.Module.train", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters", "python/nn/_autosummary/mlx.nn.Module.training", "python/nn/_autosummary/mlx.nn.Module.unfreeze", "python/nn/_autosummary/mlx.nn.Module.update", "python/nn/_autosummary/mlx.nn.Module.update_modules", "python/nn/_autosummary/mlx.nn.MultiHeadAttention", "python/nn/_autosummary/mlx.nn.PReLU", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding", "python/nn/_autosummary/mlx.nn.QuantizedLinear", "python/nn/_autosummary/mlx.nn.RMSNorm", "python/nn/_autosummary/mlx.nn.RNN", "python/nn/_autosummary/mlx.nn.ReLU", "python/nn/_autosummary/mlx.nn.RoPE", "python/nn/_autosummary/mlx.nn.SELU", "python/nn/_autosummary/mlx.nn.Sequential", "python/nn/_autosummary/mlx.nn.SiLU", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding", "python/nn/_autosummary/mlx.nn.Softshrink", "python/nn/_autosummary/mlx.nn.Step", "python/nn/_autosummary/mlx.nn.Transformer", "python/nn/_autosummary/mlx.nn.Upsample", "python/nn/_autosummary/mlx.nn.init.constant", "python/nn/_autosummary/mlx.nn.init.glorot_normal", "python/nn/_autosummary/mlx.nn.init.glorot_uniform", "python/nn/_autosummary/mlx.nn.init.he_normal", "python/nn/_autosummary/mlx.nn.init.he_uniform", "python/nn/_autosummary/mlx.nn.init.identity", "python/nn/_autosummary/mlx.nn.init.normal", "python/nn/_autosummary/mlx.nn.init.uniform", "python/nn/_autosummary_functions/mlx.nn.elu", "python/nn/_autosummary_functions/mlx.nn.gelu", "python/nn/_autosummary_functions/mlx.nn.gelu_approx", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx", "python/nn/_autosummary_functions/mlx.nn.glu", "python/nn/_autosummary_functions/mlx.nn.hardswish", "python/nn/_autosummary_functions/mlx.nn.leaky_relu", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid", "python/nn/_autosummary_functions/mlx.nn.log_softmax", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss", "python/nn/_autosummary_functions/mlx.nn.mish", "python/nn/_autosummary_functions/mlx.nn.prelu", "python/nn/_autosummary_functions/mlx.nn.relu", "python/nn/_autosummary_functions/mlx.nn.relu6", "python/nn/_autosummary_functions/mlx.nn.selu", "python/nn/_autosummary_functions/mlx.nn.sigmoid", "python/nn/_autosummary_functions/mlx.nn.silu", "python/nn/_autosummary_functions/mlx.nn.softmax", "python/nn/_autosummary_functions/mlx.nn.softplus", "python/nn/_autosummary_functions/mlx.nn.softshrink", "python/nn/_autosummary_functions/mlx.nn.step", "python/nn/_autosummary_functions/mlx.nn.tanh", "python/nn/functions", "python/nn/init", "python/nn/layers", "python/nn/losses", "python/nn/module", "python/ops", "python/optimizers", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta", "python/optimizers/_autosummary/mlx.optimizers.Adafactor", "python/optimizers/_autosummary/mlx.optimizers.Adagrad", "python/optimizers/_autosummary/mlx.optimizers.Adam", "python/optimizers/_autosummary/mlx.optimizers.AdamW", "python/optimizers/_autosummary/mlx.optimizers.Adamax", "python/optimizers/_autosummary/mlx.optimizers.Lion", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update", "python/optimizers/_autosummary/mlx.optimizers.RMSprop", "python/optimizers/_autosummary/mlx.optimizers.SGD", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay", "python/optimizers/_autosummary/mlx.optimizers.join_schedules", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule", "python/optimizers/_autosummary/mlx.optimizers.step_decay", "python/optimizers/common_optimizers", "python/optimizers/optimizer", "python/optimizers/schedulers", "python/random", "python/transforms", "python/tree_utils", "usage/compile", "usage/function_transforms", "usage/indexing", "usage/lazy_evaluation", "usage/numpy", "usage/quick_start", "usage/saving_and_loading", "usage/unified_memory", "usage/using_streams"], "filenames": ["cpp/ops.rst", "dev/extensions.rst", "dev/metal_debugger.rst", "examples/linear_regression.rst", "examples/llama-inference.rst", "examples/mlp.rst", "index.rst", "install.rst", "python/_autosummary/mlx.core.Device.rst", "python/_autosummary/mlx.core.Dtype.rst", "python/_autosummary/mlx.core.DtypeCategory.rst", "python/_autosummary/mlx.core.abs.rst", "python/_autosummary/mlx.core.add.rst", "python/_autosummary/mlx.core.all.rst", "python/_autosummary/mlx.core.allclose.rst", "python/_autosummary/mlx.core.any.rst", "python/_autosummary/mlx.core.arange.rst", "python/_autosummary/mlx.core.arccos.rst", "python/_autosummary/mlx.core.arccosh.rst", "python/_autosummary/mlx.core.arcsin.rst", "python/_autosummary/mlx.core.arcsinh.rst", "python/_autosummary/mlx.core.arctan.rst", "python/_autosummary/mlx.core.arctan2.rst", "python/_autosummary/mlx.core.arctanh.rst", "python/_autosummary/mlx.core.argmax.rst", "python/_autosummary/mlx.core.argmin.rst", "python/_autosummary/mlx.core.argpartition.rst", "python/_autosummary/mlx.core.argsort.rst", "python/_autosummary/mlx.core.array.rst", "python/_autosummary/mlx.core.array.T.rst", "python/_autosummary/mlx.core.array.abs.rst", "python/_autosummary/mlx.core.array.all.rst", "python/_autosummary/mlx.core.array.any.rst", "python/_autosummary/mlx.core.array.argmax.rst", "python/_autosummary/mlx.core.array.argmin.rst", "python/_autosummary/mlx.core.array.astype.rst", "python/_autosummary/mlx.core.array.at.rst", "python/_autosummary/mlx.core.array.cos.rst", "python/_autosummary/mlx.core.array.cummax.rst", "python/_autosummary/mlx.core.array.cummin.rst", "python/_autosummary/mlx.core.array.cumprod.rst", "python/_autosummary/mlx.core.array.cumsum.rst", "python/_autosummary/mlx.core.array.diag.rst", "python/_autosummary/mlx.core.array.diagonal.rst", "python/_autosummary/mlx.core.array.dtype.rst", "python/_autosummary/mlx.core.array.exp.rst", "python/_autosummary/mlx.core.array.flatten.rst", "python/_autosummary/mlx.core.array.item.rst", "python/_autosummary/mlx.core.array.itemsize.rst", "python/_autosummary/mlx.core.array.log.rst", "python/_autosummary/mlx.core.array.log10.rst", "python/_autosummary/mlx.core.array.log1p.rst", "python/_autosummary/mlx.core.array.log2.rst", "python/_autosummary/mlx.core.array.logsumexp.rst", "python/_autosummary/mlx.core.array.max.rst", "python/_autosummary/mlx.core.array.mean.rst", "python/_autosummary/mlx.core.array.min.rst", "python/_autosummary/mlx.core.array.moveaxis.rst", "python/_autosummary/mlx.core.array.nbytes.rst", "python/_autosummary/mlx.core.array.ndim.rst", "python/_autosummary/mlx.core.array.prod.rst", "python/_autosummary/mlx.core.array.reciprocal.rst", "python/_autosummary/mlx.core.array.reshape.rst", "python/_autosummary/mlx.core.array.round.rst", "python/_autosummary/mlx.core.array.rsqrt.rst", "python/_autosummary/mlx.core.array.shape.rst", "python/_autosummary/mlx.core.array.sin.rst", "python/_autosummary/mlx.core.array.size.rst", "python/_autosummary/mlx.core.array.split.rst", "python/_autosummary/mlx.core.array.sqrt.rst", "python/_autosummary/mlx.core.array.square.rst", "python/_autosummary/mlx.core.array.squeeze.rst", "python/_autosummary/mlx.core.array.sum.rst", "python/_autosummary/mlx.core.array.swapaxes.rst", "python/_autosummary/mlx.core.array.tolist.rst", "python/_autosummary/mlx.core.array.transpose.rst", "python/_autosummary/mlx.core.array.var.rst", "python/_autosummary/mlx.core.array_equal.rst", "python/_autosummary/mlx.core.atleast_1d.rst", "python/_autosummary/mlx.core.atleast_2d.rst", "python/_autosummary/mlx.core.atleast_3d.rst", "python/_autosummary/mlx.core.bitwise_and.rst", "python/_autosummary/mlx.core.bitwise_or.rst", "python/_autosummary/mlx.core.bitwise_xor.rst", "python/_autosummary/mlx.core.block_masked_mm.rst", "python/_autosummary/mlx.core.block_sparse_mm.rst", "python/_autosummary/mlx.core.broadcast_to.rst", "python/_autosummary/mlx.core.ceil.rst", "python/_autosummary/mlx.core.clip.rst", "python/_autosummary/mlx.core.compile.rst", "python/_autosummary/mlx.core.concatenate.rst", "python/_autosummary/mlx.core.conj.rst", "python/_autosummary/mlx.core.conjugate.rst", "python/_autosummary/mlx.core.conv1d.rst", "python/_autosummary/mlx.core.conv2d.rst", "python/_autosummary/mlx.core.conv_general.rst", "python/_autosummary/mlx.core.convolve.rst", "python/_autosummary/mlx.core.cos.rst", "python/_autosummary/mlx.core.cosh.rst", "python/_autosummary/mlx.core.cummax.rst", "python/_autosummary/mlx.core.cummin.rst", "python/_autosummary/mlx.core.cumprod.rst", "python/_autosummary/mlx.core.cumsum.rst", "python/_autosummary/mlx.core.default_device.rst", "python/_autosummary/mlx.core.default_stream.rst", "python/_autosummary/mlx.core.degrees.rst", "python/_autosummary/mlx.core.dequantize.rst", "python/_autosummary/mlx.core.diag.rst", "python/_autosummary/mlx.core.diagonal.rst", "python/_autosummary/mlx.core.disable_compile.rst", "python/_autosummary/mlx.core.divide.rst", "python/_autosummary/mlx.core.divmod.rst", "python/_autosummary/mlx.core.enable_compile.rst", "python/_autosummary/mlx.core.equal.rst", "python/_autosummary/mlx.core.erf.rst", "python/_autosummary/mlx.core.erfinv.rst", "python/_autosummary/mlx.core.eval.rst", "python/_autosummary/mlx.core.exp.rst", "python/_autosummary/mlx.core.expand_dims.rst", "python/_autosummary/mlx.core.expm1.rst", "python/_autosummary/mlx.core.eye.rst", "python/_autosummary/mlx.core.fast.layer_norm.rst", "python/_autosummary/mlx.core.fast.rms_norm.rst", "python/_autosummary/mlx.core.fast.rope.rst", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention.rst", "python/_autosummary/mlx.core.fft.fft.rst", "python/_autosummary/mlx.core.fft.fft2.rst", "python/_autosummary/mlx.core.fft.fftn.rst", "python/_autosummary/mlx.core.fft.ifft.rst", "python/_autosummary/mlx.core.fft.ifft2.rst", "python/_autosummary/mlx.core.fft.ifftn.rst", "python/_autosummary/mlx.core.fft.irfft.rst", "python/_autosummary/mlx.core.fft.irfft2.rst", "python/_autosummary/mlx.core.fft.irfftn.rst", "python/_autosummary/mlx.core.fft.rfft.rst", "python/_autosummary/mlx.core.fft.rfft2.rst", "python/_autosummary/mlx.core.fft.rfftn.rst", "python/_autosummary/mlx.core.flatten.rst", "python/_autosummary/mlx.core.floor.rst", "python/_autosummary/mlx.core.floor_divide.rst", "python/_autosummary/mlx.core.full.rst", "python/_autosummary/mlx.core.grad.rst", "python/_autosummary/mlx.core.greater.rst", "python/_autosummary/mlx.core.greater_equal.rst", "python/_autosummary/mlx.core.identity.rst", "python/_autosummary/mlx.core.inner.rst", "python/_autosummary/mlx.core.isclose.rst", "python/_autosummary/mlx.core.isinf.rst", "python/_autosummary/mlx.core.isnan.rst", "python/_autosummary/mlx.core.isneginf.rst", "python/_autosummary/mlx.core.isposinf.rst", "python/_autosummary/mlx.core.issubdtype.rst", "python/_autosummary/mlx.core.jvp.rst", "python/_autosummary/mlx.core.left_shift.rst", "python/_autosummary/mlx.core.less.rst", "python/_autosummary/mlx.core.less_equal.rst", "python/_autosummary/mlx.core.linalg.norm.rst", "python/_autosummary/mlx.core.linalg.qr.rst", "python/_autosummary/mlx.core.linspace.rst", "python/_autosummary/mlx.core.load.rst", "python/_autosummary/mlx.core.log.rst", "python/_autosummary/mlx.core.log10.rst", "python/_autosummary/mlx.core.log1p.rst", "python/_autosummary/mlx.core.log2.rst", "python/_autosummary/mlx.core.logaddexp.rst", "python/_autosummary/mlx.core.logical_and.rst", "python/_autosummary/mlx.core.logical_not.rst", "python/_autosummary/mlx.core.logical_or.rst", "python/_autosummary/mlx.core.logsumexp.rst", "python/_autosummary/mlx.core.matmul.rst", "python/_autosummary/mlx.core.max.rst", "python/_autosummary/mlx.core.maximum.rst", "python/_autosummary/mlx.core.mean.rst", "python/_autosummary/mlx.core.meshgrid.rst", "python/_autosummary/mlx.core.metal.clear_cache.rst", "python/_autosummary/mlx.core.metal.device_info.rst", "python/_autosummary/mlx.core.metal.get_active_memory.rst", "python/_autosummary/mlx.core.metal.get_cache_memory.rst", "python/_autosummary/mlx.core.metal.get_peak_memory.rst", "python/_autosummary/mlx.core.metal.is_available.rst", "python/_autosummary/mlx.core.metal.reset_peak_memory.rst", "python/_autosummary/mlx.core.metal.set_cache_limit.rst", "python/_autosummary/mlx.core.metal.set_memory_limit.rst", "python/_autosummary/mlx.core.metal.start_capture.rst", "python/_autosummary/mlx.core.metal.stop_capture.rst", "python/_autosummary/mlx.core.min.rst", "python/_autosummary/mlx.core.minimum.rst", "python/_autosummary/mlx.core.moveaxis.rst", "python/_autosummary/mlx.core.multiply.rst", "python/_autosummary/mlx.core.negative.rst", "python/_autosummary/mlx.core.new_stream.rst", "python/_autosummary/mlx.core.not_equal.rst", "python/_autosummary/mlx.core.ones.rst", "python/_autosummary/mlx.core.ones_like.rst", "python/_autosummary/mlx.core.outer.rst", "python/_autosummary/mlx.core.pad.rst", "python/_autosummary/mlx.core.partition.rst", "python/_autosummary/mlx.core.prod.rst", "python/_autosummary/mlx.core.quantize.rst", "python/_autosummary/mlx.core.quantized_matmul.rst", "python/_autosummary/mlx.core.radians.rst", "python/_autosummary/mlx.core.random.bernoulli.rst", "python/_autosummary/mlx.core.random.categorical.rst", "python/_autosummary/mlx.core.random.gumbel.rst", "python/_autosummary/mlx.core.random.key.rst", "python/_autosummary/mlx.core.random.multivariate_normal.rst", "python/_autosummary/mlx.core.random.normal.rst", "python/_autosummary/mlx.core.random.randint.rst", "python/_autosummary/mlx.core.random.seed.rst", "python/_autosummary/mlx.core.random.split.rst", "python/_autosummary/mlx.core.random.truncated_normal.rst", "python/_autosummary/mlx.core.random.uniform.rst", "python/_autosummary/mlx.core.reciprocal.rst", "python/_autosummary/mlx.core.repeat.rst", "python/_autosummary/mlx.core.reshape.rst", "python/_autosummary/mlx.core.right_shift.rst", "python/_autosummary/mlx.core.round.rst", "python/_autosummary/mlx.core.rsqrt.rst", "python/_autosummary/mlx.core.save.rst", "python/_autosummary/mlx.core.save_gguf.rst", "python/_autosummary/mlx.core.save_safetensors.rst", "python/_autosummary/mlx.core.savez.rst", "python/_autosummary/mlx.core.savez_compressed.rst", "python/_autosummary/mlx.core.set_default_device.rst", "python/_autosummary/mlx.core.set_default_stream.rst", "python/_autosummary/mlx.core.sigmoid.rst", "python/_autosummary/mlx.core.sign.rst", "python/_autosummary/mlx.core.sin.rst", "python/_autosummary/mlx.core.sinh.rst", "python/_autosummary/mlx.core.softmax.rst", "python/_autosummary/mlx.core.sort.rst", "python/_autosummary/mlx.core.split.rst", "python/_autosummary/mlx.core.sqrt.rst", "python/_autosummary/mlx.core.square.rst", "python/_autosummary/mlx.core.squeeze.rst", "python/_autosummary/mlx.core.stack.rst", "python/_autosummary/mlx.core.std.rst", "python/_autosummary/mlx.core.stop_gradient.rst", "python/_autosummary/mlx.core.stream.rst", "python/_autosummary/mlx.core.subtract.rst", "python/_autosummary/mlx.core.sum.rst", "python/_autosummary/mlx.core.swapaxes.rst", "python/_autosummary/mlx.core.synchronize.rst", "python/_autosummary/mlx.core.take.rst", "python/_autosummary/mlx.core.take_along_axis.rst", "python/_autosummary/mlx.core.tan.rst", "python/_autosummary/mlx.core.tanh.rst", "python/_autosummary/mlx.core.tensordot.rst", "python/_autosummary/mlx.core.tile.rst", "python/_autosummary/mlx.core.topk.rst", "python/_autosummary/mlx.core.transpose.rst", "python/_autosummary/mlx.core.tri.rst", "python/_autosummary/mlx.core.tril.rst", "python/_autosummary/mlx.core.triu.rst", "python/_autosummary/mlx.core.value_and_grad.rst", "python/_autosummary/mlx.core.var.rst", "python/_autosummary/mlx.core.vjp.rst", "python/_autosummary/mlx.core.vmap.rst", "python/_autosummary/mlx.core.where.rst", "python/_autosummary/mlx.core.zeros.rst", "python/_autosummary/mlx.core.zeros_like.rst", "python/_autosummary/mlx.nn.quantize.rst", "python/_autosummary/mlx.nn.value_and_grad.rst", "python/_autosummary/mlx.optimizers.clip_grad_norm.rst", "python/_autosummary/mlx.utils.tree_flatten.rst", "python/_autosummary/mlx.utils.tree_map.rst", "python/_autosummary/mlx.utils.tree_map_with_path.rst", "python/_autosummary/mlx.utils.tree_reduce.rst", "python/_autosummary/mlx.utils.tree_unflatten.rst", "python/_autosummary/stream_class.rst", "python/array.rst", "python/data_types.rst", "python/devices_and_streams.rst", "python/fast.rst", "python/fft.rst", "python/linalg.rst", "python/metal.rst", "python/nn.rst", "python/nn/_autosummary/mlx.nn.ALiBi.rst", "python/nn/_autosummary/mlx.nn.AvgPool1d.rst", "python/nn/_autosummary/mlx.nn.AvgPool2d.rst", "python/nn/_autosummary/mlx.nn.BatchNorm.rst", "python/nn/_autosummary/mlx.nn.Conv1d.rst", "python/nn/_autosummary/mlx.nn.Conv2d.rst", "python/nn/_autosummary/mlx.nn.Dropout.rst", "python/nn/_autosummary/mlx.nn.Dropout2d.rst", "python/nn/_autosummary/mlx.nn.Dropout3d.rst", "python/nn/_autosummary/mlx.nn.Embedding.rst", "python/nn/_autosummary/mlx.nn.GELU.rst", "python/nn/_autosummary/mlx.nn.GRU.rst", "python/nn/_autosummary/mlx.nn.GroupNorm.rst", "python/nn/_autosummary/mlx.nn.InstanceNorm.rst", "python/nn/_autosummary/mlx.nn.LSTM.rst", "python/nn/_autosummary/mlx.nn.LayerNorm.rst", "python/nn/_autosummary/mlx.nn.Linear.rst", "python/nn/_autosummary/mlx.nn.MaxPool1d.rst", "python/nn/_autosummary/mlx.nn.MaxPool2d.rst", "python/nn/_autosummary/mlx.nn.Mish.rst", "python/nn/_autosummary/mlx.nn.Module.apply.rst", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules.rst", "python/nn/_autosummary/mlx.nn.Module.children.rst", "python/nn/_autosummary/mlx.nn.Module.eval.rst", "python/nn/_autosummary/mlx.nn.Module.filter_and_map.rst", "python/nn/_autosummary/mlx.nn.Module.freeze.rst", "python/nn/_autosummary/mlx.nn.Module.leaf_modules.rst", "python/nn/_autosummary/mlx.nn.Module.load_weights.rst", "python/nn/_autosummary/mlx.nn.Module.modules.rst", "python/nn/_autosummary/mlx.nn.Module.named_modules.rst", "python/nn/_autosummary/mlx.nn.Module.parameters.rst", "python/nn/_autosummary/mlx.nn.Module.save_weights.rst", "python/nn/_autosummary/mlx.nn.Module.set_dtype.rst", "python/nn/_autosummary/mlx.nn.Module.state.rst", "python/nn/_autosummary/mlx.nn.Module.train.rst", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters.rst", "python/nn/_autosummary/mlx.nn.Module.training.rst", "python/nn/_autosummary/mlx.nn.Module.unfreeze.rst", "python/nn/_autosummary/mlx.nn.Module.update.rst", "python/nn/_autosummary/mlx.nn.Module.update_modules.rst", "python/nn/_autosummary/mlx.nn.MultiHeadAttention.rst", "python/nn/_autosummary/mlx.nn.PReLU.rst", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding.rst", "python/nn/_autosummary/mlx.nn.QuantizedLinear.rst", "python/nn/_autosummary/mlx.nn.RMSNorm.rst", "python/nn/_autosummary/mlx.nn.RNN.rst", "python/nn/_autosummary/mlx.nn.ReLU.rst", "python/nn/_autosummary/mlx.nn.RoPE.rst", "python/nn/_autosummary/mlx.nn.SELU.rst", "python/nn/_autosummary/mlx.nn.Sequential.rst", "python/nn/_autosummary/mlx.nn.SiLU.rst", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding.rst", "python/nn/_autosummary/mlx.nn.Softshrink.rst", "python/nn/_autosummary/mlx.nn.Step.rst", "python/nn/_autosummary/mlx.nn.Transformer.rst", "python/nn/_autosummary/mlx.nn.Upsample.rst", "python/nn/_autosummary/mlx.nn.init.constant.rst", "python/nn/_autosummary/mlx.nn.init.glorot_normal.rst", "python/nn/_autosummary/mlx.nn.init.glorot_uniform.rst", "python/nn/_autosummary/mlx.nn.init.he_normal.rst", "python/nn/_autosummary/mlx.nn.init.he_uniform.rst", "python/nn/_autosummary/mlx.nn.init.identity.rst", "python/nn/_autosummary/mlx.nn.init.normal.rst", "python/nn/_autosummary/mlx.nn.init.uniform.rst", "python/nn/_autosummary_functions/mlx.nn.elu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_approx.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx.rst", "python/nn/_autosummary_functions/mlx.nn.glu.rst", "python/nn/_autosummary_functions/mlx.nn.hardswish.rst", "python/nn/_autosummary_functions/mlx.nn.leaky_relu.rst", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.log_softmax.rst", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss.rst", "python/nn/_autosummary_functions/mlx.nn.mish.rst", "python/nn/_autosummary_functions/mlx.nn.prelu.rst", "python/nn/_autosummary_functions/mlx.nn.relu.rst", "python/nn/_autosummary_functions/mlx.nn.relu6.rst", "python/nn/_autosummary_functions/mlx.nn.selu.rst", "python/nn/_autosummary_functions/mlx.nn.sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.silu.rst", "python/nn/_autosummary_functions/mlx.nn.softmax.rst", "python/nn/_autosummary_functions/mlx.nn.softplus.rst", "python/nn/_autosummary_functions/mlx.nn.softshrink.rst", "python/nn/_autosummary_functions/mlx.nn.step.rst", "python/nn/_autosummary_functions/mlx.nn.tanh.rst", "python/nn/functions.rst", "python/nn/init.rst", "python/nn/layers.rst", "python/nn/losses.rst", "python/nn/module.rst", "python/ops.rst", "python/optimizers.rst", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta.rst", "python/optimizers/_autosummary/mlx.optimizers.Adafactor.rst", "python/optimizers/_autosummary/mlx.optimizers.Adagrad.rst", "python/optimizers/_autosummary/mlx.optimizers.Adam.rst", "python/optimizers/_autosummary/mlx.optimizers.AdamW.rst", "python/optimizers/_autosummary/mlx.optimizers.Adamax.rst", "python/optimizers/_autosummary/mlx.optimizers.Lion.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update.rst", "python/optimizers/_autosummary/mlx.optimizers.RMSprop.rst", "python/optimizers/_autosummary/mlx.optimizers.SGD.rst", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.join_schedules.rst", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule.rst", "python/optimizers/_autosummary/mlx.optimizers.step_decay.rst", "python/optimizers/common_optimizers.rst", "python/optimizers/optimizer.rst", "python/optimizers/schedulers.rst", "python/random.rst", "python/transforms.rst", "python/tree_utils.rst", "usage/compile.rst", "usage/function_transforms.rst", "usage/indexing.rst", "usage/lazy_evaluation.rst", "usage/numpy.rst", "usage/quick_start.rst", "usage/saving_and_loading.rst", "usage/unified_memory.rst", "usage/using_streams.rst"], "titles": ["Operations", "Developer Documentation", "Metal Debugger", "Linear Regression", "LLM inference", "Multi-Layer Perceptron", "MLX", "Build and Install", "mlx.core.Device", "mlx.core.Dtype", "mlx.core.DtypeCategory", "mlx.core.abs", "mlx.core.add", "mlx.core.all", "mlx.core.allclose", "mlx.core.any", "mlx.core.arange", "mlx.core.arccos", "mlx.core.arccosh", "mlx.core.arcsin", "mlx.core.arcsinh", "mlx.core.arctan", "mlx.core.arctan2", "mlx.core.arctanh", "mlx.core.argmax", "mlx.core.argmin", "mlx.core.argpartition", "mlx.core.argsort", "mlx.core.array", "mlx.core.array.T", "mlx.core.array.abs", "mlx.core.array.all", "mlx.core.array.any", "mlx.core.array.argmax", "mlx.core.array.argmin", "mlx.core.array.astype", "mlx.core.array.at", "mlx.core.array.cos", "mlx.core.array.cummax", "mlx.core.array.cummin", "mlx.core.array.cumprod", "mlx.core.array.cumsum", "mlx.core.array.diag", "mlx.core.array.diagonal", "mlx.core.array.dtype", "mlx.core.array.exp", "mlx.core.array.flatten", "mlx.core.array.item", "mlx.core.array.itemsize", "mlx.core.array.log", "mlx.core.array.log10", "mlx.core.array.log1p", "mlx.core.array.log2", "mlx.core.array.logsumexp", "mlx.core.array.max", "mlx.core.array.mean", "mlx.core.array.min", "mlx.core.array.moveaxis", "mlx.core.array.nbytes", "mlx.core.array.ndim", "mlx.core.array.prod", "mlx.core.array.reciprocal", "mlx.core.array.reshape", "mlx.core.array.round", "mlx.core.array.rsqrt", "mlx.core.array.shape", "mlx.core.array.sin", "mlx.core.array.size", "mlx.core.array.split", "mlx.core.array.sqrt", "mlx.core.array.square", "mlx.core.array.squeeze", "mlx.core.array.sum", "mlx.core.array.swapaxes", "mlx.core.array.tolist", "mlx.core.array.transpose", "mlx.core.array.var", "mlx.core.array_equal", "mlx.core.atleast_1d", "mlx.core.atleast_2d", "mlx.core.atleast_3d", "mlx.core.bitwise_and", "mlx.core.bitwise_or", "mlx.core.bitwise_xor", "mlx.core.block_masked_mm", "mlx.core.block_sparse_mm", "mlx.core.broadcast_to", "mlx.core.ceil", "mlx.core.clip", "mlx.core.compile", "mlx.core.concatenate", "mlx.core.conj", "mlx.core.conjugate", "mlx.core.conv1d", "mlx.core.conv2d", "mlx.core.conv_general", "mlx.core.convolve", "mlx.core.cos", "mlx.core.cosh", "mlx.core.cummax", "mlx.core.cummin", "mlx.core.cumprod", "mlx.core.cumsum", "mlx.core.default_device", "mlx.core.default_stream", "mlx.core.degrees", "mlx.core.dequantize", "mlx.core.diag", "mlx.core.diagonal", "mlx.core.disable_compile", "mlx.core.divide", "mlx.core.divmod", "mlx.core.enable_compile", "mlx.core.equal", "mlx.core.erf", "mlx.core.erfinv", "mlx.core.eval", "mlx.core.exp", "mlx.core.expand_dims", "mlx.core.expm1", "mlx.core.eye", "mlx.core.fast.layer_norm", "mlx.core.fast.rms_norm", "mlx.core.fast.rope", "mlx.core.fast.scaled_dot_product_attention", "mlx.core.fft.fft", "mlx.core.fft.fft2", "mlx.core.fft.fftn", "mlx.core.fft.ifft", "mlx.core.fft.ifft2", "mlx.core.fft.ifftn", "mlx.core.fft.irfft", "mlx.core.fft.irfft2", "mlx.core.fft.irfftn", "mlx.core.fft.rfft", "mlx.core.fft.rfft2", "mlx.core.fft.rfftn", "mlx.core.flatten", "mlx.core.floor", "mlx.core.floor_divide", "mlx.core.full", "mlx.core.grad", "mlx.core.greater", "mlx.core.greater_equal", "mlx.core.identity", "mlx.core.inner", "mlx.core.isclose", "mlx.core.isinf", "mlx.core.isnan", "mlx.core.isneginf", "mlx.core.isposinf", "mlx.core.issubdtype", "mlx.core.jvp", "mlx.core.left_shift", "mlx.core.less", "mlx.core.less_equal", "mlx.core.linalg.norm", "mlx.core.linalg.qr", "mlx.core.linspace", "mlx.core.load", "mlx.core.log", "mlx.core.log10", "mlx.core.log1p", "mlx.core.log2", "mlx.core.logaddexp", "mlx.core.logical_and", "mlx.core.logical_not", "mlx.core.logical_or", "mlx.core.logsumexp", "mlx.core.matmul", "mlx.core.max", "mlx.core.maximum", "mlx.core.mean", "mlx.core.meshgrid", "mlx.core.metal.clear_cache", "mlx.core.metal.device_info", "mlx.core.metal.get_active_memory", "mlx.core.metal.get_cache_memory", "mlx.core.metal.get_peak_memory", "mlx.core.metal.is_available", "mlx.core.metal.reset_peak_memory", "mlx.core.metal.set_cache_limit", "mlx.core.metal.set_memory_limit", "mlx.core.metal.start_capture", "mlx.core.metal.stop_capture", "mlx.core.min", "mlx.core.minimum", "mlx.core.moveaxis", "mlx.core.multiply", "mlx.core.negative", "mlx.core.new_stream", "mlx.core.not_equal", "mlx.core.ones", "mlx.core.ones_like", "mlx.core.outer", "mlx.core.pad", "mlx.core.partition", "mlx.core.prod", "mlx.core.quantize", "mlx.core.quantized_matmul", "mlx.core.radians", "mlx.core.random.bernoulli", "mlx.core.random.categorical", "mlx.core.random.gumbel", "mlx.core.random.key", "mlx.core.random.multivariate_normal", "mlx.core.random.normal", "mlx.core.random.randint", "mlx.core.random.seed", "mlx.core.random.split", "mlx.core.random.truncated_normal", "mlx.core.random.uniform", "mlx.core.reciprocal", "mlx.core.repeat", "mlx.core.reshape", "mlx.core.right_shift", "mlx.core.round", "mlx.core.rsqrt", "mlx.core.save", "mlx.core.save_gguf", "mlx.core.save_safetensors", "mlx.core.savez", "mlx.core.savez_compressed", "mlx.core.set_default_device", "mlx.core.set_default_stream", "mlx.core.sigmoid", "mlx.core.sign", "mlx.core.sin", "mlx.core.sinh", "mlx.core.softmax", "mlx.core.sort", "mlx.core.split", "mlx.core.sqrt", "mlx.core.square", "mlx.core.squeeze", "mlx.core.stack", "mlx.core.std", "mlx.core.stop_gradient", "mlx.core.stream", "mlx.core.subtract", "mlx.core.sum", "mlx.core.swapaxes", "mlx.core.synchronize", "mlx.core.take", "mlx.core.take_along_axis", "mlx.core.tan", "mlx.core.tanh", "mlx.core.tensordot", "mlx.core.tile", "mlx.core.topk", "mlx.core.transpose", "mlx.core.tri", "mlx.core.tril", "mlx.core.triu", "mlx.core.value_and_grad", "mlx.core.var", "mlx.core.vjp", "mlx.core.vmap", "mlx.core.where", "mlx.core.zeros", "mlx.core.zeros_like", "mlx.nn.quantize", "mlx.nn.value_and_grad", "mlx.optimizers.clip_grad_norm", "mlx.utils.tree_flatten", "mlx.utils.tree_map", "mlx.utils.tree_map_with_path", "mlx.utils.tree_reduce", "mlx.utils.tree_unflatten", "mlx.core.Stream", "Array", "Data Types", "Devices and Streams", "Fast", "FFT", "Linear Algebra", "Metal", "Neural Networks", "mlx.nn.ALiBi", "mlx.nn.AvgPool1d", "mlx.nn.AvgPool2d", "mlx.nn.BatchNorm", "mlx.nn.Conv1d", "mlx.nn.Conv2d", "mlx.nn.Dropout", "mlx.nn.Dropout2d", "mlx.nn.Dropout3d", "mlx.nn.Embedding", "mlx.nn.GELU", "mlx.nn.GRU", "mlx.nn.GroupNorm", "mlx.nn.InstanceNorm", "mlx.nn.LSTM", "mlx.nn.LayerNorm", "mlx.nn.Linear", "mlx.nn.MaxPool1d", "mlx.nn.MaxPool2d", "mlx.nn.Mish", "mlx.nn.Module.apply", "mlx.nn.Module.apply_to_modules", "mlx.nn.Module.children", "mlx.nn.Module.eval", "mlx.nn.Module.filter_and_map", "mlx.nn.Module.freeze", "mlx.nn.Module.leaf_modules", "mlx.nn.Module.load_weights", "mlx.nn.Module.modules", "mlx.nn.Module.named_modules", "mlx.nn.Module.parameters", "mlx.nn.Module.save_weights", "mlx.nn.Module.set_dtype", "mlx.nn.Module.state", "mlx.nn.Module.train", "mlx.nn.Module.trainable_parameters", "mlx.nn.Module.training", "mlx.nn.Module.unfreeze", "mlx.nn.Module.update", "mlx.nn.Module.update_modules", "mlx.nn.MultiHeadAttention", "mlx.nn.PReLU", "mlx.nn.QuantizedEmbedding", "mlx.nn.QuantizedLinear", "mlx.nn.RMSNorm", "mlx.nn.RNN", "mlx.nn.ReLU", "mlx.nn.RoPE", "mlx.nn.SELU", "mlx.nn.Sequential", "mlx.nn.SiLU", "mlx.nn.SinusoidalPositionalEncoding", "mlx.nn.Softshrink", "mlx.nn.Step", "mlx.nn.Transformer", "mlx.nn.Upsample", "mlx.nn.init.constant", "mlx.nn.init.glorot_normal", "mlx.nn.init.glorot_uniform", "mlx.nn.init.he_normal", "mlx.nn.init.he_uniform", "mlx.nn.init.identity", "mlx.nn.init.normal", "mlx.nn.init.uniform", "mlx.nn.elu", "mlx.nn.gelu", "mlx.nn.gelu_approx", "mlx.nn.gelu_fast_approx", "mlx.nn.glu", "mlx.nn.hardswish", "mlx.nn.leaky_relu", "mlx.nn.log_sigmoid", "mlx.nn.log_softmax", "mlx.nn.losses.binary_cross_entropy", "mlx.nn.losses.cosine_similarity_loss", "mlx.nn.losses.cross_entropy", "mlx.nn.losses.gaussian_nll_loss", "mlx.nn.losses.hinge_loss", "mlx.nn.losses.huber_loss", "mlx.nn.losses.kl_div_loss", "mlx.nn.losses.l1_loss", "mlx.nn.losses.log_cosh_loss", "mlx.nn.losses.margin_ranking_loss", "mlx.nn.losses.mse_loss", "mlx.nn.losses.nll_loss", "mlx.nn.losses.smooth_l1_loss", "mlx.nn.losses.triplet_loss", "mlx.nn.mish", "mlx.nn.prelu", "mlx.nn.relu", "mlx.nn.relu6", "mlx.nn.selu", "mlx.nn.sigmoid", "mlx.nn.silu", "mlx.nn.softmax", "mlx.nn.softplus", "mlx.nn.softshrink", "mlx.nn.step", "mlx.nn.tanh", "Functions", "Initializers", "Layers", "Loss Functions", "Module", "Operations", "Optimizers", "mlx.optimizers.AdaDelta", "mlx.optimizers.Adafactor", "mlx.optimizers.Adagrad", "mlx.optimizers.Adam", "mlx.optimizers.AdamW", "mlx.optimizers.Adamax", "mlx.optimizers.Lion", "mlx.optimizers.Optimizer.apply_gradients", "mlx.optimizers.Optimizer.init", "mlx.optimizers.Optimizer.state", "mlx.optimizers.Optimizer.update", "mlx.optimizers.RMSprop", "mlx.optimizers.SGD", "mlx.optimizers.cosine_decay", "mlx.optimizers.exponential_decay", "mlx.optimizers.join_schedules", "mlx.optimizers.linear_schedule", "mlx.optimizers.step_decay", "Common Optimizers", "Optimizer", "Schedulers", "Random", "Transforms", "Tree Utils", "Compilation", "Function Transforms", "Indexing Arrays", "Lazy Evaluation", "Conversion to NumPy and Other Frameworks", "Quick Start Guide", "Saving and Loading Arrays", "Unified Memory", "Using Streams"], "terms": {"you": [1, 2, 4, 5, 6, 7, 277, 329, 332, 378, 405, 408, 409, 410, 412, 414, 415], "can": [1, 2, 4, 6, 7, 12, 16, 62, 75, 81, 82, 83, 89, 108, 109, 110, 111, 113, 116, 142, 143, 153, 154, 155, 156, 164, 171, 186, 188, 191, 201, 202, 207, 210, 211, 215, 219, 239, 254, 267, 277, 280, 287, 296, 302, 315, 320, 327, 333, 353, 378, 381, 383, 391, 392, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416], "extend": [1, 195], "mlx": [1, 2, 3, 4, 5, 7, 277, 378, 381, 383, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415], "custom": [1, 332], "thi": [0, 1, 4, 5, 7, 13, 14, 15, 16, 24, 25, 26, 27, 85, 112, 146, 152, 156, 157, 164, 168, 169, 170, 172, 174, 176, 185, 196, 197, 202, 224, 229, 230, 231, 236, 240, 243, 249, 255, 263, 266, 267, 277, 284, 285, 286, 289, 292, 299, 300, 302, 303, 306, 307, 308, 313, 315, 316, 317, 318, 321, 323, 331, 335, 336, 337, 338, 344, 345, 346, 359, 375, 381, 392, 407, 408, 409, 411, 412, 414], "guid": [1, 6], "explain": 1, "how": [1, 4, 5, 277, 279, 280, 282, 283, 287, 295, 296, 320, 333, 391, 408, 410, 415], "do": [0, 1, 4, 7, 277, 304, 315, 378, 381, 388, 408, 409, 411], "simpl": [1, 4, 5, 277, 287, 377, 408, 409, 411], "let": [1, 3, 4, 408, 409, 411, 412], "": [0, 1, 3, 4, 5, 44, 48, 59, 89, 104, 106, 126, 127, 129, 130, 132, 133, 135, 136, 141, 156, 159, 172, 194, 198, 202, 216, 219, 220, 236, 238, 254, 255, 257, 262, 277, 280, 289, 292, 296, 302, 303, 305, 309, 310, 311, 315, 323, 383, 392, 393, 405, 408, 409, 411, 412, 413, 414, 415], "sai": [1, 4, 378, 411], "would": [1, 4, 333, 410, 411, 412, 415], "like": [1, 4, 6, 151, 193, 260, 286, 359, 392, 394, 408, 409, 411, 412, 413, 415], "an": [0, 1, 2, 4, 5, 7, 9, 13, 15, 28, 78, 79, 80, 86, 93, 94, 95, 116, 120, 121, 124, 137, 140, 144, 156, 159, 182, 187, 192, 193, 195, 197, 198, 199, 213, 214, 216, 231, 234, 241, 243, 244, 247, 248, 251, 257, 259, 260, 264, 265, 266, 267, 277, 279, 280, 284, 290, 292, 293, 294, 295, 296, 298, 318, 319, 321, 323, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 366, 378, 384, 394, 398, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416], "take": [0, 1, 4, 5, 81, 82, 83, 85, 89, 141, 152, 171, 186, 193, 199, 244, 254, 256, 257, 260, 266, 267, 318, 405, 409, 410, 414, 415, 416], "two": [0, 1, 12, 14, 22, 77, 79, 81, 82, 83, 84, 85, 108, 110, 113, 126, 129, 135, 142, 143, 146, 154, 155, 157, 164, 169, 171, 186, 188, 191, 194, 241, 267, 280, 292, 296, 346, 352, 408, 409, 410, 415], "arrai": [0, 1, 4, 5, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 277, 281, 292, 298, 305, 308, 313, 319, 333, 334, 335, 336, 337, 338, 339, 340, 341, 346, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 375, 378, 381, 384, 385, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 408, 409, 411, 412, 413, 415], "x": [0, 1, 3, 4, 5, 36, 84, 114, 119, 121, 122, 144, 156, 199, 203, 216, 221, 225, 252, 253, 258, 265, 267, 277, 279, 280, 281, 288, 290, 291, 293, 294, 295, 296, 297, 298, 319, 322, 324, 329, 331, 333, 342, 343, 344, 345, 346, 347, 348, 349, 350, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 381, 383, 390, 408, 409, 410, 411, 412, 413, 415], "y": [0, 1, 3, 4, 5, 36, 258, 277, 281, 285, 290, 291, 293, 294, 322, 355, 360, 363, 383, 386, 408, 409, 411, 412], "scale": [0, 1, 4, 106, 121, 122, 123, 124, 198, 199, 206, 263, 285, 286, 293, 318, 325, 326, 329, 333, 369, 385], "them": [1, 4, 277, 303, 315, 415], "both": [1, 12, 81, 82, 83, 110, 111, 113, 142, 143, 151, 153, 154, 155, 156, 164, 171, 186, 188, 191, 202, 215, 239, 279, 280, 291, 292, 295, 296, 383, 408, 409, 413, 415], "coeffici": [1, 384, 385, 387, 388, 389, 390], "alpha": [0, 1, 198, 342, 364, 366, 369, 388, 395], "beta": [0, 1, 106, 198, 281, 290, 291, 293, 363, 387, 388, 389, 390], "respect": [1, 3, 5, 85, 121, 122, 141, 198, 254, 265, 277, 281, 288, 290, 291, 293, 381, 409, 413], "add": [0, 1, 2, 4, 36, 118, 164, 195, 198, 282, 283, 409, 415], "togeth": [1, 5, 198, 265, 266], "get": [1, 3, 5, 7, 94, 95, 103, 104, 175, 176, 177, 178, 204, 277, 408, 409, 411, 415], "z": [1, 289, 408, 411], "directli": [1, 4], "import": [1, 2, 3, 4, 5, 7, 156, 221, 254, 264, 265, 266, 267, 268, 277, 279, 280, 281, 291, 295, 296, 305, 333, 351, 353, 360, 378, 381, 408, 409, 410, 411, 412, 413], "core": [1, 2, 3, 4, 5, 261, 277, 279, 280, 281, 291, 295, 296, 305, 308, 310, 313, 333, 334, 335, 336, 337, 338, 339, 340, 341, 351, 353, 360, 378, 381, 383, 408, 412, 413], "mx": [1, 2, 3, 4, 5, 36, 91, 92, 137, 151, 156, 157, 159, 221, 254, 263, 277, 279, 280, 281, 291, 295, 296, 298, 305, 309, 324, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 348, 351, 352, 353, 357, 360, 367, 376, 378, 381, 383, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416], "def": [1, 3, 4, 5, 254, 277, 381, 408, 409, 410, 411, 412, 415], "simple_axpbi": 1, "float": [0, 1, 10, 14, 16, 74, 121, 122, 123, 124, 139, 140, 146, 151, 156, 199, 201, 206, 263, 271, 281, 284, 285, 286, 290, 291, 293, 298, 310, 322, 325, 329, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 352, 353, 354, 356, 360, 363, 364, 374, 375, 384, 385, 386, 387, 388, 389, 390, 395, 396, 397, 398, 400, 401], "return": [0, 1, 3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 47, 65, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 181, 182, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 277, 289, 292, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 312, 313, 315, 316, 317, 323, 334, 335, 336, 337, 338, 339, 340, 341, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 378, 381, 391, 407, 408, 409, 410, 411, 412, 414, 415], "function": [0, 1, 2, 3, 4, 5, 6, 14, 89, 111, 114, 115, 141, 146, 152, 156, 157, 169, 225, 254, 256, 257, 262, 263, 265, 266, 267, 277, 288, 297, 299, 303, 310, 315, 319, 323, 324, 326, 327, 328, 330, 331, 332, 343, 344, 345, 346, 347, 349, 350, 365, 370, 372, 373, 374, 375, 376, 378, 383, 392, 405, 407, 410, 411, 412, 414], "perform": [1, 2, 4, 6, 84, 85, 95, 99, 100, 101, 102, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 169, 199, 216, 229, 243, 277, 290, 332, 337, 338, 408, 410, 411, 415], "while": [1, 2, 4, 7, 214, 325, 411, 412], "leav": [1, 116, 265, 266, 267], "howev": [1, 277, 288, 290, 392, 405, 408, 411, 412], "mai": [1, 156, 261, 285, 409, 410], "need": [1, 4, 5, 6, 77, 198, 277, 316, 317, 329, 332, 405, 409, 411, 412, 413, 415], "underli": 1, "perhap": [1, 4], "make": [1, 2, 4, 5, 7, 169, 190, 224, 277, 397, 398, 400, 401, 408, 411, 413, 415], "faster": [1, 111, 343, 408, 409], "differenti": [1, 6], "In": [1, 4, 5, 36, 169, 198, 265, 277, 285, 290, 381, 384, 386, 387, 389, 390, 391, 407, 408, 409, 411, 414, 415], "tutori": 1, "we": [1, 3, 4, 5, 106, 198, 199, 277, 287, 320, 327, 388, 390, 405, 407, 408, 409, 411, 415], "go": [1, 4, 409], "through": [1, 237, 332, 390, 408, 409, 412], "ad": [1, 3, 7, 121, 291, 381, 384, 385, 386, 387, 388, 389, 395, 411, 414], "extens": [1, 159, 183, 309, 414], "It": [1, 4, 7, 141, 224, 254, 263, 267, 277, 317, 321, 391, 403, 412, 414], "cover": 1, "The": [0, 1, 2, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 44, 48, 58, 59, 65, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 219, 220, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 303, 305, 309, 310, 311, 312, 315, 316, 317, 318, 320, 321, 322, 323, 325, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 346, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 375, 378, 381, 383, 384, 385, 386, 387, 388, 389, 390, 393, 395, 396, 397, 400, 403, 408, 409, 410, 411, 412, 413, 414, 415, 416], "structur": [1, 391, 409], "librari": [1, 7, 277], "redirect": 1, "acceler": [1, 281], "when": [0, 1, 4, 6, 7, 89, 95, 156, 159, 282, 283, 333, 337, 338, 357, 363, 381, 399, 405, 408, 415], "appropri": [1, 408], "metal": [1, 6], "vjp": [1, 413], "jvp": [1, 413], "comput": [0, 1, 3, 4, 5, 6, 7, 99, 100, 101, 102, 106, 119, 123, 141, 152, 156, 164, 172, 194, 198, 229, 236, 237, 247, 254, 255, 256, 262, 277, 281, 289, 290, 291, 292, 293, 303, 316, 321, 322, 325, 332, 335, 336, 337, 338, 344, 345, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 383, 384, 385, 387, 388, 389, 390, 394, 408, 409, 413, 415], "graph": [1, 4, 5, 6, 409], "provid": [1, 4, 106, 141, 247, 254, 265, 267, 277, 298, 303, 305, 315, 316, 317, 320, 321, 332, 333, 377, 381, 414, 416], "rule": 1, "evalu": [1, 4, 5, 6, 116, 152, 256, 277, 301, 312, 381, 383, 408, 413], "start": [0, 1, 3, 4, 6, 7, 16, 123, 158, 183, 231, 267, 408, 410, 415], "discuss": 1, "more": [1, 2, 5, 9, 74, 85, 108, 169, 181, 182, 219, 220, 271, 277, 281, 285, 325, 329, 332, 333, 335, 336, 337, 338, 405, 408, 409, 410, 413, 415], "detail": [1, 9, 181, 277, 285, 325, 329, 333, 335, 336, 337, 338, 384, 386, 387, 389, 390, 410, 413], "ar": [0, 1, 3, 4, 5, 6, 7, 14, 16, 77, 84, 86, 88, 89, 95, 96, 108, 116, 120, 126, 127, 129, 130, 132, 133, 135, 136, 137, 141, 146, 147, 148, 149, 150, 151, 152, 156, 157, 159, 169, 182, 194, 195, 196, 198, 199, 201, 202, 203, 207, 210, 211, 221, 222, 234, 235, 243, 254, 256, 257, 261, 264, 265, 271, 281, 282, 283, 284, 285, 286, 290, 291, 293, 294, 305, 318, 321, 333, 351, 353, 354, 377, 381, 390, 392, 407, 408, 409, 410, 411, 412, 413, 414, 415], "front": 1, "thei": [1, 3, 4, 14, 96, 146, 327, 355, 381, 390, 407, 408, 411, 413, 414, 415], "defin": [1, 3, 4, 5, 7, 156, 199, 264, 412], "c": [0, 1, 4, 156, 279, 280, 281, 282, 283, 285, 286, 291, 292, 295, 296, 412, 413, 415], "api": [1, 409], "axpbi": 1, "scalar": [0, 1, 12, 14, 28, 47, 74, 77, 81, 82, 83, 84, 86, 88, 110, 111, 113, 139, 140, 141, 142, 143, 146, 153, 154, 155, 156, 158, 164, 165, 166, 167, 169, 171, 186, 188, 191, 195, 201, 207, 210, 211, 215, 219, 239, 254, 258, 262, 364, 409, 411, 413], "i": [0, 1, 2, 4, 5, 6, 7, 14, 16, 26, 35, 74, 85, 88, 93, 94, 95, 96, 99, 100, 101, 102, 107, 108, 111, 116, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 146, 151, 152, 156, 157, 159, 164, 168, 169, 173, 179, 182, 195, 196, 198, 199, 201, 202, 205, 206, 209, 210, 211, 214, 218, 219, 220, 225, 229, 231, 236, 237, 242, 243, 244, 247, 250, 254, 255, 256, 257, 258, 261, 263, 264, 265, 266, 267, 271, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 302, 303, 309, 311, 312, 314, 315, 317, 318, 319, 321, 322, 323, 325, 329, 331, 332, 333, 337, 338, 343, 345, 351, 352, 354, 359, 360, 363, 364, 366, 371, 375, 381, 385, 388, 390, 391, 392, 397, 399, 400, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416], "sum": [0, 1, 3, 12, 102, 145, 156, 168, 229, 247, 277, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 410, 412], "vector": [0, 1, 3, 6, 145, 152, 156, 243, 256, 257, 287, 353, 413], "element": [0, 1, 11, 12, 17, 18, 19, 20, 21, 22, 23, 26, 67, 81, 82, 83, 87, 97, 98, 99, 100, 101, 102, 106, 110, 111, 113, 114, 115, 117, 119, 120, 138, 139, 142, 143, 146, 147, 148, 149, 150, 153, 154, 155, 160, 161, 162, 163, 164, 165, 166, 167, 171, 173, 186, 188, 189, 191, 196, 198, 199, 212, 213, 215, 217, 225, 226, 227, 228, 232, 233, 239, 243, 245, 246, 249, 254, 258, 284, 285, 286, 289, 292, 297, 319, 323, 325, 347, 349, 350, 365, 366, 368, 371, 372, 373, 408, 409], "wise": [0, 1, 11, 12, 17, 18, 19, 20, 21, 22, 23, 81, 82, 83, 87, 97, 98, 110, 111, 113, 114, 115, 117, 119, 138, 139, 142, 143, 146, 153, 154, 155, 160, 161, 162, 163, 164, 165, 166, 167, 171, 186, 188, 189, 191, 212, 215, 217, 225, 226, 227, 228, 232, 233, 239, 245, 246, 285, 286, 297, 319, 347, 349, 350, 365, 366, 368, 371, 372, 373, 408], "follow": [1, 4, 5, 6, 7, 16, 85, 96, 106, 156, 198, 266, 277, 344, 345, 357, 384, 385, 386, 387, 388, 389, 390, 396, 405, 408, 409, 415], "numpi": [1, 4, 5, 6, 12, 14, 16, 81, 82, 83, 86, 110, 111, 113, 142, 143, 146, 153, 154, 155, 164, 169, 171, 186, 188, 191, 215, 239, 411, 413, 414], "style": [1, 12, 14, 81, 82, 83, 110, 111, 113, 142, 143, 146, 153, 154, 155, 164, 169, 171, 186, 188, 191, 215, 239], "broadcast": [0, 1, 12, 14, 81, 82, 83, 86, 88, 110, 111, 113, 140, 142, 143, 146, 153, 154, 155, 164, 169, 171, 186, 188, 191, 201, 202, 205, 210, 211, 215, 239, 244, 258, 318], "between": [0, 1, 6, 88, 137, 332, 352, 355, 356, 359, 399, 411, 415], "input": [0, 1, 3, 4, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 110, 111, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 209, 212, 213, 214, 215, 216, 217, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 257, 258, 260, 279, 280, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 318, 321, 322, 323, 325, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 346, 351, 352, 354, 355, 356, 357, 359, 360, 362, 364, 375, 378, 408, 409, 410, 413, 414], "upcast": 1, "const": [0, 1, 354], "factor": [1, 157, 333, 353, 398, 401], "streamordevic": [0, 1], "stream": [1, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 258, 259, 260, 415], "which": [1, 4, 5, 6, 7, 16, 35, 89, 95, 108, 116, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 141, 147, 148, 149, 150, 152, 156, 157, 159, 173, 183, 198, 202, 203, 213, 214, 218, 219, 220, 221, 222, 234, 235, 243, 254, 256, 257, 261, 280, 285, 286, 288, 296, 298, 302, 325, 353, 356, 360, 363, 378, 391, 392, 405, 408, 409, 410, 411, 415, 416], "schedul": [1, 182, 383, 397, 398, 399, 400, 401, 403, 415], "simplest": [1, 277], "wai": [1, 4, 7, 277, 333, 408, 409, 410], "term": [1, 354, 384, 385, 386, 387, 388, 389, 395], "exist": [1, 2, 4, 303, 315], "auto": [1, 7], "ax": [0, 1, 13, 15, 24, 25, 75, 118, 126, 127, 129, 130, 132, 133, 135, 136, 137, 145, 156, 168, 170, 172, 185, 195, 197, 229, 234, 236, 240, 241, 247, 250, 255, 409], "multipli": [0, 1, 36, 198, 199, 284, 329, 333], "themselv": [1, 408], "contain": [1, 4, 26, 27, 65, 85, 89, 108, 131, 132, 133, 156, 165, 166, 167, 198, 231, 258, 263, 277, 302, 304, 305, 311, 332, 360, 378, 381, 408, 409], "act": [1, 359], "data": [0, 1, 5, 6, 9, 16, 120, 134, 135, 140, 144, 158, 192, 210, 251, 259, 286, 334, 335, 336, 337, 338, 339, 340, 341, 408, 410, 412], "nor": [1, 141, 254], "rather": [1, 409, 415], "easi": [1, 277], "interfac": 1, "block": [0, 1, 4, 84, 332], "A": [0, 1, 4, 6, 7, 8, 65, 77, 89, 121, 122, 124, 141, 152, 156, 157, 159, 168, 169, 170, 175, 185, 198, 201, 202, 203, 205, 206, 207, 210, 211, 231, 235, 238, 254, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 277, 281, 285, 289, 290, 291, 293, 302, 306, 307, 310, 316, 317, 322, 327, 329, 332, 335, 336, 338, 345, 364, 365, 381, 383, 387, 389, 391, 392, 394, 399, 408, 409, 411, 412], "part": [1, 409, 410], "creat": [0, 1, 4, 7, 120, 144, 238, 277, 381, 383, 399, 408, 410, 412], "output": [0, 1, 4, 7, 13, 14, 15, 16, 26, 84, 86, 89, 99, 100, 101, 102, 120, 121, 122, 123, 124, 131, 134, 135, 136, 140, 141, 144, 146, 156, 158, 168, 170, 172, 173, 185, 192, 193, 196, 197, 201, 202, 203, 205, 206, 207, 210, 211, 221, 222, 229, 234, 236, 240, 244, 251, 254, 255, 256, 257, 258, 259, 260, 279, 280, 281, 282, 283, 291, 294, 295, 296, 318, 321, 331, 332, 333, 335, 336, 337, 338, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 375, 378, 408, 409, 410, 411, 412, 413, 414, 415], "given": [0, 1, 13, 15, 26, 36, 85, 86, 88, 90, 99, 100, 101, 102, 106, 108, 116, 118, 125, 126, 127, 128, 129, 130, 134, 135, 136, 140, 156, 168, 170, 172, 181, 185, 190, 197, 205, 207, 216, 224, 229, 231, 236, 240, 242, 248, 249, 251, 252, 253, 255, 269, 279, 280, 284, 295, 296, 302, 318, 352, 354, 360], "further": [1, 7, 409], "ha": [1, 2, 4, 5, 6, 74, 89, 108, 131, 132, 134, 135, 136, 141, 173, 177, 202, 281, 289, 292, 294, 323, 381, 383, 408, 410, 411, 413, 415], "method": [1, 4, 8, 9, 10, 28, 269, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 309, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 381, 384, 385, 386, 387, 388, 389, 390, 392, 395, 396, 403], "run": [1, 2, 4, 5, 6, 7, 8, 194, 269, 281, 298, 384, 385, 387, 388, 389, 408, 411, 415, 416], "our": [1, 4, 5, 327, 384, 385, 386, 387, 389, 390], "concret": [1, 289, 292, 294, 323, 411, 415], "class": [1, 4, 5, 8, 9, 10, 28, 269, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 381, 384, 385, 386, 387, 388, 389, 390, 395, 396, 403], "public": [1, 277], "explicit": [1, 392, 405, 412], "alpha_": 1, "beta_": 1, "must": [1, 2, 7, 84, 88, 140, 156, 201, 202, 205, 207, 210, 211, 258, 333, 412], "know": [1, 4], "itself": [1, 261, 392], "popul": 1, "To": [1, 2, 3, 4, 5, 7, 181, 277, 378, 408, 409, 413], "avoid": [1, 310, 408], "unnecessari": [1, 4], "alloc": [1, 177, 181, 182, 381], "respons": 1, "space": [0, 1, 158, 362], "void": 1, "eval_cpu": 1, "std": [0, 1, 340], "overrid": [1, 112], "eval_gpu": 1, "jacobian": [1, 152, 256, 413], "product": [0, 1, 101, 145, 152, 169, 194, 197, 247, 256, 318, 413], "primal": [1, 152, 256], "tangent": [0, 1, 21, 22, 23, 152, 245, 246, 376], "int": [0, 1, 4, 5, 8, 13, 15, 16, 24, 25, 26, 27, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 46, 53, 54, 55, 56, 57, 60, 63, 65, 68, 71, 72, 73, 74, 76, 84, 86, 90, 93, 94, 95, 99, 100, 101, 102, 106, 107, 108, 118, 120, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 144, 151, 156, 158, 168, 170, 172, 175, 176, 177, 178, 181, 182, 185, 187, 192, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 229, 230, 231, 234, 235, 236, 240, 241, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 261, 269, 277, 279, 280, 281, 282, 283, 287, 289, 290, 291, 292, 293, 294, 295, 296, 318, 320, 321, 322, 323, 325, 329, 332, 346, 352, 353, 357, 362, 364, 381, 397, 399, 400, 401], "argnum": [1, 141, 254, 409], "cotan": 1, "across": [1, 290], "pair": [0, 1, 195, 305, 325], "repres": [1, 4, 360, 364, 412], "axi": [0, 1, 4, 5, 13, 15, 24, 25, 26, 27, 31, 32, 33, 34, 38, 39, 40, 41, 53, 54, 55, 56, 60, 68, 71, 72, 76, 90, 99, 100, 101, 102, 108, 118, 121, 122, 125, 128, 131, 132, 133, 134, 135, 136, 137, 156, 168, 170, 172, 185, 187, 195, 196, 197, 202, 213, 229, 230, 231, 234, 235, 236, 240, 241, 243, 244, 248, 249, 250, 255, 257, 279, 280, 295, 296, 323, 346, 350, 352, 353, 357, 362, 364, 372, 410], "correspond": [0, 1, 13, 15, 74, 88, 106, 108, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 168, 170, 185, 197, 240, 247, 257, 265, 409], "dimens": [0, 1, 4, 13, 15, 24, 25, 59, 65, 74, 78, 79, 80, 85, 89, 94, 95, 108, 118, 123, 132, 133, 135, 136, 137, 145, 156, 157, 168, 169, 170, 172, 185, 197, 198, 202, 209, 236, 240, 244, 247, 250, 255, 281, 282, 283, 285, 286, 289, 290, 291, 292, 293, 318, 322, 323, 325, 332, 333, 346, 353, 408, 409], "virtual": 1, "vmap": [1, 409, 411, 413], "print": [1, 3, 4, 5, 7, 263, 264, 265, 266, 268, 277, 405, 408, 409, 410, 411, 412, 413], "ostream": 1, "o": [1, 7, 124, 292], "equival": [0, 1, 29, 62, 75, 111, 139, 243, 288, 317, 319, 321, 324, 326, 328, 330], "check": [1, 7, 77, 151, 179, 305, 409, 410], "bool": [0, 1, 13, 14, 15, 24, 25, 31, 32, 33, 34, 38, 39, 40, 41, 53, 54, 55, 56, 60, 72, 74, 76, 77, 89, 95, 99, 100, 101, 102, 123, 146, 151, 156, 159, 168, 170, 172, 173, 179, 182, 185, 197, 199, 236, 240, 255, 281, 282, 283, 289, 290, 291, 292, 293, 294, 298, 302, 303, 305, 310, 312, 315, 318, 321, 323, 325, 329, 332, 333, 351, 354, 385, 396], "is_equival": 1, "other": [0, 1, 4, 6, 151, 156, 277, 304, 381, 390, 408, 410, 411, 413], "privat": 1, "fall": 1, "eval": [1, 2, 3, 4, 5, 277, 381, 383, 408, 409, 411, 413], "out": [1, 7, 84, 279, 280, 285, 286, 295, 296, 312, 408, 409, 410], "deriv": [1, 409, 411], "from": [0, 1, 4, 5, 6, 85, 105, 106, 108, 132, 133, 135, 136, 140, 156, 159, 169, 173, 178, 181, 193, 198, 200, 201, 202, 203, 204, 207, 210, 221, 234, 237, 239, 243, 244, 249, 258, 260, 264, 265, 266, 267, 268, 277, 294, 303, 305, 318, 335, 336, 337, 338, 340, 341, 354, 363, 378, 407, 408, 409, 411, 412, 413, 414, 415], "base": [0, 1, 123, 156, 161, 163, 325, 332, 381, 383, 389, 403, 405, 408, 410], "treat": [0, 1, 132, 133, 135, 136, 243, 333, 408], "paramet": [1, 3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 302, 303, 305, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 346, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 375, 377, 378, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 408, 409, 411], "produc": [0, 1, 89, 318, 378], "also": [1, 4, 5, 6, 7, 10, 12, 81, 82, 83, 109, 110, 111, 113, 127, 130, 133, 136, 142, 143, 153, 154, 155, 164, 171, 186, 188, 191, 198, 215, 239, 261, 262, 277, 302, 316, 318, 320, 321, 328, 343, 369, 371, 377, 383, 408, 409, 410, 411, 412, 413, 416], "new": [0, 1, 5, 86, 108, 187, 190, 214, 235, 250, 265, 266, 310, 318, 381, 383, 394, 399, 408, 410, 411, 412], "construct": [0, 1, 5, 42, 107, 140, 192, 248, 259], "its": [0, 1, 7, 169, 196, 209, 251, 262, 268, 277, 321, 387, 388, 389, 412, 415], "type": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 65, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 105, 106, 107, 108, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 181, 182, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 264, 267, 277, 310, 332, 334, 335, 336, 337, 338, 339, 340, 341, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 408, 410], "shape": [0, 1, 2, 4, 5, 62, 77, 84, 85, 86, 89, 93, 94, 95, 108, 124, 125, 128, 131, 134, 135, 136, 140, 152, 169, 192, 193, 201, 202, 203, 205, 206, 207, 210, 211, 214, 244, 256, 258, 259, 260, 277, 279, 280, 281, 282, 283, 285, 286, 289, 291, 292, 294, 295, 296, 305, 323, 334, 335, 336, 337, 338, 339, 340, 341, 353, 364, 383, 408, 409, 410, 413, 415], "pass": [1, 4, 5, 62, 75, 194, 195, 254, 262, 264, 265, 266, 277, 303, 315, 316, 317, 327, 408, 411], "reimplement": 1, "now": [1, 4, 7, 321, 408, 412], "promot": 1, "dtype": [0, 1, 4, 10, 16, 28, 35, 36, 74, 120, 137, 140, 144, 151, 156, 157, 158, 192, 203, 205, 206, 207, 210, 211, 251, 259, 271, 310, 333, 334, 335, 336, 337, 338, 339, 340, 341, 351, 353, 360, 397, 398, 399, 400, 401, 408, 409, 410, 412, 413, 414], "promoted_dtyp": 1, "promote_typ": 1, "float32": [0, 1, 10, 16, 120, 124, 144, 151, 156, 157, 158, 192, 203, 205, 206, 210, 211, 251, 259, 271, 333, 334, 335, 336, 337, 338, 339, 340, 341, 351, 353, 360, 397, 398, 399, 400, 401, 408, 409, 410, 411, 412, 413, 414], "non": [0, 1, 7, 173, 313, 323, 365, 381], "point": [0, 1, 3, 4, 7, 139, 199, 271], "out_dtyp": 1, "is_floating_point": 1, "cast": [1, 35, 134, 135, 136, 159, 298, 310, 412], "up": [1, 4, 408], "determin": [1, 108, 205, 267, 271, 309, 414], "same": [0, 1, 4, 7, 14, 36, 77, 86, 89, 94, 95, 96, 121, 122, 131, 134, 135, 136, 141, 146, 152, 195, 202, 216, 256, 258, 266, 277, 280, 281, 284, 290, 291, 296, 320, 334, 335, 336, 337, 338, 339, 340, 341, 353, 364, 381, 391, 405, 408, 410, 415], "x_cast": 1, "astyp": [0, 1, 4, 298, 412], "y_cast": 1, "broadcasted_input": 1, "broadcast_arrai": [0, 1], "out_shap": 1, "0": [0, 1, 3, 4, 5, 7, 8, 16, 36, 42, 43, 46, 63, 68, 76, 85, 90, 93, 94, 95, 107, 108, 120, 124, 137, 141, 156, 157, 174, 181, 195, 201, 206, 211, 213, 216, 231, 235, 236, 251, 252, 253, 254, 255, 257, 263, 264, 266, 267, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 293, 295, 296, 319, 324, 325, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 351, 353, 355, 356, 360, 363, 364, 366, 367, 368, 369, 374, 375, 378, 381, 384, 385, 387, 388, 389, 390, 392, 395, 396, 397, 398, 399, 400, 401, 405, 408, 409, 410, 411, 412, 413, 414], "unique_ptr": 1, "make_shar": 1, "to_stream": 1, "handl": [1, 277, 408], "resolv": 1, "No": [1, 4], "happen": [1, 4, 121, 332, 383, 408, 411], "call": [1, 2, 4, 5, 29, 139, 174, 178, 277, 287, 303, 315, 320, 327, 381, 383, 392, 408, 409, 411], "alon": [1, 412], "onli": [1, 4, 6, 7, 77, 84, 93, 94, 95, 156, 198, 205, 277, 302, 303, 305, 310, 312, 315, 316, 317, 381, 408, 409, 414, 415], "execut": [1, 7, 78, 79, 80, 178, 412, 415], "depend": [0, 1, 2, 3, 74, 156, 289, 292, 323, 410, 414, 415], "devic": [1, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 258, 259, 260, 269, 415, 416], "specifi": [0, 1, 16, 35, 94, 95, 108, 132, 133, 140, 141, 156, 158, 187, 192, 202, 213, 241, 243, 244, 247, 250, 254, 257, 259, 281, 331, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 375, 409, 415], "user": [1, 4, 277], "memori": [1, 6, 174, 176, 177, 178, 180, 181, 182, 332, 381, 385, 408, 411, 412], "been": [0, 1, 4, 177, 411], "naiv": [1, 409], "gener": [0, 1, 2, 3, 10, 16, 95, 120, 132, 133, 158, 173, 201, 205, 206, 207, 210, 211, 332, 405, 408, 410, 411, 416], "version": [1, 7, 106, 164, 168, 198, 229, 257, 405, 409, 410], "declar": 1, "member": [1, 277, 308, 313], "earlier": 1, "over": [0, 1, 4, 5, 13, 15, 24, 25, 26, 27, 93, 94, 95, 99, 100, 101, 102, 127, 130, 133, 136, 145, 156, 158, 168, 170, 172, 185, 196, 197, 217, 229, 230, 236, 240, 247, 249, 255, 281, 282, 283, 290, 293, 322, 353, 397, 400, 409], "each": [0, 1, 65, 106, 116, 123, 151, 169, 173, 195, 198, 199, 202, 213, 221, 222, 231, 248, 250, 257, 258, 285, 286, 287, 289, 290, 292, 323, 325, 332, 351, 353, 405, 408, 411], "find": [1, 3, 7], "captur": [1, 2, 89, 183, 184, 277, 408], "templat": [0, 1], "axpby_impl": 1, "typenam": [0, 1], "t": [0, 1, 4, 114, 124, 199, 254, 277, 279, 289, 292, 295, 323, 384, 385, 386, 387, 388, 389, 390, 395, 396, 408, 409, 415], "readi": 1, "fill": [0, 1, 140, 193, 251, 260, 334, 335, 336, 337, 338, 340, 341], "malloc_or_wait": 1, "synchron": [1, 408], "avail": [1, 3, 4, 5, 7, 9, 179, 415], "There": [1, 277, 333, 408], "wait": [1, 4, 182], "here": [1, 4, 408, 409, 411, 414, 415], "request": 1, "under": [1, 156], "pressur": 1, "condit": [0, 1, 258, 415], "set_data": 1, "nbyte": 1, "collect": [1, 265, 266, 407], "pointer": 1, "x_ptr": 1, "y_ptr": 1, "out_ptr": 1, "relev": 1, "static_cast": 1, "size_t": [0, 1], "out_idx": 1, "size": [1, 4, 5, 48, 65, 84, 94, 106, 118, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 144, 151, 156, 177, 182, 198, 199, 202, 214, 231, 234, 261, 277, 279, 280, 282, 283, 287, 291, 295, 296, 320, 321, 333, 385, 411, 412], "map": [1, 5, 36, 159, 265, 287, 298], "linear": [0, 1, 4, 5, 6, 261, 265, 277, 288, 305, 321, 323, 324, 326, 328, 333, 342, 343, 344, 345, 346, 348, 367, 368, 369, 371, 378, 381, 392, 400, 408], "indic": [0, 1, 14, 24, 25, 26, 27, 36, 85, 141, 146, 147, 148, 149, 150, 231, 243, 244, 254, 312, 314, 353, 360, 399, 410], "offset": [0, 1, 4, 43, 108, 121, 123], "x_offset": 1, "elem_to_loc": 1, "stride": [0, 1, 93, 94, 95, 279, 280, 282, 283, 295, 296, 325, 410], "y_offset": 1, "contigu": 1, "regularli": 1, "default": [1, 7, 13, 14, 15, 16, 24, 25, 26, 27, 77, 84, 85, 89, 90, 93, 94, 95, 103, 104, 106, 107, 108, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 141, 144, 146, 156, 157, 158, 159, 168, 170, 172, 173, 181, 182, 185, 192, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 209, 210, 211, 213, 214, 216, 223, 224, 230, 231, 234, 235, 236, 238, 240, 242, 247, 249, 250, 251, 252, 253, 254, 255, 257, 259, 261, 271, 279, 280, 281, 282, 283, 289, 291, 292, 294, 295, 296, 298, 303, 305, 310, 312, 315, 318, 319, 320, 321, 323, 325, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 346, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 381, 384, 385, 386, 387, 388, 389, 390, 395, 396, 397, 405, 407, 408, 409, 412, 414, 416], "row": [1, 120, 144, 198, 251], "major": [0, 1], "henc": [1, 198, 408], "doesn": [1, 277], "addit": [1, 4, 12, 121, 122, 124, 159, 281, 290, 293, 318, 322, 381, 409], "should": [1, 3, 4, 5, 7, 108, 121, 122, 124, 152, 174, 183, 198, 244, 254, 256, 261, 264, 277, 282, 283, 285, 286, 312, 318, 327, 353, 355, 360, 381, 407, 408, 409, 411, 412, 416], "work": [1, 2, 4, 7, 182, 408, 409, 410, 411], "all": [0, 1, 2, 5, 7, 14, 26, 36, 78, 79, 80, 85, 89, 94, 95, 120, 127, 130, 133, 136, 169, 195, 196, 234, 261, 277, 298, 299, 303, 306, 307, 308, 313, 315, 318, 329, 332, 333, 378, 381, 403, 405, 408, 410, 411, 413, 416], "incom": 1, "accordingli": 1, "dispatch": 1, "float16": [1, 10, 159, 271, 298, 411, 412], "bfloat16": [1, 10, 271, 412], "complex64": [1, 271], "throw": [1, 89], "error": [0, 1, 7, 114, 115, 182, 231, 288, 343, 344, 345, 359, 361, 409, 412], "encount": [1, 409], "unexpect": [1, 16], "1": [0, 1, 2, 4, 5, 16, 26, 27, 36, 43, 46, 93, 94, 95, 107, 108, 119, 124, 125, 126, 128, 129, 131, 132, 133, 134, 135, 136, 137, 145, 151, 156, 157, 169, 173, 182, 194, 196, 198, 202, 205, 206, 211, 225, 230, 243, 249, 254, 263, 266, 267, 271, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 319, 322, 323, 325, 329, 331, 333, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 362, 363, 364, 369, 370, 372, 373, 375, 378, 381, 383, 384, 385, 386, 387, 388, 389, 390, 392, 395, 396, 397, 398, 399, 400, 401, 408, 409, 410, 412, 413, 414, 415], "correct": [1, 7, 387, 388, 389, 410, 411], "els": [0, 1, 4, 277, 303, 411], "float16_t": 1, "bfloat16_t": 1, "complex64_t": 1, "runtime_error": 1, "support": [1, 4, 6, 7, 14, 84, 93, 94, 95, 124, 137, 146, 157, 159, 169, 198, 205, 409, 410, 412, 414], "good": [1, 7, 408, 415], "fallback": 1, "routin": 1, "framework": [1, 6], "certain": [1, 312, 408], "case": [1, 4, 127, 130, 131, 133, 134, 135, 136, 137, 157, 169, 214, 234, 280, 285, 296, 331, 363, 369, 374, 375, 391, 392, 408, 409, 413, 414, 415, 416], "doe": [1, 2, 4, 7, 176, 263, 277, 408, 410, 411, 412], "half": [1, 16, 207, 211, 325, 411], "precis": [0, 1, 4, 119, 124, 277, 288, 322, 391, 408], "assum": [1, 4, 84, 157, 265, 277, 279, 280, 290, 295, 296], "have": [0, 1, 4, 7, 14, 77, 78, 79, 80, 84, 132, 133, 135, 136, 146, 169, 183, 202, 264, 292, 318, 327, 390, 392, 407, 408, 410, 411, 415], "fix": [1, 4, 7, 411], "direct": [1, 4, 300, 390, 415], "column": [1, 120, 144, 198], "place": [1, 4, 36, 216, 261, 411, 412], "expect": [1, 4, 282, 283, 284, 285, 286, 329, 332, 354, 408, 410], "write": [1, 4, 277, 412], "copi": [0, 1, 4, 6, 196, 230, 412], "right": [0, 1, 7, 198, 215, 279, 280, 288, 295, 296, 333, 344, 345, 354, 356, 364], "catlas_saxpbi": 1, "axpby_impl_acceler": 1, "first": [0, 1, 2, 3, 4, 5, 7, 108, 137, 141, 153, 165, 167, 169, 196, 209, 215, 241, 247, 254, 264, 266, 267, 277, 280, 290, 296, 333, 352, 360, 385, 387, 388, 389, 392, 408, 409, 412, 415], "special": 1, "copy_inplac": 1, "copytyp": 1, "inplac": 1, "n": [0, 1, 4, 28, 84, 93, 94, 95, 120, 125, 127, 128, 130, 131, 134, 136, 144, 205, 236, 251, 255, 279, 280, 281, 282, 283, 285, 286, 289, 292, 295, 296, 323, 333, 359, 364], "incx": 1, "inci": 1, "For": [1, 4, 7, 36, 85, 124, 151, 156, 198, 268, 277, 281, 285, 298, 303, 312, 315, 321, 325, 329, 333, 335, 336, 337, 338, 378, 405, 408, 409, 410, 411, 412, 413, 414, 415], "fit": [1, 198, 415], "criteria": 1, "With": 1, "mind": [1, 4], "finish": 1, "assert": 1, "2": [0, 1, 3, 4, 5, 36, 94, 107, 108, 114, 126, 129, 131, 132, 133, 134, 135, 136, 137, 151, 156, 157, 163, 169, 198, 205, 209, 247, 251, 252, 253, 263, 267, 271, 277, 279, 280, 283, 288, 295, 296, 322, 329, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 353, 354, 356, 363, 364, 378, 381, 384, 386, 387, 388, 392, 395, 408, 409, 410, 411, 412, 413, 414, 415], "singl": [1, 5, 116, 152, 159, 173, 195, 256, 280, 296, 408, 410, 414], "flag": [1, 408, 412], "row_contigu": 1, "col_contigu": 1, "common": [1, 383, 408, 411], "just": [1, 5, 293, 408, 410], "much": [1, 4, 279, 280, 295, 296, 408, 411], "enough": [1, 411], "If": [1, 4, 7, 13, 14, 15, 16, 24, 25, 26, 27, 74, 77, 88, 90, 96, 99, 100, 101, 102, 107, 108, 116, 121, 123, 134, 135, 136, 139, 140, 141, 146, 156, 159, 168, 169, 170, 172, 173, 181, 182, 185, 192, 195, 196, 197, 202, 205, 213, 229, 230, 231, 236, 240, 242, 243, 244, 247, 249, 254, 255, 257, 259, 261, 265, 267, 281, 282, 283, 290, 293, 294, 303, 305, 315, 321, 323, 325, 327, 329, 333, 351, 353, 364, 385, 408, 409, 411, 414, 415, 416], "plan": [1, 408], "stop": [0, 1, 4, 16, 158, 184, 237, 409, 410], "enjoi": 1, "speed": 1, "appl": [1, 4, 6, 7, 415], "silicon": [1, 4, 6, 7, 415], "address": 1, "shade": 1, "languag": 1, "kernel": [1, 93, 94, 95, 279, 280, 295, 296, 408, 410], "written": 1, "some": [0, 1, 3, 4, 5, 303, 315, 392, 408, 409, 411], "help": [1, 4, 408, 415], "resourc": 1, "walkthrough": 1, "pipelin": 1, "specif": [1, 7, 409], "cpp": 1, "keep": [1, 13, 15, 24, 25, 168, 170, 172, 185, 197, 236, 240, 255, 277, 302, 409, 411], "launch": [1, 410], "exactli": [1, 4, 305, 409], "mani": [1, 231, 282, 283, 287, 320, 408, 411], "thread": 1, "pick": 1, "updat": [0, 1, 3, 4, 5, 36, 89, 261, 265, 267, 281, 298, 299, 305, 310, 311, 312, 317, 383, 385, 388, 390, 391, 392, 396, 397, 398, 399, 400, 401, 408, 411], "assign": [1, 36, 381], "axpby_gener": 1, "buffer": [1, 176, 412], "constant": [0, 1, 4, 7, 121, 122, 195, 277, 281, 290, 293, 322, 354, 364, 395, 397, 408, 412], "3": [1, 4, 7, 137, 151, 156, 157, 263, 267, 288, 333, 336, 338, 344, 347, 385, 390, 405, 408, 410, 412, 413], "4": [0, 1, 4, 106, 137, 156, 198, 199, 221, 261, 267, 271, 279, 280, 281, 291, 295, 296, 320, 321, 332, 333, 335, 336, 337, 351, 408, 410, 413, 415], "5": [0, 1, 3, 4, 7, 156, 182, 201, 267, 279, 281, 284, 285, 286, 288, 291, 295, 330, 333, 334, 337, 338, 344, 363, 374, 378, 395, 397, 398, 408, 409, 410], "x_stride": 1, "6": [1, 4, 156, 221, 332, 336, 344, 345, 347, 354, 364, 368, 395, 408, 410, 413], "y_stride": 1, "7": [1, 4, 156, 198, 410], "ndim": [0, 1, 137, 156, 333], "8": [0, 1, 4, 7, 156, 198, 271, 280, 291, 296, 332, 352, 384, 385, 386, 387, 388, 389, 395, 408, 410, 413, 415], "uint": 1, "index": [0, 1, 6, 8, 26, 36, 118, 120, 141, 173, 196, 243, 244, 254, 269], "thread_position_in_grid": 1, "convert": [0, 1, 74, 78, 79, 80, 105, 137, 200, 320, 321, 411, 412, 413], "instanti": [1, 5, 411], "give": [1, 4, 5, 26, 408], "uniqu": [1, 405], "host": 1, "name": [1, 159, 198, 199, 219, 220, 221, 222, 277, 290, 302, 305, 307, 410, 414], "so": [1, 4, 7, 141, 254, 284, 333, 383, 408, 411, 415], "identifi": [1, 264, 407], "instantiate_axpbi": 1, "type_nam": 1, "host_nam": 1, "axpby_general_": 1, "logic": [0, 1, 165, 166, 167], "set": [1, 4, 5, 7, 89, 109, 112, 121, 123, 175, 181, 182, 223, 224, 238, 288, 293, 294, 301, 303, 310, 311, 312, 315, 316, 321, 325, 331, 352, 364, 375, 381, 385, 392, 405, 409, 411], "grid": [1, 173], "shown": 1, "below": [1, 7, 156, 251, 253, 271, 333, 411], "prepar": [1, 4], "carri": 1, "d": [0, 1, 4, 107, 108, 145, 156, 169, 173, 194, 243, 251, 252, 253, 268, 286, 289, 292, 323, 384, 387, 389, 415], "ostringstream": 1, "kname": 1, "axpby_": 1, "general_": 1, "type_to_nam": 1, "sure": [1, 2, 4, 7, 277, 408], "look": [1, 4], "folder": 1, "register_librari": 1, "mlx_ext": 1, "get_colocated_mtllib_path": 1, "get_kernel": 1, "str": [1, 96, 141, 156, 159, 173, 175, 183, 218, 219, 220, 221, 222, 254, 264, 268, 298, 299, 302, 303, 305, 307, 309, 315, 333, 337, 338, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364], "encod": [1, 123, 325, 329, 332, 353], "compute_encod": 1, "get_command_encod": 1, "setcomputepipelinest": 1, "regist": [1, 5], "those": [1, 4, 277], "nelem": 1, "set_array_buff": 1, "setbyt": 1, "sizeof": 1, "number": [0, 1, 10, 16, 58, 67, 89, 94, 95, 106, 120, 141, 144, 152, 158, 195, 198, 199, 202, 206, 209, 211, 213, 216, 247, 248, 251, 254, 256, 257, 261, 277, 281, 282, 283, 285, 286, 290, 291, 318, 319, 332, 333, 335, 336, 337, 338, 397, 399, 400, 405, 408, 409, 416], "ani": [0, 1, 4, 6, 16, 89, 264, 265, 266, 267, 268, 277, 288, 298, 299, 302, 311, 321, 332, 333, 378, 400, 407, 408, 409, 411, 413, 414, 415], "threadgroup": 1, "higher": [1, 145, 360, 409], "than": [1, 4, 74, 85, 96, 108, 111, 123, 142, 143, 154, 155, 169, 181, 263, 265, 325, 331, 333, 360, 363, 375, 385, 390, 408, 409, 415], "max": [0, 1, 156, 171, 295, 296, 319, 347, 352, 354, 355, 360, 364, 366, 368, 385, 389, 408, 409, 415], "allow": [0, 1, 151, 263, 277, 317, 381, 403, 410, 413], "tgp_size": 1, "min": [0, 1, 156, 186, 319, 347, 366, 368], "maxtotalthreadsperthreadgroup": 1, "3d": [1, 281, 286, 333], "mtl": 1, "group_dim": 1, "grid_dim": 1, "divid": [0, 1, 36, 139, 198], "among": 1, "dispatchthread": 1, "few": [1, 4, 5, 6, 411, 413], "thing": [1, 4], "note": [1, 4, 7, 14, 84, 89, 93, 94, 124, 132, 133, 146, 156, 176, 198, 202, 261, 277, 322, 333, 412, 414], "about": [1, 4, 5, 175, 411, 415], "befor": [1, 4, 7, 26, 196, 302, 332, 392, 410, 411], "move": [0, 1, 187, 415], "track": [1, 277, 281], "activ": [1, 7, 176, 285, 331, 332, 365, 374, 375, 377, 408], "command_buff": 1, "mtlcommandbuff": 1, "associ": [1, 221, 222, 411], "reli": 1, "u": [1, 294, 317, 403, 411], "command": [1, 2, 7], "instead": [1, 7, 277, 317, 329, 409, 411], "one": [0, 1, 4, 7, 36, 74, 78, 88, 94, 95, 118, 120, 121, 122, 156, 162, 169, 199, 202, 234, 239, 271, 315, 333, 353, 415], "end_encod": 1, "until": [1, 411, 413], "limit": [0, 1, 88, 181, 182, 410], "hit": 1, "flush": 1, "next": [1, 4, 5, 181], "These": [1, 89, 244, 353, 415], "built": [1, 7, 411], "top": [1, 249, 294, 333], "includ": [1, 99, 100, 101, 102, 176, 177, 182, 293, 299, 311, 321, 354, 408, 409, 410, 413, 414, 416], "forward": [1, 254, 408, 411], "mode": [1, 96, 301, 312, 314, 333, 337, 338], "diff": 1, "push": 1, "along": [0, 1, 24, 25, 85, 89, 90, 99, 100, 101, 102, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 156, 213, 229, 231, 235, 243, 244, 247, 248, 249, 277, 323, 346], "op": [1, 194, 303, 411], "similarli": [1, 7, 169, 409, 411], "scale_arr": 1, "contribut": 1, "tangent_x": 1, "tangent_i": 1, "cotang": [1, 256], "unus": 1, "revers": [0, 1, 38, 39, 40, 41, 99, 100, 101, 102, 250, 329], "arg": [1, 4, 9, 10, 116, 221, 222], "push_back": 1, "fulli": [1, 6, 408, 412, 415], "overal": 1, "directori": [1, 4, 7], "h": [1, 93, 94, 156, 280, 281, 283, 285, 286, 289, 292, 296, 323, 409, 411], "mlx_sample_extens": 1, "__init__": [1, 4, 5, 8, 9, 10, 28, 269, 277, 381], "py": [1, 4, 7], "cmakelist": 1, "txt": 1, "setup": [1, 3, 5, 7, 408], "packag": [1, 3, 5, 378], "hold": [1, 4, 9, 10, 156, 408], "instal": 1, "nanobind": [1, 7, 332], "sinc": [1, 4, 5, 178, 381, 390, 399, 412, 415], "compon": [1, 4], "etc": [1, 198, 277, 333], "alreadi": [1, 2, 4], "nb_modul": 1, "_ext": 1, "m": [0, 1, 4, 7, 84, 85, 120, 156, 251, 279, 280, 295, 296, 384, 408], "doc": [1, 5], "sampl": [1, 3, 4, 158, 201, 202, 203, 205, 207, 210, 211, 335, 336, 337, 338, 340, 341, 354, 360, 364, 405, 408], "_a": 1, "nb": 1, "kw_onli": 1, "none": [1, 4, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 180, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 264, 265, 266, 267, 269, 279, 280, 288, 295, 296, 298, 302, 303, 310, 315, 318, 323, 329, 332, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 385, 403, 410], "r": [1, 4, 157, 254, 285, 289], "most": [1, 202, 277, 394, 408, 409, 410, 411], "complex": [1, 91, 92, 132, 133, 134, 135, 136, 264, 271, 277, 317, 408, 409], "abov": [1, 4, 198, 252, 277, 333, 388, 409, 410, 411, 415], "come": [1, 4, 409], "bell": 1, "whistl": 1, "liter": [1, 333, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364], "string": [0, 1, 175, 412, 414], "modul": [1, 4, 5, 261, 262, 327, 332, 378, 394, 407, 408, 411], "ensur": [0, 1, 7, 263, 359], "caster": 1, "requir": [1, 4, 277, 411, 412], "find_packag": 1, "config": 1, "link": [1, 7], "your": [1, 4, 7, 381, 409, 411], "add_librari": 1, "sourc": [0, 1, 2, 57, 187, 250], "target_sourc": 1, "cmake_current_list_dir": 1, "header": 1, "target_include_directori": 1, "target_link_librari": 1, "attach": 1, "conveni": [1, 5, 151], "mlx_build_metallib": 1, "metallib": [1, 7], "target": [1, 254, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 408], "destin": [0, 1, 57, 187], "automat": [1, 6, 159, 413, 414, 415], "what": [1, 4, 265], "practic": [1, 408], "mlx_build_met": [1, 7], "mlx_ext_metallib": 1, "titl": 1, "include_dir": 1, "project_source_dir": 1, "mlx_include_dir": 1, "output_directori": 1, "cmake_library_output_directori": 1, "add_depend": 1, "endif": 1, "final": [1, 3, 4, 5, 400], "nanobind_add_modul": 1, "nb_static": 1, "stable_abi": 1, "lto": 1, "nomins": 1, "nb_domain": 1, "build_shared_lib": 1, "target_link_opt": 1, "wl": 1, "rpath": 1, "loader_path": 1, "onc": [1, 408], "describ": [1, 411], "util": [1, 4, 6, 7, 221, 277], "__name__": [1, 4], "__main__": [1, 4], "descript": [1, 4, 271], "ext_modul": 1, "cmakeextens": 1, "cmdclass": 1, "build_ext": 1, "cmakebuild": 1, "package_data": 1, "dylib": 1, "extras_requir": 1, "dev": [1, 7], "zip_saf": 1, "fals": [0, 1, 4, 13, 14, 15, 24, 25, 31, 32, 33, 34, 38, 39, 40, 41, 53, 54, 55, 56, 60, 72, 76, 77, 89, 95, 99, 100, 101, 102, 146, 151, 156, 159, 168, 170, 172, 173, 182, 185, 197, 236, 240, 255, 258, 261, 264, 265, 266, 267, 271, 290, 291, 293, 294, 303, 305, 315, 318, 321, 325, 329, 332, 333, 351, 354, 385, 396, 412], "python_requir": 1, "even": [1, 4, 89, 408, 411, 412], "though": [1, 4, 408, 411, 412], "co": [0, 1, 329, 409], "locat": [1, 316, 317, 415], "pip": [1, 7], "j8": 1, "libmlx_ext": 1, "cpython": 1, "3x": 1, "darwin": 1, "try": [1, 7], "after": [1, 4, 5, 26, 137, 139, 174, 196, 198, 281, 290, 293, 298, 299, 303, 305, 312, 315, 316, 317, 318, 332, 363, 408, 415], "abl": [1, 198], "simpli": [1, 4, 7, 324, 342, 348, 367, 376, 381, 408, 409], "plai": [1, 4], "ones": [0, 1, 4, 193, 221, 251, 316, 317, 410], "b": [0, 1, 2, 4, 12, 14, 22, 77, 81, 82, 83, 84, 85, 110, 111, 113, 139, 142, 143, 145, 146, 153, 154, 155, 156, 164, 165, 167, 169, 171, 186, 188, 191, 194, 198, 215, 239, 247, 254, 266, 267, 294, 323, 333, 346, 409, 410, 411, 412, 413, 414, 415], "f": [0, 1, 3, 5, 156, 277, 292, 388, 408, 412], "item": [1, 3, 4, 5, 265, 411, 412, 413], "true": [0, 1, 3, 4, 14, 38, 39, 40, 41, 77, 89, 99, 100, 101, 102, 123, 146, 151, 156, 159, 173, 182, 199, 229, 258, 261, 264, 265, 266, 267, 271, 277, 281, 282, 283, 289, 290, 291, 292, 293, 294, 302, 303, 305, 312, 315, 321, 323, 325, 329, 332, 333, 351, 359, 385], "quick": [1, 6], "benchmark": [1, 408], "see": [1, 4, 5, 7, 9, 10, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 75, 76, 156, 181, 219, 220, 261, 271, 277, 281, 285, 288, 301, 319, 320, 321, 324, 325, 326, 328, 329, 330, 333, 335, 336, 337, 338, 343, 344, 345, 369, 408, 409, 410, 413, 415], "compar": [1, 77, 408], "time": [1, 4, 7, 182, 248, 277, 279, 280, 289, 292, 295, 296, 323, 408, 409, 411, 415], "set_default_devic": 1, "256": [1, 5], "512": [1, 2, 4, 332, 415], "random": [1, 2, 3, 4, 5, 6, 279, 280, 281, 291, 295, 296, 305, 312, 408, 409, 415, 416], "normal": [1, 3, 4, 121, 122, 205, 210, 277, 279, 280, 281, 290, 291, 293, 295, 296, 322, 332, 335, 337, 412, 415], "bench": 1, "warm": [1, 408], "rang": [0, 1, 2, 3, 4, 5, 7, 16, 85, 137, 158, 336, 338, 344, 345, 383, 397, 398, 399, 400, 401, 405, 408, 409, 411, 415], "100": [1, 3, 4, 400, 408, 409, 411, 415], "5000": 1, "e": [1, 5, 7, 85, 114, 152, 225, 281, 282, 283, 285, 286, 290, 291, 293, 303, 322, 349, 350, 372, 377, 383, 386, 408, 411, 416], "simple_tim": 1, "custom_tim": 1, "3f": [1, 5, 408], "114": 1, "109": 1, "modest": 1, "improv": [1, 2, 4, 384, 385, 386, 387, 388, 389, 395, 408], "awai": [1, 4], "nn": [1, 4, 5, 221, 265, 277, 378, 381, 383, 392, 394, 408, 411], "grad": [1, 3, 5, 254, 263, 383, 391, 408, 409, 410, 411, 413], "full": [0, 1, 5, 62, 75, 96, 229, 316, 317, 354, 408, 411], "profil": 2, "kei": [2, 4, 124, 175, 201, 202, 203, 205, 206, 207, 209, 210, 211, 264, 265, 302, 303, 315, 318, 392, 405, 407, 409], "step": [0, 2, 4, 5, 16, 277, 289, 292, 323, 385, 392, 397, 399, 400, 401, 408], "optim": [2, 3, 5, 6, 316, 408, 409, 411], "build": [2, 4, 6, 337, 381, 408], "mlx_metal_debug": [2, 7], "option": [0, 2, 4, 13, 15, 16, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 84, 85, 89, 90, 93, 94, 95, 96, 99, 100, 101, 102, 106, 107, 108, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 144, 149, 150, 156, 157, 158, 159, 168, 170, 172, 173, 182, 185, 192, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 209, 210, 211, 213, 214, 229, 230, 231, 234, 235, 236, 240, 242, 243, 247, 249, 250, 251, 252, 253, 254, 255, 257, 259, 261, 264, 265, 266, 267, 279, 280, 281, 282, 283, 289, 292, 294, 295, 296, 298, 302, 303, 305, 310, 315, 318, 320, 321, 323, 325, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 384, 385, 386, 387, 388, 389, 390, 392, 395, 396, 397, 405, 408, 414, 416], "debug": 2, "record": [2, 178, 411], "dure": [2, 89, 284, 285, 286, 333, 412], "compil": [0, 2, 6, 7, 109, 112, 409, 411], "later": [2, 7], "inspect": [2, 408, 413], "label": [2, 3, 353, 360], "object": [2, 9, 28, 47, 74, 89, 151, 221, 257, 264, 265, 266, 267, 271, 285, 332, 407], "queue": 2, "readabl": 2, "enabl": [2, 4, 7, 89, 112, 396], "python": [2, 4, 47, 65, 74, 116, 264, 265, 266, 267, 268, 381, 391, 392, 394, 407, 409, 412], "prepend": [2, 169], "cmake_arg": 2, "dmlx_metal_debug": 2, "ON": [2, 7], "start_captur": 2, "initi": [2, 3, 4, 267, 277, 281, 290, 291, 293, 294, 319, 322, 334, 335, 336, 337, 338, 339, 340, 341, 381, 392, 397, 398, 400, 401, 408, 411], "gpu": [2, 6, 175, 408, 410, 415], "trace": [2, 408], "applic": [2, 7], "mtl_capture_en": 2, "uniform": [2, 277, 294, 305, 336, 338, 378, 405, 408, 409, 415], "trace_fil": 2, "mlx_trace": 2, "gputrac": [2, 183], "path": [2, 7, 183, 221, 222, 261, 266, 305], "_": [2, 3, 4, 266, 277, 397, 398, 399, 400, 401, 405, 408, 411, 415], "10": [0, 2, 4, 5, 161, 216, 221, 265, 277, 305, 378, 399, 401, 408, 410], "stop_captur": 2, "open": [2, 7, 16, 207, 211], "replai": 2, "view": [0, 2, 412], "great": 2, "overview": 2, "oper": [2, 4, 6, 8, 35, 78, 79, 80, 85, 95, 124, 229, 237, 244, 269, 277, 332, 390, 408, 409, 410, 411, 412, 413, 415, 416], "checkout": [2, 408], "document": [2, 6, 62, 75, 219, 220, 271, 408, 409, 410], "inform": [2, 4, 5, 7, 175, 219, 220, 271, 277, 281, 288, 318, 409, 415], "skip": 2, "save": [2, 4, 6, 159, 183, 198, 219, 220, 221, 222, 309, 411], "within": [0, 2, 26, 146], "project": [2, 4, 318], "us": [0, 2, 3, 4, 5, 6, 7, 16, 36, 106, 109, 111, 123, 137, 153, 156, 157, 169, 176, 177, 178, 181, 198, 199, 213, 214, 215, 242, 264, 267, 271, 277, 280, 285, 287, 288, 289, 292, 294, 296, 298, 302, 309, 316, 318, 320, 321, 323, 325, 329, 332, 333, 337, 338, 344, 345, 352, 378, 381, 383, 384, 385, 387, 388, 389, 390, 391, 392, 405, 407, 408, 409, 410, 413, 415], "cmake": [2, 7], "mkdir": [2, 7], "cd": [2, 7], "g": [2, 7, 156, 198, 292, 377, 395, 396, 411, 416], "xcodeproj": 2, "select": [0, 2, 7, 249, 258, 298, 302, 310], "metal_captur": 2, "exampl": [2, 3, 4, 5, 16, 36, 137, 156, 157, 238, 243, 263, 266, 267, 277, 279, 280, 281, 291, 295, 296, 303, 305, 312, 315, 333, 334, 335, 336, 337, 338, 339, 340, 341, 351, 353, 360, 378, 383, 392, 397, 398, 399, 400, 401, 405, 409, 410, 411, 412, 413, 414], "schema": 2, "implement": [0, 3, 5, 123, 124, 156, 287, 302, 318, 325, 327, 329, 331, 332, 333, 375, 384, 385, 386, 387, 389, 390, 391, 403, 408, 409, 412], "basic": [3, 216, 409], "model": [3, 5, 6, 221, 261, 262, 265, 266, 277, 298, 301, 303, 305, 309, 312, 314, 315, 316, 318, 332, 378, 381, 383, 391, 392, 394, 408, 411], "learn": [3, 5, 6, 281, 290, 291, 293, 319, 322, 384, 385, 386, 387, 388, 389, 390, 395, 396], "problem": [3, 5, 277], "metadata": [3, 159, 219, 220], "num_featur": [3, 281], "num_exampl": 3, "1_000": 3, "num_it": 3, "10_000": 3, "iter": [3, 5, 265, 266, 405, 408, 411], "sgd": [3, 5, 383, 390, 392, 397, 398, 401, 408], "lr": [3, 390], "01": [3, 348, 388], "rate": [3, 384, 385, 386, 387, 388, 389, 390, 395, 396], "ll": [3, 5, 356, 408, 409], "synthet": 3, "dataset": [3, 411], "design": [3, 6, 405, 415], "matrix": [0, 3, 42, 84, 85, 106, 107, 120, 144, 156, 157, 169, 173, 198, 199, 205, 320, 321, 339, 378], "ground": [3, 4, 353, 363], "truth": [3, 353, 363], "w_star": 3, "valu": [0, 3, 4, 11, 14, 16, 24, 25, 47, 74, 77, 88, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 146, 156, 158, 175, 195, 201, 202, 203, 205, 206, 207, 210, 211, 219, 243, 244, 254, 257, 262, 264, 265, 266, 267, 271, 280, 284, 285, 286, 291, 294, 296, 302, 318, 319, 330, 331, 332, 334, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 375, 381, 385, 388, 397, 398, 400, 401, 409], "gaussian": [3, 288, 343, 344, 345, 354], "nois": 3, "noisi": 3, "ep": [3, 121, 122, 281, 290, 291, 293, 322, 352, 354, 364, 384, 385, 386, 387, 388, 389, 395], "1e": [0, 3, 5, 14, 146, 281, 290, 291, 293, 322, 352, 354, 364, 384, 385, 386, 387, 388, 389, 392, 395, 397, 398, 399, 400, 401], "weight": [0, 3, 93, 94, 95, 121, 122, 265, 277, 305, 309, 320, 321, 351, 353, 381, 385, 388, 390, 392, 396, 409, 411], "squar": [0, 3, 4, 122, 144, 217, 232, 254, 265, 277, 322, 361, 363, 384, 385, 387, 388, 389, 409, 412], "loss": [3, 5, 254, 277, 383, 408, 409, 411], "gradient": [0, 3, 5, 141, 237, 254, 262, 263, 277, 303, 316, 321, 332, 359, 381, 383, 384, 385, 387, 388, 389, 390, 391, 394, 396, 408, 409, 410, 411, 412, 413], "loss_fn": [3, 5, 383, 408, 409], "w": [0, 3, 94, 106, 198, 199, 254, 266, 280, 281, 283, 285, 286, 294, 296, 396, 409], "mean": [0, 3, 4, 5, 122, 205, 206, 254, 277, 281, 290, 303, 322, 340, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 408, 409, 412], "grad_fn": [3, 408, 409], "randomli": [3, 4, 284, 285, 286], "Then": [3, 7], "repeatedli": 3, "verifi": [3, 7], "close": [3, 6, 7, 14, 146], "error_norm": 3, "5f": 3, "someth": [3, 4, 410], "00005": 3, "00364": 3, "complet": [3, 4, 7, 182, 316, 317, 409, 415], "logist": [0, 3, 225, 345, 371], "github": [3, 5, 7, 408], "repo": [3, 5, 7, 408], "effici": [4, 6, 85, 285, 325, 411, 413], "larg": [4, 277, 318, 359, 408, 411], "ish": 4, "transform": [4, 6, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 262, 277, 281, 290, 293, 294, 302, 303, 315, 321, 325, 410], "without": [4, 6, 237, 318, 377, 407, 408, 411, 412, 415], "compromis": 4, "eas": 4, "llama": 4, "famili": 4, "less": [0, 4, 26, 155, 196, 325, 363], "200": [4, 399], "line": [4, 411, 412], "neural": [4, 6, 287, 335, 336, 365, 378, 381, 395], "network": [4, 6, 281, 285, 287, 335, 336, 378, 381, 395], "concis": 4, "architectur": [4, 7, 175, 277, 317, 415], "notabl": [4, 6], "rope": [4, 277], "posit": [4, 26, 108, 123, 137, 141, 150, 187, 196, 205, 254, 265, 277, 282, 283, 318, 325, 329, 354, 364], "cach": [4, 174, 176, 177, 181, 408], "concaten": [0, 4], "llamaattent": 4, "self": [4, 5, 8, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 269, 277, 365, 381], "dim": [4, 123, 124, 287, 290, 291, 293, 318, 320, 322, 325, 329, 332], "num_head": [4, 318, 332], "super": [4, 5, 277, 381], "tradit": [4, 123, 285, 286, 325], "query_proj": 4, "bia": [4, 106, 121, 198, 199, 265, 277, 282, 283, 289, 292, 293, 294, 303, 305, 315, 318, 321, 323, 387, 388, 389, 392, 409], "key_proj": 4, "value_proj": 4, "out_proj": [4, 381], "__call__": [4, 5, 277, 381], "queri": [4, 124, 318], "mask": [0, 4, 84, 124, 312, 318, 410], "extract": [0, 4, 42, 107, 108, 277, 302, 381], "l": [4, 5, 277, 279, 281, 282, 289, 292, 295, 323, 363], "reshap": [0, 4, 156, 333, 410], "transpos": [0, 4, 29, 199], "combin": [4, 267], "key_cach": 4, "value_cach": 4, "math": [4, 364, 408], "sqrt": [0, 4, 114, 124, 281, 288, 290, 291, 293, 294, 322, 329, 335, 336, 337, 338, 344, 384, 386, 387, 388, 395, 408], "score": [4, 124, 360], "softmax": [0, 4, 124, 277, 350, 353], "values_hat": 4, "possibli": [4, 84, 85, 169, 263], "rm": [4, 7, 122, 385], "swiglu": 4, "rmsnorm": [4, 277], "llamaencoderlay": 4, "mlp_dim": [4, 332], "norm1": 4, "norm2": 4, "linear1": 4, "linear2": 4, "linear3": 4, "sigmoid": [0, 4, 277, 328, 345, 349, 371], "instanc": [4, 36, 198, 268, 277, 291, 298, 299, 300, 303, 305, 306, 307, 312, 315, 316, 317, 327, 381, 412], "embed": [4, 261, 277, 320, 325, 329, 352], "emb": [4, 287, 320, 329], "token": [4, 287, 320], "num_lay": [4, 5, 383], "vocab_s": 4, "norm": [4, 122, 263, 290, 364, 389, 390], "multiheadattent": [4, 277], "create_additive_causal_mask": 4, "list": [4, 9, 13, 15, 28, 68, 74, 78, 79, 80, 86, 89, 90, 95, 116, 126, 127, 129, 130, 132, 133, 135, 136, 140, 141, 152, 156, 168, 170, 172, 173, 185, 192, 195, 197, 201, 202, 203, 205, 206, 207, 210, 211, 219, 229, 231, 235, 236, 240, 247, 248, 250, 254, 255, 256, 259, 264, 267, 268, 277, 303, 305, 306, 307, 308, 313, 315, 316, 317, 381, 387, 388, 389, 390, 399, 407, 408, 409, 411], "still": [4, 7, 156, 408, 411], "consid": [4, 14, 77, 146, 264, 265, 266, 290, 407], "train": [4, 5, 277, 281, 284, 285, 286, 301, 303, 315, 335, 336], "process": [4, 95, 96, 265, 266, 286, 287, 332, 407], "ignor": [4, 36, 88, 89, 116, 385], "whatsoev": 4, "rest": [4, 123, 265, 266, 325], "subsect": 4, "prompt": 4, "autoregress": 4, "yield": [4, 5, 405], "temp": 4, "causal": 4, "append": [4, 169, 408, 411], "store": 4, "per": [4, 5, 106, 198, 199, 261, 281, 290, 291, 293, 322, 403, 408, 411], "care": [4, 411], "last": [0, 4, 27, 74, 85, 121, 122, 127, 130, 132, 133, 135, 136, 137, 145, 157, 169, 178, 202, 230, 247, 282, 283, 285, 286, 290, 333, 412], "logit": [4, 202, 351, 353, 408], "categor": 4, "lazili": [4, 277], "noth": [4, 277, 411], "yet": [4, 156, 277, 381, 392, 409, 410, 411, 413], "forc": [4, 5, 277, 413], "choos": [4, 123, 325], "pars": 4, "feed": 4, "back": [4, 179, 412], "loop": [4, 5, 408, 409, 411], "unsqueez": 4, "sequenc": [4, 13, 15, 31, 32, 53, 54, 55, 56, 60, 68, 71, 72, 76, 86, 95, 118, 126, 127, 129, 130, 132, 133, 135, 136, 140, 168, 170, 172, 185, 192, 197, 201, 202, 203, 205, 206, 207, 210, 211, 214, 229, 231, 234, 236, 240, 247, 248, 250, 255, 259, 281, 282, 289, 292, 323, 332, 405, 415], "length": [4, 234, 281, 282, 289, 292, 323, 399], "len": [4, 127, 130, 133, 136, 399], "overwrit": 4, "discard": [4, 264], "old": 4, "moment": [4, 95, 385, 387, 388, 389], "anymor": 4, "everyth": 4, "small": [4, 119, 121, 122, 281, 290, 293, 322, 354, 359, 364, 408, 415], "12": [4, 399], "8192": 4, "1024": 4, "actual": [4, 16, 305, 381, 411], "materi": [4, 6], "could": [4, 277], "20_000": 4, "machin": [4, 6, 7, 395], "8gb": 4, "ram": 4, "32": [4, 5, 84, 198, 199, 271, 280, 296, 322, 408], "44": 4, "doubl": [0, 4], "bracket": 4, "becaus": [4, 176, 277, 411], "batch": [4, 84, 85, 169, 205, 281, 282, 283, 285, 286, 289, 292, 318, 323, 333, 411], "zip": [4, 5], "haven": 4, "anyth": [4, 254, 411], "result": [4, 16, 36, 74, 89, 106, 121, 122, 145, 156, 159, 169, 194, 199, 205, 213, 216, 235, 247, 248, 258, 265, 266, 267, 329, 408, 409, 412], "veri": [4, 318, 411, 415], "similar": [4, 151, 265, 316, 317, 318, 352, 412, 414], "runtim": [4, 408], "section": [4, 7, 231, 364, 408, 409], "access": [4, 47, 277, 381, 392, 411, 415], "origin": [4, 108, 263, 281, 311, 335, 336, 337, 338, 384, 385, 386, 387, 389, 390, 412], "sentencepiec": 4, "pytorch": [4, 6, 290, 409], "compat": [4, 202, 205, 414], "npz": [4, 159, 221, 222, 305, 309, 414], "file": [4, 7, 159, 218, 219, 220, 221, 222, 305, 309, 409, 414], "argpars": 4, "itertool": [4, 265], "starmap": [4, 265], "np": [4, 5, 412, 413], "torch": [4, 412], "map_torch_to_mlx": 4, "tok_embed": 4, "elif": 4, "replac": [4, 316, 317, 332, 363], "attention_norm": 4, "ffn_norm": 4, "wq": 4, "wk": 4, "wv": 4, "wo": 4, "w1": [4, 263], "w2": [4, 263], "w3": 4, "ffn": 4, "separ": [4, 62, 75, 290, 360], "submodul": [4, 5, 277, 299, 303, 304, 315, 317], "feed_forward": 4, "parser": 4, "argumentpars": 4, "add_argu": 4, "torch_weight": 4, "output_fil": 4, "parse_arg": 4, "state": [4, 5, 277, 289, 292, 323, 383, 392, 405, 408], "savez": [4, 309, 414], "k": [0, 4, 42, 84, 85, 107, 120, 124, 249, 251, 252, 253, 279, 294, 295, 303], "v": [4, 96, 124, 277, 303, 412], "left": [0, 4, 123, 153, 156, 198, 279, 280, 288, 295, 296, 325, 333, 344, 345, 354, 356, 364], "disk": 4, "text": [4, 279, 280, 288, 289, 292, 295, 296, 297, 323, 331, 335, 336, 337, 338, 344, 347, 354, 355, 356, 359, 360, 363, 365, 366, 369, 370, 374, 375, 385, 390], "format": [4, 159, 218, 219, 220, 221, 222, 412], "dictionari": [4, 89, 159, 175, 219, 220, 263, 264, 267, 277, 302, 311, 316, 317, 393, 407, 414], "represent": [4, 198, 264, 268], "tree_unflatten": 4, "helper": [4, 408], "weight_fil": 4, "incur": 4, "sever": [4, 93, 94, 95, 221, 222, 408, 414], "futur": [4, 321, 410, 411], "pth": 4, "current": [4, 6, 7, 84, 93, 94, 95, 175, 177, 198, 267, 277, 385, 411], "around": 4, "m1": [4, 408, 409, 415], "ultra": 4, "7b": 4, "me": 4, "ishmael": 4, "year": 4, "ago": 4, "never": [4, 411], "long": 4, "info": [4, 7], "247": 4, "press": [4, 156], "enter": 4, "littl": 4, "monei": 4, "my": [4, 7], "purs": 4, "greater": [0, 4, 26, 119, 143, 196, 263, 331, 375], "consequ": 4, "walk": 4, "down": [4, 263], "gower": 4, "street": 4, "afternoon": 4, "heavi": 4, "rain": 4, "saw": [4, 409], "off": [4, 7, 411], "man": 4, "rag": 4, "who": 4, "sat": 4, "upon": [4, 265, 266], "hi": [4, 292], "bundl": 4, "hard": 4, "wet": 4, "he": [4, 337, 338], "were": [4, 415], "cry": 4, "watch": [4, 408], "him": 4, "observ": 4, "numer": [4, 121, 122, 156, 164, 168, 229, 281, 290, 291, 293, 322, 352, 354, 364, 384, 385, 386, 387, 388, 389, 395, 408, 411], "crowd": 4, "wa": [4, 411], "hurri": 4, "437": 4, "330": 4, "second": [4, 108, 153, 165, 167, 169, 215, 241, 254, 280, 296, 352, 360, 385, 387, 388, 389, 409, 415], "spent": 4, "amount": [4, 178, 279, 295], "39": 4, "By": [4, 261, 310, 409, 412], "bigger": [4, 385], "well": [4, 277, 303, 315, 318, 411], "remain": [4, 254, 266, 284, 285, 286], "almost": 4, "nobodi": 4, "took": 4, "least": [4, 78, 79, 80, 88, 157, 198], "notic": [4, 409, 414], "distanc": [4, 364], "had": 4, "doubt": 4, "minut": 4, "straight": 4, "slowli": 4, "rais": [0, 4, 156, 182, 231, 305], "ey": [0, 4], "speak": [4, 156], "resum": 4, "postur": 4, "stood": 4, "feel": 4, "pain": 4, "heart": 4, "said": 4, "smile": 4, "face": 4, "am": 4, "someon": 4, "three": [4, 80, 333], "quarter": 4, "hour": 4, "made": 4, "immedi": [4, 298], "repli": 4, "again": [4, 7, 277, 408], "hand": [4, 409, 411], "did": 4, "accustom": 4, "thu": [4, 277], "question": [4, 411], "reason": [4, 410], "tell": [4, 408, 412], "understand": [4, 335, 336], "579": 4, "690": 4, "num": [0, 4, 158, 209], "500": [4, 415], "628": 4, "went": 4, "nervou": 4, "trembl": 4, "told": 4, "why": 4, "And": [4, 333], "surpris": 4, "matter": [4, 277], "shall": 4, "anyhow": 4, "friend": 4, "ye": 4, "slight": [4, 411], "kind": 4, "want": [4, 409, 415], "longer": [4, 96, 409], "soon": 4, "unless": [4, 14, 146, 156, 381], "unlik": [4, 14, 146, 285, 286, 311], "strang": 4, "amus": 4, "That": 4, "secret": 4, "disappoint": 4, "mine": 4, "cannot": [4, 88, 410, 412], "happi": 4, "ask": 4, "shop": 4, "bui": 4, "food": 4, "633": 4, "21": [4, 401], "475": 4, "su": 4, "j": [4, 7, 156, 285, 386, 387, 389], "lu": 4, "pan": 4, "murtadha": 4, "wen": 4, "liu": 4, "2021": 4, "roform": [4, 325], "enhanc": [4, 325, 411], "rotari": [4, 123, 325], "arxiv": [4, 290, 291, 293, 297, 322, 345, 365, 384, 390], "preprint": [4, 384, 390], "2104": 4, "09864": 4, "zhang": 4, "sennrich": 4, "2019": [4, 388], "root": [0, 4, 122, 217, 232, 322], "advanc": [4, 408], "system": [4, 7, 175, 176, 177], "shazeer": 4, "2020": 4, "glu": [4, 277], "variant": [4, 363, 389], "2002": 4, "05202": 4, "classifi": 5, "mnist": 5, "As": [5, 36, 243, 277, 408], "mlp": [5, 277, 332, 383], "inherit": [5, 407], "standard": [0, 5, 47, 74, 169, 203, 206, 236, 332, 335, 337, 340, 413], "idiom": [5, 408], "where": [0, 5, 120, 146, 198, 254, 257, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 302, 319, 322, 323, 331, 337, 338, 342, 343, 345, 354, 360, 366, 369, 371, 375, 392, 409, 410], "input_dim": [5, 277, 294, 321], "hidden_dim": [5, 381, 383], "output_dim": [5, 277, 294, 321], "layer_s": 5, "idim": 5, "odim": 5, "maximum": [0, 5, 24, 36, 88, 99, 178, 182, 263, 277, 324, 329, 344, 345, 348, 367, 381, 411], "cross": [5, 95, 351, 353], "entropi": [5, 351, 353], "sub": [0, 5, 108, 209, 261], "commonli": [5, 316, 378, 408], "cross_entropi": [5, 277], "accuraci": 5, "valid": [5, 96, 137, 257, 264, 303, 315, 407], "eval_fn": 5, "argmax": [0, 5], "load": [5, 6, 305], "loader": 5, "num_class": [5, 383], "batch_siz": [5, 383], "num_epoch": [5, 383], "learning_r": [5, 383, 384, 385, 386, 387, 388, 389, 390, 392, 395, 396, 397, 398, 399, 400, 401, 408], "train_imag": [5, 383], "train_label": [5, 383], "test_imag": 5, "test_label": 5, "re": [5, 7, 378], "shuffl": 5, "minibatch": 5, "batch_iter": [5, 383], "perm": 5, "permut": [0, 5], "id": [5, 7], "put": [5, 408], "trainabl": [5, 262, 277, 381], "loss_and_grad_fn": [5, 383, 408, 409], "value_and_grad": [5, 277, 316, 381, 383, 394, 408, 409, 412, 413], "epoch": 5, "test": [5, 7], "confus": 5, "decent": 5, "95": 5, "flexibl": 6, "brought": 6, "research": 6, "except": [6, 120, 131, 132, 134, 135, 136, 290, 305, 410, 412], "featur": [6, 93, 94, 95, 123, 281, 289, 290, 291, 292, 293, 294, 321, 322, 323, 325, 332, 333, 408, 411], "main": [6, 108, 120, 265, 266, 277], "differ": [6, 151, 239, 363, 409], "compos": [6, 277, 408, 409, 413], "lazi": [6, 381, 413], "multi": [6, 124, 282, 283, 410, 412], "cpu": [6, 157, 408, 415], "inspir": 6, "jax": [6, 405], "arrayfir": 6, "unifi": 6, "live": [6, 415], "share": [6, 106, 198, 199], "convers": 6, "regress": [6, 359], "layer": [6, 121, 261, 277, 279, 280, 285, 286, 289, 290, 292, 293, 294, 295, 296, 312, 317, 320, 321, 323, 327, 332, 377, 381], "perceptron": 6, "llm": 6, "infer": [6, 140, 159], "fast": [6, 288, 345, 415], "fft": 6, "algebra": 6, "tree": [6, 89, 116, 141, 254, 257, 264, 265, 266, 267, 268, 391, 392, 394, 403, 409], "develop": [6, 7], "debugg": 6, "pypi": 7, "own": [7, 412], "meet": 7, "seri": 7, "chip": 7, "nativ": 7, "maco": 7, "13": 7, "highli": 7, "recommend": [7, 182, 390], "14": 7, "sonoma": 7, "conda": 7, "forg": 7, "match": [7, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 176, 305, 333, 353, 410, 412], "distribut": [7, 201, 202, 203, 205, 206, 210, 211, 294, 335, 336, 337, 338, 340, 341, 354, 357, 362, 364, 378], "probabl": [7, 207, 284, 285, 286, 321, 351, 353, 357, 415], "platform": 7, "processor": 7, "arm": 7, "i386": 7, "switch": 7, "17": 7, "clang": 7, "24": 7, "xcode": 7, "15": [7, 156, 267, 408], "sdk": 7, "environ": [7, 109, 112], "via": [7, 391, 394, 411, 412], "rosetta": 7, "unam": 7, "p": [7, 201, 277, 284, 285, 286, 364, 387, 389], "clone": 7, "git": 7, "com": 7, "ml": 7, "explor": 7, "http": [7, 290, 291, 293, 297, 322, 345, 365], "wjakob": 7, "2f04eac452a6d9142dedb957701bdb20125561e4": 7, "env": 7, "cmake_build_parallel_level": 7, "edit": [7, 317], "unittest": 7, "discov": 7, "stub": 7, "generate_stub": 7, "either": [7, 12, 62, 74, 75, 81, 82, 83, 88, 110, 111, 113, 139, 142, 143, 153, 154, 155, 156, 164, 169, 171, 186, 188, 191, 215, 239, 254, 280, 296, 327, 333, 337, 338], "static": 7, "libmlx": 7, "preprocessor": 7, "metal_path": 7, "mlx_build_test": 7, "mlx_build_exampl": 7, "mlx_build_benchmark": 7, "mlx_build_python_bind": 7, "multipl": [0, 7, 84, 85, 121, 122, 169, 188, 198, 199, 318, 329, 398, 399, 401, 408, 411, 414], "wish": 7, "variabl": [7, 89, 109, 112, 141, 152, 254, 256, 257], "export": 7, "developer_dir": 7, "app": 7, "content": [7, 302, 408], "xcrun": 7, "macosx": 7, "show": [7, 271, 408], "unabl": 7, "tool": 7, "sudo": 7, "ouptut": 7, "finder": 7, "iterm": 7, "termin": 7, "click": 7, "uncheck": 7, "window": [7, 279, 280, 295, 296], "restart": 7, "grep": 7, "cmake_host_system_processor": 7, "arm64": 7, "x86_64": 7, "wipe": 7, "cahc": 7, "rf": 7, "devicetyp": 8, "attribut": [8, 9, 28, 269, 311, 381, 403], "kwarg": [9, 10, 221, 222, 416], "categori": [10, 271], "bool_": [10, 271], "integ": [0, 10, 85, 139, 151, 156, 175, 195, 198, 199, 201, 207, 231, 247, 257, 271, 287, 310, 399, 410], "unsignedinteg": 10, "uint8": [10, 271], "uint16": [10, 271], "uint32": [10, 24, 25, 26, 27, 202, 271], "uint64": [10, 271], "signedinteg": [10, 151], "int8": [10, 271], "int32": [0, 10, 16, 36, 137, 151, 156, 207, 271, 333, 410, 413], "int64": [10, 271], "inexact": [10, 151], "complexflo": 10, "complex128": 10, "issubdtyp": [10, 271], "absolut": [0, 11, 14, 146, 344, 345, 363], "semant": [12, 81, 82, 83, 86, 110, 111, 113, 142, 143, 153, 154, 155, 164, 169, 171, 186, 188, 191, 215, 239, 415], "keepdim": [0, 13, 15, 24, 25, 31, 32, 33, 34, 53, 54, 55, 56, 60, 72, 76, 156, 168, 170, 172, 185, 197, 229, 236, 240, 255], "reduct": [13, 15, 168, 170, 185, 197, 267, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364], "reduc": [0, 13, 15, 24, 25, 168, 170, 172, 185, 197, 236, 240, 255, 267, 281, 332, 359], "unspecifi": [13, 15, 16, 24, 25, 26, 27, 90, 99, 100, 101, 102, 140, 168, 170, 172, 185, 192, 196, 197, 213, 229, 230, 236, 240, 243, 249, 255, 259, 416], "entir": [13, 15, 24, 25, 168, 170, 172, 185, 197, 236, 240, 255, 285, 286], "singleton": [0, 13, 15, 24, 25, 168, 169, 170, 172, 185, 197, 236, 240, 255], "rtol": [0, 14, 146], "05": [14, 146, 281, 290, 291, 293, 322], "atol": [0, 14, 146], "08": [14, 146, 352, 386, 387, 388, 389, 395], "equal_nan": [0, 14, 77, 146], "approxim": [14, 288, 343, 344, 345], "comparison": [14, 113, 142, 143, 154, 155, 191], "infinit": [14, 146], "equal": [0, 14, 26, 77, 120, 143, 146, 155, 191, 196, 207, 231, 291, 294], "sign": [0, 14, 146, 271, 390], "nan": [14, 77, 146, 148], "ab": [0, 14, 146, 156, 254, 290, 291, 293, 297, 322, 345, 365, 408], "array_equ": [0, 14, 146], "rel": [14, 146, 385, 408], "toler": [0, 14, 146], "boolean": [0, 14, 77, 84, 146, 147, 148, 149, 150, 165, 166, 167, 271, 314, 410], "interv": [16, 158, 207, 211], "increment": 16, "otherwis": [16, 95, 182, 261, 264, 265, 266, 267, 303, 305, 315, 331, 332, 333, 351, 356, 363, 374, 375, 411, 412], "convent": [16, 96, 333, 388], "lead": [16, 408], "fraction": 16, "integr": [16, 243, 411], "invers": [0, 17, 18, 19, 20, 21, 22, 23, 115, 128, 129, 130, 131, 132, 133], "cosin": [0, 17, 18, 97, 98, 352, 397, 399, 409], "hyperbol": [0, 18, 20, 23, 98, 228, 246, 376], "sine": [0, 19, 20, 227, 228, 409], "minimum": [0, 25, 36, 88, 100, 329, 352, 397], "kth": [0, 26, 196], "partit": [0, 26], "order": [0, 26, 95, 156, 196, 198, 249, 277, 290, 316, 327, 392, 408, 409], "undefin": [26, 196, 205, 410], "sort": [0, 26, 27, 196, 249], "flatten": [0, 26, 27, 99, 100, 101, 102, 156, 194, 196, 213, 230, 243, 244, 249, 264], "dimension": [28, 121, 122, 125, 126, 127, 128, 129, 130, 134, 135, 136, 279, 280, 281, 282, 283, 287, 294, 295, 296, 320, 321, 329, 410, 412], "val": [0, 28, 140], "tupl": [0, 28, 62, 65, 75, 90, 94, 95, 111, 116, 118, 152, 156, 157, 195, 198, 214, 234, 254, 256, 264, 265, 266, 267, 268, 279, 280, 283, 295, 296, 305, 307, 327, 333, 385, 387, 388, 389, 390, 407, 409], "ndarrai": [28, 410, 411, 413], "properti": [29, 36, 44, 48, 58, 59, 65, 67, 311, 314, 393, 409], "argument": [29, 62, 75, 89, 116, 141, 254, 265, 266, 267, 277, 333, 405, 409, 414, 415, 416], "union": [30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 84, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 149, 150, 175, 209, 210, 238], "appli": [36, 85, 123, 124, 265, 266, 267, 277, 279, 280, 281, 282, 283, 285, 286, 288, 290, 291, 293, 294, 295, 296, 297, 299, 312, 319, 321, 322, 323, 324, 326, 328, 330, 331, 333, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 391, 394, 400, 403, 408], "regular": [36, 285, 365, 388, 408, 410], "idx": [36, 410], "correctli": 36, "syntax": [36, 410], "subtract": [0, 36], "inclus": [0, 38, 39, 40, 41, 99, 100, 101, 102, 137], "diagon": [0, 42, 107, 120, 251, 252, 253], "axis1": [0, 43, 73, 108, 241], "axis2": [0, 43, 73, 108, 241], "start_axi": [0, 46, 137], "end_axi": [0, 46, 137], "datatyp": 48, "byte": [48, 58, 176, 177, 178, 181, 182, 271], "decim": [0, 63, 216], "indices_or_sect": [68, 231], "nest": [74, 89, 267, 277, 381, 407, 409], "ddof": [0, 76, 236, 255], "ari": [78, 79, 80], "block_siz": [0, 84], "64": [0, 84, 106, 198, 199, 261, 271, 320, 321], "mask_out": [0, 84], "mask_lh": [0, 84], "mask_rh": [0, 84], "lhs_mask": 84, "lceil": 84, "rceil": 84, "rhs_mask": 84, "out_mask": 84, "a_min": [0, 88], "a_max": [0, 88], "edg": [88, 195, 333, 408], "At": 88, "anoth": [0, 88, 151, 169, 239, 258, 271, 277, 298, 408, 409, 410, 415], "fun": [89, 141, 152, 254, 256, 257, 408, 410, 411, 415], "callabl": [89, 141, 152, 254, 256, 257, 261, 262, 264, 265, 266, 267, 298, 299, 302, 310, 323, 327, 332, 334, 335, 336, 337, 338, 339, 340, 341, 384, 385, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401], "shapeless": [0, 89], "dict": [89, 116, 159, 175, 219, 220, 221, 263, 308, 313, 316, 317, 381, 391, 392, 394, 407, 409, 414], "arbitrarili": [89, 277, 407, 409, 413], "leaf": [89, 261, 264, 265, 266, 267, 302], "node": [89, 116, 257, 266, 267], "recompil": [89, 408], "chang": [89, 224, 316, 321, 333, 356, 363, 408, 412], "Not": [89, 191, 408], "attempt": 89, "pad": [0, 93, 94, 95, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 279, 280, 282, 283, 295, 296], "dilat": [0, 93, 94, 95, 282, 283], "group": [0, 93, 94, 95, 106, 124, 198, 199, 261, 290, 320, 321], "1d": [0, 93, 95, 96, 219, 244], "convolut": [0, 93, 94, 95, 96, 282, 283, 285, 286], "channel": [93, 94, 95, 281, 282, 283, 285, 286], "c_in": [93, 94, 95], "c_out": [93, 94, 95], "convolv": [93, 94, 95], "2d": [0, 94, 95, 108, 198, 281, 285], "spatial": [94, 95, 279, 290, 295, 333], "symmetr": 94, "kernel_dil": [0, 95], "input_dil": [0, 95], "flip": [0, 95, 96], "correl": [95, 285], "discret": [96, 125, 126, 127, 128, 129, 130, 134, 135, 136, 287, 320], "swap": [0, 96, 182, 241, 317], "conv": 96, "filter": [0, 96, 282, 283, 298, 302], "signal": [96, 333], "cumul": [0, 99, 100, 101, 102], "th": [99, 100, 101, 102, 107, 120, 399], "angl": [105, 200], "radian": [0, 105], "bias": [0, 106, 198, 199, 289, 292, 303, 315, 318], "group_siz": [0, 106, 198, 199, 261, 320, 321], "bit": [0, 106, 153, 198, 199, 215, 261, 271, 298, 320, 321, 322], "configur": 106, "formal": [106, 198], "notat": [106, 264, 307], "quantiz": [0, 106, 159, 199, 320, 321], "w_i": [106, 198], "hat": [106, 198], "occupi": [106, 198, 199], "subarrai": [108, 231], "remov": [0, 108, 169, 202, 234, 353], "insert": [108, 118, 415], "end": [108, 179, 198, 280, 289, 292, 296, 331, 356, 363, 369, 374, 375, 400], "neg": [0, 108, 137, 149, 295, 296, 318, 354, 362, 364, 410], "taken": [108, 243], "global": [109, 112, 208, 263, 405, 408], "disabl": [109, 181, 408], "mlx_disable_compil": [109, 112, 408], "divis": [0, 110, 139, 198], "quotient": [0, 110, 111, 139], "remaind": [0, 111], "fuction": 111, "mathrm": [114, 225, 291], "frac": [114, 198, 225, 279, 280, 281, 284, 285, 286, 290, 291, 293, 294, 295, 296, 322, 335, 336, 337, 338, 352, 354, 356, 359, 370, 372, 384, 386, 387, 388, 389, 395], "pi": [114, 288, 329, 344, 409], "int_0": 114, "dt": 114, "erf": [0, 115, 408], "exponenti": [0, 117, 119, 326, 342, 369, 398], "minu": 119, "exp": [0, 119, 164, 168, 203, 229, 342, 357, 369, 370, 373, 408, 415], "ident": [0, 120, 237, 277, 312], "zero": [0, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 173, 180, 251, 252, 253, 260, 277, 279, 280, 284, 285, 286, 305, 334, 335, 336, 337, 338, 339, 340, 341, 378, 385, 410], "whose": [120, 261, 262], "translat": [121, 293], "stabil": [121, 122, 281, 290, 291, 293, 322, 352, 354, 384, 385, 386, 387, 388, 389, 395], "traditino": 123, "rotat": [123, 325], "larger": [123, 325, 390], "unchang": [123, 237, 325], "consecut": [123, 198, 325], "angular": [123, 325], "frequenc": [123, 325, 329], "q": [124, 157], "head": [124, 318, 332], "attent": [124, 303, 318, 329, 332], "regardless": 124, "pre": 124, "tile": [0, 124], "typic": [124, 287, 383, 408, 411], "One": [125, 128, 134, 217, 408, 409], "fourier": [125, 126, 127, 128, 129, 130, 134, 135, 136], "truncat": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 210], "dft": [125, 126, 127, 128, 129, 130, 134, 135, 136], "rfft": 131, "real": [131, 132, 133, 134, 135, 136], "rfft2": 132, "rfftn": 133, "silent": [134, 135, 136], "outsid": 137, "clamp": 137, "floor": [0, 139], "argnam": [141, 254], "neither": [141, 254], "keyword": [141, 221, 222, 254, 265, 277, 405, 414, 416], "strict": [142, 154, 303, 305, 315], "ordinari": 145, "inifn": 147, "infin": [147, 149, 150, 295, 296, 389], "dtypecategori": [151, 271], "subtyp": [151, 271], "subdtyp": 151, "float64": 151, "too": [151, 408, 411], "ord": 156, "tabl": [156, 271, 287], "frobeniu": 156, "matric": [156, 157], "strictli": 156, "mathemat": 156, "variou": 156, "purpos": 156, "calcul": [156, 354, 360, 385], "fro": 156, "inf": [156, 318], "largest": [156, 249], "sing": 156, "smallest": 156, "singular": 156, "nuclear": 156, "_f": 156, "sum_": [156, 279, 280, 359], "a_": 156, "valueerror": [156, 305, 409], "refer": [156, 291, 297, 311, 335, 336, 337, 338, 345, 365, 410], "golub": 156, "van": 156, "loan": 156, "baltimor": 156, "md": 156, "john": 156, "hopkin": 156, "univers": 156, "1985": 156, "pg": 156, "la": 156, "arang": [0, 156, 271, 333, 410, 412], "9": [156, 353, 384, 387, 388, 389, 390, 392, 398, 401, 412], "74597": 156, "20": 156, "84804": 156, "41421": 156, "23607": [156, 157], "74166": 156, "24264": 156, "11": 156, "225": 156, "894427": 157, "447214": 157, "57771": 157, "50": [0, 158], "evenli": [0, 158], "return_metadata": 159, "binari": [159, 218, 219, 220, 221, 222, 331, 351, 375, 408], "npy": [159, 218, 414], "safetensor": [159, 220, 305, 309, 411, 414], "gguf": [159, 219, 414], "matadata": 159, "unsupport": 159, "tensor": [159, 247, 279, 280, 295, 296, 364, 412], "natur": [0, 160, 162, 411], "logarithm": [0, 160, 161, 162, 163], "log": [0, 162, 164, 168, 349, 350, 354, 357, 359, 362, 373], "plu": [0, 162], "stabl": [164, 168, 229, 359], "spars": [0, 173], "xy": [0, 173], "multidimension": 173, "coordin": [0, 173], "dens": [173, 415], "cartesian": 173, "ij": 173, "clear": 174, "get_cache_memori": 174, "alwai": [176, 264, 409], "report": [176, 182], "peak": [178, 180], "begin": [178, 198, 280, 289, 292, 296, 331, 356, 363, 369, 374, 375], "program": 178, "free": 181, "reclaim": 181, "set_memory_limit": 181, "previou": [181, 182], "relax": 182, "task": [182, 359], "exceed": 182, "potenti": 182, "negat": [0, 189], "beforehand": 194, "pad_with": 195, "constant_valu": 195, "pad_width": [0, 195], "before_1": 195, "after_1": 195, "before_2": 195, "after_2": 195, "before_n": 195, "after_n": 195, "before_i": 195, "after_i": 195, "side": [195, 279, 280, 295, 296, 408], "smaller": [0, 196, 390, 408], "everi": [198, 265, 401, 409], "particular": [198, 290], "w_1": 198, "w_g": 198, "align": [198, 280, 289, 292, 296], "max_i": 198, "min_i": 198, "textrm": [198, 288, 343, 346], "round": [0, 198], "pack": [198, 199], "unsign": [198, 199, 271], "lower": [198, 207, 210, 211, 251, 341], "upper": [198, 207, 210, 211, 341], "1st": 198, "signific": 198, "2nd": 198, "dequant": [0, 198], "w_q": 198, "whether": [199, 289, 292, 302, 318, 323, 351, 354, 360], "degre": [0, 200, 364], "prng": [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 405], "num_sampl": 202, "unnorm": [202, 351, 353], "draw": 202, "cdf": [203, 288, 343], "accord": [0, 203, 258, 261, 318, 335, 336, 337, 338], "seed": 204, "cov": 205, "jointli": 205, "covari": [205, 281], "semi": 205, "definit": 205, "behavior": [205, 359, 410, 411], "empti": 205, "loc": 206, "deviat": [0, 206, 236, 335, 337, 340], "low": [207, 211, 341, 378], "high": [207, 211, 277, 287, 341, 378], "bound": [207, 210, 211, 288, 341, 408, 410, 415], "roadcast": 207, "domain": 210, "uniformli": 211, "repetit": 213, "preserv": [214, 409], "reciproc": [0, 217], "arr": [0, 218, 410], "obj": 219, "uncompress": 221, "my_path": 221, "tree_flatten": [221, 265, 268, 277], "transformerencod": 221, "128": [221, 277], "flat_param": 221, "compress": 222, "possibl": [231, 287, 320, 408, 410, 415], "divisor": [236, 255], "varianc": [0, 236, 255, 281, 290, 354], "being": [237, 277], "prevent": [237, 364, 412], "flow": [0, 237, 411], "streamcontext": 238, "context": 238, "manag": [238, 405, 415], "prior": [243, 244], "exclud": 244, "dot": [247, 264, 307, 318], "rep": [0, 248], "repeat": [0, 248], "necessarili": 249, "elsewher": [251, 410], "col": 251, "triangl": 251, "mse": 254, "param": [254, 277, 378, 409], "lvalu": 254, "dlvalu": 254, "dparam": 254, "lasso": 254, "l1": [254, 356, 358, 359, 363], "in_ax": [257, 409], "out_ax": [257, 409], "prefix": [257, 264], "class_pred": 261, "predic": [261, 310], "receiv": [261, 399, 412], "fn": [262, 265, 266, 267, 413], "wrt": 262, "is_leaf": [264, 265, 266, 267], "arbitrari": [264, 381], "depth": [264, 286, 409], "hello": [264, 268], "charact": 264, "flat": [85, 264, 268], "superset": [265, 391], "extra": [265, 266], "closer": 265, "decid": [265, 302], "constitut": 265, "dict_kei": [265, 392], "lambda": [265, 266, 267, 277, 298, 303, 310, 330, 369, 374, 384, 385, 386, 387, 388, 389, 390, 395, 396, 408, 409], "tree_map": [266, 277], "new_tre": 266, "recreat": 268, "world": 268, "42": 268, "16": [271, 279, 291, 295, 298, 381], "int16": 271, "brain": 271, "e8": 271, "m7": 271, "ieee": 271, "e5": 271, "m10": 271, "hierarchi": 271, "done": [277, 284, 322, 408, 411, 412], "manual": 277, "explicitli": [85, 277, 405], "solv": 277, "intuit": 277, "freez": [277, 315, 381], "finetun": 277, "in_dim": [277, 381], "out_dim": [277, 381], "enumer": 277, "caus": [277, 408, 411], "local": [277, 285], "scope": 277, "l2_loss": 277, "y_hat": 277, "trainable_paramet": [277, 302, 392], "loss_and_grad": 277, "workhors": 277, "Its": 277, "recurs": [277, 302, 303, 308, 313, 315, 381], "frozen": [277, 303, 313, 315, 321, 381], "individu": [277, 285, 286], "subset": [277, 302], "action": 277, "displai": 277, "count": [277, 399], "num_param": 277, "preclud": 277, "pure": [277, 383], "pattern": [277, 411], "achiev": 277, "other_input": 277, "necessari": 277, "wrap": 277, "apply_to_modul": [277, 303], "children": 277, "filter_and_map": 277, "leaf_modul": 277, "load_weight": [277, 411], "named_modul": 277, "save_weight": 277, "set_dtyp": 277, "unfreez": [277, 303], "update_modul": 277, "alibi": 277, "avgpool1d": 277, "avgpool2d": 277, "batchnorm": 277, "conv1d": [0, 277], "conv2d": [0, 277], "dropout": [277, 285, 286, 312, 332, 408], "dropout2d": 277, "dropout3d": 277, "gelu": [277, 344, 345, 408], "groupnorm": 277, "gru": 277, "instancenorm": 277, "layernorm": 277, "lstm": 277, "maxpool1d": 277, "maxpool2d": 277, "mish": 277, "prelu": 277, "quantizedembed": 277, "quantizedlinear": 277, "relu": [277, 319, 332, 366, 378], "rnn": [277, 289], "selu": 277, "sequenti": [277, 378], "silu": 277, "sinusoidalpositionalencod": 277, "softshrink": 277, "upsampl": 277, "elu": [277, 369], "gelu_approx": [277, 288, 343], "gelu_fast_approx": [277, 288, 343], "hardswish": 277, "leaky_relu": 277, "log_sigmoid": 277, "log_softmax": 277, "relu6": 277, "softplu": [277, 297, 365], "tanh": [0, 277, 288, 289, 292, 297, 323, 344, 365], "binary_cross_entropi": [277, 408], "cosine_similarity_loss": 277, "gaussian_nll_loss": 277, "hinge_loss": 277, "huber_loss": 277, "kl_div_loss": 277, "l1_loss": 277, "log_cosh_loss": 277, "margin_ranking_loss": 277, "mse_loss": 277, "nll_loss": 277, "smooth_l1_loss": 277, "triplet_loss": 277, "init": [277, 319, 378, 383, 397, 398, 400, 401], "glorot_norm": 277, "glorot_uniform": 277, "he_norm": 277, "he_uniform": 277, "kernel_s": [279, 280, 282, 283, 295, 296], "averag": [279, 280, 384, 385, 387, 388, 389], "pool": [279, 280, 295, 296, 415], "l_": [279, 295, 356], "n_i": [279, 280, 295, 296], "c_j": [279, 280, 295, 296], "ldot": [279, 280, 295, 296], "lfloor": [279, 280, 295, 296], "_size": [279, 280, 295, 296], "rfloor": [279, 280, 295, 296], "k_h": [280, 296], "k_w": [280, 296], "h_": [280, 289, 292, 296, 323], "w_": [280, 289, 292, 296, 323, 384, 385, 386, 387, 388, 389, 390, 395, 396], "height": [280, 281, 283, 285, 286, 296], "width": [280, 281, 283, 285, 286, 296, 320, 321], "momentum": [281, 390, 392, 396, 408], "affin": [281, 290, 291, 293, 294, 321], "track_running_stat": 281, "var": [0, 281, 290, 291, 293, 354], "epsilon": [281, 290, 291, 293, 322, 352, 354, 384, 386, 387, 388, 389, 395], "gamma": [281, 290, 291, 293, 322, 335, 336, 337, 338], "nc": 281, "nlc": [281, 282], "four": 281, "nhwc": [281, 283], "paper": [281, 329, 384, 385, 386, 387, 389, 390], "deep": [281, 335, 336, 337, 338], "intern": 281, "shift": [0, 153, 215, 281], "bn": 281, "in_channel": [282, 283], "out_channel": [282, 283], "learnabl": [282, 283, 327], "imag": [283, 285, 286, 333], "portion": 284, "independ": [285, 286], "nwhc": 285, "whc": 285, "maintain": [285, 286, 390], "entri": [0, 285, 286], "benefici": [285, 286, 411], "earli": 285, "adjac": 285, "pixel": 285, "effect": [285, 408, 411], "thompson": 285, "goroshin": 285, "jain": 285, "lecun": 285, "bregler": 285, "2015": [285, 387, 389], "cvpr": 285, "ndhwc": 286, "dhwc": 286, "often": 286, "medic": 286, "video": 286, "num_embed": [287, 320], "lookup": 287, "usual": [287, 320, 407, 411], "vocabulari": [287, 320], "approx": 288, "unit": [288, 289, 324, 326, 328, 335, 336, 337, 338, 342, 343, 344, 345, 346, 348, 367, 368, 369, 371], "phi": [288, 343], "geluapprox": 288, "044715": [288, 344], "gelufast": 288, "sigma": [288, 289, 292, 335, 336, 337, 338, 345, 346, 349, 370, 371], "773": 288, "regard": 288, "input_s": [289, 292, 323], "hidden_s": [289, 292, 323], "gate": [289, 346], "recurr": [289, 292, 323], "nld": [289, 292, 323], "ld": [289, 292, 323], "r_t": 289, "xr": 289, "x_t": [289, 292, 323], "hr": 289, "h_t": [289, 292, 323], "b_": [289, 292], "z_t": 289, "xz": 289, "hz": 289, "n_t": 289, "xn": 289, "odot": [289, 292], "hn": 289, "hidden": [289, 292, 323, 332], "nh": [289, 292, 323], "nlh": [289, 292, 323], "lh": [289, 292, 323], "num_group": 290, "pytorch_compat": 290, "split": [0, 290, 346], "preced": 290, "org": [290, 291, 293, 297, 322, 345, 365], "1803": 290, "08494": 290, "denomin": [291, 352, 384, 386, 387, 388, 389, 395], "inorm": 291, "1607": [291, 293], "08022": 291, "i_t": 292, "xi": 292, "f_t": 292, "xf": 292, "hf": 292, "g_t": [292, 384, 386, 387, 388, 389, 390, 395, 396], "xg": 292, "hg": 292, "o_t": 292, "xo": 292, "ho": 292, "c_": [292, 390], "c_t": [292, 390], "cell": 292, "06450": 293, "realli": 293, "mathcal": 294, "d_i": 294, "max_": [295, 296], "1908": [297, 365], "08681": [297, 365], "map_fn": [298, 302], "filter_fn": [298, 302], "valid_parameter_filt": 298, "apply_fn": 299, "descend": 300, "is_leaf_fn": 302, "found": 302, "drop": 302, "idempot": [303, 315], "endswith": 303, "file_or_weight": 305, "miss": [305, 414], "ok": [305, 409], "save_safetensor": [309, 414], "reflect": [311, 408, 410, 412], "ie": 315, "noop": 315, "unfrozen": 315, "tracer": 316, "partial": [316, 317, 408, 411], "child": 317, "flexibli": 317, "programmat": 317, "query_input_dim": 318, "key_input_dim": 318, "value_input_dim": 318, "value_dim": 318, "value_output_dim": 318, "aggreg": 318, "linearli": 318, "attend": 318, "num_paramet": 319, "25": [319, 333], "parametr": [319, 366], "from_embed": 320, "classmethod": [320, 321], "from_linear": 321, "accumul": [267, 322], "1910": 322, "07467": 322, "nonlinear": [323, 408], "elman": 323, "ih": 323, "hh": 323, "func": [85, 323], "rectifi": [324, 337, 338, 348, 367, 368], "10000": 325, "slightli": [325, 415], "plain": 327, "known": [328, 371], "swish": [328, 371], "min_freq": 329, "0001": 329, "max_freq": 329, "cos_first": 329, "full_turn": 329, "sinusoid": 329, "sin": [0, 329, 409, 413], "lambd": [330, 374], "threshold": [331, 356, 363, 375], "geq": [331, 375], "num_encoder_lay": 332, "num_decoder_lay": 332, "nb_func": 332, "custom_encod": 332, "custom_decod": 332, "norm_first": 332, "checkpoint": 332, "decod": 332, "interact": 332, "mechan": 332, "chekpoint": 332, "usag": [332, 408], "expens": 332, "scale_factor": 333, "nearest": 333, "align_corn": 333, "audio": 333, "4d": 333, "forth": 333, "algorithm": [333, 390], "neighbor": 333, "interpol": 333, "cubic": 333, "bilinear": 333, "trilinear": 333, "bicub": 333, "corner": 333, "bottom": 333, "squeez": [0, 333, 408], "75": 333, "33333": 333, "66667": 333, "init_fn": [334, 335, 336, 337, 338, 339, 340, 341, 378], "glorot": [335, 336], "fan_in": [335, 336, 337, 338], "fan_out": [335, 336, 337, 338], "fan": [335, 336, 337, 338], "_in": [335, 336], "_out": [335, 336], "difficulti": [335, 336], "feedforward": [335, 336], "191107": 335, "61278": 335, "150594": 335, "363207": 335, "gain": [335, 336, 337, 338], "89613": 335, "53947": 335, "48095": 335, "995016": 335, "223404": 336, "890597": 336, "379159": 336, "776856": 336, "90041": 336, "02264": 336, "912766": 336, "12451": 336, "delv": [337, 338], "surpass": [337, 338], "human": [337, 338], "level": [0, 85, 337, 338], "imagenet": [337, 338], "classif": [337, 338], "25211": 337, "458835": 337, "177208": 337, "0137595": 337, "6967": 337, "02765": 337, "15268": 337, "75787": 337, "kaim": 338, "0300242": 338, "0184009": 338, "793615": 338, "666329": 338, "64331": 338, "16506": 338, "08619": 338, "79854": 338, "982273": 340, "534422": 340, "380709": 340, "0645099": 340, "883935": 341, "863726": 341, "617261": 341, "417497": 341, "exact": [344, 345], "0005": 344, "015": 345, "702": 345, "cdot": [345, 352, 355, 371], "hendryck": 345, "1606": 345, "08415": 345, "halv": 346, "negative_slop": 348, "leaki": 348, "sum_i": 350, "x_i": [350, 372], "with_logit": 351, "predict": [351, 354, 355, 356, 357, 358, 359, 361, 362, 363], "105361": 351, "223144": 351, "20397": 351, "916291": 351, "539245": 351, "prob": 351, "510826": 351, "x1": 352, "x2": 352, "x_1": [352, 360], "x_2": [352, 360], "label_smooth": 353, "hot": 353, "smooth": [353, 363, 395], "0485873": 353, "348587": 353, "06": [354, 364, 384], "likelihood": [354, 362], "nll": [354, 362], "hing": 355, "y_": [355, 359], "pred": [355, 359], "delta": [356, 384], "huber": 356, "leq": [356, 369], "l2": [356, 359, 396], "kullback": 357, "leibler": 357, "diverg": 357, "cosh": [0, 359], "logcosh": 359, "sensit": 359, "outlier": 359, "dual": 359, "offer": 359, "balanc": 359, "robust": 359, "approach": [359, 409], "inputs1": 360, "inputs2": 360, "margin": [360, 364], "rank": 360, "573409": 360, "765166": 360, "0638": 360, "75596": 360, "225763": 360, "256995": 360, "773433": 360, "formula": 363, "anchor": 364, "triplet": 364, "_p": 364, "pairwis": 364, "instabl": 364, "monoton": 365, "0507": 369, "67326": 369, "sum_j": 372, "x_j": 372, "subclass": 381, "concept": 381, "mymlp": 381, "in_proj": 381, "involv": [383, 408], "subsequ": 383, "far": 383, "apply_gradi": 383, "rmsprop": 383, "adagrad": 383, "adafactor": 383, "adadelta": 383, "adam": [383, 389, 390, 399, 400], "adamw": [383, 390], "adamax": 383, "lion": 383, "cosine_decai": [383, 399], "exponential_decai": 383, "join_schedul": 383, "linear_schedul": [383, 399], "step_decai": 383, "rho": 384, "zeiler": 384, "2012": [384, 395], "adapt": [384, 385, 386], "1212": 384, "5701": 384, "v_": [384, 386, 387, 388, 389, 395, 396], "v_t": [384, 386, 387, 388, 389, 395, 396], "u_t": 384, "u_": 384, "w_t": [384, 386, 387, 388, 389, 390, 395, 396], "30": 385, "001": 385, "clip_threshold": 385, "decay_r": [385, 398, 401], "beta_1": [385, 387, 388, 389, 390], "weight_decai": [385, 388, 390, 396], "scale_paramet": 385, "relative_step": 385, "warmup_init": 385, "sublinear": 385, "cost": [385, 411], "epsilon_1": 385, "epsilon_2": 385, "parameter_scal": 385, "clip": [0, 263, 385], "unscal": 385, "decai": [385, 388, 390, 396, 397, 398, 401], "duchi": 386, "hazan": 386, "singer": 386, "2011": 386, "subgradi": 386, "onlin": 386, "stochast": [386, 387, 389, 396, 411], "jmlr": 386, "999": [387, 388, 389], "omit": [387, 389], "estim": [387, 389], "kingma": [387, 389], "ba": [387, 389], "iclr": [387, 388, 389], "m_": [387, 388, 389, 390], "m_t": [387, 388, 389, 390], "beta_2": [387, 388, 389, 390], "contrast": 388, "loshchilov": 388, "hutter": 388, "decoupl": 388, "99": [390, 395], "tend": 390, "10x": 390, "strength": [390, 396], "wd": 390, "chen": 390, "symbol": 390, "discoveri": 390, "2302": 390, "06675": 390, "eta": 390, "opt": 391, "tieleman": 395, "hinton": 395, "lectur": 395, "coursera": 395, "dampen": 396, "nesterov": 396, "descent": [396, 408, 411], "mu": 396, "tau": 396, "penalti": 396, "decay_step": 397, "beyond": [397, 400], "minim": 397, "lr_schedul": [397, 398, 399, 401], "1000": [397, 408], "0999961": 397, "06561": 398, "boundari": 399, "join": 399, "transit": 399, "warmup": [399, 400], "0999938": 399, "101": 400, "step_siz": 401, "081": 401, "basi": 403, "implicit": [405, 408, 409], "fine": [405, 411], "grain": 405, "control": [405, 411], "pseudo": 405, "altern": 405, "splittabl": 405, "threefri": 405, "counter": 405, "cycl": 407, "merg": 408, "fuse": 408, "big": 408, "awar": [408, 411], "36788": 408, "compiled_fun": 408, "code": [408, 411], "slow": 408, "stack": [0, 408], "rerun": [408, 411], "frequent": [408, 411], "destroi": 408, "anonym": 408, "don": [408, 415], "unari": 408, "overhead": [408, 411, 415], "bandwidth": 408, "fusibl": 408, "consider": 408, "versu": 408, "timeit": [408, 409], "tic": 408, "perf_count": 408, "toc": 408, "tpi": 408, "1e3": 408, "4096": [408, 409, 415], "On": [408, 409, 411], "millisecond": [408, 415], "five": 408, "latest": 408, "won": 408, "placehold": 408, "insid": 408, "crash": 408, "disable_compil": 408, "okai": [408, 411], "intend": [0, 408], "deal": 408, "pretti": [408, 411], "inconveni": 408, "functool": 408, "particularli": 408, "backward": [408, 409], "compiled_grad_fn": 408, "71828": 408, "outer": [0, 408, 411], "opportun": 408, "inner": [0, 408], "idea": [409, 411], "behind": 409, "dfdx": [409, 410], "d2fdx2": 409, "zero_grad": 409, "detach": 409, "requires_grad": 409, "dloss_dw": 409, "dloss_dx": 409, "lot": 409, "redund": 409, "continu": 409, "suppos": [409, 415], "nice": [409, 411], "propag": [409, 410], "stop_gradi": [0, 409], "autom": 409, "contriv": [409, 415], "sake": 409, "clariti": 409, "quit": [409, 412], "power": [0, 409, 412], "difficult": 409, "primit": 409, "issu": [409, 412], "priorit": 409, "naive_add": 409, "vmap_add": 409, "total": 409, "390": 409, "wherea": 409, "025": 409, "ten": [409, 411], "Of": 409, "cours": 409, "better": [409, 415], "handi": 409, "slice": [0, 410], "ellipsi": 410, "mix": 410, "take_along_axi": [0, 410], "lack": 410, "extrem": [410, 411], "ineffici": [410, 411], "nonzero": 410, "dynam": 411, "easier": 411, "worri": 411, "fun1": 411, "expensive_fun": 411, "consum": 411, "eager": 411, "thank": 411, "weights_fp16": 411, "trade": 411, "bad": 411, "grow": 411, "computation": 411, "costli": 411, "luckili": 411, "wide": 411, "thousand": 411, "value_and_grad_fn": 411, "implicitli": 411, "anytim": 411, "memoryview": [411, 412], "perfectli": 411, "first_lay": 411, "second_layer_a": 411, "second_layer_b": 411, "protocol": 412, "pep": 412, "3118": 412, "a_view": 412, "owndata": 412, "extern": 412, "demonstr": 412, "x_view": 412, "modifi": 412, "df": 412, "x\u00b2": 412, "2x": 412, "indirectli": 412, "modif": 412, "seen": 412, "occur": 412, "incorpor": 412, "aris": 412, "incorrect": 412, "experiment": 412, "break": 412, "advis": 412, "intermedi": 412, "jnp": 412, "tf": 412, "page": 413, "composit": 413, "archiv": 414, "savez_compress": 414, "save_gguf": 414, "arr_0": 414, "advantag": 415, "parallel": 415, "race": 415, "interest": 415, "albeit": 415, "d1": 415, "d2": 415, "matmul": [0, 85, 415], "But": 415, "twice": 415, "measur": 415, "default_stream": 416, "default_devic": 416, "my_devic": 416, "linspac": 0, "as_strid": 0, "inlin": 0, "zeros_lik": 0, "ones_lik": 0, "everywher": 0, "tri": 0, "tril": 0, "triu": 0, "expand_dim": 0, "slice_upd": 0, "src": 0, "num_split": 0, "meshgrid": 0, "nullopt": 0, "initializer_list": 0, "swapax": 0, "moveaxi": 0, "low_pad_s": 0, "high_pad_s": 0, "pad_valu": 0, "broadcast_to": 0, "against": 0, "not_equ": 0, "greater_equ": 0, "less_equ": 0, "isnan": 0, "isinf": 0, "isposinf": 0, "isneginf": 0, "allclos": 0, "isclos": 0, "deviatoin": 0, "prod": 0, "argmin": 0, "argsort": 0, "argpartit": 0, "topk": 0, "logsumexp": 0, "logical_not": 0, "logical_and": 0, "logical_or": 0, "divmod": 0, "floor_divid": 0, "ceil": 0, "tan": 0, "arcsin": 0, "arc": 0, "arcco": 0, "arctan": 0, "arctan2": 0, "ratio": [0, 22], "sinh": 0, "arcsinh": 0, "arccosh": 0, "arctanh": 0, "log2": 0, "log10": 0, "log1p": 0, "logaddexp": 0, "erfinv": 0, "expm1": 0, "gather": [0, 85], "slice_s": 0, "scatter": 0, "scatter_add": 0, "scatter_prod": 0, "scatter_max": 0, "scatter_min": 0, "rsqrt": 0, "cumsum": 0, "cumprod": 0, "cummax": 0, "cummin": 0, "conv_gener": 0, "padding_lo": 0, "padding_hi": 0, "quantized_matmul": 0, "tensordot": 0, "contract": 0, "axes_a": 0, "axes_b": 0, "addmm": 0, "block_masked_mm": 0, "block_sparse_mm": 0, "lhs_indic": [0, 85], "rhs_indic": [0, 85], "diag": 0, "inject": 0, "atleast_1d": 0, "atleast": 0, "atleast_2d": 0, "atleast_3d": 0, "number_of_el": 0, "invert": 0, "pun": 0, "conjug": [0, 91], "bitwise_and": 0, "bitwis": [0, 81, 82, 83, 153, 215], "bitwise_or": 0, "bitwise_xor": 0, "exclus": [0, 83], "left_shift": 0, "right_shift": 0, "mlx_build_safetensor": 7, "mlx_build_gguf": 7, "xor": 83, "operand": 85, "a1": 85, "a2": 85, "AS": 85, "b1": 85, "b2": 85, "elementwis": [91, 92], "alia": [91, 92], "conj": 92, "max_buffer_s": 175, "max_recommended_working_set_s": 175, "memory_s": 175, "reset_peak_memori": 178, "reset": 180, "max_norm": 263, "exce": 263, "proportion": 263, "clipped_grad": 263, "total_norm": 263, "rescal": 263, "acc": 267}, "objects": {"": [[0, 0, 1, "_CPPv43absRK5array14StreamOrDevice", "abs"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::a"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::s"], [0, 0, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::a"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::b"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::s"], [0, 0, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::a"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::alpha"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::b"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::beta"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::c"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::s"], [0, 0, 1, "_CPPv43allRK5array14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::axes"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::axis"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::s"], [0, 0, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::a"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::atol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::b"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::equal_nan"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::rtol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::s"], [0, 0, 1, "_CPPv43anyRK5array14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::axes"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::axis"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::s"], [0, 0, 1, "_CPPv46aranged14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangei14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeii14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeiii14StreamOrDevice", "arange"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::stop"], [0, 0, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::a"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::s"], [0, 0, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::a"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::s"], [0, 0, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::a"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::s"], [0, 0, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::a"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::s"], [0, 0, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan"], [0, 0, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::a"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::b"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::s"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::a"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::s"], [0, 0, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::a"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::s"], [0, 0, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::axis"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::s"], [0, 0, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::axis"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::s"], [0, 0, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition"], [0, 0, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::axis"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::s"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::s"], [0, 0, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort"], [0, 0, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::axis"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::s"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::s"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::equal_nan"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::s"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::s"], [0, 0, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::a"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::offset"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::s"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::shape"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::strides"], [0, 0, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::a"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::dtype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::s"], [0, 0, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d"], [0, 0, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::s"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::s"], [0, 0, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d"], [0, 0, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::s"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::s"], [0, 0, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d"], [0, 0, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::s"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::s"], [0, 0, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::a"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::b"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::s"], [0, 0, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::a"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::b"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::s"], [0, 0, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::a"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::b"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::s"], [0, 0, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::a"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::b"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::block_size"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_lhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_out"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_rhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::s"], [0, 0, 1, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_sparse_mm"], [0, 1, 1, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_sparse_mm::a"], [0, 1, 1, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_sparse_mm::b"], [0, 1, 1, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_sparse_mm::lhs_indices"], [0, 1, 1, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_sparse_mm::rhs_indices"], [0, 1, 1, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_sparse_mm::s"], [0, 0, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::inputs"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::s"], [0, 0, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::a"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::s"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::shape"], [0, 0, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::a"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::s"], [0, 0, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_max"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_min"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::s"], [0, 0, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate"], [0, 0, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::axis"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::s"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::s"], [0, 0, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::a"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::s"], [0, 0, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::dilation"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::groups"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::input"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::padding"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::s"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::stride"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::weight"], [0, 0, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::dilation"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::groups"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::input"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::padding"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::s"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::stride"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::weight"], [0, 0, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 0, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_hi"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_lo"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 0, 1, "_CPPv44copy5array14StreamOrDevice", "copy"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::a"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::s"], [0, 0, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::a"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::s"], [0, 0, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::a"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::s"], [0, 0, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::a"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::axis"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::inclusive"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::reverse"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::s"], [0, 0, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::a"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::axis"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::inclusive"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::reverse"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::s"], [0, 0, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::a"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::axis"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::inclusive"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::reverse"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::s"], [0, 0, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::a"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::axis"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::inclusive"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::reverse"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::s"], [0, 0, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::a"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::s"], [0, 0, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::dependencies"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::inputs"], [0, 0, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::biases"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::bits"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::group_size"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::s"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::scales"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::w"], [0, 0, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::a"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::k"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::s"], [0, 0, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::a"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis1"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis2"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::offset"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::s"], [0, 0, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::a"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::b"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::s"], [0, 0, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::a"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::b"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::s"], [0, 0, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::a"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::b"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::s"], [0, 0, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::a"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::s"], [0, 0, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::a"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::s"], [0, 0, 1, "_CPPv43expRK5array14StreamOrDevice", "exp"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::a"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::s"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::axes"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::axis"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::s"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::s"], [0, 0, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::a"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::s"], [0, 0, 1, "_CPPv43eyei14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::s"], [0, 0, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten"], [0, 0, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::end_axis"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::start_axis"], [0, 0, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::a"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::s"], [0, 0, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::a"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::b"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::s"], [0, 0, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full"], [0, 0, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full"], [0, 2, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::T"], [0, 2, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::T"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::vals"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::vals"], [0, 0, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather"], [0, 0, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::axes"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::axis"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::slice_sizes"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::slice_sizes"], [0, 0, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::a"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::b"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::s"], [0, 0, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::a"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::b"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::s"], [0, 0, 1, "_CPPv48identityi14StreamOrDevice", "identity"], [0, 0, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::dtype"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::s"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::s"], [0, 0, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::a"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::b"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::s"], [0, 0, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::a"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::atol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::b"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::equal_nan"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::rtol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::s"], [0, 0, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::a"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::s"], [0, 0, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::a"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::s"], [0, 0, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::a"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::s"], [0, 0, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::a"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::s"], [0, 0, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::a"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::b"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::s"], [0, 0, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::a"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::b"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::s"], [0, 0, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::a"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::b"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::s"], [0, 0, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::dtype"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::num"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::s"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::start"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::stop"], [0, 0, 1, "_CPPv43logRK5array14StreamOrDevice", "log"], [0, 0, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::a"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::s"], [0, 0, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::a"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::s"], [0, 0, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::a"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::s"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::a"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::s"], [0, 0, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::a"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::b"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::s"], [0, 0, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::a"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::b"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::s"], [0, 0, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::a"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::s"], [0, 0, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::a"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::b"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::s"], [0, 0, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::axes"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::axis"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::s"], [0, 0, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::a"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::b"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::s"], [0, 0, 1, "_CPPv43maxRK5array14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::axes"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::axis"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::s"], [0, 0, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::a"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::b"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::s"], [0, 0, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::axes"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::axis"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::s"], [0, 0, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::arrays"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::indexing"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::s"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::sparse"], [0, 0, 1, "_CPPv43minRK5array14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::axes"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::axis"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::s"], [0, 0, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::a"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::b"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::s"], [0, 0, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::a"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::destination"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::s"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::source"], [0, 0, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::a"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::b"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::s"], [0, 0, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::a"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::s"], [0, 0, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::a"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::b"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::s"], [0, 0, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::a"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::axes"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::dtype"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::inverted"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::s"], [0, 0, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones"], [0, 0, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::dtype"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones::shape"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::shape"], [0, 0, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::a"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::s"], [0, 0, 1, "_CPPv4I0Ene5array1TRK5array", "operator!="], [0, 0, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!="], [0, 0, 1, "_CPPv4neRK5arrayRK5array", "operator!="], [0, 2, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::T"], [0, 2, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::T"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::a"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::b"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::b"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::b"], [0, 0, 1, "_CPPv4I0Erm5array1TRK5array", "operator%"], [0, 0, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%"], [0, 0, 1, "_CPPv4rmRK5arrayRK5array", "operator%"], [0, 2, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::T"], [0, 2, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::T"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::a"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::b"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::b"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::b"], [0, 0, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;"], [0, 0, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::a"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::b"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::a"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::b"], [0, 0, 1, "_CPPv4I0Eml5array1TRK5array", "operator*"], [0, 0, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*"], [0, 0, 1, "_CPPv4mlRK5arrayRK5array", "operator*"], [0, 2, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::T"], [0, 2, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::T"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::a"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::b"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::b"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::b"], [0, 0, 1, "_CPPv4I0Epl5array1TRK5array", "operator+"], [0, 0, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+"], [0, 0, 1, "_CPPv4plRK5arrayRK5array", "operator+"], [0, 2, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::T"], [0, 2, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::T"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::a"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::b"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::b"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::b"], [0, 0, 1, "_CPPv4I0Emi5array1TRK5array", "operator-"], [0, 0, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-"], [0, 0, 1, "_CPPv4miRK5array", "operator-"], [0, 0, 1, "_CPPv4miRK5arrayRK5array", "operator-"], [0, 2, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::T"], [0, 2, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::T"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::a"], [0, 1, 1, "_CPPv4miRK5array", "operator-::a"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::b"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::b"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::b"], [0, 0, 1, "_CPPv4dvRK5arrayRK5array", "operator/"], [0, 0, 1, "_CPPv4dvRK5arrayd", "operator/"], [0, 0, 1, "_CPPv4dvdRK5array", "operator/"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::a"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::b"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::b"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::b"], [0, 0, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;"], [0, 0, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;"], [0, 0, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;"], [0, 2, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::T"], [0, 2, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::T"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::a"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::b"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::b"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::b"], [0, 0, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::a"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::b"], [0, 0, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;="], [0, 0, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;="], [0, 0, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;="], [0, 2, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::T"], [0, 2, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::T"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::a"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::b"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::b"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::b"], [0, 0, 1, "_CPPv4I0Eeq5array1TRK5array", "operator=="], [0, 0, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator=="], [0, 0, 1, "_CPPv4eqRK5arrayRK5array", "operator=="], [0, 2, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::T"], [0, 2, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::T"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::a"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::b"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::b"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::b"], [0, 0, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;"], [0, 0, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;"], [0, 0, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;"], [0, 2, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::T"], [0, 2, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::T"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::a"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::b"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::b"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::b"], [0, 0, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;="], [0, 0, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;="], [0, 0, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;="], [0, 2, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::T"], [0, 2, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::T"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::a"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::b"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::b"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::b"], [0, 0, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::a"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::b"], [0, 0, 1, "_CPPv4eoRK5arrayRK5array", "operator^"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::a"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::b"], [0, 0, 1, "_CPPv4orRK5arrayRK5array", "operator|"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::a"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::b"], [0, 0, 1, "_CPPv4ooRK5arrayRK5array", "operator||"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::a"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::b"], [0, 0, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::a"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::b"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::s"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::axes"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::high_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::low_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayiRK5array14StreamOrDevice", "pad::s"], [0, 0, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition"], [0, 0, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::axis"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::s"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::s"], [0, 0, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::a"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::b"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::s"], [0, 0, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::axes"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::axis"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::s"], [0, 0, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::bits"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::group_size"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::s"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::w"], [0, 0, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::biases"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::bits"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::group_size"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::s"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::scales"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::transpose"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::w"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::x"], [0, 0, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::a"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::s"], [0, 0, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::a"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::s"], [0, 0, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::a"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::b"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::s"], [0, 0, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat"], [0, 0, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::axis"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::s"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::s"], [0, 0, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::a"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::s"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::shape"], [0, 0, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::a"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::b"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::s"], [0, 0, 1, "_CPPv45roundRK5array14StreamOrDevice", "round"], [0, 0, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::decimals"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::s"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::s"], [0, 0, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::a"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::s"], [0, 0, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter"], [0, 0, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::axes"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::axis"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::updates"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::updates"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::axes"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::axis"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::updates"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::updates"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::axes"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::axis"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::updates"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::updates"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::axes"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::axis"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::updates"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::updates"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::axes"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::axis"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::updates"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::updates"], [0, 0, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::a"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::s"], [0, 0, 1, "_CPPv44signRK5array14StreamOrDevice", "sign"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::a"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::s"], [0, 0, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::a"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::s"], [0, 0, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::a"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::s"], [0, 0, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::strides"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::strides"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 0, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::axes"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::axis"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::s"], [0, 0, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort"], [0, 0, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::axis"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::s"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::s"], [0, 0, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::s"], [0, 0, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::a"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::s"], [0, 0, 1, "_CPPv46squareRK5array14StreamOrDevice", "square"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::a"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::s"], [0, 0, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::axes"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::axis"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::s"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::axis"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::s"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::s"], [0, 0, 1, "_CPPv4StRK5array14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::axes"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::axis"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::s"], [0, 0, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::a"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::s"], [0, 0, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::a"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::b"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::s"], [0, 0, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::axes"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::axis"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::s"], [0, 0, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::a"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis1"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis2"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::s"], [0, 0, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::s"], [0, 0, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::a"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::indices"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::s"], [0, 0, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::a"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::s"], [0, 0, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::a"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::s"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::axis"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::s"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::s"], [0, 0, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::arr"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::reps"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::s"], [0, 0, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk"], [0, 0, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::axis"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::s"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::s"], [0, 0, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::s"], [0, 0, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri"], [0, 0, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::k"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::m"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::type"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::type"], [0, 0, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::k"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::s"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::x"], [0, 0, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::k"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::s"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::x"], [0, 0, 1, "_CPPv43varRK5array14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::axes"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::axis"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::s"], [0, 0, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::condition"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::s"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::x"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::y"], [0, 0, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros"], [0, 0, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::dtype"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros::shape"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::shape"], [0, 0, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::a"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::s"]], "mlx.core": [[8, 3, 1, "", "Device"], [9, 3, 1, "", "Dtype"], [10, 3, 1, "", "DtypeCategory"], [269, 3, 1, "", "Stream"], [11, 5, 1, "", "abs"], [12, 5, 1, "", "add"], [13, 5, 1, "", "all"], [14, 5, 1, "", "allclose"], [15, 5, 1, "", "any"], [16, 5, 1, "", "arange"], [17, 5, 1, "", "arccos"], [18, 5, 1, "", "arccosh"], [19, 5, 1, "", "arcsin"], [20, 5, 1, "", "arcsinh"], [21, 5, 1, "", "arctan"], [22, 5, 1, "", "arctan2"], [23, 5, 1, "", "arctanh"], [24, 5, 1, "", "argmax"], [25, 5, 1, "", "argmin"], [26, 5, 1, "", "argpartition"], [27, 5, 1, "", "argsort"], [28, 3, 1, "", "array"], [77, 5, 1, "", "array_equal"], [78, 5, 1, "", "atleast_1d"], [79, 5, 1, "", "atleast_2d"], [80, 5, 1, "", "atleast_3d"], [81, 5, 1, "", "bitwise_and"], [82, 5, 1, "", "bitwise_or"], [83, 5, 1, "", "bitwise_xor"], [84, 5, 1, "", "block_masked_mm"], [85, 5, 1, "", "block_sparse_mm"], [86, 5, 1, "", "broadcast_to"], [87, 5, 1, "", "ceil"], [88, 5, 1, "", "clip"], [89, 5, 1, "", "compile"], [90, 5, 1, "", "concatenate"], [91, 5, 1, "", "conj"], [92, 5, 1, "", "conjugate"], [93, 5, 1, "", "conv1d"], [94, 5, 1, "", "conv2d"], [95, 5, 1, "", "conv_general"], [96, 5, 1, "", "convolve"], [97, 5, 1, "", "cos"], [98, 5, 1, "", "cosh"], [99, 5, 1, "", "cummax"], [100, 5, 1, "", "cummin"], [101, 5, 1, "", "cumprod"], [102, 5, 1, "", "cumsum"], [103, 5, 1, "", "default_device"], [104, 5, 1, "", "default_stream"], [105, 5, 1, "", "degrees"], [106, 5, 1, "", "dequantize"], [107, 5, 1, "", "diag"], [108, 5, 1, "", "diagonal"], [109, 5, 1, "", "disable_compile"], [110, 5, 1, "", "divide"], [111, 5, 1, "", "divmod"], [112, 5, 1, "", "enable_compile"], [113, 5, 1, "", "equal"], [114, 5, 1, "", "erf"], [115, 5, 1, "", "erfinv"], [116, 5, 1, "", "eval"], [117, 5, 1, "", "exp"], [118, 5, 1, "", "expand_dims"], [119, 5, 1, "", "expm1"], [120, 5, 1, "", "eye"], [137, 5, 1, "", "flatten"], [138, 5, 1, "", "floor"], [139, 5, 1, "", "floor_divide"], [140, 5, 1, "", "full"], [141, 5, 1, "", "grad"], [142, 5, 1, "", "greater"], [143, 5, 1, "", "greater_equal"], [144, 5, 1, "", "identity"], [145, 5, 1, "", "inner"], [146, 5, 1, "", "isclose"], [147, 5, 1, "", "isinf"], [148, 5, 1, "", "isnan"], [149, 5, 1, "", "isneginf"], [150, 5, 1, "", "isposinf"], [151, 5, 1, "", "issubdtype"], [152, 5, 1, "", "jvp"], [153, 5, 1, "", "left_shift"], [154, 5, 1, "", "less"], [155, 5, 1, "", "less_equal"], [158, 5, 1, "", "linspace"], [159, 5, 1, "", "load"], [160, 5, 1, "", "log"], [161, 5, 1, "", "log10"], [162, 5, 1, "", "log1p"], [163, 5, 1, "", "log2"], [164, 5, 1, "", "logaddexp"], [165, 5, 1, "", "logical_and"], [166, 5, 1, "", "logical_not"], [167, 5, 1, "", "logical_or"], [168, 5, 1, "", "logsumexp"], [169, 5, 1, "", "matmul"], [170, 5, 1, "", "max"], [171, 5, 1, "", "maximum"], [172, 5, 1, "", "mean"], [173, 5, 1, "", "meshgrid"], [185, 5, 1, "", "min"], [186, 5, 1, "", "minimum"], [187, 5, 1, "", "moveaxis"], [188, 5, 1, "", "multiply"], [189, 5, 1, "", "negative"], [190, 5, 1, "", "new_stream"], [191, 5, 1, "", "not_equal"], [192, 5, 1, "", "ones"], [193, 5, 1, "", "ones_like"], [194, 5, 1, "", "outer"], [195, 5, 1, "", "pad"], [196, 5, 1, "", "partition"], [197, 5, 1, "", "prod"], [198, 5, 1, "", "quantize"], [199, 5, 1, "", "quantized_matmul"], [200, 5, 1, "", "radians"], [212, 5, 1, "", "reciprocal"], [213, 5, 1, "", "repeat"], [214, 5, 1, "", "reshape"], [215, 5, 1, "", "right_shift"], [216, 5, 1, "", "round"], [217, 5, 1, "", "rsqrt"], [218, 5, 1, "", "save"], [219, 5, 1, "", "save_gguf"], [220, 5, 1, "", "save_safetensors"], [221, 5, 1, "", "savez"], [222, 5, 1, "", "savez_compressed"], [223, 5, 1, "", "set_default_device"], [224, 5, 1, "", "set_default_stream"], [225, 5, 1, "", "sigmoid"], [226, 5, 1, "", "sign"], [227, 5, 1, "", "sin"], [228, 5, 1, "", "sinh"], [229, 5, 1, "", "softmax"], [230, 5, 1, "", "sort"], [231, 5, 1, "", "split"], [232, 5, 1, "", "sqrt"], [233, 5, 1, "", "square"], [234, 5, 1, "", "squeeze"], [235, 5, 1, "", "stack"], [236, 5, 1, "", "std"], [237, 5, 1, "", "stop_gradient"], [238, 5, 1, "", "stream"], [239, 5, 1, "", "subtract"], [240, 5, 1, "", "sum"], [241, 5, 1, "", "swapaxes"], [242, 5, 1, "", "synchronize"], [243, 5, 1, "", "take"], [244, 5, 1, "", "take_along_axis"], [245, 5, 1, "", "tan"], [246, 5, 1, "", "tanh"], [247, 5, 1, "", "tensordot"], [248, 5, 1, "", "tile"], [249, 5, 1, "", "topk"], [250, 5, 1, "", "transpose"], [251, 5, 1, "", "tri"], [252, 5, 1, "", "tril"], [253, 5, 1, "", "triu"], [254, 5, 1, "", "value_and_grad"], [255, 5, 1, "", "var"], [256, 5, 1, "", "vjp"], [257, 5, 1, "", "vmap"], [258, 5, 1, "", "where"], [259, 5, 1, "", "zeros"], [260, 5, 1, "", "zeros_like"]], "mlx.core.Device": [[8, 4, 1, "", "__init__"]], "mlx.core.Dtype": [[9, 4, 1, "", "__init__"]], "mlx.core.DtypeCategory": [[10, 4, 1, "", "__init__"]], "mlx.core.Stream": [[269, 4, 1, "", "__init__"]], "mlx.core.array": [[29, 6, 1, "", "T"], [28, 4, 1, "", "__init__"], [30, 4, 1, "", "abs"], [31, 4, 1, "", "all"], [32, 4, 1, "", "any"], [33, 4, 1, "", "argmax"], [34, 4, 1, "", "argmin"], [35, 4, 1, "", "astype"], [36, 6, 1, "", "at"], [37, 4, 1, "", "cos"], [38, 4, 1, "", "cummax"], [39, 4, 1, "", "cummin"], [40, 4, 1, "", "cumprod"], [41, 4, 1, "", "cumsum"], [42, 4, 1, "", "diag"], [43, 4, 1, "", "diagonal"], [44, 6, 1, "", "dtype"], [45, 4, 1, "", "exp"], [46, 4, 1, "", "flatten"], [47, 4, 1, "", "item"], [48, 6, 1, "", "itemsize"], [49, 4, 1, "", "log"], [50, 4, 1, "", "log10"], [51, 4, 1, "", "log1p"], [52, 4, 1, "", "log2"], [53, 4, 1, "", "logsumexp"], [54, 4, 1, "", "max"], [55, 4, 1, "", "mean"], [56, 4, 1, "", "min"], [57, 4, 1, "", "moveaxis"], [58, 6, 1, "", "nbytes"], [59, 6, 1, "", "ndim"], [60, 4, 1, "", "prod"], [61, 4, 1, "", "reciprocal"], [62, 4, 1, "", "reshape"], [63, 4, 1, "", "round"], [64, 4, 1, "", "rsqrt"], [65, 6, 1, "", "shape"], [66, 4, 1, "", "sin"], [67, 6, 1, "", "size"], [68, 4, 1, "", "split"], [69, 4, 1, "", "sqrt"], [70, 4, 1, "", "square"], [71, 4, 1, "", "squeeze"], [72, 4, 1, "", "sum"], [73, 4, 1, "", "swapaxes"], [74, 4, 1, "", "tolist"], [75, 4, 1, "", "transpose"], [76, 4, 1, "", "var"]], "mlx.core.fast": [[121, 5, 1, "", "layer_norm"], [122, 5, 1, "", "rms_norm"], [123, 5, 1, "", "rope"], [124, 5, 1, "", "scaled_dot_product_attention"]], "mlx.core.fft": [[125, 5, 1, "", "fft"], [126, 5, 1, "", "fft2"], [127, 5, 1, "", "fftn"], [128, 5, 1, "", "ifft"], [129, 5, 1, "", "ifft2"], [130, 5, 1, "", "ifftn"], [131, 5, 1, "", "irfft"], [132, 5, 1, "", "irfft2"], [133, 5, 1, "", "irfftn"], [134, 5, 1, "", "rfft"], [135, 5, 1, "", "rfft2"], [136, 5, 1, "", "rfftn"]], "mlx.core.linalg": [[156, 5, 1, "", "norm"], [157, 5, 1, "", "qr"]], "mlx.core.metal": [[174, 5, 1, "", "clear_cache"], [175, 5, 1, "", "device_info"], [176, 5, 1, "", "get_active_memory"], [177, 5, 1, "", "get_cache_memory"], [178, 5, 1, "", "get_peak_memory"], [179, 5, 1, "", "is_available"], [180, 5, 1, "", "reset_peak_memory"], [181, 5, 1, "", "set_cache_limit"], [182, 5, 1, "", "set_memory_limit"], [183, 5, 1, "", "start_capture"], [184, 5, 1, "", "stop_capture"]], "mlx.core.random": [[201, 5, 1, "", "bernoulli"], [202, 5, 1, "", "categorical"], [203, 5, 1, "", "gumbel"], [204, 5, 1, "", "key"], [205, 5, 1, "", "multivariate_normal"], [206, 5, 1, "", "normal"], [207, 5, 1, "", "randint"], [208, 5, 1, "", "seed"], [209, 5, 1, "", "split"], [210, 5, 1, "", "truncated_normal"], [211, 5, 1, "", "uniform"]], "mlx.nn": [[278, 3, 1, "", "ALiBi"], [279, 3, 1, "", "AvgPool1d"], [280, 3, 1, "", "AvgPool2d"], [281, 3, 1, "", "BatchNorm"], [282, 3, 1, "", "Conv1d"], [283, 3, 1, "", "Conv2d"], [284, 3, 1, "", "Dropout"], [285, 3, 1, "", "Dropout2d"], [286, 3, 1, "", "Dropout3d"], [287, 3, 1, "", "Embedding"], [288, 3, 1, "", "GELU"], [289, 3, 1, "", "GRU"], [290, 3, 1, "", "GroupNorm"], [291, 3, 1, "", "InstanceNorm"], [292, 3, 1, "", "LSTM"], [293, 3, 1, "", "LayerNorm"], [294, 3, 1, "", "Linear"], [295, 3, 1, "", "MaxPool1d"], [296, 3, 1, "", "MaxPool2d"], [297, 3, 1, "", "Mish"], [381, 3, 1, "", "Module"], [318, 3, 1, "", "MultiHeadAttention"], [319, 3, 1, "", "PReLU"], [320, 3, 1, "", "QuantizedEmbedding"], [321, 3, 1, "", "QuantizedLinear"], [322, 3, 1, "", "RMSNorm"], [323, 3, 1, "", "RNN"], [324, 3, 1, "", "ReLU"], [325, 3, 1, "", "RoPE"], [326, 3, 1, "", "SELU"], [327, 3, 1, "", "Sequential"], [328, 3, 1, "", "SiLU"], [329, 3, 1, "", "SinusoidalPositionalEncoding"], [330, 3, 1, "", "Softshrink"], [331, 3, 1, "", "Step"], [332, 3, 1, "", "Transformer"], [333, 3, 1, "", "Upsample"], [342, 3, 1, "", "elu"], [343, 3, 1, "", "gelu"], [344, 3, 1, "", "gelu_approx"], [345, 3, 1, "", "gelu_fast_approx"], [346, 3, 1, "", "glu"], [347, 3, 1, "", "hardswish"], [348, 3, 1, "", "leaky_relu"], [349, 3, 1, "", "log_sigmoid"], [350, 3, 1, "", "log_softmax"], [365, 3, 1, "", "mish"], [366, 3, 1, "", "prelu"], [261, 5, 1, "", "quantize"], [367, 3, 1, "", "relu"], [368, 3, 1, "", "relu6"], [369, 3, 1, "", "selu"], [370, 3, 1, "", "sigmoid"], [371, 3, 1, "", "silu"], [372, 3, 1, "", "softmax"], [373, 3, 1, "", "softplus"], [374, 3, 1, "", "softshrink"], [375, 3, 1, "", "step"], [376, 3, 1, "", "tanh"], [262, 5, 1, "", "value_and_grad"]], "mlx.nn.Module": [[298, 4, 1, "", "apply"], [299, 4, 1, "", "apply_to_modules"], [300, 4, 1, "", "children"], [301, 4, 1, "", "eval"], [302, 4, 1, "", "filter_and_map"], [303, 4, 1, "", "freeze"], [304, 4, 1, "", "leaf_modules"], [305, 4, 1, "", "load_weights"], [306, 4, 1, "", "modules"], [307, 4, 1, "", "named_modules"], [308, 4, 1, "", "parameters"], [309, 4, 1, "", "save_weights"], [310, 4, 1, "", "set_dtype"], [311, 6, 1, "", "state"], [312, 4, 1, "", "train"], [313, 4, 1, "", "trainable_parameters"], [314, 6, 1, "", "training"], [315, 4, 1, "", "unfreeze"], [316, 4, 1, "", "update"], [317, 4, 1, "", "update_modules"]], "mlx.nn.init": [[334, 5, 1, "", "constant"], [335, 5, 1, "", "glorot_normal"], [336, 5, 1, "", "glorot_uniform"], [337, 5, 1, "", "he_normal"], [338, 5, 1, "", "he_uniform"], [339, 5, 1, "", "identity"], [340, 5, 1, "", "normal"], [341, 5, 1, "", "uniform"]], "mlx.nn.losses": [[351, 3, 1, "", "binary_cross_entropy"], [352, 3, 1, "", "cosine_similarity_loss"], [353, 3, 1, "", "cross_entropy"], [354, 3, 1, "", "gaussian_nll_loss"], [355, 3, 1, "", "hinge_loss"], [356, 3, 1, "", "huber_loss"], [357, 3, 1, "", "kl_div_loss"], [358, 3, 1, "", "l1_loss"], [359, 3, 1, "", "log_cosh_loss"], [360, 3, 1, "", "margin_ranking_loss"], [361, 3, 1, "", "mse_loss"], [362, 3, 1, "", "nll_loss"], [363, 3, 1, "", "smooth_l1_loss"], [364, 3, 1, "", "triplet_loss"]], "mlx.optimizers": [[384, 3, 1, "", "AdaDelta"], [385, 3, 1, "", "Adafactor"], [386, 3, 1, "", "Adagrad"], [387, 3, 1, "", "Adam"], [388, 3, 1, "", "AdamW"], [389, 3, 1, "", "Adamax"], [390, 3, 1, "", "Lion"], [403, 3, 1, "", "Optimizer"], [395, 3, 1, "", "RMSprop"], [396, 3, 1, "", "SGD"], [263, 5, 1, "", "clip_grad_norm"], [397, 5, 1, "", "cosine_decay"], [398, 5, 1, "", "exponential_decay"], [399, 5, 1, "", "join_schedules"], [400, 5, 1, "", "linear_schedule"], [401, 5, 1, "", "step_decay"]], "mlx.optimizers.Optimizer": [[391, 4, 1, "", "apply_gradients"], [392, 4, 1, "", "init"], [393, 6, 1, "", "state"], [394, 4, 1, "", "update"]], "mlx.utils": [[264, 5, 1, "", "tree_flatten"], [265, 5, 1, "", "tree_map"], [266, 5, 1, "", "tree_map_with_path"], [267, 5, 1, "", "tree_reduce"], [268, 5, 1, "", "tree_unflatten"]]}, "objtypes": {"0": "cpp:function", "1": "cpp:functionParam", "2": "cpp:templateParam", "3": "py:class", "4": "py:method", "5": "py:function", "6": "py:property"}, "objnames": {"0": ["cpp", "function", "C++ function"], "1": ["cpp", "functionParam", "C++ function parameter"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "titleterms": {"oper": [0, 1, 382], "develop": 1, "document": 1, "introduc": 1, "exampl": [1, 6, 408, 415], "primit": 1, "us": [1, 411, 416], "implement": [1, 4], "cpu": 1, "back": 1, "end": 1, "gpu": 1, "transform": [1, 332, 406, 408, 409, 411, 413], "build": [1, 7], "bind": 1, "python": [1, 6, 7], "cmake": 1, "setuptool": 1, "usag": [1, 6], "result": 1, "script": [1, 4], "download": [1, 4], "code": [1, 4], "metal": [2, 7, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 276], "debugg": 2, "xcode": 2, "workflow": 2, "linear": [3, 275, 294], "regress": 3, "llm": 4, "infer": 4, "model": 4, "attent": 4, "layer": [4, 5, 379], "encod": 4, "full": [4, 140], "gener": 4, "put": 4, "all": [4, 13, 31], "togeth": 4, "convert": 4, "weight": 4, "load": [4, 159, 414], "benchmark": 4, "multi": 5, "perceptron": 5, "mlx": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401], "instal": [6, 7], "api": [6, 7], "refer": 6, "c": [6, 7], "further": 6, "read": 6, "troubleshoot": 7, "from": [7, 410], "sourc": 7, "requir": 7, "option": 7, "found": 7, "x86": 7, "shell": 7, "core": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 269], "devic": [8, 272], "dtype": [9, 44], "dtypecategori": 10, "ab": [11, 30], "add": 12, "allclos": 14, "ani": [15, 32], "arang": 16, "arcco": 17, "arccosh": 18, "arcsin": 19, "arcsinh": 20, "arctan": 21, "arctanh": 23, "argmax": [24, 33], "argmin": [25, 34], "argpartit": 26, "argsort": 27, "arrai": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 270, 410, 414], "t": 29, "astyp": 35, "co": [37, 97], "cummax": [38, 99], "cummin": [39, 100], "cumprod": [40, 101], "cumsum": [41, 102], "diag": [42, 107], "diagon": [43, 108], "exp": [45, 117], "flatten": [46, 137], "item": 47, "items": 48, "log": [49, 160], "log10": [50, 161], "log1p": [51, 162], "log2": [52, 163], "logsumexp": [53, 168], "max": [54, 170], "mean": [55, 172], "min": [56, 185], "moveaxi": [57, 187], "nbyte": 58, "ndim": 59, "prod": [60, 197], "reciproc": [61, 212], "reshap": [62, 214], "round": [63, 216], "rsqrt": [64, 217], "shape": 65, "sin": [66, 227], "size": 67, "split": [68, 209, 231], "sqrt": [69, 232], "squar": [70, 233], "squeez": [71, 234], "sum": [72, 240], "swapax": [73, 241], "tolist": 74, "transpos": [75, 250], "var": [76, 255], "array_equ": 77, "atleast_1d": 78, "atleast_2d": 79, "atleast_3d": 80, "block_masked_mm": 84, "broadcast_to": 86, "ceil": 87, "clip": 88, "compil": [89, 408], "concaten": 90, "conv1d": [93, 282], "conv2d": [94, 283], "conv_gener": 95, "convolv": 96, "cosh": 98, "default_devic": 103, "default_stream": 104, "degre": 105, "dequant": 106, "disable_compil": 109, "divid": 110, "divmod": 111, "enable_compil": 112, "equal": 113, "erf": 114, "erfinv": 115, "eval": [116, 301], "expand_dim": 118, "expm1": 119, "ey": 120, "fast": [121, 122, 123, 124, 273], "layer_norm": 121, "rms_norm": 122, "rope": [123, 325], "scaled_dot_product_attent": 124, "fft": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 274], "fft2": 126, "fftn": 127, "ifft": 128, "ifft2": 129, "ifftn": 130, "irfft": 131, "irfft2": 132, "irfftn": 133, "rfft": 134, "rfft2": 135, "rfftn": 136, "floor": 138, "floor_divid": 139, "grad": [141, 277], "greater": 142, "greater_equ": 143, "ident": [144, 339], "inner": 145, "isclos": 146, "isinf": 147, "isnan": 148, "isneginf": 149, "isposinf": 150, "issubdtyp": 151, "jvp": 152, "less": 154, "less_equ": 155, "linalg": [156, 157], "norm": 156, "qr": 157, "linspac": 158, "logaddexp": 164, "logical_and": 165, "logical_not": 166, "logical_or": 167, "matmul": 169, "maximum": 171, "meshgrid": 173, "clear_cach": 174, "get_active_memori": 176, "get_cache_memori": 177, "get_peak_memori": 178, "is_avail": 179, "set_cache_limit": 181, "set_memory_limit": 182, "start_captur": 183, "stop_captur": 184, "minimum": 186, "multipli": 188, "neg": 189, "new_stream": 190, "not_equ": 191, "ones": 192, "ones_lik": 193, "outer": 194, "pad": 195, "partit": 196, "quantiz": [198, 261], "quantized_matmul": 199, "radian": 200, "random": [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 405], "bernoulli": 201, "categor": 202, "gumbel": 203, "kei": 204, "multivariate_norm": 205, "normal": [206, 340], "randint": 207, "seed": 208, "truncated_norm": 210, "uniform": [211, 341], "repeat": 213, "save": [218, 414], "save_gguf": 219, "save_safetensor": 220, "savez": 221, "savez_compress": 222, "set_default_devic": 223, "set_default_stream": 224, "sigmoid": [225, 370], "sign": 226, "sinh": 228, "softmax": [229, 372], "sort": 230, "stack": 235, "std": 236, "stop_gradi": 237, "stream": [238, 269, 272, 416], "subtract": 239, "synchron": 242, "take": 243, "take_along_axi": 244, "tan": 245, "tanh": [246, 376], "tensordot": 247, "tile": 248, "topk": 249, "tri": 251, "tril": 252, "triu": 253, "value_and_grad": [254, 262], "vjp": 256, "vmap": 257, "where": 258, "zero": 259, "zeros_lik": 260, "nn": [261, 262, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], "util": [264, 265, 266, 267, 268, 407], "tree_flatten": 264, "tree_map": 265, "tree_map_with_path": 266, "tree_unflatten": 268, "data": 271, "type": 271, "support": 271, "algebra": 275, "neural": 277, "network": 277, "quick": [277, 413], "start": [277, 413], "The": 277, "modul": [277, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 381], "class": 277, "paramet": [277, 308], "updat": [277, 316, 394, 410], "inspect": 277, "valu": 277, "alibi": 278, "avgpool1d": 279, "avgpool2d": 280, "batchnorm": 281, "dropout": 284, "dropout2d": 285, "dropout3d": 286, "embed": 287, "gelu": [288, 343], "gru": 289, "groupnorm": 290, "instancenorm": 291, "lstm": 292, "layernorm": 293, "maxpool1d": 295, "maxpool2d": 296, "mish": [297, 365], "appli": 298, "apply_to_modul": 299, "children": 300, "filter_and_map": 302, "freez": 303, "leaf_modul": 304, "load_weight": 305, "named_modul": 307, "save_weight": 309, "set_dtyp": 310, "state": [311, 393], "train": [312, 314, 408], "trainable_paramet": 313, "unfreez": 315, "update_modul": 317, "multiheadattent": 318, "prelu": [319, 366], "quantizedembed": 320, "quantizedlinear": 321, "rmsnorm": 322, "rnn": 323, "relu": [324, 367], "selu": [326, 369], "sequenti": 327, "silu": [328, 371], "sinusoidalpositionalencod": 329, "softshrink": [330, 374], "step": [331, 375], "upsampl": 333, "init": [334, 335, 336, 337, 338, 339, 340, 341, 392], "constant": 334, "glorot_norm": 335, "glorot_uniform": 336, "he_norm": 337, "he_uniform": 338, "elu": 342, "gelu_approx": 344, "gelu_fast_approx": 345, "glu": 346, "hardswish": 347, "leaky_relu": 348, "log_sigmoid": 349, "log_softmax": 350, "loss": [351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 380], "binary_cross_entropi": 351, "cosine_similarity_loss": 352, "cross_entropi": 353, "gaussian_nll_loss": 354, "hinge_loss": 355, "huber_loss": 356, "kl_div_loss": 357, "l1_loss": 358, "log_cosh_loss": 359, "margin_ranking_loss": 360, "mse_loss": 361, "nll_loss": 362, "smooth_l1_loss": 363, "triplet_loss": 364, "relu6": 368, "softplu": 373, "function": [377, 380, 408, 409, 413], "initi": 378, "optim": [263, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403], "adadelta": 384, "adafactor": 385, "adagrad": 386, "adam": 387, "adamw": 388, "adamax": 389, "lion": 390, "apply_gradi": 391, "rmsprop": 395, "sgd": 396, "cosine_decai": 397, "exponential_decai": 398, "join_schedul": 399, "linear_schedul": 400, "step_decai": 401, "common": 402, "schedul": 404, "tree": 407, "basic": [408, 413], "speedup": 408, "debug": 408, "pure": 408, "graph": [408, 411, 413], "automat": 409, "differenti": 409, "vector": 409, "index": 410, "differ": 410, "numpi": [410, 412], "In": 410, "place": 410, "lazi": 411, "evalu": 411, "why": 411, "comput": 411, "onli": 411, "what": 411, "you": 411, "when": 411, "convers": 412, "other": 412, "framework": 412, "pytorch": 412, "jax": 412, "tensorflow": 412, "guid": 413, "serial": 414, "format": 414, "unifi": 415, "memori": 415, "A": 415, "simpl": 415, "specifi": 416, "arctan2": 22, "bitwise_and": 81, "bitwise_or": 82, "bitwise_xor": 83, "block_sparse_mm": 85, "conj": 91, "conjug": 92, "left_shift": 153, "device_info": 175, "reset_peak_memori": 180, "right_shift": 215, "clip_grad_norm": 263, "tree_reduc": 267}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Operations": [[0, "operations"], [1, "operations"], [382, "operations"]], "Developer Documentation": [[1, "developer-documentation"]], "Introducing the Example": [[1, "introducing-the-example"]], "Operations and Primitives": [[1, "operations-and-primitives"]], "Primitives": [[1, "primitives"]], "Using the Primitive": [[1, "using-the-primitive"]], "Implementing the Primitive": [[1, "implementing-the-primitive"]], "Implementing the CPU Back-end": [[1, "implementing-the-cpu-back-end"]], "Implementing the GPU Back-end": [[1, "implementing-the-gpu-back-end"]], "Primitive Transforms": [[1, "primitive-transforms"]], "Building and Binding": [[1, "building-and-binding"]], "Binding to Python": [[1, "binding-to-python"]], "Building with CMake": [[1, "building-with-cmake"]], "Building with setuptools": [[1, "building-with-setuptools"]], "Usage": [[1, "usage"], [6, null]], "Results": [[1, "results"]], "Scripts": [[1, "scripts"], [4, "scripts"]], "Download the code": [[1, null], [4, null]], "Metal Debugger": [[2, "metal-debugger"]], "Xcode Workflow": [[2, "xcode-workflow"]], "Linear Regression": [[3, "linear-regression"]], "LLM inference": [[4, "llm-inference"]], "Implementing the model": [[4, "implementing-the-model"]], "Attention layer": [[4, "attention-layer"]], "Encoder layer": [[4, "encoder-layer"]], "Full model": [[4, "full-model"]], "Generation": [[4, "generation"]], "Putting it all together": [[4, "putting-it-all-together"]], "Converting the weights": [[4, "converting-the-weights"]], "Weight loading and benchmarking": [[4, "weight-loading-and-benchmarking"]], "Multi-Layer Perceptron": [[5, "multi-layer-perceptron"]], "MLX": [[6, "mlx"]], "Install": [[6, null]], "Examples": [[6, null]], "Python API Reference": [[6, null]], "C++ API Reference": [[6, null]], "Further Reading": [[6, null]], "Build and Install": [[7, "build-and-install"]], "Python Installation": [[7, "python-installation"]], "Troubleshooting": [[7, "troubleshooting"], [7, "id2"]], "Build from source": [[7, "build-from-source"]], "Build Requirements": [[7, "build-requirements"]], "Python API": [[7, "python-api"]], "C++ API": [[7, "c-api"]], "Build Options": [[7, "id3"]], "Metal not found": [[7, "metal-not-found"]], "x86 Shell": [[7, "x86-shell"]], "mlx.core.Device": [[8, "mlx-core-device"]], "mlx.core.Dtype": [[9, "mlx-core-dtype"]], "mlx.core.DtypeCategory": [[10, "mlx-core-dtypecategory"]], "mlx.core.abs": [[11, "mlx-core-abs"]], "mlx.core.add": [[12, "mlx-core-add"]], "mlx.core.all": [[13, "mlx-core-all"]], "mlx.core.allclose": [[14, "mlx-core-allclose"]], "mlx.core.any": [[15, "mlx-core-any"]], "mlx.core.arange": [[16, "mlx-core-arange"]], "mlx.core.arccos": [[17, "mlx-core-arccos"]], "mlx.core.arccosh": [[18, "mlx-core-arccosh"]], "mlx.core.arcsin": [[19, "mlx-core-arcsin"]], "mlx.core.arcsinh": [[20, "mlx-core-arcsinh"]], "mlx.core.arctan": [[21, "mlx-core-arctan"]], "mlx.core.arctan2": [[22, "mlx-core-arctan2"]], "mlx.core.arctanh": [[23, "mlx-core-arctanh"]], "mlx.core.argmax": [[24, "mlx-core-argmax"]], "mlx.core.argmin": [[25, "mlx-core-argmin"]], "mlx.core.argpartition": [[26, "mlx-core-argpartition"]], "mlx.core.argsort": [[27, "mlx-core-argsort"]], "mlx.core.array": [[28, "mlx-core-array"]], "mlx.core.array.T": [[29, "mlx-core-array-t"]], "mlx.core.array.abs": [[30, "mlx-core-array-abs"]], "mlx.core.array.all": [[31, "mlx-core-array-all"]], "mlx.core.array.any": [[32, "mlx-core-array-any"]], "mlx.core.array.argmax": [[33, "mlx-core-array-argmax"]], "mlx.core.array.argmin": [[34, "mlx-core-array-argmin"]], "mlx.core.array.astype": [[35, "mlx-core-array-astype"]], "mlx.core.array.at": [[36, "mlx-core-array-at"]], "mlx.core.array.cos": [[37, "mlx-core-array-cos"]], "mlx.core.array.cummax": [[38, "mlx-core-array-cummax"]], "mlx.core.array.cummin": [[39, "mlx-core-array-cummin"]], "mlx.core.array.cumprod": [[40, "mlx-core-array-cumprod"]], "mlx.core.array.cumsum": [[41, "mlx-core-array-cumsum"]], "mlx.core.array.diag": [[42, "mlx-core-array-diag"]], "mlx.core.array.diagonal": [[43, "mlx-core-array-diagonal"]], "mlx.core.array.dtype": [[44, "mlx-core-array-dtype"]], "mlx.core.array.exp": [[45, "mlx-core-array-exp"]], "mlx.core.array.flatten": [[46, "mlx-core-array-flatten"]], "mlx.core.array.item": [[47, "mlx-core-array-item"]], "mlx.core.array.itemsize": [[48, "mlx-core-array-itemsize"]], "mlx.core.array.log": [[49, "mlx-core-array-log"]], "mlx.core.array.log10": [[50, "mlx-core-array-log10"]], "mlx.core.array.log1p": [[51, "mlx-core-array-log1p"]], "mlx.core.array.log2": [[52, "mlx-core-array-log2"]], "mlx.core.array.logsumexp": [[53, "mlx-core-array-logsumexp"]], "mlx.core.array.max": [[54, "mlx-core-array-max"]], "mlx.core.array.mean": [[55, "mlx-core-array-mean"]], "mlx.core.array.min": [[56, "mlx-core-array-min"]], "mlx.core.array.moveaxis": [[57, "mlx-core-array-moveaxis"]], "mlx.core.array.nbytes": [[58, "mlx-core-array-nbytes"]], "mlx.core.array.ndim": [[59, "mlx-core-array-ndim"]], "mlx.core.array.prod": [[60, "mlx-core-array-prod"]], "mlx.core.array.reciprocal": [[61, "mlx-core-array-reciprocal"]], "mlx.core.array.reshape": [[62, "mlx-core-array-reshape"]], "mlx.core.array.round": [[63, "mlx-core-array-round"]], "mlx.core.array.rsqrt": [[64, "mlx-core-array-rsqrt"]], "mlx.core.array.shape": [[65, "mlx-core-array-shape"]], "mlx.core.array.sin": [[66, "mlx-core-array-sin"]], "mlx.core.array.size": [[67, "mlx-core-array-size"]], "mlx.core.array.split": [[68, "mlx-core-array-split"]], "mlx.core.array.sqrt": [[69, "mlx-core-array-sqrt"]], "mlx.core.array.square": [[70, "mlx-core-array-square"]], "mlx.core.array.squeeze": [[71, "mlx-core-array-squeeze"]], "mlx.core.array.sum": [[72, "mlx-core-array-sum"]], "mlx.core.array.swapaxes": [[73, "mlx-core-array-swapaxes"]], "mlx.core.array.tolist": [[74, "mlx-core-array-tolist"]], "mlx.core.array.transpose": [[75, "mlx-core-array-transpose"]], "mlx.core.array.var": [[76, "mlx-core-array-var"]], "mlx.core.array_equal": [[77, "mlx-core-array-equal"]], "mlx.core.atleast_1d": [[78, "mlx-core-atleast-1d"]], "mlx.core.atleast_2d": [[79, "mlx-core-atleast-2d"]], "mlx.core.atleast_3d": [[80, "mlx-core-atleast-3d"]], "mlx.core.bitwise_and": [[81, "mlx-core-bitwise-and"]], "mlx.core.bitwise_or": [[82, "mlx-core-bitwise-or"]], "mlx.core.bitwise_xor": [[83, "mlx-core-bitwise-xor"]], "mlx.core.block_masked_mm": [[84, "mlx-core-block-masked-mm"]], "mlx.core.block_sparse_mm": [[85, "mlx-core-block-sparse-mm"]], "mlx.core.broadcast_to": [[86, "mlx-core-broadcast-to"]], "mlx.core.ceil": [[87, "mlx-core-ceil"]], "mlx.core.clip": [[88, "mlx-core-clip"]], "mlx.core.compile": [[89, "mlx-core-compile"]], "mlx.core.concatenate": [[90, "mlx-core-concatenate"]], "mlx.core.conj": [[91, "mlx-core-conj"]], "mlx.core.conjugate": [[92, "mlx-core-conjugate"]], "mlx.core.conv1d": [[93, "mlx-core-conv1d"]], "mlx.core.conv2d": [[94, "mlx-core-conv2d"]], "mlx.core.conv_general": [[95, "mlx-core-conv-general"]], "mlx.core.convolve": [[96, "mlx-core-convolve"]], "mlx.core.cos": [[97, "mlx-core-cos"]], "mlx.core.cosh": [[98, "mlx-core-cosh"]], "mlx.core.cummax": [[99, "mlx-core-cummax"]], "mlx.core.cummin": [[100, "mlx-core-cummin"]], "mlx.core.cumprod": [[101, "mlx-core-cumprod"]], "mlx.core.cumsum": [[102, "mlx-core-cumsum"]], "mlx.core.default_device": [[103, "mlx-core-default-device"]], "mlx.core.default_stream": [[104, "mlx-core-default-stream"]], "mlx.core.degrees": [[105, "mlx-core-degrees"]], "mlx.core.dequantize": [[106, "mlx-core-dequantize"]], "mlx.core.diag": [[107, "mlx-core-diag"]], "mlx.core.diagonal": [[108, "mlx-core-diagonal"]], "mlx.core.disable_compile": [[109, "mlx-core-disable-compile"]], "mlx.core.divide": [[110, "mlx-core-divide"]], "mlx.core.divmod": [[111, "mlx-core-divmod"]], "mlx.core.enable_compile": [[112, "mlx-core-enable-compile"]], "mlx.core.equal": [[113, "mlx-core-equal"]], "mlx.core.erf": [[114, "mlx-core-erf"]], "mlx.core.erfinv": [[115, "mlx-core-erfinv"]], "mlx.core.eval": [[116, "mlx-core-eval"]], "mlx.core.exp": [[117, "mlx-core-exp"]], "mlx.core.expand_dims": [[118, "mlx-core-expand-dims"]], "mlx.core.expm1": [[119, "mlx-core-expm1"]], "mlx.core.eye": [[120, "mlx-core-eye"]], "mlx.core.fast.layer_norm": [[121, "mlx-core-fast-layer-norm"]], "mlx.core.fast.rms_norm": [[122, "mlx-core-fast-rms-norm"]], "mlx.core.fast.rope": [[123, "mlx-core-fast-rope"]], "mlx.core.fast.scaled_dot_product_attention": [[124, "mlx-core-fast-scaled-dot-product-attention"]], "mlx.core.fft.fft": [[125, "mlx-core-fft-fft"]], "mlx.core.fft.fft2": [[126, "mlx-core-fft-fft2"]], "mlx.core.fft.fftn": [[127, "mlx-core-fft-fftn"]], "mlx.core.fft.ifft": [[128, "mlx-core-fft-ifft"]], "mlx.core.fft.ifft2": [[129, "mlx-core-fft-ifft2"]], "mlx.core.fft.ifftn": [[130, "mlx-core-fft-ifftn"]], "mlx.core.fft.irfft": [[131, "mlx-core-fft-irfft"]], "mlx.core.fft.irfft2": [[132, "mlx-core-fft-irfft2"]], "mlx.core.fft.irfftn": [[133, "mlx-core-fft-irfftn"]], "mlx.core.fft.rfft": [[134, "mlx-core-fft-rfft"]], "mlx.core.fft.rfft2": [[135, "mlx-core-fft-rfft2"]], "mlx.core.fft.rfftn": [[136, "mlx-core-fft-rfftn"]], "mlx.core.flatten": [[137, "mlx-core-flatten"]], "mlx.core.floor": [[138, "mlx-core-floor"]], "mlx.core.floor_divide": [[139, "mlx-core-floor-divide"]], "mlx.core.full": [[140, "mlx-core-full"]], "mlx.core.grad": [[141, "mlx-core-grad"]], "mlx.core.greater": [[142, "mlx-core-greater"]], "mlx.core.greater_equal": [[143, "mlx-core-greater-equal"]], "mlx.core.identity": [[144, "mlx-core-identity"]], "mlx.core.inner": [[145, "mlx-core-inner"]], "mlx.core.isclose": [[146, "mlx-core-isclose"]], "mlx.core.isinf": [[147, "mlx-core-isinf"]], "mlx.core.isnan": [[148, "mlx-core-isnan"]], "mlx.core.isneginf": [[149, "mlx-core-isneginf"]], "mlx.core.isposinf": [[150, "mlx-core-isposinf"]], "mlx.core.issubdtype": [[151, "mlx-core-issubdtype"]], "mlx.core.jvp": [[152, "mlx-core-jvp"]], "mlx.core.left_shift": [[153, "mlx-core-left-shift"]], "mlx.core.less": [[154, "mlx-core-less"]], "mlx.core.less_equal": [[155, "mlx-core-less-equal"]], "mlx.core.linalg.norm": [[156, "mlx-core-linalg-norm"]], "mlx.core.linalg.qr": [[157, "mlx-core-linalg-qr"]], "mlx.core.linspace": [[158, "mlx-core-linspace"]], "mlx.core.load": [[159, "mlx-core-load"]], "mlx.core.log": [[160, "mlx-core-log"]], "mlx.core.log10": [[161, "mlx-core-log10"]], "mlx.core.log1p": [[162, "mlx-core-log1p"]], "mlx.core.log2": [[163, "mlx-core-log2"]], "mlx.core.logaddexp": [[164, "mlx-core-logaddexp"]], "mlx.core.logical_and": [[165, "mlx-core-logical-and"]], "mlx.core.logical_not": [[166, "mlx-core-logical-not"]], "mlx.core.logical_or": [[167, "mlx-core-logical-or"]], "mlx.core.logsumexp": [[168, "mlx-core-logsumexp"]], "mlx.core.matmul": [[169, "mlx-core-matmul"]], "mlx.core.max": [[170, "mlx-core-max"]], "mlx.core.maximum": [[171, "mlx-core-maximum"]], "mlx.core.mean": [[172, "mlx-core-mean"]], "mlx.core.meshgrid": [[173, "mlx-core-meshgrid"]], "mlx.core.metal.clear_cache": [[174, "mlx-core-metal-clear-cache"]], "mlx.core.metal.device_info": [[175, "mlx-core-metal-device-info"]], "mlx.core.metal.get_active_memory": [[176, "mlx-core-metal-get-active-memory"]], "mlx.core.metal.get_cache_memory": [[177, "mlx-core-metal-get-cache-memory"]], "mlx.core.metal.get_peak_memory": [[178, "mlx-core-metal-get-peak-memory"]], "mlx.core.metal.is_available": [[179, "mlx-core-metal-is-available"]], "mlx.core.metal.reset_peak_memory": [[180, "mlx-core-metal-reset-peak-memory"]], "mlx.core.metal.set_cache_limit": [[181, "mlx-core-metal-set-cache-limit"]], "mlx.core.metal.set_memory_limit": [[182, "mlx-core-metal-set-memory-limit"]], "mlx.core.metal.start_capture": [[183, "mlx-core-metal-start-capture"]], "mlx.core.metal.stop_capture": [[184, "mlx-core-metal-stop-capture"]], "mlx.core.min": [[185, "mlx-core-min"]], "mlx.core.minimum": [[186, "mlx-core-minimum"]], "mlx.core.moveaxis": [[187, "mlx-core-moveaxis"]], "mlx.core.multiply": [[188, "mlx-core-multiply"]], "mlx.core.negative": [[189, "mlx-core-negative"]], "mlx.core.new_stream": [[190, "mlx-core-new-stream"]], "mlx.core.not_equal": [[191, "mlx-core-not-equal"]], "mlx.core.ones": [[192, "mlx-core-ones"]], "mlx.core.ones_like": [[193, "mlx-core-ones-like"]], "mlx.core.outer": [[194, "mlx-core-outer"]], "mlx.core.pad": [[195, "mlx-core-pad"]], "mlx.core.partition": [[196, "mlx-core-partition"]], "mlx.core.prod": [[197, "mlx-core-prod"]], "mlx.core.quantize": [[198, "mlx-core-quantize"]], "mlx.core.quantized_matmul": [[199, "mlx-core-quantized-matmul"]], "mlx.core.radians": [[200, "mlx-core-radians"]], "mlx.core.random.bernoulli": [[201, "mlx-core-random-bernoulli"]], "mlx.core.random.categorical": [[202, "mlx-core-random-categorical"]], "mlx.core.random.gumbel": [[203, "mlx-core-random-gumbel"]], "mlx.core.random.key": [[204, "mlx-core-random-key"]], "mlx.core.random.multivariate_normal": [[205, "mlx-core-random-multivariate-normal"]], "mlx.core.random.normal": [[206, "mlx-core-random-normal"]], "mlx.core.random.randint": [[207, "mlx-core-random-randint"]], "mlx.core.random.seed": [[208, "mlx-core-random-seed"]], "mlx.core.random.split": [[209, "mlx-core-random-split"]], "mlx.core.random.truncated_normal": [[210, "mlx-core-random-truncated-normal"]], "mlx.core.random.uniform": [[211, "mlx-core-random-uniform"]], "mlx.core.reciprocal": [[212, "mlx-core-reciprocal"]], "mlx.core.repeat": [[213, "mlx-core-repeat"]], "mlx.core.reshape": [[214, "mlx-core-reshape"]], "mlx.core.right_shift": [[215, "mlx-core-right-shift"]], "mlx.core.round": [[216, "mlx-core-round"]], "mlx.core.rsqrt": [[217, "mlx-core-rsqrt"]], "mlx.core.save": [[218, "mlx-core-save"]], "mlx.core.save_gguf": [[219, "mlx-core-save-gguf"]], "mlx.core.save_safetensors": [[220, "mlx-core-save-safetensors"]], "mlx.core.savez": [[221, "mlx-core-savez"]], "mlx.core.savez_compressed": [[222, "mlx-core-savez-compressed"]], "mlx.core.set_default_device": [[223, "mlx-core-set-default-device"]], "mlx.core.set_default_stream": [[224, "mlx-core-set-default-stream"]], "mlx.core.sigmoid": [[225, "mlx-core-sigmoid"]], "mlx.core.sign": [[226, "mlx-core-sign"]], "mlx.core.sin": [[227, "mlx-core-sin"]], "mlx.core.sinh": [[228, "mlx-core-sinh"]], "mlx.core.softmax": [[229, "mlx-core-softmax"]], "mlx.core.sort": [[230, "mlx-core-sort"]], "mlx.core.split": [[231, "mlx-core-split"]], "mlx.core.sqrt": [[232, "mlx-core-sqrt"]], "mlx.core.square": [[233, "mlx-core-square"]], "mlx.core.squeeze": [[234, "mlx-core-squeeze"]], "mlx.core.stack": [[235, "mlx-core-stack"]], "mlx.core.std": [[236, "mlx-core-std"]], "mlx.core.stop_gradient": [[237, "mlx-core-stop-gradient"]], "mlx.core.stream": [[238, "mlx-core-stream"]], "mlx.core.subtract": [[239, "mlx-core-subtract"]], "mlx.core.sum": [[240, "mlx-core-sum"]], "mlx.core.swapaxes": [[241, "mlx-core-swapaxes"]], "mlx.core.synchronize": [[242, "mlx-core-synchronize"]], "mlx.core.take": [[243, "mlx-core-take"]], "mlx.core.take_along_axis": [[244, "mlx-core-take-along-axis"]], "mlx.core.tan": [[245, "mlx-core-tan"]], "mlx.core.tanh": [[246, "mlx-core-tanh"]], "mlx.core.tensordot": [[247, "mlx-core-tensordot"]], "mlx.core.tile": [[248, "mlx-core-tile"]], "mlx.core.topk": [[249, "mlx-core-topk"]], "mlx.core.transpose": [[250, "mlx-core-transpose"]], "mlx.core.tri": [[251, "mlx-core-tri"]], "mlx.core.tril": [[252, "mlx-core-tril"]], "mlx.core.triu": [[253, "mlx-core-triu"]], "mlx.core.value_and_grad": [[254, "mlx-core-value-and-grad"]], "mlx.core.var": [[255, "mlx-core-var"]], "mlx.core.vjp": [[256, "mlx-core-vjp"]], "mlx.core.vmap": [[257, "mlx-core-vmap"]], "mlx.core.where": [[258, "mlx-core-where"]], "mlx.core.zeros": [[259, "mlx-core-zeros"]], "mlx.core.zeros_like": [[260, "mlx-core-zeros-like"]], "mlx.nn.quantize": [[261, "mlx-nn-quantize"]], "mlx.nn.value_and_grad": [[262, "mlx-nn-value-and-grad"]], "mlx.optimizers.clip_grad_norm": [[263, "mlx-optimizers-clip-grad-norm"]], "mlx.utils.tree_flatten": [[264, "mlx-utils-tree-flatten"]], "mlx.utils.tree_map": [[265, "mlx-utils-tree-map"]], "mlx.utils.tree_map_with_path": [[266, "mlx-utils-tree-map-with-path"]], "mlx.utils.tree_reduce": [[267, "mlx-utils-tree-reduce"]], "mlx.utils.tree_unflatten": [[268, "mlx-utils-tree-unflatten"]], "mlx.core.Stream": [[269, "mlx-core-stream"]], "Array": [[270, "array"]], "Data Types": [[271, "data-types"]], "Supported Data Types": [[271, "id2"]], "Devices and Streams": [[272, "devices-and-streams"]], "Fast": [[273, "fast"]], "FFT": [[274, "fft"]], "Linear Algebra": [[275, "linear-algebra"]], "Metal": [[276, "metal"]], "Neural Networks": [[277, "neural-networks"]], "Quick Start with Neural Networks": [[277, "quick-start-with-neural-networks"]], "The Module Class": [[277, "the-module-class"]], "Parameters": [[277, "parameters"]], "Updating the Parameters": [[277, "updating-the-parameters"]], "Inspecting Modules": [[277, "inspecting-modules"]], "Value and Grad": [[277, "value-and-grad"]], "mlx.nn.ALiBi": [[278, "mlx-nn-alibi"]], "mlx.nn.AvgPool1d": [[279, "mlx-nn-avgpool1d"]], "mlx.nn.AvgPool2d": [[280, "mlx-nn-avgpool2d"]], "mlx.nn.BatchNorm": [[281, "mlx-nn-batchnorm"]], "mlx.nn.Conv1d": [[282, "mlx-nn-conv1d"]], "mlx.nn.Conv2d": [[283, "mlx-nn-conv2d"]], "mlx.nn.Dropout": [[284, "mlx-nn-dropout"]], "mlx.nn.Dropout2d": [[285, "mlx-nn-dropout2d"]], "mlx.nn.Dropout3d": [[286, "mlx-nn-dropout3d"]], "mlx.nn.Embedding": [[287, "mlx-nn-embedding"]], "mlx.nn.GELU": [[288, "mlx-nn-gelu"]], "mlx.nn.GRU": [[289, "mlx-nn-gru"]], "mlx.nn.GroupNorm": [[290, "mlx-nn-groupnorm"]], "mlx.nn.InstanceNorm": [[291, "mlx-nn-instancenorm"]], "mlx.nn.LSTM": [[292, "mlx-nn-lstm"]], "mlx.nn.LayerNorm": [[293, "mlx-nn-layernorm"]], "mlx.nn.Linear": [[294, "mlx-nn-linear"]], "mlx.nn.MaxPool1d": [[295, "mlx-nn-maxpool1d"]], "mlx.nn.MaxPool2d": [[296, "mlx-nn-maxpool2d"]], "mlx.nn.Mish": [[297, "mlx-nn-mish"]], "mlx.nn.Module.apply": [[298, "mlx-nn-module-apply"]], "mlx.nn.Module.apply_to_modules": [[299, "mlx-nn-module-apply-to-modules"]], "mlx.nn.Module.children": [[300, "mlx-nn-module-children"]], "mlx.nn.Module.eval": [[301, "mlx-nn-module-eval"]], "mlx.nn.Module.filter_and_map": [[302, "mlx-nn-module-filter-and-map"]], "mlx.nn.Module.freeze": [[303, "mlx-nn-module-freeze"]], "mlx.nn.Module.leaf_modules": [[304, "mlx-nn-module-leaf-modules"]], "mlx.nn.Module.load_weights": [[305, "mlx-nn-module-load-weights"]], "mlx.nn.Module.modules": [[306, "mlx-nn-module-modules"]], "mlx.nn.Module.named_modules": [[307, "mlx-nn-module-named-modules"]], "mlx.nn.Module.parameters": [[308, "mlx-nn-module-parameters"]], "mlx.nn.Module.save_weights": [[309, "mlx-nn-module-save-weights"]], "mlx.nn.Module.set_dtype": [[310, "mlx-nn-module-set-dtype"]], "mlx.nn.Module.state": [[311, "mlx-nn-module-state"]], "mlx.nn.Module.train": [[312, "mlx-nn-module-train"]], "mlx.nn.Module.trainable_parameters": [[313, "mlx-nn-module-trainable-parameters"]], "mlx.nn.Module.training": [[314, "mlx-nn-module-training"]], "mlx.nn.Module.unfreeze": [[315, "mlx-nn-module-unfreeze"]], "mlx.nn.Module.update": [[316, "mlx-nn-module-update"]], "mlx.nn.Module.update_modules": [[317, "mlx-nn-module-update-modules"]], "mlx.nn.MultiHeadAttention": [[318, "mlx-nn-multiheadattention"]], "mlx.nn.PReLU": [[319, "mlx-nn-prelu"]], "mlx.nn.QuantizedEmbedding": [[320, "mlx-nn-quantizedembedding"]], "mlx.nn.QuantizedLinear": [[321, "mlx-nn-quantizedlinear"]], "mlx.nn.RMSNorm": [[322, "mlx-nn-rmsnorm"]], "mlx.nn.RNN": [[323, "mlx-nn-rnn"]], "mlx.nn.ReLU": [[324, "mlx-nn-relu"]], "mlx.nn.RoPE": [[325, "mlx-nn-rope"]], "mlx.nn.SELU": [[326, "mlx-nn-selu"]], "mlx.nn.Sequential": [[327, "mlx-nn-sequential"]], "mlx.nn.SiLU": [[328, "mlx-nn-silu"]], "mlx.nn.SinusoidalPositionalEncoding": [[329, "mlx-nn-sinusoidalpositionalencoding"]], "mlx.nn.Softshrink": [[330, "mlx-nn-softshrink"]], "mlx.nn.Step": [[331, "mlx-nn-step"]], "mlx.nn.Transformer": [[332, "mlx-nn-transformer"]], "mlx.nn.Upsample": [[333, "mlx-nn-upsample"]], "mlx.nn.init.constant": [[334, "mlx-nn-init-constant"]], "mlx.nn.init.glorot_normal": [[335, "mlx-nn-init-glorot-normal"]], "mlx.nn.init.glorot_uniform": [[336, "mlx-nn-init-glorot-uniform"]], "mlx.nn.init.he_normal": [[337, "mlx-nn-init-he-normal"]], "mlx.nn.init.he_uniform": [[338, "mlx-nn-init-he-uniform"]], "mlx.nn.init.identity": [[339, "mlx-nn-init-identity"]], "mlx.nn.init.normal": [[340, "mlx-nn-init-normal"]], "mlx.nn.init.uniform": [[341, "mlx-nn-init-uniform"]], "mlx.nn.elu": [[342, "mlx-nn-elu"]], "mlx.nn.gelu": [[343, "mlx-nn-gelu"]], "mlx.nn.gelu_approx": [[344, "mlx-nn-gelu-approx"]], "mlx.nn.gelu_fast_approx": [[345, "mlx-nn-gelu-fast-approx"]], "mlx.nn.glu": [[346, "mlx-nn-glu"]], "mlx.nn.hardswish": [[347, "mlx-nn-hardswish"]], "mlx.nn.leaky_relu": [[348, "mlx-nn-leaky-relu"]], "mlx.nn.log_sigmoid": [[349, "mlx-nn-log-sigmoid"]], "mlx.nn.log_softmax": [[350, "mlx-nn-log-softmax"]], "mlx.nn.losses.binary_cross_entropy": [[351, "mlx-nn-losses-binary-cross-entropy"]], "mlx.nn.losses.cosine_similarity_loss": [[352, "mlx-nn-losses-cosine-similarity-loss"]], "mlx.nn.losses.cross_entropy": [[353, "mlx-nn-losses-cross-entropy"]], "mlx.nn.losses.gaussian_nll_loss": [[354, "mlx-nn-losses-gaussian-nll-loss"]], "mlx.nn.losses.hinge_loss": [[355, "mlx-nn-losses-hinge-loss"]], "mlx.nn.losses.huber_loss": [[356, "mlx-nn-losses-huber-loss"]], "mlx.nn.losses.kl_div_loss": [[357, "mlx-nn-losses-kl-div-loss"]], "mlx.nn.losses.l1_loss": [[358, "mlx-nn-losses-l1-loss"]], "mlx.nn.losses.log_cosh_loss": [[359, "mlx-nn-losses-log-cosh-loss"]], "mlx.nn.losses.margin_ranking_loss": [[360, "mlx-nn-losses-margin-ranking-loss"]], "mlx.nn.losses.mse_loss": [[361, "mlx-nn-losses-mse-loss"]], "mlx.nn.losses.nll_loss": [[362, "mlx-nn-losses-nll-loss"]], "mlx.nn.losses.smooth_l1_loss": [[363, "mlx-nn-losses-smooth-l1-loss"]], "mlx.nn.losses.triplet_loss": [[364, "mlx-nn-losses-triplet-loss"]], "mlx.nn.mish": [[365, "mlx-nn-mish"]], "mlx.nn.prelu": [[366, "mlx-nn-prelu"]], "mlx.nn.relu": [[367, "mlx-nn-relu"]], "mlx.nn.relu6": [[368, "mlx-nn-relu6"]], "mlx.nn.selu": [[369, "mlx-nn-selu"]], "mlx.nn.sigmoid": [[370, "mlx-nn-sigmoid"]], "mlx.nn.silu": [[371, "mlx-nn-silu"]], "mlx.nn.softmax": [[372, "mlx-nn-softmax"]], "mlx.nn.softplus": [[373, "mlx-nn-softplus"]], "mlx.nn.softshrink": [[374, "mlx-nn-softshrink"]], "mlx.nn.step": [[375, "mlx-nn-step"]], "mlx.nn.tanh": [[376, "mlx-nn-tanh"]], "Functions": [[377, "functions"]], "Initializers": [[378, "initializers"]], "Layers": [[379, "layers"]], "Loss Functions": [[380, "loss-functions"]], "Module": [[381, "module"]], "Optimizers": [[383, "optimizers"]], "mlx.optimizers.AdaDelta": [[384, "mlx-optimizers-adadelta"]], "mlx.optimizers.Adafactor": [[385, "mlx-optimizers-adafactor"]], "mlx.optimizers.Adagrad": [[386, "mlx-optimizers-adagrad"]], "mlx.optimizers.Adam": [[387, "mlx-optimizers-adam"]], "mlx.optimizers.AdamW": [[388, "mlx-optimizers-adamw"]], "mlx.optimizers.Adamax": [[389, "mlx-optimizers-adamax"]], "mlx.optimizers.Lion": [[390, "mlx-optimizers-lion"]], "mlx.optimizers.Optimizer.apply_gradients": [[391, "mlx-optimizers-optimizer-apply-gradients"]], "mlx.optimizers.Optimizer.init": [[392, "mlx-optimizers-optimizer-init"]], "mlx.optimizers.Optimizer.state": [[393, "mlx-optimizers-optimizer-state"]], "mlx.optimizers.Optimizer.update": [[394, "mlx-optimizers-optimizer-update"]], "mlx.optimizers.RMSprop": [[395, "mlx-optimizers-rmsprop"]], "mlx.optimizers.SGD": [[396, "mlx-optimizers-sgd"]], "mlx.optimizers.cosine_decay": [[397, "mlx-optimizers-cosine-decay"]], "mlx.optimizers.exponential_decay": [[398, "mlx-optimizers-exponential-decay"]], "mlx.optimizers.join_schedules": [[399, "mlx-optimizers-join-schedules"]], "mlx.optimizers.linear_schedule": [[400, "mlx-optimizers-linear-schedule"]], "mlx.optimizers.step_decay": [[401, "mlx-optimizers-step-decay"]], "Common Optimizers": [[402, "common-optimizers"]], "Optimizer": [[403, "optimizer"]], "Schedulers": [[404, "schedulers"]], "Random": [[405, "random"]], "Transforms": [[406, "transforms"]], "Tree Utils": [[407, "tree-utils"]], "Compilation": [[408, "compilation"]], "Basics of Compile": [[408, "basics-of-compile"]], "Example Speedup": [[408, "example-speedup"]], "Debugging": [[408, "debugging"]], "Pure Functions": [[408, "pure-functions"]], "Compiling Training Graphs": [[408, "compiling-training-graphs"]], "Transformations with Compile": [[408, "transformations-with-compile"]], "Function Transforms": [[409, "function-transforms"]], "Automatic Differentiation": [[409, "automatic-differentiation"]], "Automatic Vectorization": [[409, "automatic-vectorization"]], "Indexing Arrays": [[410, "indexing-arrays"]], "Differences from NumPy": [[410, "differences-from-numpy"]], "In Place Updates": [[410, "in-place-updates"]], "Lazy Evaluation": [[411, "lazy-evaluation"]], "Why Lazy Evaluation": [[411, "why-lazy-evaluation"]], "Transforming Compute Graphs": [[411, "transforming-compute-graphs"]], "Only Compute What You Use": [[411, "only-compute-what-you-use"]], "When to Evaluate": [[411, "when-to-evaluate"]], "Conversion to NumPy and Other Frameworks": [[412, "conversion-to-numpy-and-other-frameworks"]], "PyTorch": [[412, "pytorch"]], "JAX": [[412, "jax"]], "TensorFlow": [[412, "tensorflow"]], "Quick Start Guide": [[413, "quick-start-guide"]], "Basics": [[413, "basics"]], "Function and Graph Transformations": [[413, "function-and-graph-transformations"]], "Saving and Loading Arrays": [[414, "saving-and-loading-arrays"]], "Serialization Formats": [[414, "id1"]], "Unified Memory": [[415, "unified-memory"]], "A Simple Example": [[415, "a-simple-example"]], "Using Streams": [[416, "using-streams"]], "Specifying the Stream": [[416, "specifying-the-stream"]]}, "indexentries": {"abs (c++ function)": [[0, "_CPPv43absRK5array14StreamOrDevice"]], "add (c++ function)": [[0, "_CPPv43addRK5arrayRK5array14StreamOrDevice"]], "addmm (c++ function)": [[0, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice"]], "all (c++ function)": [[0, "_CPPv43allRK5array14StreamOrDevice"], [0, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43allRK5arrayb14StreamOrDevice"], [0, "_CPPv43allRK5arrayib14StreamOrDevice"]], "allclose (c++ function)": [[0, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice"]], "any (c++ function)": [[0, "_CPPv43anyRK5array14StreamOrDevice"], [0, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43anyRK5arrayb14StreamOrDevice"], [0, "_CPPv43anyRK5arrayib14StreamOrDevice"]], "arange (c++ function)": [[0, "_CPPv46aranged14StreamOrDevice"], [0, "_CPPv46aranged5Dtype14StreamOrDevice"], [0, "_CPPv46arangedd14StreamOrDevice"], [0, "_CPPv46arangedd5Dtype14StreamOrDevice"], [0, "_CPPv46arangeddd14StreamOrDevice"], [0, "_CPPv46arangeddd5Dtype14StreamOrDevice"], [0, "_CPPv46arangei14StreamOrDevice"], [0, "_CPPv46arangeii14StreamOrDevice"], [0, "_CPPv46arangeiii14StreamOrDevice"]], "arccos (c++ function)": [[0, "_CPPv46arccosRK5array14StreamOrDevice"]], "arccosh (c++ function)": [[0, "_CPPv47arccoshRK5array14StreamOrDevice"]], "arcsin (c++ function)": [[0, "_CPPv46arcsinRK5array14StreamOrDevice"]], "arcsinh (c++ function)": [[0, "_CPPv47arcsinhRK5array14StreamOrDevice"]], "arctan (c++ function)": [[0, "_CPPv46arctanRK5array14StreamOrDevice"]], "arctan2 (c++ function)": [[0, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice"]], "arctanh (c++ function)": [[0, "_CPPv47arctanhRK5array14StreamOrDevice"]], "argmax (c++ function)": [[0, "_CPPv46argmaxRK5array14StreamOrDevice"], [0, "_CPPv46argmaxRK5arrayb14StreamOrDevice"], [0, "_CPPv46argmaxRK5arrayib14StreamOrDevice"]], "argmin (c++ function)": [[0, "_CPPv46argminRK5array14StreamOrDevice"], [0, "_CPPv46argminRK5arrayb14StreamOrDevice"], [0, "_CPPv46argminRK5arrayib14StreamOrDevice"]], "argpartition (c++ function)": [[0, "_CPPv412argpartitionRK5arrayi14StreamOrDevice"], [0, "_CPPv412argpartitionRK5arrayii14StreamOrDevice"]], "argsort (c++ function)": [[0, "_CPPv47argsortRK5array14StreamOrDevice"], [0, "_CPPv47argsortRK5arrayi14StreamOrDevice"]], "array_equal (c++ function)": [[0, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice"], [0, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice"]], "as_strided (c++ function)": [[0, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice"]], "astype (c++ function)": [[0, "_CPPv46astype5array5Dtype14StreamOrDevice"]], "atleast_1d (c++ function)": [[0, "_CPPv410atleast_1dRK5array14StreamOrDevice"], [0, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice"]], "atleast_2d (c++ function)": [[0, "_CPPv410atleast_2dRK5array14StreamOrDevice"], [0, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice"]], "atleast_3d (c++ function)": [[0, "_CPPv410atleast_3dRK5array14StreamOrDevice"], [0, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice"]], "bitwise_and (c++ function)": [[0, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice"]], "bitwise_or (c++ function)": [[0, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice"]], "bitwise_xor (c++ function)": [[0, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice"]], "block_masked_mm (c++ function)": [[0, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice"]], "block_sparse_mm (c++ function)": [[0, "_CPPv415block_sparse_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice"]], "broadcast_arrays (c++ function)": [[0, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice"]], "broadcast_to (c++ function)": [[0, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "ceil (c++ function)": [[0, "_CPPv44ceilRK5array14StreamOrDevice"]], "clip (c++ function)": [[0, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice"]], "concatenate (c++ function)": [[0, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice"], [0, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice"]], "conjugate (c++ function)": [[0, "_CPPv49conjugateRK5array14StreamOrDevice"]], "conv1d (c++ function)": [[0, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice"]], "conv2d (c++ function)": [[0, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice"]], "conv_general (c++ function)": [[0, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice"], [0, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice"]], "copy (c++ function)": [[0, "_CPPv44copy5array14StreamOrDevice"]], "cos (c++ function)": [[0, "_CPPv43cosRK5array14StreamOrDevice"]], "cosh (c++ function)": [[0, "_CPPv44coshRK5array14StreamOrDevice"]], "cummax (c++ function)": [[0, "_CPPv46cummaxRK5arrayibb14StreamOrDevice"]], "cummin (c++ function)": [[0, "_CPPv46cumminRK5arrayibb14StreamOrDevice"]], "cumprod (c++ function)": [[0, "_CPPv47cumprodRK5arrayibb14StreamOrDevice"]], "cumsum (c++ function)": [[0, "_CPPv46cumsumRK5arrayibb14StreamOrDevice"]], "degrees (c++ function)": [[0, "_CPPv47degreesRK5array14StreamOrDevice"]], "depends (c++ function)": [[0, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE"]], "dequantize (c++ function)": [[0, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice"]], "diag (c++ function)": [[0, "_CPPv44diagRK5arrayi14StreamOrDevice"]], "diagonal (c++ function)": [[0, "_CPPv48diagonalRK5arrayiii14StreamOrDevice"]], "divide (c++ function)": [[0, "_CPPv46divideRK5arrayRK5array14StreamOrDevice"]], "divmod (c++ function)": [[0, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice"]], "equal (c++ function)": [[0, "_CPPv45equalRK5arrayRK5array14StreamOrDevice"]], "erf (c++ function)": [[0, "_CPPv43erfRK5array14StreamOrDevice"]], "erfinv (c++ function)": [[0, "_CPPv46erfinvRK5array14StreamOrDevice"]], "exp (c++ function)": [[0, "_CPPv43expRK5array14StreamOrDevice"]], "expand_dims (c++ function)": [[0, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice"]], "expm1 (c++ function)": [[0, "_CPPv45expm1RK5array14StreamOrDevice"]], "eye (c++ function)": [[0, "_CPPv43eyei14StreamOrDevice"], [0, "_CPPv43eyei5Dtype14StreamOrDevice"], [0, "_CPPv43eyeii14StreamOrDevice"], [0, "_CPPv43eyeiii14StreamOrDevice"], [0, "_CPPv43eyeiii5Dtype14StreamOrDevice"]], "flatten (c++ function)": [[0, "_CPPv47flattenRK5array14StreamOrDevice"], [0, "_CPPv47flattenRK5arrayii14StreamOrDevice"]], "floor (c++ function)": [[0, "_CPPv45floorRK5array14StreamOrDevice"]], "floor_divide (c++ function)": [[0, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice"]], "full (c++ function)": [[0, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice"], [0, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice"], [0, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice"], [0, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice"]], "gather (c++ function)": [[0, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice"]], "greater (c++ function)": [[0, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice"]], "greater_equal (c++ function)": [[0, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice"]], "identity (c++ function)": [[0, "_CPPv48identityi14StreamOrDevice"], [0, "_CPPv48identityi5Dtype14StreamOrDevice"]], "inner (c++ function)": [[0, "_CPPv45innerRK5arrayRK5array14StreamOrDevice"]], "isclose (c++ function)": [[0, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice"]], "isinf (c++ function)": [[0, "_CPPv45isinfRK5array14StreamOrDevice"]], "isnan (c++ function)": [[0, "_CPPv45isnanRK5array14StreamOrDevice"]], "isneginf (c++ function)": [[0, "_CPPv48isneginfRK5array14StreamOrDevice"]], "isposinf (c++ function)": [[0, "_CPPv48isposinfRK5array14StreamOrDevice"]], "left_shift (c++ function)": [[0, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice"]], "less (c++ function)": [[0, "_CPPv44lessRK5arrayRK5array14StreamOrDevice"]], "less_equal (c++ function)": [[0, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice"]], "linspace (c++ function)": [[0, "_CPPv48linspaceddi5Dtype14StreamOrDevice"]], "log (c++ function)": [[0, "_CPPv43logRK5array14StreamOrDevice"]], "log10 (c++ function)": [[0, "_CPPv45log10RK5array14StreamOrDevice"]], "log1p (c++ function)": [[0, "_CPPv45log1pRK5array14StreamOrDevice"]], "log2 (c++ function)": [[0, "_CPPv44log2RK5array14StreamOrDevice"]], "logaddexp (c++ function)": [[0, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice"]], "logical_and (c++ function)": [[0, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice"]], "logical_not (c++ function)": [[0, "_CPPv411logical_notRK5array14StreamOrDevice"]], "logical_or (c++ function)": [[0, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice"]], "logsumexp (c++ function)": [[0, "_CPPv49logsumexpRK5array14StreamOrDevice"], [0, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv49logsumexpRK5arrayb14StreamOrDevice"], [0, "_CPPv49logsumexpRK5arrayib14StreamOrDevice"]], "matmul (c++ function)": [[0, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice"]], "max (c++ function)": [[0, "_CPPv43maxRK5array14StreamOrDevice"], [0, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43maxRK5arrayb14StreamOrDevice"], [0, "_CPPv43maxRK5arrayib14StreamOrDevice"]], "maximum (c++ function)": [[0, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice"]], "mean (c++ function)": [[0, "_CPPv44meanRK5array14StreamOrDevice"], [0, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv44meanRK5arrayb14StreamOrDevice"], [0, "_CPPv44meanRK5arrayib14StreamOrDevice"]], "meshgrid (c++ function)": [[0, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice"]], "min (c++ function)": [[0, "_CPPv43minRK5array14StreamOrDevice"], [0, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43minRK5arrayb14StreamOrDevice"], [0, "_CPPv43minRK5arrayib14StreamOrDevice"]], "minimum (c++ function)": [[0, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice"]], "moveaxis (c++ function)": [[0, "_CPPv48moveaxisRK5arrayii14StreamOrDevice"]], "multiply (c++ function)": [[0, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice"]], "negative (c++ function)": [[0, "_CPPv48negativeRK5array14StreamOrDevice"]], "not_equal (c++ function)": [[0, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice"]], "number_of_elements (c++ function)": [[0, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice"]], "ones (c++ function)": [[0, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice"]], "ones_like (c++ function)": [[0, "_CPPv49ones_likeRK5array14StreamOrDevice"]], "operator!= (c++ function)": [[0, "_CPPv4I0Ene5array1TRK5array"], [0, "_CPPv4I0Ene5arrayRK5array1T"], [0, "_CPPv4neRK5arrayRK5array"]], "operator% (c++ function)": [[0, "_CPPv4I0Erm5array1TRK5array"], [0, "_CPPv4I0Erm5arrayRK5array1T"], [0, "_CPPv4rmRK5arrayRK5array"]], "operator& (c++ function)": [[0, "_CPPv4anRK5arrayRK5array"]], "operator&& (c++ function)": [[0, "_CPPv4aaRK5arrayRK5array"]], "operator* (c++ function)": [[0, "_CPPv4I0Eml5array1TRK5array"], [0, "_CPPv4I0Eml5arrayRK5array1T"], [0, "_CPPv4mlRK5arrayRK5array"]], "operator+ (c++ function)": [[0, "_CPPv4I0Epl5array1TRK5array"], [0, "_CPPv4I0Epl5arrayRK5array1T"], [0, "_CPPv4plRK5arrayRK5array"]], "operator- (c++ function)": [[0, "_CPPv4I0Emi5array1TRK5array"], [0, "_CPPv4I0Emi5arrayRK5array1T"], [0, "_CPPv4miRK5array"], [0, "_CPPv4miRK5arrayRK5array"]], "operator/ (c++ function)": [[0, "_CPPv4dvRK5arrayRK5array"], [0, "_CPPv4dvRK5arrayd"], [0, "_CPPv4dvdRK5array"]], "operator< (c++ function)": [[0, "_CPPv4I0Elt5array1TRK5array"], [0, "_CPPv4I0Elt5arrayRK5array1T"], [0, "_CPPv4ltRK5arrayRK5array"]], "operator<< (c++ function)": [[0, "_CPPv4lsRK5arrayRK5array"]], "operator<= (c++ function)": [[0, "_CPPv4I0Ele5array1TRK5array"], [0, "_CPPv4I0Ele5arrayRK5array1T"], [0, "_CPPv4leRK5arrayRK5array"]], "operator== (c++ function)": [[0, "_CPPv4I0Eeq5array1TRK5array"], [0, "_CPPv4I0Eeq5arrayRK5array1T"], [0, "_CPPv4eqRK5arrayRK5array"]], "operator> (c++ function)": [[0, "_CPPv4I0Egt5array1TRK5array"], [0, "_CPPv4I0Egt5arrayRK5array1T"], [0, "_CPPv4gtRK5arrayRK5array"]], "operator>= (c++ function)": [[0, "_CPPv4I0Ege5array1TRK5array"], [0, "_CPPv4I0Ege5arrayRK5array1T"], [0, "_CPPv4geRK5arrayRK5array"]], "operator>> (c++ function)": [[0, "_CPPv4rsRK5arrayRK5array"]], "operator^ (c++ function)": [[0, "_CPPv4eoRK5arrayRK5array"]], "operator| (c++ function)": [[0, "_CPPv4orRK5arrayRK5array"]], "operator|| (c++ function)": [[0, "_CPPv4ooRK5arrayRK5array"]], "outer (c++ function)": [[0, "_CPPv45outerRK5arrayRK5array14StreamOrDevice"]], "pad (c++ function)": [[0, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5array14StreamOrDevice"], [0, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5array14StreamOrDevice"], [0, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5array14StreamOrDevice"], [0, "_CPPv43padRK5arrayiRK5array14StreamOrDevice"]], "partition (c++ function)": [[0, "_CPPv49partitionRK5arrayi14StreamOrDevice"], [0, "_CPPv49partitionRK5arrayii14StreamOrDevice"]], "power (c++ function)": [[0, "_CPPv45powerRK5arrayRK5array14StreamOrDevice"]], "prod (c++ function)": [[0, "_CPPv44prodRK5array14StreamOrDevice"], [0, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv44prodRK5arrayb14StreamOrDevice"], [0, "_CPPv44prodRK5arrayib14StreamOrDevice"]], "quantize (c++ function)": [[0, "_CPPv48quantizeRK5arrayii14StreamOrDevice"]], "quantized_matmul (c++ function)": [[0, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice"]], "radians (c++ function)": [[0, "_CPPv47radiansRK5array14StreamOrDevice"]], "reciprocal (c++ function)": [[0, "_CPPv410reciprocalRK5array14StreamOrDevice"]], "remainder (c++ function)": [[0, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice"]], "repeat (c++ function)": [[0, "_CPPv46repeatRK5arrayi14StreamOrDevice"], [0, "_CPPv46repeatRK5arrayii14StreamOrDevice"]], "reshape (c++ function)": [[0, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice"]], "right_shift (c++ function)": [[0, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice"]], "round (c++ function)": [[0, "_CPPv45roundRK5array14StreamOrDevice"], [0, "_CPPv45roundRK5arrayi14StreamOrDevice"]], "rsqrt (c++ function)": [[0, "_CPPv45rsqrtRK5array14StreamOrDevice"]], "scatter (c++ function)": [[0, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_add (c++ function)": [[0, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_max (c++ function)": [[0, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_min (c++ function)": [[0, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_prod (c++ function)": [[0, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "sigmoid (c++ function)": [[0, "_CPPv47sigmoidRK5array14StreamOrDevice"]], "sign (c++ function)": [[0, "_CPPv44signRK5array14StreamOrDevice"]], "sin (c++ function)": [[0, "_CPPv43sinRK5array14StreamOrDevice"]], "sinh (c++ function)": [[0, "_CPPv44sinhRK5array14StreamOrDevice"]], "slice (c++ function)": [[0, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice"]], "slice_update (c++ function)": [[0, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"]], "softmax (c++ function)": [[0, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv47softmaxRK5arrayb14StreamOrDevice"], [0, "_CPPv47softmaxRK5arrayib14StreamOrDevice"]], "sort (c++ function)": [[0, "_CPPv44sortRK5array14StreamOrDevice"], [0, "_CPPv44sortRK5arrayi14StreamOrDevice"]], "split (c++ function)": [[0, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice"], [0, "_CPPv45splitRK5arrayi14StreamOrDevice"], [0, "_CPPv45splitRK5arrayii14StreamOrDevice"]], "sqrt (c++ function)": [[0, "_CPPv44sqrtRK5array14StreamOrDevice"]], "square (c++ function)": [[0, "_CPPv46squareRK5array14StreamOrDevice"]], "squeeze (c++ function)": [[0, "_CPPv47squeezeRK5array14StreamOrDevice"], [0, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv47squeezeRK5arrayi14StreamOrDevice"]], "stack (c++ function)": [[0, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice"], [0, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice"]], "std (c++ function)": [[0, "_CPPv4StRK5array14StreamOrDevice"], [0, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice"], [0, "_CPPv4StRK5arraybi14StreamOrDevice"], [0, "_CPPv4StRK5arrayibi14StreamOrDevice"]], "stop_gradient (c++ function)": [[0, "_CPPv413stop_gradientRK5array14StreamOrDevice"]], "subtract (c++ function)": [[0, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice"]], "sum (c++ function)": [[0, "_CPPv43sumRK5array14StreamOrDevice"], [0, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43sumRK5arrayb14StreamOrDevice"], [0, "_CPPv43sumRK5arrayib14StreamOrDevice"]], "swapaxes (c++ function)": [[0, "_CPPv48swapaxesRK5arrayii14StreamOrDevice"]], "take (c++ function)": [[0, "_CPPv44takeRK5arrayRK5array14StreamOrDevice"], [0, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice"]], "take_along_axis (c++ function)": [[0, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice"]], "tan (c++ function)": [[0, "_CPPv43tanRK5array14StreamOrDevice"]], "tanh (c++ function)": [[0, "_CPPv44tanhRK5array14StreamOrDevice"]], "tensordot (c++ function)": [[0, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice"], [0, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice"]], "tile (c++ function)": [[0, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice"]], "topk (c++ function)": [[0, "_CPPv44topkRK5arrayi14StreamOrDevice"], [0, "_CPPv44topkRK5arrayii14StreamOrDevice"]], "transpose (c++ function)": [[0, "_CPPv49transposeRK5array14StreamOrDevice"], [0, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice"], [0, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice"]], "tri (c++ function)": [[0, "_CPPv43trii5Dtype14StreamOrDevice"], [0, "_CPPv43triiii5Dtype14StreamOrDevice"]], "tril (c++ function)": [[0, "_CPPv44tril5arrayi14StreamOrDevice"]], "triu (c++ function)": [[0, "_CPPv44triu5arrayi14StreamOrDevice"]], "var (c++ function)": [[0, "_CPPv43varRK5array14StreamOrDevice"], [0, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice"], [0, "_CPPv43varRK5arraybi14StreamOrDevice"], [0, "_CPPv43varRK5arrayibi14StreamOrDevice"]], "where (c++ function)": [[0, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice"]], "zeros (c++ function)": [[0, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice"]], "zeros_like (c++ function)": [[0, "_CPPv410zeros_likeRK5array14StreamOrDevice"]], "device (class in mlx.core)": [[8, "mlx.core.Device"]], "__init__() (device method)": [[8, "mlx.core.Device.__init__"]], "dtype (class in mlx.core)": [[9, "mlx.core.Dtype"]], "__init__() (dtype method)": [[9, "mlx.core.Dtype.__init__"]], "dtypecategory (class in mlx.core)": [[10, "mlx.core.DtypeCategory"]], "__init__() (dtypecategory method)": [[10, "mlx.core.DtypeCategory.__init__"]], "abs() (in module mlx.core)": [[11, "mlx.core.abs"]], "add() (in module mlx.core)": [[12, "mlx.core.add"]], "all() (in module mlx.core)": [[13, "mlx.core.all"]], "allclose() (in module mlx.core)": [[14, "mlx.core.allclose"]], "any() (in module mlx.core)": [[15, "mlx.core.any"]], "arange() (in module mlx.core)": [[16, "mlx.core.arange"]], "arccos() (in module mlx.core)": [[17, "mlx.core.arccos"]], "arccosh() (in module mlx.core)": [[18, "mlx.core.arccosh"]], "arcsin() (in module mlx.core)": [[19, "mlx.core.arcsin"]], "arcsinh() (in module mlx.core)": [[20, "mlx.core.arcsinh"]], "arctan() (in module mlx.core)": [[21, "mlx.core.arctan"]], "arctan2() (in module mlx.core)": [[22, "mlx.core.arctan2"]], "arctanh() (in module mlx.core)": [[23, "mlx.core.arctanh"]], "argmax() (in module mlx.core)": [[24, "mlx.core.argmax"]], "argmin() (in module mlx.core)": [[25, "mlx.core.argmin"]], "argpartition() (in module mlx.core)": [[26, "mlx.core.argpartition"]], "argsort() (in module mlx.core)": [[27, "mlx.core.argsort"]], "__init__() (array method)": [[28, "mlx.core.array.__init__"]], "array (class in mlx.core)": [[28, "mlx.core.array"]], "t (array property)": [[29, "mlx.core.array.T"]], "abs() (array method)": [[30, "mlx.core.array.abs"]], "all() (array method)": [[31, "mlx.core.array.all"]], "any() (array method)": [[32, "mlx.core.array.any"]], "argmax() (array method)": [[33, "mlx.core.array.argmax"]], "argmin() (array method)": [[34, "mlx.core.array.argmin"]], "astype() (array method)": [[35, "mlx.core.array.astype"]], "at (array property)": [[36, "mlx.core.array.at"]], "cos() (array method)": [[37, "mlx.core.array.cos"]], "cummax() (array method)": [[38, "mlx.core.array.cummax"]], "cummin() (array method)": [[39, "mlx.core.array.cummin"]], "cumprod() (array method)": [[40, "mlx.core.array.cumprod"]], "cumsum() (array method)": [[41, "mlx.core.array.cumsum"]], "diag() (array method)": [[42, "mlx.core.array.diag"]], "diagonal() (array method)": [[43, "mlx.core.array.diagonal"]], "dtype (array property)": [[44, "mlx.core.array.dtype"]], "exp() (array method)": [[45, "mlx.core.array.exp"]], "flatten() (array method)": [[46, "mlx.core.array.flatten"]], "item() (array method)": [[47, "mlx.core.array.item"]], "itemsize (array property)": [[48, "mlx.core.array.itemsize"]], "log() (array method)": [[49, "mlx.core.array.log"]], "log10() (array method)": [[50, "mlx.core.array.log10"]], "log1p() (array method)": [[51, "mlx.core.array.log1p"]], "log2() (array method)": [[52, "mlx.core.array.log2"]], "logsumexp() (array method)": [[53, "mlx.core.array.logsumexp"]], "max() (array method)": [[54, "mlx.core.array.max"]], "mean() (array method)": [[55, "mlx.core.array.mean"]], "min() (array method)": [[56, "mlx.core.array.min"]], "moveaxis() (array method)": [[57, "mlx.core.array.moveaxis"]], "nbytes (array property)": [[58, "mlx.core.array.nbytes"]], "ndim (array property)": [[59, "mlx.core.array.ndim"]], "prod() (array method)": [[60, "mlx.core.array.prod"]], "reciprocal() (array method)": [[61, "mlx.core.array.reciprocal"]], "reshape() (array method)": [[62, "mlx.core.array.reshape"]], "round() (array method)": [[63, "mlx.core.array.round"]], "rsqrt() (array method)": [[64, "mlx.core.array.rsqrt"]], "shape (array property)": [[65, "mlx.core.array.shape"]], "sin() (array method)": [[66, "mlx.core.array.sin"]], "size (array property)": [[67, "mlx.core.array.size"]], "split() (array method)": [[68, "mlx.core.array.split"]], "sqrt() (array method)": [[69, "mlx.core.array.sqrt"]], "square() (array method)": [[70, "mlx.core.array.square"]], "squeeze() (array method)": [[71, "mlx.core.array.squeeze"]], "sum() (array method)": [[72, "mlx.core.array.sum"]], "swapaxes() (array method)": [[73, "mlx.core.array.swapaxes"]], "tolist() (array method)": [[74, "mlx.core.array.tolist"]], "transpose() (array method)": [[75, "mlx.core.array.transpose"]], "var() (array method)": [[76, "mlx.core.array.var"]], "array_equal() (in module mlx.core)": [[77, "mlx.core.array_equal"]], "atleast_1d() (in module mlx.core)": [[78, "mlx.core.atleast_1d"]], "atleast_2d() (in module mlx.core)": [[79, "mlx.core.atleast_2d"]], "atleast_3d() (in module mlx.core)": [[80, "mlx.core.atleast_3d"]], "bitwise_and() (in module mlx.core)": [[81, "mlx.core.bitwise_and"]], "bitwise_or() (in module mlx.core)": [[82, "mlx.core.bitwise_or"]], "bitwise_xor() (in module mlx.core)": [[83, "mlx.core.bitwise_xor"]], "block_masked_mm() (in module mlx.core)": [[84, "mlx.core.block_masked_mm"]], "block_sparse_mm() (in module mlx.core)": [[85, "mlx.core.block_sparse_mm"]], "broadcast_to() (in module mlx.core)": [[86, "mlx.core.broadcast_to"]], "ceil() (in module mlx.core)": [[87, "mlx.core.ceil"]], "clip() (in module mlx.core)": [[88, "mlx.core.clip"]], "compile() (in module mlx.core)": [[89, "mlx.core.compile"]], "concatenate() (in module mlx.core)": [[90, "mlx.core.concatenate"]], "conj() (in module mlx.core)": [[91, "mlx.core.conj"]], "conjugate() (in module mlx.core)": [[92, "mlx.core.conjugate"]], "conv1d() (in module mlx.core)": [[93, "mlx.core.conv1d"]], "conv2d() (in module mlx.core)": [[94, "mlx.core.conv2d"]], "conv_general() (in module mlx.core)": [[95, "mlx.core.conv_general"]], "convolve() (in module mlx.core)": [[96, "mlx.core.convolve"]], "cos() (in module mlx.core)": [[97, "mlx.core.cos"]], "cosh() (in module mlx.core)": [[98, "mlx.core.cosh"]], "cummax() (in module mlx.core)": [[99, "mlx.core.cummax"]], "cummin() (in module mlx.core)": [[100, "mlx.core.cummin"]], "cumprod() (in module mlx.core)": [[101, "mlx.core.cumprod"]], "cumsum() (in module mlx.core)": [[102, "mlx.core.cumsum"]], "default_device() (in module mlx.core)": [[103, "mlx.core.default_device"]], "default_stream() (in module mlx.core)": [[104, "mlx.core.default_stream"]], "degrees() (in module mlx.core)": [[105, "mlx.core.degrees"]], "dequantize() (in module mlx.core)": [[106, "mlx.core.dequantize"]], "diag() (in module mlx.core)": [[107, "mlx.core.diag"]], "diagonal() (in module mlx.core)": [[108, "mlx.core.diagonal"]], "disable_compile() (in module mlx.core)": [[109, "mlx.core.disable_compile"]], "divide() (in module mlx.core)": [[110, "mlx.core.divide"]], "divmod() (in module mlx.core)": [[111, "mlx.core.divmod"]], "enable_compile() (in module mlx.core)": [[112, "mlx.core.enable_compile"]], "equal() (in module mlx.core)": [[113, "mlx.core.equal"]], "erf() (in module mlx.core)": [[114, "mlx.core.erf"]], "erfinv() (in module mlx.core)": [[115, "mlx.core.erfinv"]], "eval() (in module mlx.core)": [[116, "mlx.core.eval"]], "exp() (in module mlx.core)": [[117, "mlx.core.exp"]], "expand_dims() (in module mlx.core)": [[118, "mlx.core.expand_dims"]], "expm1() (in module mlx.core)": [[119, "mlx.core.expm1"]], "eye() (in module mlx.core)": [[120, "mlx.core.eye"]], "layer_norm() (in module mlx.core.fast)": [[121, "mlx.core.fast.layer_norm"]], "rms_norm() (in module mlx.core.fast)": [[122, "mlx.core.fast.rms_norm"]], "rope() (in module mlx.core.fast)": [[123, "mlx.core.fast.rope"]], "scaled_dot_product_attention() (in module mlx.core.fast)": [[124, "mlx.core.fast.scaled_dot_product_attention"]], "fft() (in module mlx.core.fft)": [[125, "mlx.core.fft.fft"]], "fft2() (in module mlx.core.fft)": [[126, "mlx.core.fft.fft2"]], "fftn() (in module mlx.core.fft)": [[127, "mlx.core.fft.fftn"]], "ifft() (in module mlx.core.fft)": [[128, "mlx.core.fft.ifft"]], "ifft2() (in module mlx.core.fft)": [[129, "mlx.core.fft.ifft2"]], "ifftn() (in module mlx.core.fft)": [[130, "mlx.core.fft.ifftn"]], "irfft() (in module mlx.core.fft)": [[131, "mlx.core.fft.irfft"]], "irfft2() (in module mlx.core.fft)": [[132, "mlx.core.fft.irfft2"]], "irfftn() (in module mlx.core.fft)": [[133, "mlx.core.fft.irfftn"]], "rfft() (in module mlx.core.fft)": [[134, "mlx.core.fft.rfft"]], "rfft2() (in module mlx.core.fft)": [[135, "mlx.core.fft.rfft2"]], "rfftn() (in module mlx.core.fft)": [[136, "mlx.core.fft.rfftn"]], "flatten() (in module mlx.core)": [[137, "mlx.core.flatten"]], "floor() (in module mlx.core)": [[138, "mlx.core.floor"]], "floor_divide() (in module mlx.core)": [[139, "mlx.core.floor_divide"]], "full() (in module mlx.core)": [[140, "mlx.core.full"]], "grad() (in module mlx.core)": [[141, "mlx.core.grad"]], "greater() (in module mlx.core)": [[142, "mlx.core.greater"]], "greater_equal() (in module mlx.core)": [[143, "mlx.core.greater_equal"]], "identity() (in module mlx.core)": [[144, "mlx.core.identity"]], "inner() (in module mlx.core)": [[145, "mlx.core.inner"]], "isclose() (in module mlx.core)": [[146, "mlx.core.isclose"]], "isinf() (in module mlx.core)": [[147, "mlx.core.isinf"]], "isnan() (in module mlx.core)": [[148, "mlx.core.isnan"]], "isneginf() (in module mlx.core)": [[149, "mlx.core.isneginf"]], "isposinf() (in module mlx.core)": [[150, "mlx.core.isposinf"]], "issubdtype() (in module mlx.core)": [[151, "mlx.core.issubdtype"]], "jvp() (in module mlx.core)": [[152, "mlx.core.jvp"]], "left_shift() (in module mlx.core)": [[153, "mlx.core.left_shift"]], "less() (in module mlx.core)": [[154, "mlx.core.less"]], "less_equal() (in module mlx.core)": [[155, "mlx.core.less_equal"]], "norm() (in module mlx.core.linalg)": [[156, "mlx.core.linalg.norm"]], "qr() (in module mlx.core.linalg)": [[157, "mlx.core.linalg.qr"]], "linspace() (in module mlx.core)": [[158, "mlx.core.linspace"]], "load() (in module mlx.core)": [[159, "mlx.core.load"]], "log() (in module mlx.core)": [[160, "mlx.core.log"]], "log10() (in module mlx.core)": [[161, "mlx.core.log10"]], "log1p() (in module mlx.core)": [[162, "mlx.core.log1p"]], "log2() (in module mlx.core)": [[163, "mlx.core.log2"]], "logaddexp() (in module mlx.core)": [[164, "mlx.core.logaddexp"]], "logical_and() (in module mlx.core)": [[165, "mlx.core.logical_and"]], "logical_not() (in module mlx.core)": [[166, "mlx.core.logical_not"]], "logical_or() (in module mlx.core)": [[167, "mlx.core.logical_or"]], "logsumexp() (in module mlx.core)": [[168, "mlx.core.logsumexp"]], "matmul() (in module mlx.core)": [[169, "mlx.core.matmul"]], "max() (in module mlx.core)": [[170, "mlx.core.max"]], "maximum() (in module mlx.core)": [[171, "mlx.core.maximum"]], "mean() (in module mlx.core)": [[172, "mlx.core.mean"]], "meshgrid() (in module mlx.core)": [[173, "mlx.core.meshgrid"]], "clear_cache() (in module mlx.core.metal)": [[174, "mlx.core.metal.clear_cache"]], "device_info() (in module mlx.core.metal)": [[175, "mlx.core.metal.device_info"]], "get_active_memory() (in module mlx.core.metal)": [[176, "mlx.core.metal.get_active_memory"]], "get_cache_memory() (in module mlx.core.metal)": [[177, "mlx.core.metal.get_cache_memory"]], "get_peak_memory() (in module mlx.core.metal)": [[178, "mlx.core.metal.get_peak_memory"]], "is_available() (in module mlx.core.metal)": [[179, "mlx.core.metal.is_available"]], "reset_peak_memory() (in module mlx.core.metal)": [[180, "mlx.core.metal.reset_peak_memory"]], "set_cache_limit() (in module mlx.core.metal)": [[181, "mlx.core.metal.set_cache_limit"]], "set_memory_limit() (in module mlx.core.metal)": [[182, "mlx.core.metal.set_memory_limit"]], "start_capture() (in module mlx.core.metal)": [[183, "mlx.core.metal.start_capture"]], "stop_capture() (in module mlx.core.metal)": [[184, "mlx.core.metal.stop_capture"]], "min() (in module mlx.core)": [[185, "mlx.core.min"]], "minimum() (in module mlx.core)": [[186, "mlx.core.minimum"]], "moveaxis() (in module mlx.core)": [[187, "mlx.core.moveaxis"]], "multiply() (in module mlx.core)": [[188, "mlx.core.multiply"]], "negative() (in module mlx.core)": [[189, "mlx.core.negative"]], "new_stream() (in module mlx.core)": [[190, "mlx.core.new_stream"]], "not_equal() (in module mlx.core)": [[191, "mlx.core.not_equal"]], "ones() (in module mlx.core)": [[192, "mlx.core.ones"]], "ones_like() (in module mlx.core)": [[193, "mlx.core.ones_like"]], "outer() (in module mlx.core)": [[194, "mlx.core.outer"]], "pad() (in module mlx.core)": [[195, "mlx.core.pad"]], "partition() (in module mlx.core)": [[196, "mlx.core.partition"]], "prod() (in module mlx.core)": [[197, "mlx.core.prod"]], "quantize() (in module mlx.core)": [[198, "mlx.core.quantize"]], "quantized_matmul() (in module mlx.core)": [[199, "mlx.core.quantized_matmul"]], "radians() (in module mlx.core)": [[200, "mlx.core.radians"]], "bernoulli() (in module mlx.core.random)": [[201, "mlx.core.random.bernoulli"]], "categorical() (in module mlx.core.random)": [[202, "mlx.core.random.categorical"]], "gumbel() (in module mlx.core.random)": [[203, "mlx.core.random.gumbel"]], "key() (in module mlx.core.random)": [[204, "mlx.core.random.key"]], "multivariate_normal() (in module mlx.core.random)": [[205, "mlx.core.random.multivariate_normal"]], "normal() (in module mlx.core.random)": [[206, "mlx.core.random.normal"]], "randint() (in module mlx.core.random)": [[207, "mlx.core.random.randint"]], "seed() (in module mlx.core.random)": [[208, "mlx.core.random.seed"]], "split() (in module mlx.core.random)": [[209, "mlx.core.random.split"]], "truncated_normal() (in module mlx.core.random)": [[210, "mlx.core.random.truncated_normal"]], "uniform() (in module mlx.core.random)": [[211, "mlx.core.random.uniform"]], "reciprocal() (in module mlx.core)": [[212, "mlx.core.reciprocal"]], "repeat() (in module mlx.core)": [[213, "mlx.core.repeat"]], "reshape() (in module mlx.core)": [[214, "mlx.core.reshape"]], "right_shift() (in module mlx.core)": [[215, "mlx.core.right_shift"]], "round() (in module mlx.core)": [[216, "mlx.core.round"]], "rsqrt() (in module mlx.core)": [[217, "mlx.core.rsqrt"]], "save() (in module mlx.core)": [[218, "mlx.core.save"]], "save_gguf() (in module mlx.core)": [[219, "mlx.core.save_gguf"]], "save_safetensors() (in module mlx.core)": [[220, "mlx.core.save_safetensors"]], "savez() (in module mlx.core)": [[221, "mlx.core.savez"]], "savez_compressed() (in module mlx.core)": [[222, "mlx.core.savez_compressed"]], "set_default_device() (in module mlx.core)": [[223, "mlx.core.set_default_device"]], "set_default_stream() (in module mlx.core)": [[224, "mlx.core.set_default_stream"]], "sigmoid() (in module mlx.core)": [[225, "mlx.core.sigmoid"]], "sign() (in module mlx.core)": [[226, "mlx.core.sign"]], "sin() (in module mlx.core)": [[227, "mlx.core.sin"]], "sinh() (in module mlx.core)": [[228, "mlx.core.sinh"]], "softmax() (in module mlx.core)": [[229, "mlx.core.softmax"]], "sort() (in module mlx.core)": [[230, "mlx.core.sort"]], "split() (in module mlx.core)": [[231, "mlx.core.split"]], "sqrt() (in module mlx.core)": [[232, "mlx.core.sqrt"]], "square() (in module mlx.core)": [[233, "mlx.core.square"]], "squeeze() (in module mlx.core)": [[234, "mlx.core.squeeze"]], "stack() (in module mlx.core)": [[235, "mlx.core.stack"]], "std() (in module mlx.core)": [[236, "mlx.core.std"]], "stop_gradient() (in module mlx.core)": [[237, "mlx.core.stop_gradient"]], "stream() (in module mlx.core)": [[238, "mlx.core.stream"]], "subtract() (in module mlx.core)": [[239, "mlx.core.subtract"]], "sum() (in module mlx.core)": [[240, "mlx.core.sum"]], "swapaxes() (in module mlx.core)": [[241, "mlx.core.swapaxes"]], "synchronize() (in module mlx.core)": [[242, "mlx.core.synchronize"]], "take() (in module mlx.core)": [[243, "mlx.core.take"]], "take_along_axis() (in module mlx.core)": [[244, "mlx.core.take_along_axis"]], "tan() (in module mlx.core)": [[245, "mlx.core.tan"]], "tanh() (in module mlx.core)": [[246, "mlx.core.tanh"]], "tensordot() (in module mlx.core)": [[247, "mlx.core.tensordot"]], "tile() (in module mlx.core)": [[248, "mlx.core.tile"]], "topk() (in module mlx.core)": [[249, "mlx.core.topk"]], "transpose() (in module mlx.core)": [[250, "mlx.core.transpose"]], "tri() (in module mlx.core)": [[251, "mlx.core.tri"]], "tril() (in module mlx.core)": [[252, "mlx.core.tril"]], "triu() (in module mlx.core)": [[253, "mlx.core.triu"]], "value_and_grad() (in module mlx.core)": [[254, "mlx.core.value_and_grad"]], "var() (in module mlx.core)": [[255, "mlx.core.var"]], "vjp() (in module mlx.core)": [[256, "mlx.core.vjp"]], "vmap() (in module mlx.core)": [[257, "mlx.core.vmap"]], "where() (in module mlx.core)": [[258, "mlx.core.where"]], "zeros() (in module mlx.core)": [[259, "mlx.core.zeros"]], "zeros_like() (in module mlx.core)": [[260, "mlx.core.zeros_like"]], "quantize() (in module mlx.nn)": [[261, "mlx.nn.quantize"]], "value_and_grad() (in module mlx.nn)": [[262, "mlx.nn.value_and_grad"]], "clip_grad_norm() (in module mlx.optimizers)": [[263, "mlx.optimizers.clip_grad_norm"]], "tree_flatten() (in module mlx.utils)": [[264, "mlx.utils.tree_flatten"]], "tree_map() (in module mlx.utils)": [[265, "mlx.utils.tree_map"]], "tree_map_with_path() (in module mlx.utils)": [[266, "mlx.utils.tree_map_with_path"]], "tree_reduce() (in module mlx.utils)": [[267, "mlx.utils.tree_reduce"]], "tree_unflatten() (in module mlx.utils)": [[268, "mlx.utils.tree_unflatten"]], "stream (class in mlx.core)": [[269, "mlx.core.Stream"]], "__init__() (stream method)": [[269, "mlx.core.Stream.__init__"]], "alibi (class in mlx.nn)": [[278, "mlx.nn.ALiBi"]], "avgpool1d (class in mlx.nn)": [[279, "mlx.nn.AvgPool1d"]], "avgpool2d (class in mlx.nn)": [[280, "mlx.nn.AvgPool2d"]], "batchnorm (class in mlx.nn)": [[281, "mlx.nn.BatchNorm"]], "conv1d (class in mlx.nn)": [[282, "mlx.nn.Conv1d"]], "conv2d (class in mlx.nn)": [[283, "mlx.nn.Conv2d"]], "dropout (class in mlx.nn)": [[284, "mlx.nn.Dropout"]], "dropout2d (class in mlx.nn)": [[285, "mlx.nn.Dropout2d"]], "dropout3d (class in mlx.nn)": [[286, "mlx.nn.Dropout3d"]], "embedding (class in mlx.nn)": [[287, "mlx.nn.Embedding"]], "gelu (class in mlx.nn)": [[288, "mlx.nn.GELU"], [343, "mlx.nn.gelu"]], "gru (class in mlx.nn)": [[289, "mlx.nn.GRU"]], "groupnorm (class in mlx.nn)": [[290, "mlx.nn.GroupNorm"]], "instancenorm (class in mlx.nn)": [[291, "mlx.nn.InstanceNorm"]], "lstm (class in mlx.nn)": [[292, "mlx.nn.LSTM"]], "layernorm (class in mlx.nn)": [[293, "mlx.nn.LayerNorm"]], "linear (class in mlx.nn)": [[294, "mlx.nn.Linear"]], "maxpool1d (class in mlx.nn)": [[295, "mlx.nn.MaxPool1d"]], "maxpool2d (class in mlx.nn)": [[296, "mlx.nn.MaxPool2d"]], "mish (class in mlx.nn)": [[297, "mlx.nn.Mish"], [365, "mlx.nn.mish"]], "apply() (module method)": [[298, "mlx.nn.Module.apply"]], "apply_to_modules() (module method)": [[299, "mlx.nn.Module.apply_to_modules"]], "children() (module method)": [[300, "mlx.nn.Module.children"]], "eval() (module method)": [[301, "mlx.nn.Module.eval"]], "filter_and_map() (module method)": [[302, "mlx.nn.Module.filter_and_map"]], "freeze() (module method)": [[303, "mlx.nn.Module.freeze"]], "leaf_modules() (module method)": [[304, "mlx.nn.Module.leaf_modules"]], "load_weights() (module method)": [[305, "mlx.nn.Module.load_weights"]], "modules() (module method)": [[306, "mlx.nn.Module.modules"]], "named_modules() (module method)": [[307, "mlx.nn.Module.named_modules"]], "parameters() (module method)": [[308, "mlx.nn.Module.parameters"]], "save_weights() (module method)": [[309, "mlx.nn.Module.save_weights"]], "set_dtype() (module method)": [[310, "mlx.nn.Module.set_dtype"]], "state (module property)": [[311, "mlx.nn.Module.state"]], "train() (module method)": [[312, "mlx.nn.Module.train"]], "trainable_parameters() (module method)": [[313, "mlx.nn.Module.trainable_parameters"]], "training (module property)": [[314, "mlx.nn.Module.training"]], "unfreeze() (module method)": [[315, "mlx.nn.Module.unfreeze"]], "update() (module method)": [[316, "mlx.nn.Module.update"]], "update_modules() (module method)": [[317, "mlx.nn.Module.update_modules"]], "multiheadattention (class in mlx.nn)": [[318, "mlx.nn.MultiHeadAttention"]], "prelu (class in mlx.nn)": [[319, "mlx.nn.PReLU"], [366, "mlx.nn.prelu"]], "quantizedembedding (class in mlx.nn)": [[320, "mlx.nn.QuantizedEmbedding"]], "quantizedlinear (class in mlx.nn)": [[321, "mlx.nn.QuantizedLinear"]], "rmsnorm (class in mlx.nn)": [[322, "mlx.nn.RMSNorm"]], "rnn (class in mlx.nn)": [[323, "mlx.nn.RNN"]], "relu (class in mlx.nn)": [[324, "mlx.nn.ReLU"], [367, "mlx.nn.relu"]], "rope (class in mlx.nn)": [[325, "mlx.nn.RoPE"]], "selu (class in mlx.nn)": [[326, "mlx.nn.SELU"], [369, "mlx.nn.selu"]], "sequential (class in mlx.nn)": [[327, "mlx.nn.Sequential"]], "silu (class in mlx.nn)": [[328, "mlx.nn.SiLU"], [371, "mlx.nn.silu"]], "sinusoidalpositionalencoding (class in mlx.nn)": [[329, "mlx.nn.SinusoidalPositionalEncoding"]], "softshrink (class in mlx.nn)": [[330, "mlx.nn.Softshrink"], [374, "mlx.nn.softshrink"]], "step (class in mlx.nn)": [[331, "mlx.nn.Step"], [375, "mlx.nn.step"]], "transformer (class in mlx.nn)": [[332, "mlx.nn.Transformer"]], "upsample (class in mlx.nn)": [[333, "mlx.nn.Upsample"]], "constant() (in module mlx.nn.init)": [[334, "mlx.nn.init.constant"]], "glorot_normal() (in module mlx.nn.init)": [[335, "mlx.nn.init.glorot_normal"]], "glorot_uniform() (in module mlx.nn.init)": [[336, "mlx.nn.init.glorot_uniform"]], "he_normal() (in module mlx.nn.init)": [[337, "mlx.nn.init.he_normal"]], "he_uniform() (in module mlx.nn.init)": [[338, "mlx.nn.init.he_uniform"]], "identity() (in module mlx.nn.init)": [[339, "mlx.nn.init.identity"]], "normal() (in module mlx.nn.init)": [[340, "mlx.nn.init.normal"]], "uniform() (in module mlx.nn.init)": [[341, "mlx.nn.init.uniform"]], "elu (class in mlx.nn)": [[342, "mlx.nn.elu"]], "gelu_approx (class in mlx.nn)": [[344, "mlx.nn.gelu_approx"]], "gelu_fast_approx (class in mlx.nn)": [[345, "mlx.nn.gelu_fast_approx"]], "glu (class in mlx.nn)": [[346, "mlx.nn.glu"]], "hardswish (class in mlx.nn)": [[347, "mlx.nn.hardswish"]], "leaky_relu (class in mlx.nn)": [[348, "mlx.nn.leaky_relu"]], "log_sigmoid (class in mlx.nn)": [[349, "mlx.nn.log_sigmoid"]], "log_softmax (class in mlx.nn)": [[350, "mlx.nn.log_softmax"]], "binary_cross_entropy (class in mlx.nn.losses)": [[351, "mlx.nn.losses.binary_cross_entropy"]], "cosine_similarity_loss (class in mlx.nn.losses)": [[352, "mlx.nn.losses.cosine_similarity_loss"]], "cross_entropy (class in mlx.nn.losses)": [[353, "mlx.nn.losses.cross_entropy"]], "gaussian_nll_loss (class in mlx.nn.losses)": [[354, "mlx.nn.losses.gaussian_nll_loss"]], "hinge_loss (class in mlx.nn.losses)": [[355, "mlx.nn.losses.hinge_loss"]], "huber_loss (class in mlx.nn.losses)": [[356, "mlx.nn.losses.huber_loss"]], "kl_div_loss (class in mlx.nn.losses)": [[357, "mlx.nn.losses.kl_div_loss"]], "l1_loss (class in mlx.nn.losses)": [[358, "mlx.nn.losses.l1_loss"]], "log_cosh_loss (class in mlx.nn.losses)": [[359, "mlx.nn.losses.log_cosh_loss"]], "margin_ranking_loss (class in mlx.nn.losses)": [[360, "mlx.nn.losses.margin_ranking_loss"]], "mse_loss (class in mlx.nn.losses)": [[361, "mlx.nn.losses.mse_loss"]], "nll_loss (class in mlx.nn.losses)": [[362, "mlx.nn.losses.nll_loss"]], "smooth_l1_loss (class in mlx.nn.losses)": [[363, "mlx.nn.losses.smooth_l1_loss"]], "triplet_loss (class in mlx.nn.losses)": [[364, "mlx.nn.losses.triplet_loss"]], "relu6 (class in mlx.nn)": [[368, "mlx.nn.relu6"]], "sigmoid (class in mlx.nn)": [[370, "mlx.nn.sigmoid"]], "softmax (class in mlx.nn)": [[372, "mlx.nn.softmax"]], "softplus (class in mlx.nn)": [[373, "mlx.nn.softplus"]], "tanh (class in mlx.nn)": [[376, "mlx.nn.tanh"]], "module (class in mlx.nn)": [[381, "mlx.nn.Module"]], "adadelta (class in mlx.optimizers)": [[384, "mlx.optimizers.AdaDelta"]], "adafactor (class in mlx.optimizers)": [[385, "mlx.optimizers.Adafactor"]], "adagrad (class in mlx.optimizers)": [[386, "mlx.optimizers.Adagrad"]], "adam (class in mlx.optimizers)": [[387, "mlx.optimizers.Adam"]], "adamw (class in mlx.optimizers)": [[388, "mlx.optimizers.AdamW"]], "adamax (class in mlx.optimizers)": [[389, "mlx.optimizers.Adamax"]], "lion (class in mlx.optimizers)": [[390, "mlx.optimizers.Lion"]], "apply_gradients() (optimizer method)": [[391, "mlx.optimizers.Optimizer.apply_gradients"]], "init() (optimizer method)": [[392, "mlx.optimizers.Optimizer.init"]], "state (optimizer property)": [[393, "mlx.optimizers.Optimizer.state"]], "update() (optimizer method)": [[394, "mlx.optimizers.Optimizer.update"]], "rmsprop (class in mlx.optimizers)": [[395, "mlx.optimizers.RMSprop"]], "sgd (class in mlx.optimizers)": [[396, "mlx.optimizers.SGD"]], "cosine_decay() (in module mlx.optimizers)": [[397, "mlx.optimizers.cosine_decay"]], "exponential_decay() (in module mlx.optimizers)": [[398, "mlx.optimizers.exponential_decay"]], "join_schedules() (in module mlx.optimizers)": [[399, "mlx.optimizers.join_schedules"]], "linear_schedule() (in module mlx.optimizers)": [[400, "mlx.optimizers.linear_schedule"]], "step_decay() (in module mlx.optimizers)": [[401, "mlx.optimizers.step_decay"]], "optimizer (class in mlx.optimizers)": [[403, "mlx.optimizers.Optimizer"]]}})