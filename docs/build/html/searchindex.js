Search.setIndex({"docnames": ["cpp/ops", "dev/extensions", "dev/metal_debugger", "examples/linear_regression", "examples/llama-inference", "examples/mlp", "index", "install", "python/_autosummary/mlx.core.Device", "python/_autosummary/mlx.core.Dtype", "python/_autosummary/mlx.core.DtypeCategory", "python/_autosummary/mlx.core.abs", "python/_autosummary/mlx.core.add", "python/_autosummary/mlx.core.addmm", "python/_autosummary/mlx.core.all", "python/_autosummary/mlx.core.allclose", "python/_autosummary/mlx.core.any", "python/_autosummary/mlx.core.arange", "python/_autosummary/mlx.core.arccos", "python/_autosummary/mlx.core.arccosh", "python/_autosummary/mlx.core.arcsin", "python/_autosummary/mlx.core.arcsinh", "python/_autosummary/mlx.core.arctan", "python/_autosummary/mlx.core.arctan2", "python/_autosummary/mlx.core.arctanh", "python/_autosummary/mlx.core.argmax", "python/_autosummary/mlx.core.argmin", "python/_autosummary/mlx.core.argpartition", "python/_autosummary/mlx.core.argsort", "python/_autosummary/mlx.core.array", "python/_autosummary/mlx.core.array.T", "python/_autosummary/mlx.core.array.abs", "python/_autosummary/mlx.core.array.all", "python/_autosummary/mlx.core.array.any", "python/_autosummary/mlx.core.array.argmax", "python/_autosummary/mlx.core.array.argmin", "python/_autosummary/mlx.core.array.astype", "python/_autosummary/mlx.core.array.at", "python/_autosummary/mlx.core.array.conj", "python/_autosummary/mlx.core.array.cos", "python/_autosummary/mlx.core.array.cummax", "python/_autosummary/mlx.core.array.cummin", "python/_autosummary/mlx.core.array.cumprod", "python/_autosummary/mlx.core.array.cumsum", "python/_autosummary/mlx.core.array.diag", "python/_autosummary/mlx.core.array.diagonal", "python/_autosummary/mlx.core.array.dtype", "python/_autosummary/mlx.core.array.exp", "python/_autosummary/mlx.core.array.flatten", "python/_autosummary/mlx.core.array.item", "python/_autosummary/mlx.core.array.itemsize", "python/_autosummary/mlx.core.array.log", "python/_autosummary/mlx.core.array.log10", "python/_autosummary/mlx.core.array.log1p", "python/_autosummary/mlx.core.array.log2", "python/_autosummary/mlx.core.array.logsumexp", "python/_autosummary/mlx.core.array.max", "python/_autosummary/mlx.core.array.mean", "python/_autosummary/mlx.core.array.min", "python/_autosummary/mlx.core.array.moveaxis", "python/_autosummary/mlx.core.array.nbytes", "python/_autosummary/mlx.core.array.ndim", "python/_autosummary/mlx.core.array.prod", "python/_autosummary/mlx.core.array.reciprocal", "python/_autosummary/mlx.core.array.reshape", "python/_autosummary/mlx.core.array.round", "python/_autosummary/mlx.core.array.rsqrt", "python/_autosummary/mlx.core.array.shape", "python/_autosummary/mlx.core.array.sin", "python/_autosummary/mlx.core.array.size", "python/_autosummary/mlx.core.array.split", "python/_autosummary/mlx.core.array.sqrt", "python/_autosummary/mlx.core.array.square", "python/_autosummary/mlx.core.array.squeeze", "python/_autosummary/mlx.core.array.sum", "python/_autosummary/mlx.core.array.swapaxes", "python/_autosummary/mlx.core.array.tolist", "python/_autosummary/mlx.core.array.transpose", "python/_autosummary/mlx.core.array.var", "python/_autosummary/mlx.core.array.view", "python/_autosummary/mlx.core.array_equal", "python/_autosummary/mlx.core.as_strided", "python/_autosummary/mlx.core.atleast_1d", "python/_autosummary/mlx.core.atleast_2d", "python/_autosummary/mlx.core.atleast_3d", "python/_autosummary/mlx.core.bitwise_and", "python/_autosummary/mlx.core.bitwise_or", "python/_autosummary/mlx.core.bitwise_xor", "python/_autosummary/mlx.core.block_masked_mm", "python/_autosummary/mlx.core.broadcast_to", "python/_autosummary/mlx.core.ceil", "python/_autosummary/mlx.core.clip", "python/_autosummary/mlx.core.compile", "python/_autosummary/mlx.core.concatenate", "python/_autosummary/mlx.core.conj", "python/_autosummary/mlx.core.conjugate", "python/_autosummary/mlx.core.conv1d", "python/_autosummary/mlx.core.conv2d", "python/_autosummary/mlx.core.conv_general", "python/_autosummary/mlx.core.convolve", "python/_autosummary/mlx.core.cos", "python/_autosummary/mlx.core.cosh", "python/_autosummary/mlx.core.cummax", "python/_autosummary/mlx.core.cummin", "python/_autosummary/mlx.core.cumprod", "python/_autosummary/mlx.core.cumsum", "python/_autosummary/mlx.core.custom_function", "python/_autosummary/mlx.core.default_device", "python/_autosummary/mlx.core.default_stream", "python/_autosummary/mlx.core.degrees", "python/_autosummary/mlx.core.dequantize", "python/_autosummary/mlx.core.diag", "python/_autosummary/mlx.core.diagonal", "python/_autosummary/mlx.core.disable_compile", "python/_autosummary/mlx.core.distributed.Group", "python/_autosummary/mlx.core.distributed.all_gather", "python/_autosummary/mlx.core.distributed.all_sum", "python/_autosummary/mlx.core.distributed.init", "python/_autosummary/mlx.core.distributed.is_available", "python/_autosummary/mlx.core.divide", "python/_autosummary/mlx.core.divmod", "python/_autosummary/mlx.core.einsum", "python/_autosummary/mlx.core.einsum_path", "python/_autosummary/mlx.core.enable_compile", "python/_autosummary/mlx.core.equal", "python/_autosummary/mlx.core.erf", "python/_autosummary/mlx.core.erfinv", "python/_autosummary/mlx.core.eval", "python/_autosummary/mlx.core.exp", "python/_autosummary/mlx.core.expand_dims", "python/_autosummary/mlx.core.expm1", "python/_autosummary/mlx.core.eye", "python/_autosummary/mlx.core.fast.layer_norm", "python/_autosummary/mlx.core.fast.rms_norm", "python/_autosummary/mlx.core.fast.rope", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention", "python/_autosummary/mlx.core.fft.fft", "python/_autosummary/mlx.core.fft.fft2", "python/_autosummary/mlx.core.fft.fftn", "python/_autosummary/mlx.core.fft.ifft", "python/_autosummary/mlx.core.fft.ifft2", "python/_autosummary/mlx.core.fft.ifftn", "python/_autosummary/mlx.core.fft.irfft", "python/_autosummary/mlx.core.fft.irfft2", "python/_autosummary/mlx.core.fft.irfftn", "python/_autosummary/mlx.core.fft.rfft", "python/_autosummary/mlx.core.fft.rfft2", "python/_autosummary/mlx.core.fft.rfftn", "python/_autosummary/mlx.core.flatten", "python/_autosummary/mlx.core.floor", "python/_autosummary/mlx.core.floor_divide", "python/_autosummary/mlx.core.full", "python/_autosummary/mlx.core.gather_mm", "python/_autosummary/mlx.core.gather_qmm", "python/_autosummary/mlx.core.grad", "python/_autosummary/mlx.core.greater", "python/_autosummary/mlx.core.greater_equal", "python/_autosummary/mlx.core.hadamard_transform", "python/_autosummary/mlx.core.identity", "python/_autosummary/mlx.core.inner", "python/_autosummary/mlx.core.isclose", "python/_autosummary/mlx.core.isinf", "python/_autosummary/mlx.core.isnan", "python/_autosummary/mlx.core.isneginf", "python/_autosummary/mlx.core.isposinf", "python/_autosummary/mlx.core.issubdtype", "python/_autosummary/mlx.core.jvp", "python/_autosummary/mlx.core.left_shift", "python/_autosummary/mlx.core.less", "python/_autosummary/mlx.core.less_equal", "python/_autosummary/mlx.core.linalg.cholesky", "python/_autosummary/mlx.core.linalg.cholesky_inv", "python/_autosummary/mlx.core.linalg.inv", "python/_autosummary/mlx.core.linalg.norm", "python/_autosummary/mlx.core.linalg.qr", "python/_autosummary/mlx.core.linalg.svd", "python/_autosummary/mlx.core.linalg.tri_inv", "python/_autosummary/mlx.core.linspace", "python/_autosummary/mlx.core.load", "python/_autosummary/mlx.core.log", "python/_autosummary/mlx.core.log10", "python/_autosummary/mlx.core.log1p", "python/_autosummary/mlx.core.log2", "python/_autosummary/mlx.core.logaddexp", "python/_autosummary/mlx.core.logical_and", "python/_autosummary/mlx.core.logical_not", "python/_autosummary/mlx.core.logical_or", "python/_autosummary/mlx.core.logsumexp", "python/_autosummary/mlx.core.matmul", "python/_autosummary/mlx.core.max", "python/_autosummary/mlx.core.maximum", "python/_autosummary/mlx.core.mean", "python/_autosummary/mlx.core.meshgrid", "python/_autosummary/mlx.core.metal.clear_cache", "python/_autosummary/mlx.core.metal.device_info", "python/_autosummary/mlx.core.metal.get_active_memory", "python/_autosummary/mlx.core.metal.get_cache_memory", "python/_autosummary/mlx.core.metal.get_peak_memory", "python/_autosummary/mlx.core.metal.is_available", "python/_autosummary/mlx.core.metal.reset_peak_memory", "python/_autosummary/mlx.core.metal.set_cache_limit", "python/_autosummary/mlx.core.metal.set_memory_limit", "python/_autosummary/mlx.core.metal.start_capture", "python/_autosummary/mlx.core.metal.stop_capture", "python/_autosummary/mlx.core.min", "python/_autosummary/mlx.core.minimum", "python/_autosummary/mlx.core.moveaxis", "python/_autosummary/mlx.core.multiply", "python/_autosummary/mlx.core.nan_to_num", "python/_autosummary/mlx.core.negative", "python/_autosummary/mlx.core.new_stream", "python/_autosummary/mlx.core.not_equal", "python/_autosummary/mlx.core.ones", "python/_autosummary/mlx.core.ones_like", "python/_autosummary/mlx.core.outer", "python/_autosummary/mlx.core.pad", "python/_autosummary/mlx.core.partition", "python/_autosummary/mlx.core.power", "python/_autosummary/mlx.core.prod", "python/_autosummary/mlx.core.quantize", "python/_autosummary/mlx.core.quantized_matmul", "python/_autosummary/mlx.core.radians", "python/_autosummary/mlx.core.random.bernoulli", "python/_autosummary/mlx.core.random.categorical", "python/_autosummary/mlx.core.random.gumbel", "python/_autosummary/mlx.core.random.key", "python/_autosummary/mlx.core.random.laplace", "python/_autosummary/mlx.core.random.multivariate_normal", "python/_autosummary/mlx.core.random.normal", "python/_autosummary/mlx.core.random.randint", "python/_autosummary/mlx.core.random.seed", "python/_autosummary/mlx.core.random.split", "python/_autosummary/mlx.core.random.truncated_normal", "python/_autosummary/mlx.core.random.uniform", "python/_autosummary/mlx.core.reciprocal", "python/_autosummary/mlx.core.remainder", "python/_autosummary/mlx.core.repeat", "python/_autosummary/mlx.core.reshape", "python/_autosummary/mlx.core.right_shift", "python/_autosummary/mlx.core.round", "python/_autosummary/mlx.core.rsqrt", "python/_autosummary/mlx.core.save", "python/_autosummary/mlx.core.save_gguf", "python/_autosummary/mlx.core.save_safetensors", "python/_autosummary/mlx.core.savez", "python/_autosummary/mlx.core.savez_compressed", "python/_autosummary/mlx.core.set_default_device", "python/_autosummary/mlx.core.set_default_stream", "python/_autosummary/mlx.core.sigmoid", "python/_autosummary/mlx.core.sign", "python/_autosummary/mlx.core.sin", "python/_autosummary/mlx.core.sinh", "python/_autosummary/mlx.core.softmax", "python/_autosummary/mlx.core.sort", "python/_autosummary/mlx.core.split", "python/_autosummary/mlx.core.sqrt", "python/_autosummary/mlx.core.square", "python/_autosummary/mlx.core.squeeze", "python/_autosummary/mlx.core.stack", "python/_autosummary/mlx.core.std", "python/_autosummary/mlx.core.stop_gradient", "python/_autosummary/mlx.core.stream", "python/_autosummary/mlx.core.subtract", "python/_autosummary/mlx.core.sum", "python/_autosummary/mlx.core.swapaxes", "python/_autosummary/mlx.core.synchronize", "python/_autosummary/mlx.core.take", "python/_autosummary/mlx.core.take_along_axis", "python/_autosummary/mlx.core.tan", "python/_autosummary/mlx.core.tanh", "python/_autosummary/mlx.core.tensordot", "python/_autosummary/mlx.core.tile", "python/_autosummary/mlx.core.topk", "python/_autosummary/mlx.core.trace", "python/_autosummary/mlx.core.transpose", "python/_autosummary/mlx.core.tri", "python/_autosummary/mlx.core.tril", "python/_autosummary/mlx.core.triu", "python/_autosummary/mlx.core.value_and_grad", "python/_autosummary/mlx.core.var", "python/_autosummary/mlx.core.view", "python/_autosummary/mlx.core.vjp", "python/_autosummary/mlx.core.vmap", "python/_autosummary/mlx.core.where", "python/_autosummary/mlx.core.zeros", "python/_autosummary/mlx.core.zeros_like", "python/_autosummary/mlx.nn.quantize", "python/_autosummary/mlx.nn.value_and_grad", "python/_autosummary/mlx.optimizers.clip_grad_norm", "python/_autosummary/mlx.utils.tree_flatten", "python/_autosummary/mlx.utils.tree_map", "python/_autosummary/mlx.utils.tree_map_with_path", "python/_autosummary/mlx.utils.tree_reduce", "python/_autosummary/mlx.utils.tree_unflatten", "python/_autosummary/stream_class", "python/array", "python/data_types", "python/devices_and_streams", "python/distributed", "python/fast", "python/fft", "python/linalg", "python/metal", "python/nn", "python/nn/_autosummary/mlx.nn.ALiBi", "python/nn/_autosummary/mlx.nn.AvgPool1d", "python/nn/_autosummary/mlx.nn.AvgPool2d", "python/nn/_autosummary/mlx.nn.BatchNorm", "python/nn/_autosummary/mlx.nn.Conv1d", "python/nn/_autosummary/mlx.nn.Conv2d", "python/nn/_autosummary/mlx.nn.Conv3d", "python/nn/_autosummary/mlx.nn.Dropout", "python/nn/_autosummary/mlx.nn.Dropout2d", "python/nn/_autosummary/mlx.nn.Dropout3d", "python/nn/_autosummary/mlx.nn.Embedding", "python/nn/_autosummary/mlx.nn.GELU", "python/nn/_autosummary/mlx.nn.GLU", "python/nn/_autosummary/mlx.nn.GRU", "python/nn/_autosummary/mlx.nn.GroupNorm", "python/nn/_autosummary/mlx.nn.HardShrink", "python/nn/_autosummary/mlx.nn.HardTanh", "python/nn/_autosummary/mlx.nn.Hardswish", "python/nn/_autosummary/mlx.nn.InstanceNorm", "python/nn/_autosummary/mlx.nn.LSTM", "python/nn/_autosummary/mlx.nn.LayerNorm", "python/nn/_autosummary/mlx.nn.LeakyReLU", "python/nn/_autosummary/mlx.nn.Linear", "python/nn/_autosummary/mlx.nn.MaxPool1d", "python/nn/_autosummary/mlx.nn.MaxPool2d", "python/nn/_autosummary/mlx.nn.Mish", "python/nn/_autosummary/mlx.nn.Module.apply", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules", "python/nn/_autosummary/mlx.nn.Module.children", "python/nn/_autosummary/mlx.nn.Module.eval", "python/nn/_autosummary/mlx.nn.Module.filter_and_map", "python/nn/_autosummary/mlx.nn.Module.freeze", "python/nn/_autosummary/mlx.nn.Module.leaf_modules", "python/nn/_autosummary/mlx.nn.Module.load_weights", "python/nn/_autosummary/mlx.nn.Module.modules", "python/nn/_autosummary/mlx.nn.Module.named_modules", "python/nn/_autosummary/mlx.nn.Module.parameters", "python/nn/_autosummary/mlx.nn.Module.save_weights", "python/nn/_autosummary/mlx.nn.Module.set_dtype", "python/nn/_autosummary/mlx.nn.Module.state", "python/nn/_autosummary/mlx.nn.Module.train", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters", "python/nn/_autosummary/mlx.nn.Module.training", "python/nn/_autosummary/mlx.nn.Module.unfreeze", "python/nn/_autosummary/mlx.nn.Module.update", "python/nn/_autosummary/mlx.nn.Module.update_modules", "python/nn/_autosummary/mlx.nn.MultiHeadAttention", "python/nn/_autosummary/mlx.nn.PReLU", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding", "python/nn/_autosummary/mlx.nn.QuantizedLinear", "python/nn/_autosummary/mlx.nn.RMSNorm", "python/nn/_autosummary/mlx.nn.RNN", "python/nn/_autosummary/mlx.nn.ReLU", "python/nn/_autosummary/mlx.nn.ReLU6", "python/nn/_autosummary/mlx.nn.RoPE", "python/nn/_autosummary/mlx.nn.SELU", "python/nn/_autosummary/mlx.nn.Sequential", "python/nn/_autosummary/mlx.nn.SiLU", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding", "python/nn/_autosummary/mlx.nn.Softmax", "python/nn/_autosummary/mlx.nn.Softmin", "python/nn/_autosummary/mlx.nn.Softplus", "python/nn/_autosummary/mlx.nn.Softshrink", "python/nn/_autosummary/mlx.nn.Softsign", "python/nn/_autosummary/mlx.nn.Step", "python/nn/_autosummary/mlx.nn.Tanh", "python/nn/_autosummary/mlx.nn.Transformer", "python/nn/_autosummary/mlx.nn.Upsample", "python/nn/_autosummary/mlx.nn.init.constant", "python/nn/_autosummary/mlx.nn.init.glorot_normal", "python/nn/_autosummary/mlx.nn.init.glorot_uniform", "python/nn/_autosummary/mlx.nn.init.he_normal", "python/nn/_autosummary/mlx.nn.init.he_uniform", "python/nn/_autosummary/mlx.nn.init.identity", "python/nn/_autosummary/mlx.nn.init.normal", "python/nn/_autosummary/mlx.nn.init.uniform", "python/nn/_autosummary_functions/mlx.nn.elu", "python/nn/_autosummary_functions/mlx.nn.gelu", "python/nn/_autosummary_functions/mlx.nn.gelu_approx", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx", "python/nn/_autosummary_functions/mlx.nn.glu", "python/nn/_autosummary_functions/mlx.nn.hard_shrink", "python/nn/_autosummary_functions/mlx.nn.hard_tanh", "python/nn/_autosummary_functions/mlx.nn.hardswish", "python/nn/_autosummary_functions/mlx.nn.leaky_relu", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid", "python/nn/_autosummary_functions/mlx.nn.log_softmax", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss", "python/nn/_autosummary_functions/mlx.nn.mish", "python/nn/_autosummary_functions/mlx.nn.prelu", "python/nn/_autosummary_functions/mlx.nn.relu", "python/nn/_autosummary_functions/mlx.nn.relu6", "python/nn/_autosummary_functions/mlx.nn.selu", "python/nn/_autosummary_functions/mlx.nn.sigmoid", "python/nn/_autosummary_functions/mlx.nn.silu", "python/nn/_autosummary_functions/mlx.nn.softmax", "python/nn/_autosummary_functions/mlx.nn.softmin", "python/nn/_autosummary_functions/mlx.nn.softplus", "python/nn/_autosummary_functions/mlx.nn.softshrink", "python/nn/_autosummary_functions/mlx.nn.step", "python/nn/_autosummary_functions/mlx.nn.tanh", "python/nn/functions", "python/nn/init", "python/nn/layers", "python/nn/losses", "python/nn/module", "python/ops", "python/optimizers", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta", "python/optimizers/_autosummary/mlx.optimizers.Adafactor", "python/optimizers/_autosummary/mlx.optimizers.Adagrad", "python/optimizers/_autosummary/mlx.optimizers.Adam", "python/optimizers/_autosummary/mlx.optimizers.AdamW", "python/optimizers/_autosummary/mlx.optimizers.Adamax", "python/optimizers/_autosummary/mlx.optimizers.Lion", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update", "python/optimizers/_autosummary/mlx.optimizers.RMSprop", "python/optimizers/_autosummary/mlx.optimizers.SGD", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay", "python/optimizers/_autosummary/mlx.optimizers.join_schedules", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule", "python/optimizers/_autosummary/mlx.optimizers.step_decay", "python/optimizers/common_optimizers", "python/optimizers/optimizer", "python/optimizers/schedulers", "python/random", "python/transforms", "python/tree_utils", "usage/compile", "usage/distributed", "usage/function_transforms", "usage/indexing", "usage/lazy_evaluation", "usage/numpy", "usage/quick_start", "usage/saving_and_loading", "usage/unified_memory", "usage/using_streams"], "filenames": ["cpp/ops.rst", "dev/extensions.rst", "dev/metal_debugger.rst", "examples/linear_regression.rst", "examples/llama-inference.rst", "examples/mlp.rst", "index.rst", "install.rst", "python/_autosummary/mlx.core.Device.rst", "python/_autosummary/mlx.core.Dtype.rst", "python/_autosummary/mlx.core.DtypeCategory.rst", "python/_autosummary/mlx.core.abs.rst", "python/_autosummary/mlx.core.add.rst", "python/_autosummary/mlx.core.addmm.rst", "python/_autosummary/mlx.core.all.rst", "python/_autosummary/mlx.core.allclose.rst", "python/_autosummary/mlx.core.any.rst", "python/_autosummary/mlx.core.arange.rst", "python/_autosummary/mlx.core.arccos.rst", "python/_autosummary/mlx.core.arccosh.rst", "python/_autosummary/mlx.core.arcsin.rst", "python/_autosummary/mlx.core.arcsinh.rst", "python/_autosummary/mlx.core.arctan.rst", "python/_autosummary/mlx.core.arctan2.rst", "python/_autosummary/mlx.core.arctanh.rst", "python/_autosummary/mlx.core.argmax.rst", "python/_autosummary/mlx.core.argmin.rst", "python/_autosummary/mlx.core.argpartition.rst", "python/_autosummary/mlx.core.argsort.rst", "python/_autosummary/mlx.core.array.rst", "python/_autosummary/mlx.core.array.T.rst", "python/_autosummary/mlx.core.array.abs.rst", "python/_autosummary/mlx.core.array.all.rst", "python/_autosummary/mlx.core.array.any.rst", "python/_autosummary/mlx.core.array.argmax.rst", "python/_autosummary/mlx.core.array.argmin.rst", "python/_autosummary/mlx.core.array.astype.rst", "python/_autosummary/mlx.core.array.at.rst", "python/_autosummary/mlx.core.array.conj.rst", "python/_autosummary/mlx.core.array.cos.rst", "python/_autosummary/mlx.core.array.cummax.rst", "python/_autosummary/mlx.core.array.cummin.rst", "python/_autosummary/mlx.core.array.cumprod.rst", "python/_autosummary/mlx.core.array.cumsum.rst", "python/_autosummary/mlx.core.array.diag.rst", "python/_autosummary/mlx.core.array.diagonal.rst", "python/_autosummary/mlx.core.array.dtype.rst", "python/_autosummary/mlx.core.array.exp.rst", "python/_autosummary/mlx.core.array.flatten.rst", "python/_autosummary/mlx.core.array.item.rst", "python/_autosummary/mlx.core.array.itemsize.rst", "python/_autosummary/mlx.core.array.log.rst", "python/_autosummary/mlx.core.array.log10.rst", "python/_autosummary/mlx.core.array.log1p.rst", "python/_autosummary/mlx.core.array.log2.rst", "python/_autosummary/mlx.core.array.logsumexp.rst", "python/_autosummary/mlx.core.array.max.rst", "python/_autosummary/mlx.core.array.mean.rst", "python/_autosummary/mlx.core.array.min.rst", "python/_autosummary/mlx.core.array.moveaxis.rst", "python/_autosummary/mlx.core.array.nbytes.rst", "python/_autosummary/mlx.core.array.ndim.rst", "python/_autosummary/mlx.core.array.prod.rst", "python/_autosummary/mlx.core.array.reciprocal.rst", "python/_autosummary/mlx.core.array.reshape.rst", "python/_autosummary/mlx.core.array.round.rst", "python/_autosummary/mlx.core.array.rsqrt.rst", "python/_autosummary/mlx.core.array.shape.rst", "python/_autosummary/mlx.core.array.sin.rst", "python/_autosummary/mlx.core.array.size.rst", "python/_autosummary/mlx.core.array.split.rst", "python/_autosummary/mlx.core.array.sqrt.rst", "python/_autosummary/mlx.core.array.square.rst", "python/_autosummary/mlx.core.array.squeeze.rst", "python/_autosummary/mlx.core.array.sum.rst", "python/_autosummary/mlx.core.array.swapaxes.rst", "python/_autosummary/mlx.core.array.tolist.rst", "python/_autosummary/mlx.core.array.transpose.rst", "python/_autosummary/mlx.core.array.var.rst", "python/_autosummary/mlx.core.array.view.rst", "python/_autosummary/mlx.core.array_equal.rst", "python/_autosummary/mlx.core.as_strided.rst", "python/_autosummary/mlx.core.atleast_1d.rst", "python/_autosummary/mlx.core.atleast_2d.rst", "python/_autosummary/mlx.core.atleast_3d.rst", "python/_autosummary/mlx.core.bitwise_and.rst", "python/_autosummary/mlx.core.bitwise_or.rst", "python/_autosummary/mlx.core.bitwise_xor.rst", "python/_autosummary/mlx.core.block_masked_mm.rst", "python/_autosummary/mlx.core.broadcast_to.rst", "python/_autosummary/mlx.core.ceil.rst", "python/_autosummary/mlx.core.clip.rst", "python/_autosummary/mlx.core.compile.rst", "python/_autosummary/mlx.core.concatenate.rst", "python/_autosummary/mlx.core.conj.rst", "python/_autosummary/mlx.core.conjugate.rst", "python/_autosummary/mlx.core.conv1d.rst", "python/_autosummary/mlx.core.conv2d.rst", "python/_autosummary/mlx.core.conv_general.rst", "python/_autosummary/mlx.core.convolve.rst", "python/_autosummary/mlx.core.cos.rst", "python/_autosummary/mlx.core.cosh.rst", "python/_autosummary/mlx.core.cummax.rst", "python/_autosummary/mlx.core.cummin.rst", "python/_autosummary/mlx.core.cumprod.rst", "python/_autosummary/mlx.core.cumsum.rst", "python/_autosummary/mlx.core.custom_function.rst", "python/_autosummary/mlx.core.default_device.rst", "python/_autosummary/mlx.core.default_stream.rst", "python/_autosummary/mlx.core.degrees.rst", "python/_autosummary/mlx.core.dequantize.rst", "python/_autosummary/mlx.core.diag.rst", "python/_autosummary/mlx.core.diagonal.rst", "python/_autosummary/mlx.core.disable_compile.rst", "python/_autosummary/mlx.core.distributed.Group.rst", "python/_autosummary/mlx.core.distributed.all_gather.rst", "python/_autosummary/mlx.core.distributed.all_sum.rst", "python/_autosummary/mlx.core.distributed.init.rst", "python/_autosummary/mlx.core.distributed.is_available.rst", "python/_autosummary/mlx.core.divide.rst", "python/_autosummary/mlx.core.divmod.rst", "python/_autosummary/mlx.core.einsum.rst", "python/_autosummary/mlx.core.einsum_path.rst", "python/_autosummary/mlx.core.enable_compile.rst", "python/_autosummary/mlx.core.equal.rst", "python/_autosummary/mlx.core.erf.rst", "python/_autosummary/mlx.core.erfinv.rst", "python/_autosummary/mlx.core.eval.rst", "python/_autosummary/mlx.core.exp.rst", "python/_autosummary/mlx.core.expand_dims.rst", "python/_autosummary/mlx.core.expm1.rst", "python/_autosummary/mlx.core.eye.rst", "python/_autosummary/mlx.core.fast.layer_norm.rst", "python/_autosummary/mlx.core.fast.rms_norm.rst", "python/_autosummary/mlx.core.fast.rope.rst", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention.rst", "python/_autosummary/mlx.core.fft.fft.rst", "python/_autosummary/mlx.core.fft.fft2.rst", "python/_autosummary/mlx.core.fft.fftn.rst", "python/_autosummary/mlx.core.fft.ifft.rst", "python/_autosummary/mlx.core.fft.ifft2.rst", "python/_autosummary/mlx.core.fft.ifftn.rst", "python/_autosummary/mlx.core.fft.irfft.rst", "python/_autosummary/mlx.core.fft.irfft2.rst", "python/_autosummary/mlx.core.fft.irfftn.rst", "python/_autosummary/mlx.core.fft.rfft.rst", "python/_autosummary/mlx.core.fft.rfft2.rst", "python/_autosummary/mlx.core.fft.rfftn.rst", "python/_autosummary/mlx.core.flatten.rst", "python/_autosummary/mlx.core.floor.rst", "python/_autosummary/mlx.core.floor_divide.rst", "python/_autosummary/mlx.core.full.rst", "python/_autosummary/mlx.core.gather_mm.rst", "python/_autosummary/mlx.core.gather_qmm.rst", "python/_autosummary/mlx.core.grad.rst", "python/_autosummary/mlx.core.greater.rst", "python/_autosummary/mlx.core.greater_equal.rst", "python/_autosummary/mlx.core.hadamard_transform.rst", "python/_autosummary/mlx.core.identity.rst", "python/_autosummary/mlx.core.inner.rst", "python/_autosummary/mlx.core.isclose.rst", "python/_autosummary/mlx.core.isinf.rst", "python/_autosummary/mlx.core.isnan.rst", "python/_autosummary/mlx.core.isneginf.rst", "python/_autosummary/mlx.core.isposinf.rst", "python/_autosummary/mlx.core.issubdtype.rst", "python/_autosummary/mlx.core.jvp.rst", "python/_autosummary/mlx.core.left_shift.rst", "python/_autosummary/mlx.core.less.rst", "python/_autosummary/mlx.core.less_equal.rst", "python/_autosummary/mlx.core.linalg.cholesky.rst", "python/_autosummary/mlx.core.linalg.cholesky_inv.rst", "python/_autosummary/mlx.core.linalg.inv.rst", "python/_autosummary/mlx.core.linalg.norm.rst", "python/_autosummary/mlx.core.linalg.qr.rst", "python/_autosummary/mlx.core.linalg.svd.rst", "python/_autosummary/mlx.core.linalg.tri_inv.rst", "python/_autosummary/mlx.core.linspace.rst", "python/_autosummary/mlx.core.load.rst", "python/_autosummary/mlx.core.log.rst", "python/_autosummary/mlx.core.log10.rst", "python/_autosummary/mlx.core.log1p.rst", "python/_autosummary/mlx.core.log2.rst", "python/_autosummary/mlx.core.logaddexp.rst", "python/_autosummary/mlx.core.logical_and.rst", "python/_autosummary/mlx.core.logical_not.rst", "python/_autosummary/mlx.core.logical_or.rst", "python/_autosummary/mlx.core.logsumexp.rst", "python/_autosummary/mlx.core.matmul.rst", "python/_autosummary/mlx.core.max.rst", "python/_autosummary/mlx.core.maximum.rst", "python/_autosummary/mlx.core.mean.rst", "python/_autosummary/mlx.core.meshgrid.rst", "python/_autosummary/mlx.core.metal.clear_cache.rst", "python/_autosummary/mlx.core.metal.device_info.rst", "python/_autosummary/mlx.core.metal.get_active_memory.rst", "python/_autosummary/mlx.core.metal.get_cache_memory.rst", "python/_autosummary/mlx.core.metal.get_peak_memory.rst", "python/_autosummary/mlx.core.metal.is_available.rst", "python/_autosummary/mlx.core.metal.reset_peak_memory.rst", "python/_autosummary/mlx.core.metal.set_cache_limit.rst", "python/_autosummary/mlx.core.metal.set_memory_limit.rst", "python/_autosummary/mlx.core.metal.start_capture.rst", "python/_autosummary/mlx.core.metal.stop_capture.rst", "python/_autosummary/mlx.core.min.rst", "python/_autosummary/mlx.core.minimum.rst", "python/_autosummary/mlx.core.moveaxis.rst", "python/_autosummary/mlx.core.multiply.rst", "python/_autosummary/mlx.core.nan_to_num.rst", "python/_autosummary/mlx.core.negative.rst", "python/_autosummary/mlx.core.new_stream.rst", "python/_autosummary/mlx.core.not_equal.rst", "python/_autosummary/mlx.core.ones.rst", "python/_autosummary/mlx.core.ones_like.rst", "python/_autosummary/mlx.core.outer.rst", "python/_autosummary/mlx.core.pad.rst", "python/_autosummary/mlx.core.partition.rst", "python/_autosummary/mlx.core.power.rst", "python/_autosummary/mlx.core.prod.rst", "python/_autosummary/mlx.core.quantize.rst", "python/_autosummary/mlx.core.quantized_matmul.rst", "python/_autosummary/mlx.core.radians.rst", "python/_autosummary/mlx.core.random.bernoulli.rst", "python/_autosummary/mlx.core.random.categorical.rst", "python/_autosummary/mlx.core.random.gumbel.rst", "python/_autosummary/mlx.core.random.key.rst", "python/_autosummary/mlx.core.random.laplace.rst", "python/_autosummary/mlx.core.random.multivariate_normal.rst", "python/_autosummary/mlx.core.random.normal.rst", "python/_autosummary/mlx.core.random.randint.rst", "python/_autosummary/mlx.core.random.seed.rst", "python/_autosummary/mlx.core.random.split.rst", "python/_autosummary/mlx.core.random.truncated_normal.rst", "python/_autosummary/mlx.core.random.uniform.rst", "python/_autosummary/mlx.core.reciprocal.rst", "python/_autosummary/mlx.core.remainder.rst", "python/_autosummary/mlx.core.repeat.rst", "python/_autosummary/mlx.core.reshape.rst", "python/_autosummary/mlx.core.right_shift.rst", "python/_autosummary/mlx.core.round.rst", "python/_autosummary/mlx.core.rsqrt.rst", "python/_autosummary/mlx.core.save.rst", "python/_autosummary/mlx.core.save_gguf.rst", "python/_autosummary/mlx.core.save_safetensors.rst", "python/_autosummary/mlx.core.savez.rst", "python/_autosummary/mlx.core.savez_compressed.rst", "python/_autosummary/mlx.core.set_default_device.rst", "python/_autosummary/mlx.core.set_default_stream.rst", "python/_autosummary/mlx.core.sigmoid.rst", "python/_autosummary/mlx.core.sign.rst", "python/_autosummary/mlx.core.sin.rst", "python/_autosummary/mlx.core.sinh.rst", "python/_autosummary/mlx.core.softmax.rst", "python/_autosummary/mlx.core.sort.rst", "python/_autosummary/mlx.core.split.rst", "python/_autosummary/mlx.core.sqrt.rst", "python/_autosummary/mlx.core.square.rst", "python/_autosummary/mlx.core.squeeze.rst", "python/_autosummary/mlx.core.stack.rst", "python/_autosummary/mlx.core.std.rst", "python/_autosummary/mlx.core.stop_gradient.rst", "python/_autosummary/mlx.core.stream.rst", "python/_autosummary/mlx.core.subtract.rst", "python/_autosummary/mlx.core.sum.rst", "python/_autosummary/mlx.core.swapaxes.rst", "python/_autosummary/mlx.core.synchronize.rst", "python/_autosummary/mlx.core.take.rst", "python/_autosummary/mlx.core.take_along_axis.rst", "python/_autosummary/mlx.core.tan.rst", "python/_autosummary/mlx.core.tanh.rst", "python/_autosummary/mlx.core.tensordot.rst", "python/_autosummary/mlx.core.tile.rst", "python/_autosummary/mlx.core.topk.rst", "python/_autosummary/mlx.core.trace.rst", "python/_autosummary/mlx.core.transpose.rst", "python/_autosummary/mlx.core.tri.rst", "python/_autosummary/mlx.core.tril.rst", "python/_autosummary/mlx.core.triu.rst", "python/_autosummary/mlx.core.value_and_grad.rst", "python/_autosummary/mlx.core.var.rst", "python/_autosummary/mlx.core.view.rst", "python/_autosummary/mlx.core.vjp.rst", "python/_autosummary/mlx.core.vmap.rst", "python/_autosummary/mlx.core.where.rst", "python/_autosummary/mlx.core.zeros.rst", "python/_autosummary/mlx.core.zeros_like.rst", "python/_autosummary/mlx.nn.quantize.rst", "python/_autosummary/mlx.nn.value_and_grad.rst", "python/_autosummary/mlx.optimizers.clip_grad_norm.rst", "python/_autosummary/mlx.utils.tree_flatten.rst", "python/_autosummary/mlx.utils.tree_map.rst", "python/_autosummary/mlx.utils.tree_map_with_path.rst", "python/_autosummary/mlx.utils.tree_reduce.rst", "python/_autosummary/mlx.utils.tree_unflatten.rst", "python/_autosummary/stream_class.rst", "python/array.rst", "python/data_types.rst", "python/devices_and_streams.rst", "python/distributed.rst", "python/fast.rst", "python/fft.rst", "python/linalg.rst", "python/metal.rst", "python/nn.rst", "python/nn/_autosummary/mlx.nn.ALiBi.rst", "python/nn/_autosummary/mlx.nn.AvgPool1d.rst", "python/nn/_autosummary/mlx.nn.AvgPool2d.rst", "python/nn/_autosummary/mlx.nn.BatchNorm.rst", "python/nn/_autosummary/mlx.nn.Conv1d.rst", "python/nn/_autosummary/mlx.nn.Conv2d.rst", "python/nn/_autosummary/mlx.nn.Conv3d.rst", "python/nn/_autosummary/mlx.nn.Dropout.rst", "python/nn/_autosummary/mlx.nn.Dropout2d.rst", "python/nn/_autosummary/mlx.nn.Dropout3d.rst", "python/nn/_autosummary/mlx.nn.Embedding.rst", "python/nn/_autosummary/mlx.nn.GELU.rst", "python/nn/_autosummary/mlx.nn.GLU.rst", "python/nn/_autosummary/mlx.nn.GRU.rst", "python/nn/_autosummary/mlx.nn.GroupNorm.rst", "python/nn/_autosummary/mlx.nn.HardShrink.rst", "python/nn/_autosummary/mlx.nn.HardTanh.rst", "python/nn/_autosummary/mlx.nn.Hardswish.rst", "python/nn/_autosummary/mlx.nn.InstanceNorm.rst", "python/nn/_autosummary/mlx.nn.LSTM.rst", "python/nn/_autosummary/mlx.nn.LayerNorm.rst", "python/nn/_autosummary/mlx.nn.LeakyReLU.rst", "python/nn/_autosummary/mlx.nn.Linear.rst", "python/nn/_autosummary/mlx.nn.MaxPool1d.rst", "python/nn/_autosummary/mlx.nn.MaxPool2d.rst", "python/nn/_autosummary/mlx.nn.Mish.rst", "python/nn/_autosummary/mlx.nn.Module.apply.rst", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules.rst", "python/nn/_autosummary/mlx.nn.Module.children.rst", "python/nn/_autosummary/mlx.nn.Module.eval.rst", "python/nn/_autosummary/mlx.nn.Module.filter_and_map.rst", "python/nn/_autosummary/mlx.nn.Module.freeze.rst", "python/nn/_autosummary/mlx.nn.Module.leaf_modules.rst", "python/nn/_autosummary/mlx.nn.Module.load_weights.rst", "python/nn/_autosummary/mlx.nn.Module.modules.rst", "python/nn/_autosummary/mlx.nn.Module.named_modules.rst", "python/nn/_autosummary/mlx.nn.Module.parameters.rst", "python/nn/_autosummary/mlx.nn.Module.save_weights.rst", "python/nn/_autosummary/mlx.nn.Module.set_dtype.rst", "python/nn/_autosummary/mlx.nn.Module.state.rst", "python/nn/_autosummary/mlx.nn.Module.train.rst", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters.rst", "python/nn/_autosummary/mlx.nn.Module.training.rst", "python/nn/_autosummary/mlx.nn.Module.unfreeze.rst", "python/nn/_autosummary/mlx.nn.Module.update.rst", "python/nn/_autosummary/mlx.nn.Module.update_modules.rst", "python/nn/_autosummary/mlx.nn.MultiHeadAttention.rst", "python/nn/_autosummary/mlx.nn.PReLU.rst", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding.rst", "python/nn/_autosummary/mlx.nn.QuantizedLinear.rst", "python/nn/_autosummary/mlx.nn.RMSNorm.rst", "python/nn/_autosummary/mlx.nn.RNN.rst", "python/nn/_autosummary/mlx.nn.ReLU.rst", "python/nn/_autosummary/mlx.nn.ReLU6.rst", "python/nn/_autosummary/mlx.nn.RoPE.rst", "python/nn/_autosummary/mlx.nn.SELU.rst", "python/nn/_autosummary/mlx.nn.Sequential.rst", "python/nn/_autosummary/mlx.nn.SiLU.rst", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding.rst", "python/nn/_autosummary/mlx.nn.Softmax.rst", "python/nn/_autosummary/mlx.nn.Softmin.rst", "python/nn/_autosummary/mlx.nn.Softplus.rst", "python/nn/_autosummary/mlx.nn.Softshrink.rst", "python/nn/_autosummary/mlx.nn.Softsign.rst", "python/nn/_autosummary/mlx.nn.Step.rst", "python/nn/_autosummary/mlx.nn.Tanh.rst", "python/nn/_autosummary/mlx.nn.Transformer.rst", "python/nn/_autosummary/mlx.nn.Upsample.rst", "python/nn/_autosummary/mlx.nn.init.constant.rst", "python/nn/_autosummary/mlx.nn.init.glorot_normal.rst", "python/nn/_autosummary/mlx.nn.init.glorot_uniform.rst", "python/nn/_autosummary/mlx.nn.init.he_normal.rst", "python/nn/_autosummary/mlx.nn.init.he_uniform.rst", "python/nn/_autosummary/mlx.nn.init.identity.rst", "python/nn/_autosummary/mlx.nn.init.normal.rst", "python/nn/_autosummary/mlx.nn.init.uniform.rst", "python/nn/_autosummary_functions/mlx.nn.elu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_approx.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx.rst", "python/nn/_autosummary_functions/mlx.nn.glu.rst", "python/nn/_autosummary_functions/mlx.nn.hard_shrink.rst", "python/nn/_autosummary_functions/mlx.nn.hard_tanh.rst", "python/nn/_autosummary_functions/mlx.nn.hardswish.rst", "python/nn/_autosummary_functions/mlx.nn.leaky_relu.rst", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.log_softmax.rst", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss.rst", "python/nn/_autosummary_functions/mlx.nn.mish.rst", "python/nn/_autosummary_functions/mlx.nn.prelu.rst", "python/nn/_autosummary_functions/mlx.nn.relu.rst", "python/nn/_autosummary_functions/mlx.nn.relu6.rst", "python/nn/_autosummary_functions/mlx.nn.selu.rst", "python/nn/_autosummary_functions/mlx.nn.sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.silu.rst", "python/nn/_autosummary_functions/mlx.nn.softmax.rst", "python/nn/_autosummary_functions/mlx.nn.softmin.rst", "python/nn/_autosummary_functions/mlx.nn.softplus.rst", "python/nn/_autosummary_functions/mlx.nn.softshrink.rst", "python/nn/_autosummary_functions/mlx.nn.step.rst", "python/nn/_autosummary_functions/mlx.nn.tanh.rst", "python/nn/functions.rst", "python/nn/init.rst", "python/nn/layers.rst", "python/nn/losses.rst", "python/nn/module.rst", "python/ops.rst", "python/optimizers.rst", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta.rst", "python/optimizers/_autosummary/mlx.optimizers.Adafactor.rst", "python/optimizers/_autosummary/mlx.optimizers.Adagrad.rst", "python/optimizers/_autosummary/mlx.optimizers.Adam.rst", "python/optimizers/_autosummary/mlx.optimizers.AdamW.rst", "python/optimizers/_autosummary/mlx.optimizers.Adamax.rst", "python/optimizers/_autosummary/mlx.optimizers.Lion.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update.rst", "python/optimizers/_autosummary/mlx.optimizers.RMSprop.rst", "python/optimizers/_autosummary/mlx.optimizers.SGD.rst", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.join_schedules.rst", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule.rst", "python/optimizers/_autosummary/mlx.optimizers.step_decay.rst", "python/optimizers/common_optimizers.rst", "python/optimizers/optimizer.rst", "python/optimizers/schedulers.rst", "python/random.rst", "python/transforms.rst", "python/tree_utils.rst", "usage/compile.rst", "usage/distributed.rst", "usage/function_transforms.rst", "usage/indexing.rst", "usage/lazy_evaluation.rst", "usage/numpy.rst", "usage/quick_start.rst", "usage/saving_and_loading.rst", "usage/unified_memory.rst", "usage/using_streams.rst"], "titles": ["Operations", "Custom Extensions in MLX", "Metal Debugger", "Linear Regression", "LLM inference", "Multi-Layer Perceptron", "MLX", "Build and Install", "mlx.core.Device", "mlx.core.Dtype", "mlx.core.DtypeCategory", "mlx.core.abs", "mlx.core.add", "mlx.core.addmm", "mlx.core.all", "mlx.core.allclose", "mlx.core.any", "mlx.core.arange", "mlx.core.arccos", "mlx.core.arccosh", "mlx.core.arcsin", "mlx.core.arcsinh", "mlx.core.arctan", "mlx.core.arctan2", "mlx.core.arctanh", "mlx.core.argmax", "mlx.core.argmin", "mlx.core.argpartition", "mlx.core.argsort", "mlx.core.array", "mlx.core.array.T", "mlx.core.array.abs", "mlx.core.array.all", "mlx.core.array.any", "mlx.core.array.argmax", "mlx.core.array.argmin", "mlx.core.array.astype", "mlx.core.array.at", "mlx.core.array.conj", "mlx.core.array.cos", "mlx.core.array.cummax", "mlx.core.array.cummin", "mlx.core.array.cumprod", "mlx.core.array.cumsum", "mlx.core.array.diag", "mlx.core.array.diagonal", "mlx.core.array.dtype", "mlx.core.array.exp", "mlx.core.array.flatten", "mlx.core.array.item", "mlx.core.array.itemsize", "mlx.core.array.log", "mlx.core.array.log10", "mlx.core.array.log1p", "mlx.core.array.log2", "mlx.core.array.logsumexp", "mlx.core.array.max", "mlx.core.array.mean", "mlx.core.array.min", "mlx.core.array.moveaxis", "mlx.core.array.nbytes", "mlx.core.array.ndim", "mlx.core.array.prod", "mlx.core.array.reciprocal", "mlx.core.array.reshape", "mlx.core.array.round", "mlx.core.array.rsqrt", "mlx.core.array.shape", "mlx.core.array.sin", "mlx.core.array.size", "mlx.core.array.split", "mlx.core.array.sqrt", "mlx.core.array.square", "mlx.core.array.squeeze", "mlx.core.array.sum", "mlx.core.array.swapaxes", "mlx.core.array.tolist", "mlx.core.array.transpose", "mlx.core.array.var", "mlx.core.array.view", "mlx.core.array_equal", "mlx.core.as_strided", "mlx.core.atleast_1d", "mlx.core.atleast_2d", "mlx.core.atleast_3d", "mlx.core.bitwise_and", "mlx.core.bitwise_or", "mlx.core.bitwise_xor", "mlx.core.block_masked_mm", "mlx.core.broadcast_to", "mlx.core.ceil", "mlx.core.clip", "mlx.core.compile", "mlx.core.concatenate", "mlx.core.conj", "mlx.core.conjugate", "mlx.core.conv1d", "mlx.core.conv2d", "mlx.core.conv_general", "mlx.core.convolve", "mlx.core.cos", "mlx.core.cosh", "mlx.core.cummax", "mlx.core.cummin", "mlx.core.cumprod", "mlx.core.cumsum", "mlx.core.custom_function", "mlx.core.default_device", "mlx.core.default_stream", "mlx.core.degrees", "mlx.core.dequantize", "mlx.core.diag", "mlx.core.diagonal", "mlx.core.disable_compile", "mlx.core.distributed.Group", "mlx.core.distributed.all_gather", "mlx.core.distributed.all_sum", "mlx.core.distributed.init", "mlx.core.distributed.is_available", "mlx.core.divide", "mlx.core.divmod", "mlx.core.einsum", "mlx.core.einsum_path", "mlx.core.enable_compile", "mlx.core.equal", "mlx.core.erf", "mlx.core.erfinv", "mlx.core.eval", "mlx.core.exp", "mlx.core.expand_dims", "mlx.core.expm1", "mlx.core.eye", "mlx.core.fast.layer_norm", "mlx.core.fast.rms_norm", "mlx.core.fast.rope", "mlx.core.fast.scaled_dot_product_attention", "mlx.core.fft.fft", "mlx.core.fft.fft2", "mlx.core.fft.fftn", "mlx.core.fft.ifft", "mlx.core.fft.ifft2", "mlx.core.fft.ifftn", "mlx.core.fft.irfft", "mlx.core.fft.irfft2", "mlx.core.fft.irfftn", "mlx.core.fft.rfft", "mlx.core.fft.rfft2", "mlx.core.fft.rfftn", "mlx.core.flatten", "mlx.core.floor", "mlx.core.floor_divide", "mlx.core.full", "mlx.core.gather_mm", "mlx.core.gather_qmm", "mlx.core.grad", "mlx.core.greater", "mlx.core.greater_equal", "mlx.core.hadamard_transform", "mlx.core.identity", "mlx.core.inner", "mlx.core.isclose", "mlx.core.isinf", "mlx.core.isnan", "mlx.core.isneginf", "mlx.core.isposinf", "mlx.core.issubdtype", "mlx.core.jvp", "mlx.core.left_shift", "mlx.core.less", "mlx.core.less_equal", "mlx.core.linalg.cholesky", "mlx.core.linalg.cholesky_inv", "mlx.core.linalg.inv", "mlx.core.linalg.norm", "mlx.core.linalg.qr", "mlx.core.linalg.svd", "mlx.core.linalg.tri_inv", "mlx.core.linspace", "mlx.core.load", "mlx.core.log", "mlx.core.log10", "mlx.core.log1p", "mlx.core.log2", "mlx.core.logaddexp", "mlx.core.logical_and", "mlx.core.logical_not", "mlx.core.logical_or", "mlx.core.logsumexp", "mlx.core.matmul", "mlx.core.max", "mlx.core.maximum", "mlx.core.mean", "mlx.core.meshgrid", "mlx.core.metal.clear_cache", "mlx.core.metal.device_info", "mlx.core.metal.get_active_memory", "mlx.core.metal.get_cache_memory", "mlx.core.metal.get_peak_memory", "mlx.core.metal.is_available", "mlx.core.metal.reset_peak_memory", "mlx.core.metal.set_cache_limit", "mlx.core.metal.set_memory_limit", "mlx.core.metal.start_capture", "mlx.core.metal.stop_capture", "mlx.core.min", "mlx.core.minimum", "mlx.core.moveaxis", "mlx.core.multiply", "mlx.core.nan_to_num", "mlx.core.negative", "mlx.core.new_stream", "mlx.core.not_equal", "mlx.core.ones", "mlx.core.ones_like", "mlx.core.outer", "mlx.core.pad", "mlx.core.partition", "mlx.core.power", "mlx.core.prod", "mlx.core.quantize", "mlx.core.quantized_matmul", "mlx.core.radians", "mlx.core.random.bernoulli", "mlx.core.random.categorical", "mlx.core.random.gumbel", "mlx.core.random.key", "mlx.core.random.laplace", "mlx.core.random.multivariate_normal", "mlx.core.random.normal", "mlx.core.random.randint", "mlx.core.random.seed", "mlx.core.random.split", "mlx.core.random.truncated_normal", "mlx.core.random.uniform", "mlx.core.reciprocal", "mlx.core.remainder", "mlx.core.repeat", "mlx.core.reshape", "mlx.core.right_shift", "mlx.core.round", "mlx.core.rsqrt", "mlx.core.save", "mlx.core.save_gguf", "mlx.core.save_safetensors", "mlx.core.savez", "mlx.core.savez_compressed", "mlx.core.set_default_device", "mlx.core.set_default_stream", "mlx.core.sigmoid", "mlx.core.sign", "mlx.core.sin", "mlx.core.sinh", "mlx.core.softmax", "mlx.core.sort", "mlx.core.split", "mlx.core.sqrt", "mlx.core.square", "mlx.core.squeeze", "mlx.core.stack", "mlx.core.std", "mlx.core.stop_gradient", "mlx.core.stream", "mlx.core.subtract", "mlx.core.sum", "mlx.core.swapaxes", "mlx.core.synchronize", "mlx.core.take", "mlx.core.take_along_axis", "mlx.core.tan", "mlx.core.tanh", "mlx.core.tensordot", "mlx.core.tile", "mlx.core.topk", "mlx.core.trace", "mlx.core.transpose", "mlx.core.tri", "mlx.core.tril", "mlx.core.triu", "mlx.core.value_and_grad", "mlx.core.var", "mlx.core.view", "mlx.core.vjp", "mlx.core.vmap", "mlx.core.where", "mlx.core.zeros", "mlx.core.zeros_like", "mlx.nn.quantize", "mlx.nn.value_and_grad", "mlx.optimizers.clip_grad_norm", "mlx.utils.tree_flatten", "mlx.utils.tree_map", "mlx.utils.tree_map_with_path", "mlx.utils.tree_reduce", "mlx.utils.tree_unflatten", "mlx.core.Stream", "Array", "Data Types", "Devices and Streams", "Distributed Communication", "Fast", "FFT", "Linear Algebra", "Metal", "Neural Networks", "mlx.nn.ALiBi", "mlx.nn.AvgPool1d", "mlx.nn.AvgPool2d", "mlx.nn.BatchNorm", "mlx.nn.Conv1d", "mlx.nn.Conv2d", "mlx.nn.Conv3d", "mlx.nn.Dropout", "mlx.nn.Dropout2d", "mlx.nn.Dropout3d", "mlx.nn.Embedding", "mlx.nn.GELU", "mlx.nn.GLU", "mlx.nn.GRU", "mlx.nn.GroupNorm", "mlx.nn.HardShrink", "mlx.nn.HardTanh", "mlx.nn.Hardswish", "mlx.nn.InstanceNorm", "mlx.nn.LSTM", "mlx.nn.LayerNorm", "mlx.nn.LeakyReLU", "mlx.nn.Linear", "mlx.nn.MaxPool1d", "mlx.nn.MaxPool2d", "mlx.nn.Mish", "mlx.nn.Module.apply", "mlx.nn.Module.apply_to_modules", "mlx.nn.Module.children", "mlx.nn.Module.eval", "mlx.nn.Module.filter_and_map", "mlx.nn.Module.freeze", "mlx.nn.Module.leaf_modules", "mlx.nn.Module.load_weights", "mlx.nn.Module.modules", "mlx.nn.Module.named_modules", "mlx.nn.Module.parameters", "mlx.nn.Module.save_weights", "mlx.nn.Module.set_dtype", "mlx.nn.Module.state", "mlx.nn.Module.train", "mlx.nn.Module.trainable_parameters", "mlx.nn.Module.training", "mlx.nn.Module.unfreeze", "mlx.nn.Module.update", "mlx.nn.Module.update_modules", "mlx.nn.MultiHeadAttention", "mlx.nn.PReLU", "mlx.nn.QuantizedEmbedding", "mlx.nn.QuantizedLinear", "mlx.nn.RMSNorm", "mlx.nn.RNN", "mlx.nn.ReLU", "mlx.nn.ReLU6", "mlx.nn.RoPE", "mlx.nn.SELU", "mlx.nn.Sequential", "mlx.nn.SiLU", "mlx.nn.SinusoidalPositionalEncoding", "mlx.nn.Softmax", "mlx.nn.Softmin", "mlx.nn.Softplus", "mlx.nn.Softshrink", "mlx.nn.Softsign", "mlx.nn.Step", "mlx.nn.Tanh", "mlx.nn.Transformer", "mlx.nn.Upsample", "mlx.nn.init.constant", "mlx.nn.init.glorot_normal", "mlx.nn.init.glorot_uniform", "mlx.nn.init.he_normal", "mlx.nn.init.he_uniform", "mlx.nn.init.identity", "mlx.nn.init.normal", "mlx.nn.init.uniform", "mlx.nn.elu", "mlx.nn.gelu", "mlx.nn.gelu_approx", "mlx.nn.gelu_fast_approx", "mlx.nn.glu", "mlx.nn.hard_shrink", "mlx.nn.hard_tanh", "mlx.nn.hardswish", "mlx.nn.leaky_relu", "mlx.nn.log_sigmoid", "mlx.nn.log_softmax", "mlx.nn.losses.binary_cross_entropy", "mlx.nn.losses.cosine_similarity_loss", "mlx.nn.losses.cross_entropy", "mlx.nn.losses.gaussian_nll_loss", "mlx.nn.losses.hinge_loss", "mlx.nn.losses.huber_loss", "mlx.nn.losses.kl_div_loss", "mlx.nn.losses.l1_loss", "mlx.nn.losses.log_cosh_loss", "mlx.nn.losses.margin_ranking_loss", "mlx.nn.losses.mse_loss", "mlx.nn.losses.nll_loss", "mlx.nn.losses.smooth_l1_loss", "mlx.nn.losses.triplet_loss", "mlx.nn.mish", "mlx.nn.prelu", "mlx.nn.relu", "mlx.nn.relu6", "mlx.nn.selu", "mlx.nn.sigmoid", "mlx.nn.silu", "mlx.nn.softmax", "mlx.nn.softmin", "mlx.nn.softplus", "mlx.nn.softshrink", "mlx.nn.step", "mlx.nn.tanh", "Functions", "Initializers", "Layers", "Loss Functions", "Module", "Operations", "Optimizers", "mlx.optimizers.AdaDelta", "mlx.optimizers.Adafactor", "mlx.optimizers.Adagrad", "mlx.optimizers.Adam", "mlx.optimizers.AdamW", "mlx.optimizers.Adamax", "mlx.optimizers.Lion", "mlx.optimizers.Optimizer.apply_gradients", "mlx.optimizers.Optimizer.init", "mlx.optimizers.Optimizer.state", "mlx.optimizers.Optimizer.update", "mlx.optimizers.RMSprop", "mlx.optimizers.SGD", "mlx.optimizers.cosine_decay", "mlx.optimizers.exponential_decay", "mlx.optimizers.join_schedules", "mlx.optimizers.linear_schedule", "mlx.optimizers.step_decay", "Common Optimizers", "Optimizer", "Schedulers", "Random", "Transforms", "Tree Utils", "Compilation", "Distributed Communication", "Function Transforms", "Indexing Arrays", "Lazy Evaluation", "Conversion to NumPy and Other Frameworks", "Quick Start Guide", "Saving and Loading Arrays", "Unified Memory", "Using Streams"], "terms": {"arrai": [0, 1, 4, 5, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 115, 116, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 303, 307, 323, 330, 337, 340, 345, 351, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 416, 419, 422, 425, 426, 427, 428, 429, 430, 431, 436, 437, 438, 439, 440, 441, 442, 449, 450, 451, 453, 454, 455, 457], "arang": [0, 173, 296, 371, 452, 454], "doubl": [0, 4], "start": [0, 1, 3, 4, 6, 7, 17, 134, 177, 202, 254, 292, 449, 452, 457], "stop": [0, 1, 4, 17, 177, 203, 260, 451, 452], "step": [0, 2, 4, 5, 17, 303, 317, 323, 355, 426, 433, 438, 440, 441, 442, 449, 450], "dtype": [0, 1, 4, 10, 17, 29, 36, 37, 76, 79, 131, 148, 151, 158, 165, 173, 174, 177, 212, 224, 226, 227, 228, 229, 232, 233, 273, 275, 280, 284, 296, 342, 371, 372, 373, 374, 375, 376, 377, 378, 379, 391, 393, 400, 438, 439, 440, 441, 442, 449, 450, 451, 452, 454, 455, 456], "streamordevic": [0, 1], "": [0, 1, 3, 4, 5, 46, 50, 61, 92, 108, 110, 137, 138, 140, 141, 143, 144, 146, 147, 154, 171, 173, 175, 178, 191, 214, 219, 223, 239, 242, 243, 259, 261, 278, 279, 280, 282, 287, 303, 306, 317, 323, 328, 334, 335, 337, 341, 342, 343, 347, 355, 424, 433, 434, 446, 449, 451, 453, 454, 455, 456, 457], "A": [0, 1, 4, 6, 7, 8, 67, 80, 92, 132, 133, 135, 154, 166, 171, 173, 174, 175, 178, 187, 188, 189, 194, 204, 219, 222, 223, 224, 226, 227, 228, 229, 232, 233, 254, 258, 261, 278, 281, 282, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 307, 312, 317, 318, 322, 324, 334, 338, 339, 342, 348, 349, 354, 360, 362, 370, 373, 374, 376, 383, 404, 405, 422, 424, 428, 430, 432, 433, 435, 440, 449, 450, 451, 453, 454], "1d": [0, 96, 99, 242, 267], "number": [0, 1, 10, 17, 60, 69, 92, 97, 98, 110, 131, 153, 154, 158, 166, 177, 208, 215, 219, 220, 223, 226, 228, 231, 233, 236, 239, 270, 271, 275, 278, 281, 282, 286, 303, 307, 308, 309, 310, 312, 313, 318, 322, 350, 351, 370, 371, 373, 374, 375, 376, 438, 440, 441, 446, 449, 451, 458], "option": [0, 2, 4, 13, 14, 16, 17, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 88, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 106, 110, 111, 112, 117, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 157, 158, 163, 164, 170, 171, 172, 173, 174, 175, 176, 177, 178, 187, 189, 191, 192, 201, 204, 208, 212, 215, 216, 218, 219, 220, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 236, 237, 252, 253, 254, 257, 258, 259, 263, 265, 266, 270, 272, 273, 274, 275, 276, 277, 278, 279, 282, 284, 286, 289, 290, 291, 292, 305, 306, 307, 308, 309, 310, 317, 323, 326, 327, 328, 330, 334, 335, 337, 342, 347, 350, 352, 353, 355, 358, 362, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 425, 426, 427, 428, 429, 430, 431, 433, 436, 437, 438, 446, 449, 456, 458], "int": [0, 1, 4, 5, 8, 14, 16, 17, 25, 26, 27, 28, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 48, 55, 56, 57, 58, 59, 62, 65, 67, 70, 73, 74, 75, 76, 78, 81, 88, 89, 93, 96, 97, 98, 102, 103, 104, 105, 110, 111, 112, 122, 129, 131, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 158, 165, 173, 177, 187, 189, 191, 194, 195, 196, 197, 200, 201, 204, 206, 212, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 239, 252, 253, 254, 257, 258, 259, 263, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 282, 284, 286, 294, 303, 305, 306, 307, 308, 309, 310, 314, 316, 317, 318, 322, 323, 324, 326, 327, 328, 350, 352, 353, 354, 355, 358, 362, 370, 384, 392, 393, 397, 402, 404, 422, 438, 440, 441, 442], "linspac": 0, "num": [0, 4, 177, 231], "50": [0, 177], "float32": [0, 1, 10, 17, 131, 135, 157, 158, 165, 173, 174, 177, 212, 224, 226, 227, 228, 232, 233, 275, 284, 296, 371, 372, 373, 374, 375, 376, 377, 378, 379, 391, 393, 400, 438, 439, 440, 441, 442, 449, 450, 451, 452, 453, 454, 455, 456], "evenli": [0, 177], "space": [0, 1, 177, 391, 402], "rang": [0, 1, 2, 3, 4, 5, 7, 17, 148, 152, 177, 374, 376, 382, 383, 424, 438, 439, 440, 441, 442, 446, 449, 451, 453, 457], "astyp": [0, 1, 4, 330, 454], "convert": [0, 1, 76, 82, 83, 84, 109, 148, 221, 352, 353, 453, 454, 455], "an": [0, 1, 2, 4, 5, 7, 9, 14, 16, 29, 82, 83, 84, 89, 96, 97, 98, 114, 127, 131, 132, 135, 148, 151, 158, 170, 173, 178, 201, 206, 212, 213, 215, 218, 219, 220, 236, 237, 239, 254, 257, 264, 266, 267, 270, 271, 275, 282, 284, 285, 289, 290, 291, 292, 303, 305, 306, 311, 315, 318, 323, 324, 326, 327, 328, 330, 350, 351, 353, 355, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 406, 419, 424, 425, 435, 439, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458], "given": [0, 1, 7, 14, 16, 27, 37, 81, 89, 91, 93, 102, 103, 104, 105, 110, 112, 122, 127, 129, 136, 137, 138, 139, 140, 141, 145, 146, 147, 151, 152, 173, 187, 189, 191, 200, 204, 208, 210, 218, 227, 229, 239, 247, 252, 254, 259, 263, 265, 271, 272, 273, 275, 276, 277, 279, 294, 305, 306, 311, 327, 328, 334, 350, 392, 394, 400], "data": [0, 1, 5, 6, 9, 17, 131, 145, 146, 151, 158, 177, 208, 212, 232, 273, 275, 280, 284, 313, 372, 373, 374, 375, 376, 377, 378, 379, 449, 450, 452, 454], "type": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 67, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 200, 201, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 292, 303, 342, 370, 372, 373, 374, 375, 376, 377, 378, 379, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 449, 452], "as_strid": 0, "std": [0, 1, 378], "vector": [0, 1, 3, 6, 159, 166, 173, 266, 281, 282, 314, 393, 455], "shape": [0, 1, 2, 4, 5, 64, 80, 81, 88, 89, 92, 96, 97, 98, 112, 115, 135, 136, 139, 142, 145, 146, 147, 151, 152, 157, 166, 172, 176, 188, 212, 213, 222, 223, 224, 226, 227, 228, 229, 232, 233, 237, 267, 280, 281, 283, 284, 285, 303, 305, 306, 307, 308, 309, 310, 312, 313, 317, 322, 323, 326, 327, 328, 337, 355, 372, 373, 374, 375, 376, 377, 378, 379, 393, 404, 424, 449, 451, 452, 455, 457], "size_t": [0, 1], "stride": [0, 1, 81, 96, 97, 98, 305, 306, 308, 309, 310, 327, 328, 358, 452], "offset": [0, 1, 4, 45, 81, 112, 132, 134, 273], "creat": [0, 1, 4, 7, 81, 117, 131, 158, 261, 303, 422, 424, 440, 449, 452, 454], "view": [0, 2, 81, 454], "copi": [0, 1, 4, 6, 216, 253, 454], "anoth": [0, 91, 165, 188, 262, 283, 296, 303, 330, 449, 451, 452, 457], "full": [0, 1, 5, 64, 77, 99, 252, 348, 349, 394, 449, 450, 453], "val": [0, 29, 151], "fill": [0, 1, 151, 213, 275, 285, 372, 373, 374, 375, 376, 378, 379], "valu": [0, 3, 4, 10, 11, 15, 17, 25, 26, 49, 76, 80, 91, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 160, 173, 175, 177, 194, 208, 215, 222, 223, 224, 226, 227, 228, 229, 232, 233, 242, 266, 267, 278, 282, 287, 289, 290, 291, 292, 296, 306, 311, 312, 313, 319, 322, 326, 328, 334, 350, 351, 366, 368, 370, 372, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 416, 422, 426, 429, 438, 439, 441, 442, 451], "templat": [0, 1], "typenam": [0, 1], "t": [0, 1, 4, 7, 125, 135, 153, 170, 171, 220, 278, 303, 305, 317, 323, 327, 355, 425, 426, 427, 428, 429, 430, 431, 436, 437, 449, 451, 457], "zero": [0, 131, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 192, 199, 275, 276, 277, 285, 303, 305, 306, 311, 312, 313, 337, 372, 373, 374, 375, 376, 377, 378, 379, 419, 424, 426, 452], "const": [0, 1, 394], "inlin": 0, "zeros_lik": 0, "ones": [0, 1, 4, 213, 244, 275, 348, 349, 424, 450, 452], "ones_lik": 0, "ey": [0, 4, 172, 176], "n": [0, 1, 4, 29, 88, 96, 97, 98, 131, 136, 138, 139, 141, 142, 145, 147, 157, 158, 227, 259, 275, 279, 305, 306, 307, 308, 309, 310, 312, 313, 317, 323, 327, 328, 355, 371, 399, 404, 450], "m": [0, 1, 4, 7, 88, 131, 152, 157, 173, 275, 305, 306, 327, 328, 425, 449], "k": [0, 4, 44, 88, 111, 131, 135, 152, 157, 272, 275, 276, 277, 305, 326, 327, 335], "specifi": [0, 1, 17, 36, 97, 98, 112, 143, 144, 151, 154, 173, 177, 206, 212, 223, 236, 264, 266, 267, 270, 273, 274, 278, 282, 284, 307, 368, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 416, 450, 451, 457], "diagon": [0, 44, 111, 131, 273, 275, 276, 277], "everywher": 0, "els": [0, 1, 4, 303, 335, 450, 453], "ident": [0, 106, 131, 260, 303, 344], "squar": [0, 3, 4, 133, 158, 172, 176, 240, 255, 278, 290, 303, 354, 401, 403, 425, 426, 428, 429, 430, 451, 454], "matrix": [0, 3, 13, 44, 88, 110, 111, 131, 152, 153, 157, 158, 170, 171, 172, 173, 174, 175, 176, 188, 192, 219, 220, 227, 352, 353, 377, 419], "major": [0, 1], "tri": 0, "tril": 0, "x": [0, 1, 3, 4, 5, 37, 88, 106, 115, 116, 125, 130, 132, 133, 153, 157, 158, 173, 220, 224, 239, 244, 248, 276, 277, 283, 290, 292, 303, 305, 306, 307, 315, 316, 318, 322, 324, 325, 326, 327, 328, 329, 330, 351, 354, 356, 362, 368, 371, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 422, 424, 431, 449, 450, 451, 452, 453, 454, 455, 457], "0": [0, 1, 3, 4, 5, 7, 8, 13, 17, 37, 44, 45, 48, 65, 70, 78, 81, 93, 96, 97, 98, 111, 112, 131, 135, 148, 152, 154, 172, 173, 174, 176, 193, 200, 208, 215, 222, 226, 228, 233, 236, 239, 254, 258, 259, 273, 275, 276, 277, 278, 279, 282, 288, 289, 291, 292, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 318, 319, 322, 324, 325, 327, 328, 351, 356, 358, 362, 366, 368, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 385, 386, 387, 388, 391, 393, 395, 396, 400, 403, 404, 406, 407, 408, 409, 415, 416, 419, 422, 425, 426, 428, 429, 430, 431, 433, 436, 437, 438, 439, 440, 441, 442, 446, 449, 450, 451, 452, 453, 454, 455, 456], "triu": 0, "reshap": [0, 4, 173, 371, 452], "flatten": [0, 27, 28, 102, 103, 104, 105, 173, 214, 216, 236, 253, 266, 267, 272, 289], "start_axi": [0, 48, 148], "end_axi": [0, 48, 148], "1": [0, 1, 2, 4, 5, 13, 17, 27, 28, 37, 45, 48, 96, 97, 98, 111, 112, 130, 135, 136, 137, 139, 140, 142, 143, 144, 145, 146, 147, 148, 157, 159, 165, 171, 173, 174, 188, 192, 201, 214, 216, 219, 223, 226, 227, 228, 233, 248, 253, 266, 272, 273, 278, 288, 291, 292, 296, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 322, 323, 324, 326, 327, 328, 351, 354, 355, 358, 362, 368, 371, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 402, 403, 404, 409, 410, 412, 413, 414, 416, 419, 422, 424, 425, 426, 427, 428, 429, 430, 431, 433, 436, 437, 438, 439, 440, 441, 442, 449, 450, 451, 452, 454, 455, 456, 457], "dimens": [0, 1, 4, 14, 16, 25, 26, 61, 67, 76, 82, 83, 84, 92, 97, 98, 112, 129, 134, 143, 144, 146, 147, 148, 152, 153, 159, 170, 171, 172, 173, 174, 175, 176, 187, 188, 189, 191, 204, 218, 219, 223, 231, 259, 263, 267, 270, 274, 279, 307, 308, 309, 310, 312, 313, 316, 317, 318, 322, 323, 324, 350, 354, 355, 358, 370, 371, 384, 393, 449, 451], "hadamard_transform": 0, "float": [0, 1, 10, 13, 15, 17, 76, 132, 133, 134, 135, 150, 151, 157, 160, 165, 173, 208, 220, 222, 226, 228, 288, 296, 307, 311, 312, 313, 318, 322, 324, 330, 342, 354, 358, 362, 368, 370, 371, 372, 373, 374, 375, 376, 378, 379, 392, 393, 394, 396, 400, 403, 404, 415, 416, 425, 426, 427, 428, 429, 430, 431, 436, 437, 438, 439, 441, 442], "scale": [0, 1, 4, 13, 110, 132, 133, 134, 135, 153, 157, 219, 220, 226, 228, 288, 312, 313, 324, 350, 358, 359, 362, 371, 409, 426], "nullopt": 0, "multipli": [0, 1, 37, 153, 219, 220, 311, 362, 371], "hadamard": [0, 157], "correspond": [0, 1, 14, 16, 76, 91, 110, 112, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 187, 189, 204, 218, 263, 270, 282, 290, 451], "size": [0, 1, 4, 5, 50, 67, 88, 97, 110, 129, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 151, 153, 157, 158, 165, 173, 196, 201, 219, 220, 223, 237, 254, 257, 280, 286, 303, 305, 306, 308, 309, 310, 314, 322, 327, 328, 352, 353, 371, 426, 450, 453, 454], "squeez": [0, 371, 449], "ax": [0, 1, 14, 16, 25, 26, 77, 106, 129, 137, 138, 140, 141, 143, 144, 146, 147, 148, 159, 173, 187, 189, 191, 204, 215, 218, 252, 257, 259, 263, 264, 270, 274, 279, 451], "remov": [0, 112, 188, 223, 257, 393], "singleton": [0, 14, 16, 25, 26, 117, 187, 188, 189, 191, 204, 218, 259, 263, 279], "axi": [0, 1, 4, 5, 14, 16, 25, 26, 27, 28, 32, 33, 34, 35, 40, 41, 42, 43, 55, 56, 57, 58, 62, 70, 73, 74, 78, 93, 102, 103, 104, 105, 112, 115, 129, 132, 133, 136, 139, 142, 143, 144, 145, 146, 147, 148, 157, 173, 187, 189, 191, 204, 206, 215, 216, 218, 223, 236, 252, 253, 254, 257, 258, 259, 263, 264, 266, 267, 271, 272, 273, 274, 279, 280, 282, 305, 306, 316, 327, 328, 355, 384, 390, 392, 393, 397, 402, 404, 412, 413, 452], "all": [0, 1, 2, 5, 7, 15, 27, 37, 82, 83, 84, 92, 97, 98, 106, 115, 116, 117, 131, 138, 141, 144, 147, 152, 153, 175, 188, 215, 216, 257, 286, 303, 330, 331, 335, 338, 339, 340, 345, 347, 350, 362, 370, 371, 419, 422, 444, 446, 449, 452, 453, 455, 458], "expand_dim": 0, "add": [0, 1, 2, 4, 13, 37, 129, 183, 215, 219, 308, 309, 310, 451, 457], "slice": [0, 452], "each": [0, 1, 67, 110, 127, 134, 153, 165, 170, 171, 172, 175, 176, 188, 192, 215, 219, 220, 223, 236, 244, 245, 254, 271, 274, 280, 282, 283, 312, 313, 314, 317, 318, 323, 355, 358, 370, 391, 393, 446, 449, 450, 453], "slice_upd": 0, "src": 0, "updat": [0, 1, 3, 4, 5, 37, 92, 286, 290, 292, 307, 330, 331, 337, 342, 343, 344, 349, 424, 426, 429, 431, 432, 433, 437, 438, 439, 440, 441, 442, 449, 450, 453], "from": [0, 1, 4, 5, 6, 81, 109, 110, 112, 115, 116, 143, 144, 146, 147, 151, 152, 157, 173, 178, 188, 192, 197, 200, 213, 219, 221, 222, 223, 224, 225, 226, 229, 232, 244, 257, 260, 262, 266, 267, 272, 273, 283, 285, 289, 290, 291, 292, 293, 303, 326, 335, 337, 350, 373, 374, 375, 376, 378, 379, 394, 403, 419, 424, 448, 449, 450, 451, 453, 454, 455, 456, 457], "sourc": [0, 1, 2, 59, 206, 274, 450], "split": [0, 316, 318, 384], "num_split": 0, "sub": [0, 5, 112, 231, 273, 286], "along": [0, 1, 25, 26, 92, 93, 102, 103, 104, 105, 115, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 153, 157, 173, 236, 252, 254, 258, 266, 267, 270, 271, 272, 273, 280, 303, 316, 355, 384], "indic": [0, 1, 15, 25, 26, 27, 28, 37, 152, 153, 154, 160, 161, 162, 163, 164, 175, 254, 266, 267, 278, 344, 346, 393, 400, 440, 452], "meshgrid": 0, "bool": [0, 1, 14, 15, 16, 25, 26, 32, 33, 34, 35, 40, 41, 42, 43, 55, 56, 57, 58, 62, 74, 76, 78, 80, 92, 98, 102, 103, 104, 105, 117, 118, 134, 153, 160, 165, 170, 171, 173, 176, 178, 187, 189, 191, 192, 198, 201, 204, 218, 220, 259, 263, 279, 307, 308, 309, 310, 317, 318, 322, 323, 324, 326, 330, 334, 335, 337, 342, 344, 347, 350, 353, 355, 358, 362, 370, 371, 391, 394, 426, 437], "spars": [0, 192], "fals": [0, 1, 4, 14, 15, 16, 25, 26, 32, 33, 34, 35, 40, 41, 42, 43, 55, 56, 57, 58, 62, 74, 78, 80, 92, 98, 102, 103, 104, 105, 117, 160, 165, 170, 171, 173, 176, 178, 187, 189, 191, 192, 201, 204, 218, 259, 263, 279, 283, 286, 289, 290, 291, 292, 296, 318, 322, 324, 326, 335, 337, 347, 350, 353, 358, 362, 370, 371, 391, 394, 426, 437, 454], "string": [0, 1, 122, 194, 215, 454, 456], "index": [0, 1, 6, 8, 27, 37, 129, 131, 154, 192, 216, 266, 267, 278, 294], "xy": [0, 192], "coordin": [0, 192], "clip": [0, 288, 391, 426], "a_min": [0, 91], "a_max": [0, 91], "limit": [0, 1, 91, 200, 201, 452], "concaten": [0, 4, 115], "stack": [0, 449], "new": [0, 1, 5, 89, 112, 206, 210, 237, 258, 274, 280, 290, 291, 342, 350, 422, 424, 435, 440, 449, 452, 453, 454], "repeat": [0, 271], "arr": [0, 241, 452], "tile": [0, 135], "rep": [0, 271], "transpos": [0, 4, 30, 153, 220], "permut": [0, 5], "accord": [0, 224, 283, 286, 350, 373, 374, 375, 376], "initializer_list": 0, "swapax": [0, 106], "axis1": [0, 45, 75, 112, 264, 273], "axis2": [0, 45, 75, 112, 264, 273], "swap": [0, 99, 201, 264, 349], "two": [0, 1, 12, 13, 15, 23, 80, 83, 85, 86, 87, 88, 112, 119, 124, 137, 140, 146, 152, 153, 155, 156, 160, 168, 169, 170, 171, 172, 174, 175, 176, 183, 188, 190, 205, 207, 211, 214, 264, 292, 306, 316, 323, 328, 384, 392, 449, 450, 451, 452, 457], "moveaxi": 0, "destin": [0, 1, 59, 206], "move": [0, 1, 206, 457], "pad": [0, 96, 97, 98, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 305, 306, 308, 309, 310, 327, 328], "low_pad_s": 0, "high_pad_s": 0, "pad_valu": 0, "mode": [0, 1, 99, 215, 333, 344, 346, 371, 375, 376, 450], "constant": [0, 1, 4, 7, 132, 133, 215, 303, 307, 318, 324, 354, 394, 404, 436, 438, 449, 454], "pair": [0, 1, 215, 337, 358], "pad_width": [0, 215], "revers": [0, 1, 40, 41, 42, 43, 81, 102, 103, 104, 105, 274, 362], "order": [0, 27, 81, 98, 122, 173, 216, 219, 272, 303, 318, 348, 360, 433, 449, 451], "broadcast_to": 0, "broadcast": [0, 1, 12, 15, 85, 86, 87, 89, 91, 119, 120, 124, 151, 155, 156, 160, 167, 168, 169, 183, 188, 190, 205, 207, 211, 217, 222, 223, 227, 232, 233, 235, 238, 262, 267, 283, 350], "broadcast_arrai": [0, 1], "input": [0, 1, 3, 4, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 115, 116, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 204, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 231, 234, 235, 236, 237, 238, 239, 240, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 285, 305, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 318, 322, 323, 324, 326, 327, 328, 350, 353, 354, 355, 358, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 391, 392, 394, 395, 396, 397, 399, 400, 402, 404, 416, 419, 449, 451, 452, 455, 456], "against": 0, "one": [0, 1, 4, 7, 37, 76, 82, 91, 97, 98, 129, 131, 132, 133, 173, 181, 188, 220, 223, 257, 262, 296, 347, 371, 393, 450, 457], "equal": [0, 15, 27, 80, 131, 156, 160, 169, 211, 216, 229, 254, 322, 326], "b": [0, 1, 2, 4, 12, 13, 15, 23, 80, 85, 86, 87, 88, 119, 120, 124, 150, 152, 155, 156, 159, 160, 167, 168, 169, 173, 183, 184, 186, 188, 190, 205, 207, 211, 214, 217, 219, 226, 235, 238, 262, 270, 278, 291, 292, 316, 326, 355, 371, 384, 451, 452, 453, 454, 455, 456, 457], "return": [0, 1, 3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 49, 67, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 200, 201, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 303, 317, 323, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 344, 345, 347, 348, 349, 355, 372, 373, 374, 375, 376, 377, 378, 379, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 419, 422, 432, 448, 449, 450, 451, 452, 453, 454, 456, 457], "element": [0, 1, 11, 12, 18, 19, 20, 21, 22, 23, 24, 27, 69, 81, 85, 86, 87, 90, 100, 101, 102, 103, 104, 105, 110, 119, 120, 124, 125, 126, 128, 130, 131, 149, 150, 153, 155, 156, 160, 161, 162, 163, 164, 167, 168, 169, 179, 180, 181, 182, 183, 184, 185, 186, 190, 192, 205, 207, 209, 211, 216, 217, 219, 220, 234, 235, 236, 238, 240, 248, 249, 250, 251, 255, 256, 262, 266, 268, 269, 272, 278, 280, 283, 311, 312, 313, 317, 321, 323, 329, 351, 355, 358, 386, 387, 389, 390, 405, 406, 408, 411, 412, 413, 414, 449, 451], "wise": [0, 1, 11, 12, 18, 19, 20, 21, 22, 23, 24, 85, 86, 87, 90, 100, 101, 119, 120, 124, 125, 126, 128, 130, 149, 150, 155, 156, 160, 167, 168, 169, 179, 180, 181, 182, 183, 184, 185, 186, 190, 205, 207, 209, 211, 217, 234, 235, 238, 240, 248, 249, 250, 251, 255, 256, 262, 268, 269, 312, 313, 321, 329, 351, 386, 387, 389, 390, 405, 406, 408, 411, 412, 413, 414, 449], "not_equ": 0, "greater": [0, 4, 27, 130, 156, 216, 288, 368, 416], "greater_equ": 0, "less": [0, 4, 27, 169, 216, 358, 403], "less_equ": 0, "array_equ": [0, 15, 160], "equal_nan": [0, 15, 80, 160], "true": [0, 1, 3, 4, 15, 40, 41, 42, 43, 80, 92, 102, 103, 104, 105, 134, 153, 160, 165, 170, 171, 173, 178, 192, 201, 220, 252, 283, 286, 289, 290, 291, 292, 296, 303, 307, 308, 309, 310, 317, 318, 322, 323, 324, 326, 334, 335, 337, 344, 347, 353, 355, 358, 362, 370, 371, 391, 399, 426], "have": [0, 1, 4, 7, 15, 80, 82, 83, 84, 88, 115, 143, 144, 146, 147, 153, 160, 188, 202, 223, 280, 289, 323, 350, 360, 431, 433, 448, 449, 450, 452, 453, 457], "same": [0, 1, 4, 7, 15, 37, 80, 89, 92, 97, 98, 99, 115, 132, 133, 142, 145, 146, 147, 153, 154, 160, 166, 215, 223, 239, 280, 281, 283, 291, 303, 306, 307, 311, 318, 322, 328, 352, 372, 373, 374, 375, 376, 377, 378, 379, 393, 404, 422, 432, 446, 449, 450, 452, 457], "isnan": 0, "isinf": 0, "isposinf": 0, "isneginf": 0, "where": [0, 5, 131, 160, 171, 219, 278, 282, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 317, 318, 322, 323, 324, 326, 327, 328, 334, 351, 354, 355, 368, 375, 376, 380, 381, 383, 394, 400, 406, 409, 411, 416, 433, 450, 451, 452], "condit": [0, 1, 283, 457], "y": [0, 1, 3, 4, 5, 37, 106, 157, 283, 303, 307, 312, 318, 322, 324, 326, 354, 395, 400, 403, 424, 427, 449, 450, 451, 453, 454], "select": [0, 2, 7, 272, 283, 330, 334, 342], "depend": [0, 1, 2, 3, 7, 76, 173, 317, 323, 355, 450, 452, 456, 457], "nan_to_num": 0, "nan": [0, 15, 80, 160, 162, 208], "0f": 0, "posinf": [0, 208], "neginf": [0, 208], "replac": [0, 4, 208, 348, 349, 370, 403], "infin": [0, 161, 163, 164, 208, 327, 328, 430], "finit": [0, 208], "keepdim": [0, 14, 16, 25, 26, 32, 33, 34, 35, 55, 56, 57, 58, 62, 74, 78, 173, 187, 189, 191, 204, 218, 252, 259, 263, 279], "ar": [0, 1, 3, 4, 5, 6, 7, 15, 17, 80, 88, 89, 91, 92, 98, 99, 106, 112, 127, 131, 137, 138, 140, 141, 143, 144, 146, 147, 148, 153, 154, 160, 161, 162, 163, 164, 165, 166, 173, 174, 178, 188, 201, 214, 215, 216, 219, 220, 222, 223, 224, 229, 232, 233, 244, 245, 257, 258, 266, 278, 281, 282, 286, 289, 290, 296, 307, 308, 309, 310, 311, 312, 313, 318, 322, 324, 326, 337, 350, 353, 371, 391, 393, 394, 418, 422, 424, 431, 433, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457], "non": [0, 1, 7, 192, 345, 355, 405, 422], "allclos": 0, "rtol": [0, 15, 160], "1e": [0, 3, 5, 15, 160, 307, 318, 322, 324, 325, 354, 392, 394, 404, 424, 425, 426, 427, 428, 429, 430, 433, 436, 438, 439, 440, 441, 442], "5": [0, 1, 3, 4, 7, 173, 201, 222, 292, 305, 307, 311, 312, 313, 315, 319, 322, 327, 366, 371, 372, 375, 376, 382, 385, 403, 415, 419, 424, 436, 438, 439, 449, 451, 452], "atol": [0, 15, 160], "8": [0, 1, 4, 7, 173, 219, 296, 306, 322, 328, 370, 392, 425, 426, 427, 428, 429, 430, 436, 449, 452, 455, 457], "within": [0, 2, 27, 160], "toler": [0, 15, 160], "isclos": 0, "boolean": [0, 15, 80, 160, 161, 162, 163, 164, 184, 185, 186, 296, 346, 452], "reduc": [0, 7, 14, 16, 25, 26, 116, 187, 189, 191, 204, 218, 259, 263, 279, 292, 307, 370, 399], "output": [0, 1, 4, 7, 14, 15, 16, 17, 27, 81, 88, 89, 92, 94, 95, 102, 103, 104, 105, 106, 121, 131, 132, 133, 134, 135, 142, 145, 146, 147, 151, 152, 154, 157, 158, 160, 173, 177, 187, 189, 191, 192, 204, 208, 212, 213, 216, 218, 222, 223, 224, 226, 227, 228, 229, 232, 233, 244, 245, 252, 257, 259, 263, 267, 273, 275, 278, 279, 280, 281, 282, 283, 284, 285, 305, 306, 307, 308, 309, 310, 322, 326, 327, 328, 350, 353, 368, 370, 371, 373, 374, 375, 376, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 416, 419, 449, 450, 451, 452, 453, 454, 455, 456, 457], "i": [0, 1, 2, 4, 5, 6, 7, 15, 17, 27, 36, 76, 81, 91, 97, 98, 99, 102, 103, 104, 105, 106, 111, 112, 115, 116, 118, 120, 127, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 157, 160, 165, 166, 170, 171, 172, 173, 174, 175, 176, 178, 183, 187, 188, 192, 198, 201, 215, 216, 219, 220, 227, 228, 237, 241, 242, 243, 248, 252, 254, 259, 260, 265, 266, 267, 270, 273, 274, 278, 279, 280, 281, 282, 283, 286, 288, 289, 290, 291, 292, 296, 298, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 317, 318, 322, 323, 324, 326, 327, 328, 334, 335, 341, 343, 344, 346, 347, 349, 350, 351, 353, 354, 355, 358, 362, 368, 370, 371, 375, 376, 381, 383, 391, 392, 394, 399, 400, 403, 404, 406, 411, 416, 422, 424, 426, 429, 431, 432, 433, 438, 440, 441, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458], "ani": [0, 1, 4, 6, 17, 92, 289, 290, 291, 292, 293, 303, 315, 330, 331, 334, 343, 353, 370, 371, 419, 441, 448, 449, 451, 453, 455, 456, 457], "sum": [0, 1, 3, 12, 105, 116, 159, 173, 187, 252, 270, 273, 303, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 450, 452, 454], "mean": [0, 3, 4, 5, 133, 226, 227, 228, 278, 303, 307, 318, 335, 354, 378, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 449, 451, 454], "comput": [0, 1, 3, 4, 5, 6, 7, 102, 103, 104, 105, 106, 110, 122, 130, 134, 154, 166, 170, 171, 172, 173, 176, 183, 191, 214, 219, 235, 252, 259, 260, 270, 278, 279, 281, 287, 303, 307, 317, 318, 322, 323, 324, 335, 348, 353, 354, 358, 370, 373, 374, 375, 376, 382, 383, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 424, 425, 426, 428, 429, 430, 431, 435, 449, 450, 451, 455, 457], "var": [0, 307, 318, 322, 324, 394], "ddof": [0, 78, 259, 279], "varianc": [0, 259, 279, 307, 318, 394], "standard": [0, 5, 49, 76, 188, 224, 228, 259, 370, 373, 375, 378, 450, 455], "deviat": [0, 228, 259, 373, 375, 378], "deviatoin": 0, "prod": 0, "The": [0, 1, 2, 4, 5, 6, 7, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 46, 50, 60, 61, 67, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 197, 200, 201, 202, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 242, 243, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 298, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 322, 323, 324, 326, 327, 328, 330, 331, 335, 337, 341, 342, 343, 344, 347, 348, 349, 350, 352, 353, 354, 355, 358, 360, 362, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 416, 419, 422, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 438, 441, 444, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458], "product": [0, 1, 13, 81, 104, 159, 166, 188, 214, 218, 270, 281, 350, 455], "max": [0, 1, 173, 190, 327, 328, 351, 386, 387, 392, 394, 395, 400, 404, 406, 408, 426, 430, 449, 451, 457], "maximum": [0, 5, 25, 37, 91, 102, 197, 201, 288, 303, 325, 356, 362, 382, 383, 388, 407, 422, 453], "min": [0, 1, 173, 205, 351, 386, 387, 406, 408], "minimum": [0, 26, 37, 91, 103, 362, 391, 392], "argmin": 0, "argmax": [0, 5], "sort": [0, 27, 28, 216, 272], "argsort": 0, "partit": [0, 27], "kth": [0, 27, 216], "smaller": [0, 7, 216, 431, 449], "first": [0, 1, 2, 3, 4, 5, 7, 112, 115, 148, 154, 167, 175, 184, 186, 188, 216, 231, 238, 264, 270, 273, 278, 289, 291, 292, 303, 306, 318, 328, 371, 392, 400, 426, 428, 429, 430, 433, 449, 451, 454, 457], "argpartit": 0, "topk": 0, "logsumexp": 0, "ab": [0, 15, 160, 173, 278, 318, 322, 324, 329, 354, 383, 405, 449], "absolut": [0, 11, 15, 160, 382, 383, 403], "neg": [0, 112, 148, 163, 208, 273, 325, 327, 328, 350, 394, 402, 404, 452], "negat": [0, 209], "sign": [0, 15, 160, 296, 431], "logical_not": 0, "logic": [0, 1, 184, 185, 186], "logical_and": 0, "logical_or": 0, "reciproc": [0, 240], "subtract": [0, 37], "divid": [0, 1, 37, 150, 219, 235, 450], "divmod": 0, "quotient": [0, 119, 120, 150], "remaind": [0, 120], "floor_divid": 0, "integ": [0, 10, 150, 152, 153, 165, 173, 194, 215, 219, 220, 222, 229, 254, 270, 282, 296, 314, 342, 440, 452], "divis": [0, 119, 150, 219, 235], "equival": [0, 1, 30, 64, 77, 120, 150, 153, 157, 266, 315, 319, 320, 321, 349, 351, 353, 356, 357, 359, 361, 363, 364, 365, 366, 367, 369], "do": [0, 1, 4, 7, 280, 303, 336, 347, 419, 422, 429, 449, 450, 451, 453], "floor": [0, 150], "between": [0, 1, 6, 91, 148, 370, 392, 395, 396, 399, 440, 450, 453, 454, 457], "ceil": 0, "exp": [0, 130, 183, 187, 224, 252, 380, 397, 409, 410, 414, 449, 457], "exponenti": [0, 128, 130, 359, 380, 409, 439], "sin": [0, 106, 362, 451, 455], "sine": [0, 20, 21, 250, 251, 451], "co": [0, 1, 106, 362, 451], "cosin": [0, 18, 19, 100, 101, 392, 438, 440, 451], "tan": 0, "tangent": [0, 1, 22, 23, 24, 106, 166, 268, 269, 369, 417], "arcsin": 0, "arc": 0, "arcco": 0, "arctan": 0, "arctan2": 0, "invers": [0, 18, 19, 20, 21, 22, 23, 24, 126, 139, 140, 141, 142, 143, 144, 171, 172, 176], "ratio": [0, 23], "sinh": 0, "hyperbol": [0, 19, 21, 24, 101, 251, 269, 369, 417], "cosh": [0, 399], "tanh": [0, 303, 315, 317, 323, 329, 355, 382, 405], "arcsinh": 0, "arccosh": 0, "arctanh": 0, "degre": [0, 221, 404], "radian": [0, 109], "log": [0, 181, 183, 187, 389, 390, 391, 394, 397, 399, 402, 414], "natur": [0, 179, 181, 453], "logarithm": [0, 179, 180, 181, 182], "log2": 0, "base": [0, 1, 134, 173, 180, 182, 217, 358, 370, 422, 424, 430, 444, 446, 449, 452], "2": [0, 1, 3, 4, 5, 37, 97, 111, 112, 125, 137, 140, 142, 143, 144, 145, 146, 147, 148, 157, 165, 170, 171, 172, 173, 174, 175, 176, 182, 188, 219, 227, 231, 270, 273, 275, 276, 277, 288, 292, 296, 303, 305, 306, 309, 315, 325, 327, 328, 354, 362, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 393, 394, 396, 403, 404, 419, 422, 424, 425, 427, 428, 429, 433, 436, 449, 450, 451, 452, 453, 454, 455, 456, 457], "log10": 0, "10": [0, 2, 4, 5, 180, 239, 244, 290, 303, 337, 419, 440, 442, 449, 450, 452], "log1p": 0, "plu": [0, 181], "logaddexp": 0, "sigmoid": [0, 4, 303, 361, 383, 389, 391, 411], "logist": [0, 3, 248, 383, 411], "erf": [0, 126, 449], "error": [0, 1, 7, 117, 125, 126, 201, 254, 315, 381, 382, 383, 399, 401, 451, 454], "function": [0, 1, 2, 3, 4, 5, 6, 15, 81, 92, 106, 120, 125, 126, 154, 160, 166, 170, 171, 172, 173, 174, 175, 176, 188, 248, 278, 281, 282, 287, 288, 290, 291, 292, 303, 315, 316, 319, 320, 321, 329, 331, 335, 342, 347, 351, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 405, 410, 412, 413, 414, 415, 416, 417, 419, 424, 433, 446, 448, 450, 452, 453, 454, 456], "erfinv": 0, "expm1": 0, "stop_gradi": [0, 451], "flow": [0, 260, 453], "gradient": [0, 3, 5, 106, 154, 260, 278, 287, 288, 303, 335, 348, 353, 370, 399, 422, 424, 425, 426, 428, 429, 430, 431, 432, 435, 437, 449, 450, 451, 452, 453, 454, 455], "round": [0, 219], "decim": [0, 65, 239], "point": [0, 1, 3, 4, 7, 81, 150, 220, 296], "matmul": [0, 152, 457], "multipl": [0, 7, 13, 88, 132, 133, 152, 153, 188, 207, 219, 220, 350, 362, 439, 440, 442, 449, 453, 456], "gather": [0, 115, 152, 153], "slice_s": 0, "entri": [0, 312, 313], "take": [0, 1, 4, 5, 85, 86, 87, 92, 152, 154, 166, 190, 205, 213, 220, 267, 278, 281, 282, 285, 291, 292, 350, 391, 446, 450, 451, 452, 456, 457, 458], "treat": [0, 1, 143, 144, 146, 147, 266, 371, 449], "take_along_axi": [0, 452], "scatter": 0, "paramet": [0, 1, 3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 330, 331, 334, 335, 337, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 360, 362, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 416, 418, 419, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 444, 449, 450, 451, 453], "determin": [0, 1, 112, 227, 292, 296, 341, 456], "locat": [0, 1, 81, 348, 349, 450, 457], "assum": [0, 1, 4, 88, 174, 290, 303, 305, 306, 318, 327, 328], "d": [0, 1, 4, 111, 112, 159, 173, 188, 192, 214, 266, 273, 275, 276, 277, 293, 310, 313, 317, 323, 355, 425, 428, 430, 457], "simplic": 0, "which": [0, 1, 4, 5, 6, 7, 17, 36, 81, 92, 98, 112, 127, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 154, 161, 162, 163, 164, 166, 170, 171, 172, 173, 174, 175, 176, 178, 192, 202, 219, 223, 224, 236, 237, 241, 242, 243, 244, 245, 257, 258, 266, 273, 278, 281, 282, 286, 306, 312, 313, 315, 328, 330, 334, 358, 391, 393, 396, 400, 403, 419, 432, 433, 446, 449, 450, 451, 452, 453, 457, 458], "appli": [0, 37, 134, 135, 152, 175, 290, 291, 292, 303, 305, 306, 307, 308, 309, 310, 312, 313, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 331, 344, 351, 353, 354, 355, 356, 357, 359, 361, 363, 364, 365, 366, 367, 368, 369, 371, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 432, 435, 441, 444, 449, 450], "note": [0, 1, 4, 7, 15, 81, 88, 92, 106, 135, 143, 144, 153, 160, 173, 195, 219, 223, 280, 286, 303, 354, 371, 424, 454, 456], "assign": [0, 1, 37, 422], "henc": [0, 1, 219, 449], "If": [0, 1, 4, 7, 14, 15, 16, 17, 25, 26, 27, 28, 76, 80, 81, 91, 93, 99, 102, 103, 104, 105, 111, 112, 115, 116, 117, 127, 132, 134, 145, 146, 147, 150, 151, 154, 160, 170, 171, 173, 178, 187, 188, 189, 191, 192, 200, 201, 204, 208, 212, 215, 216, 218, 223, 227, 236, 252, 253, 254, 259, 263, 265, 266, 267, 270, 272, 273, 278, 279, 282, 284, 286, 290, 292, 307, 308, 309, 310, 318, 324, 326, 335, 337, 347, 353, 355, 358, 360, 362, 371, 391, 393, 404, 426, 449, 450, 451, 453, 456, 457, 458], "provid": [0, 1, 4, 81, 110, 154, 270, 278, 290, 292, 298, 303, 330, 335, 337, 347, 348, 349, 352, 353, 370, 371, 418, 422, 450, 456, 458], "rank": [0, 400, 450], "must": [0, 1, 2, 7, 88, 91, 151, 153, 173, 222, 223, 227, 229, 232, 233, 283, 371, 454], "In": [0, 1, 4, 5, 37, 188, 219, 290, 303, 312, 318, 422, 425, 427, 428, 430, 431, 432, 448, 449, 450, 451, 453, 456, 457], "other": [0, 1, 4, 6, 165, 173, 303, 336, 422, 431, 449, 450, 452, 453, 455], "word": 0, "ndim": [0, 1, 148, 173, 175, 371], "lead": [0, 17, 81, 449], "remain": [0, 4, 278, 291, 311, 312, 313, 450], "For": [0, 1, 4, 7, 37, 135, 152, 165, 173, 219, 293, 303, 307, 312, 315, 330, 335, 344, 347, 353, 358, 362, 371, 373, 374, 375, 376, 391, 419, 424, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457], "exampl": [0, 2, 3, 4, 5, 7, 17, 37, 106, 148, 173, 174, 261, 266, 288, 291, 292, 303, 305, 306, 307, 322, 327, 328, 335, 337, 344, 347, 371, 372, 373, 374, 375, 376, 377, 378, 379, 391, 393, 400, 419, 424, 433, 438, 439, 440, 441, 442, 446, 451, 452, 453, 454, 455, 456], "auto": [0, 1, 7], "4": [0, 1, 4, 110, 148, 153, 173, 219, 220, 244, 286, 292, 296, 305, 306, 307, 322, 327, 328, 352, 353, 370, 371, 373, 374, 375, 391, 449, 450, 452, 455, 457], "3": [0, 1, 4, 7, 148, 165, 173, 174, 288, 292, 310, 315, 371, 374, 376, 382, 387, 426, 431, 446, 449, 452, 454, 455], "out": [0, 1, 7, 88, 305, 306, 312, 313, 327, 328, 344, 449, 450, 451, 452], "produc": [0, 1, 7, 92, 350, 419], "thi": [0, 1, 4, 5, 7, 14, 15, 16, 17, 25, 26, 27, 28, 81, 106, 123, 152, 153, 157, 160, 166, 170, 171, 172, 173, 174, 175, 176, 183, 187, 188, 189, 191, 193, 195, 204, 216, 218, 223, 247, 252, 253, 254, 259, 263, 266, 272, 279, 288, 291, 292, 303, 311, 312, 313, 316, 317, 323, 331, 332, 334, 335, 338, 339, 340, 345, 347, 348, 349, 350, 353, 355, 368, 373, 374, 375, 376, 382, 383, 384, 391, 399, 416, 422, 433, 448, 449, 450, 451, 453, 454, 456], "row": [0, 1, 81, 131, 158, 219, 275], "posit": [0, 4, 27, 112, 134, 148, 154, 164, 170, 171, 206, 208, 216, 227, 273, 278, 290, 303, 308, 309, 310, 350, 358, 362, 394, 404], "ad": [0, 1, 3, 7, 132, 322, 422, 425, 426, 427, 428, 429, 430, 436, 450, 453, 456], "we": [0, 1, 3, 4, 5, 110, 153, 219, 220, 303, 314, 352, 360, 429, 431, 446, 448, 449, 450, 451, 453, 457], "also": [0, 1, 4, 5, 6, 7, 10, 12, 85, 86, 87, 113, 119, 120, 124, 138, 141, 144, 147, 155, 156, 167, 168, 169, 183, 190, 205, 207, 211, 217, 219, 235, 238, 262, 286, 287, 298, 303, 334, 348, 350, 352, 353, 361, 381, 409, 411, 418, 424, 449, 450, 451, 452, 453, 454, 455, 458], "To": [0, 1, 2, 3, 4, 5, 7, 200, 303, 419, 424, 449, 450, 451, 455], "control": [0, 325, 446, 453], "addit": [0, 1, 4, 7, 12, 13, 132, 133, 135, 178, 307, 318, 324, 350, 354, 422, 451], "item": [0, 1, 3, 4, 5, 290, 424, 453, 454, 455], "togeth": [0, 1, 5, 219, 290, 291, 450], "doe": [0, 1, 2, 4, 7, 195, 280, 288, 303, 449, 452, 453, 454], "perform": [0, 1, 2, 4, 6, 13, 88, 98, 102, 103, 104, 105, 121, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 153, 157, 188, 220, 239, 252, 266, 303, 318, 370, 375, 376, 424, 449, 450, 452, 453, 457], "bound": [0, 229, 232, 233, 315, 379, 449, 452, 457], "check": [0, 1, 7, 80, 118, 165, 198, 337, 451, 452], "access": [0, 4, 49, 303, 422, 433, 450, 453, 457], "undefin": [0, 27, 106, 170, 171, 216, 227, 452], "typic": [0, 135, 314, 424, 449, 453], "result": [0, 4, 13, 17, 37, 76, 81, 92, 132, 133, 153, 173, 188, 220, 227, 236, 258, 290, 291, 292, 362, 391, 449, 451, 454], "unintend": 0, "invalid": [0, 81], "memori": [0, 1, 6, 81, 193, 195, 196, 197, 199, 200, 201, 370, 422, 426, 449, 453, 454], "write": [0, 1, 4, 303, 454], "scatter_add": 0, "scatter_prod": 0, "scatter_max": 0, "linear": [0, 1, 4, 5, 6, 286, 290, 303, 315, 316, 325, 337, 353, 355, 356, 357, 359, 361, 371, 380, 381, 382, 383, 384, 388, 407, 408, 409, 411, 419, 422, 433, 441, 449], "scatter_min": 0, "sqrt": [0, 4, 125, 135, 157, 307, 315, 318, 322, 324, 326, 354, 362, 373, 374, 375, 376, 382, 425, 427, 428, 429, 436, 449], "root": [0, 4, 133, 240, 255, 354], "rsqrt": 0, "softmax": [0, 4, 135, 303, 390, 393], "precis": [0, 1, 4, 130, 135, 303, 315, 354, 391, 432, 449], "power": [0, 451, 454], "rais": [0, 4, 173, 201, 217, 254, 337], "cumsum": 0, "inclus": [0, 40, 41, 42, 43, 102, 103, 104, 105, 148], "cumul": [0, 81, 102, 103, 104, 105], "cumprod": 0, "cummax": 0, "cummin": 0, "conv_gener": 0, "weight": [0, 3, 96, 97, 98, 132, 133, 290, 303, 337, 341, 352, 353, 391, 393, 422, 426, 429, 431, 433, 437, 451, 453], "padding_lo": 0, "padding_hi": 0, "kernel_dil": [0, 98], "input_dil": [0, 98], "group": [0, 96, 97, 98, 110, 115, 116, 117, 135, 153, 219, 220, 280, 286, 318, 352, 353, 450], "flip": [0, 98, 99], "gener": [0, 1, 2, 3, 10, 17, 98, 131, 143, 144, 177, 192, 222, 227, 228, 229, 232, 233, 370, 446, 449, 452, 453, 458], "convolut": [0, 96, 97, 98, 99, 308, 309, 310, 312, 313], "filter": [0, 99, 308, 309, 310, 330, 334], "conv1d": [0, 303], "dilat": [0, 96, 97, 98, 308, 309], "conv2d": [0, 303], "2d": [0, 97, 112, 219, 307, 312], "conv3d": [0, 303], "tupl": [0, 29, 64, 67, 77, 93, 97, 98, 120, 122, 127, 129, 166, 173, 174, 175, 215, 219, 237, 257, 278, 281, 289, 290, 291, 292, 293, 305, 306, 309, 310, 327, 328, 337, 339, 360, 371, 426, 428, 429, 430, 431, 448, 451], "3d": [0, 1, 307, 313, 371], "quantized_matmul": 0, "w": [0, 3, 97, 110, 153, 219, 220, 278, 291, 306, 307, 309, 310, 312, 313, 326, 328, 424, 437, 451], "bias": [0, 110, 153, 219, 220, 317, 323, 335, 347, 350], "group_siz": [0, 110, 153, 219, 220, 286, 352, 353], "64": [0, 88, 110, 153, 219, 220, 286, 296, 352, 353], "bit": [0, 110, 153, 167, 219, 220, 238, 286, 296, 330, 352, 353, 354], "quantiz": [0, 110, 153, 178, 220, 352, 353], "its": [0, 1, 7, 171, 188, 216, 231, 275, 287, 293, 303, 353, 424, 428, 429, 430, 450, 454, 457], "last": [0, 4, 28, 76, 132, 133, 138, 141, 143, 144, 146, 147, 148, 152, 153, 159, 170, 171, 172, 174, 175, 176, 188, 197, 223, 253, 270, 280, 308, 309, 310, 312, 313, 318, 371, 454], "dequant": [0, 219], "gather_qmm": 0, "lhs_indic": [0, 152, 153], "rhs_indic": [0, 152, 153], "level": [0, 152, 153, 375, 376], "tensordot": 0, "contract": [0, 122], "over": [0, 1, 4, 5, 14, 16, 25, 26, 27, 28, 96, 97, 98, 102, 103, 104, 105, 138, 141, 144, 147, 159, 173, 175, 177, 187, 189, 191, 204, 216, 218, 240, 252, 253, 259, 263, 270, 272, 279, 307, 308, 309, 310, 318, 324, 354, 393, 438, 441, 450, 451], "axes_a": 0, "axes_b": 0, "outer": [0, 449, 453], "inner": [0, 449], "addmm": 0, "c": [0, 1, 4, 13, 173, 305, 306, 307, 308, 309, 310, 312, 313, 322, 323, 327, 328, 454, 455, 457], "alpha": [0, 1, 13, 219, 380, 404, 406, 409, 429, 436], "f": [0, 1, 3, 5, 106, 173, 303, 323, 429, 449, 454], "beta": [0, 1, 13, 110, 219, 307, 318, 322, 324, 403, 424, 428, 429, 430, 431], "block_masked_mm": 0, "block_siz": [0, 88], "mask_out": [0, 88], "mask_lh": [0, 88], "mask_rh": [0, 88], "block": [0, 1, 4, 88, 370], "mask": [0, 4, 88, 135, 344, 350, 452], "gather_mm": [0, 153], "extract": [0, 4, 44, 111, 112, 303, 334, 422, 450], "construct": [0, 1, 5, 44, 111, 151, 212, 271, 284], "diag": [0, 175], "trace": [0, 2, 449], "implement": [0, 3, 5, 134, 135, 173, 314, 334, 350, 358, 360, 362, 368, 370, 371, 416, 425, 426, 427, 428, 430, 431, 432, 444, 449, 451], "allow": [0, 1, 165, 288, 303, 349, 422, 444, 450, 452, 455], "inject": 0, "ensur": [0, 1, 7, 288, 399, 450], "been": [0, 1, 4, 196, 453], "when": [0, 1, 4, 6, 7, 92, 98, 106, 170, 171, 172, 173, 175, 176, 178, 308, 309, 310, 371, 375, 376, 391, 397, 403, 422, 424, 440, 446, 449, 450, 457], "atleast_1d": 0, "atleast": 0, "atleast_2d": 0, "atleast_3d": 0, "number_of_el": 0, "invert": 0, "int32": [0, 10, 17, 37, 148, 165, 173, 229, 296, 371, 452, 455], "some": [0, 1, 3, 4, 5, 335, 347, 424, 433, 449, 451, 453], "scalar": [0, 1, 12, 13, 15, 29, 49, 76, 80, 85, 86, 87, 88, 89, 91, 119, 120, 124, 150, 151, 154, 155, 156, 157, 160, 167, 168, 169, 173, 177, 183, 184, 185, 186, 188, 190, 205, 207, 208, 211, 215, 217, 222, 229, 232, 233, 235, 238, 242, 262, 278, 280, 283, 287, 404, 451, 453, 455], "us": [0, 2, 3, 4, 5, 6, 7, 17, 37, 81, 106, 110, 113, 115, 116, 120, 134, 148, 153, 167, 170, 171, 172, 173, 174, 175, 176, 188, 195, 196, 197, 200, 219, 220, 236, 237, 238, 265, 289, 292, 296, 298, 303, 306, 312, 314, 315, 317, 323, 326, 328, 330, 334, 341, 348, 350, 352, 353, 355, 358, 362, 370, 371, 375, 376, 382, 383, 392, 419, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 446, 448, 449, 450, 451, 452, 455, 457], "shapeless": [0, 92], "compil": [0, 2, 6, 7, 113, 123, 450, 451, 453], "pun": 0, "intend": [0, 449], "conjug": [0, 94], "bitwise_and": 0, "bitwis": [0, 85, 86, 87, 167, 238], "bitwise_or": 0, "bitwise_xor": 0, "exclus": [0, 81, 87], "left_shift": 0, "shift": [0, 167, 238, 307], "left": [0, 4, 134, 167, 173, 219, 305, 306, 315, 327, 328, 358, 371, 382, 383, 394, 396, 404], "right_shift": 0, "right": [0, 1, 7, 219, 238, 305, 306, 315, 327, 328, 371, 382, 383, 394, 396, 404], "you": [1, 2, 4, 5, 6, 7, 303, 362, 370, 419, 446, 449, 450, 451, 452, 454, 456, 457], "can": [1, 2, 4, 6, 7, 12, 17, 64, 77, 81, 85, 86, 87, 92, 112, 113, 114, 119, 120, 124, 127, 155, 156, 167, 168, 169, 173, 183, 190, 205, 207, 211, 217, 222, 223, 229, 232, 233, 235, 238, 242, 262, 273, 278, 292, 303, 306, 314, 315, 328, 334, 347, 352, 360, 371, 393, 419, 422, 424, 432, 433, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458], "extend": [1, 215], "guid": [1, 6], "explain": 1, "how": [1, 4, 5, 303, 305, 306, 308, 309, 310, 314, 327, 328, 352, 371, 432, 449, 452, 457], "simpl": [1, 4, 5, 303, 314, 418, 424, 449, 450, 451, 453], "let": [1, 3, 4, 171, 449, 451, 453, 454], "sai": [1, 4, 419, 453], "would": [1, 4, 371, 450, 452, 453, 454, 457], "like": [1, 4, 6, 165, 213, 285, 313, 399, 433, 435, 449, 450, 451, 453, 454, 455, 457], "them": [1, 4, 115, 303, 335, 347, 450, 457], "both": [1, 12, 85, 86, 87, 119, 120, 124, 155, 156, 165, 167, 168, 169, 173, 183, 190, 205, 207, 211, 217, 223, 235, 238, 262, 286, 305, 306, 322, 323, 327, 328, 424, 449, 450, 451, 455, 457], "coeffici": [1, 425, 426, 428, 429, 430, 431], "respect": [1, 3, 5, 132, 133, 152, 153, 154, 219, 278, 290, 303, 307, 315, 318, 322, 324, 422, 451, 455], "get": [1, 3, 5, 7, 97, 98, 107, 108, 194, 195, 196, 197, 225, 303, 449, 451, 453, 457], "z": [1, 317, 449, 453], "directli": [1, 4, 81], "import": [1, 2, 3, 4, 5, 7, 106, 157, 173, 244, 278, 289, 290, 291, 292, 293, 303, 305, 306, 307, 322, 327, 328, 337, 371, 391, 393, 400, 419, 422, 424, 449, 450, 451, 452, 453, 454, 455], "core": [1, 2, 3, 4, 5, 286, 303, 305, 306, 307, 322, 327, 328, 337, 340, 342, 345, 371, 372, 373, 374, 375, 376, 377, 378, 379, 391, 393, 400, 419, 422, 424, 449, 450, 454, 455], "mx": [1, 2, 3, 4, 5, 37, 94, 95, 106, 117, 148, 165, 173, 174, 178, 244, 278, 288, 303, 305, 306, 307, 322, 325, 327, 328, 330, 337, 341, 356, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 388, 391, 392, 393, 397, 400, 407, 417, 419, 422, 424, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458], "def": [1, 3, 4, 5, 106, 278, 303, 422, 449, 450, 451, 452, 453, 454, 457], "simple_axpbi": 1, "while": [1, 2, 4, 7, 237, 358, 453, 454], "leav": [1, 127, 290, 291, 292], "howev": [1, 106, 303, 315, 318, 433, 446, 449, 450, 453, 454], "mai": [1, 173, 286, 312, 450, 451, 452], "need": [1, 4, 5, 6, 7, 80, 219, 303, 348, 349, 362, 370, 446, 450, 451, 453, 454, 455, 457], "underli": [1, 280], "perhap": [1, 4], "make": [1, 2, 4, 5, 7, 188, 210, 247, 303, 438, 439, 441, 442, 449, 453, 455, 457], "faster": [1, 7, 120, 381, 391, 449, 451], "differenti": [1, 6], "tutori": 1, "go": [1, 4, 451], "through": [1, 260, 370, 431, 449, 451, 454], "It": [1, 4, 7, 154, 247, 278, 288, 292, 303, 349, 353, 432, 444, 454, 456], "cover": 1, "structur": [1, 432, 451], "librari": [1, 7, 298, 303], "redirect": 1, "acceler": [1, 307], "appropri": [1, 449], "metal": [1, 6], "vjp": [1, 106, 455], "jvp": [1, 106, 455], "graph": [1, 4, 5, 6, 451], "rule": [1, 424], "evalu": [1, 4, 5, 6, 127, 166, 281, 303, 333, 344, 422, 424, 449, 455], "discuss": 1, "more": [1, 2, 5, 9, 76, 112, 152, 170, 171, 172, 175, 176, 188, 200, 201, 242, 243, 296, 303, 307, 312, 358, 362, 370, 371, 373, 374, 375, 376, 391, 446, 449, 450, 451, 452, 455, 457], "detail": [1, 9, 200, 303, 312, 358, 362, 371, 373, 374, 375, 376, 425, 427, 428, 430, 431, 452, 455], "front": 1, "thei": [1, 3, 4, 7, 15, 99, 153, 160, 360, 395, 422, 431, 448, 449, 450, 453, 455, 456, 457], "defin": [1, 3, 4, 5, 7, 106, 153, 173, 220, 286, 289, 454], "api": [1, 315, 450, 451], "axpbi": 1, "follow": [1, 4, 5, 6, 7, 17, 99, 110, 152, 173, 215, 219, 291, 303, 382, 383, 397, 425, 426, 427, 428, 429, 430, 431, 437, 446, 449, 450, 451, 457], "numpi": [1, 4, 5, 6, 12, 15, 17, 85, 86, 87, 89, 119, 120, 124, 155, 156, 160, 167, 168, 169, 183, 188, 190, 205, 207, 211, 217, 235, 238, 262, 453, 455, 456], "style": [1, 12, 15, 85, 86, 87, 119, 120, 124, 155, 156, 160, 167, 168, 169, 183, 188, 190, 205, 207, 211, 217, 235, 238, 262], "upcast": 1, "factor": [1, 13, 157, 170, 171, 174, 371, 393, 439, 442], "stream": [1, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 119, 120, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 283, 284, 285, 450, 457], "schedul": [1, 201, 424, 438, 439, 440, 441, 442, 444, 457], "simplest": [1, 303, 450], "wai": [1, 4, 7, 303, 371, 449, 450, 451, 452], "term": [1, 394, 425, 426, 427, 428, 429, 430, 436], "exist": [1, 2, 4, 335, 347], "themselv": [1, 449], "contain": [1, 4, 7, 27, 28, 67, 92, 112, 122, 142, 143, 144, 152, 153, 173, 184, 185, 186, 219, 254, 283, 288, 303, 334, 336, 337, 343, 370, 400, 419, 422, 449, 450, 451], "act": [1, 399], "nor": [1, 154, 278], "rather": [1, 451, 457], "easi": [1, 303, 450], "interfac": 1, "part": [1, 451, 452], "further": [1, 7, 451], "ha": [1, 2, 4, 5, 6, 7, 76, 92, 112, 142, 143, 145, 146, 147, 154, 170, 171, 172, 175, 176, 192, 196, 223, 307, 317, 323, 326, 355, 422, 424, 449, 452, 453, 455, 457], "method": [1, 4, 8, 9, 29, 106, 114, 286, 294, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 341, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 422, 425, 426, 427, 428, 429, 430, 431, 433, 436, 437, 444], "run": [1, 2, 4, 5, 6, 7, 8, 214, 294, 307, 330, 425, 426, 428, 429, 430, 449, 450, 453, 457, 458], "our": [1, 4, 5, 360, 425, 426, 427, 428, 430, 431, 450], "concret": [1, 317, 323, 326, 355, 453, 457], "class": [1, 4, 5, 8, 9, 10, 29, 106, 114, 294, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 422, 425, 426, 427, 428, 429, 430, 431, 436, 437, 444], "public": [1, 303], "explicit": [1, 433, 446, 454], "alpha_": 1, "beta_": 1, "know": [1, 4], "itself": [1, 286, 433], "popul": 1, "avoid": [1, 342, 449], "unnecessari": [1, 4], "alloc": [1, 196, 200, 201, 422], "respons": 1, "void": 1, "eval_cpu": 1, "overrid": [1, 123], "eval_gpu": 1, "jacobian": [1, 166, 281, 455], "primal": [1, 106, 166, 281], "argnum": [1, 154, 278, 451], "cotan": [1, 106], "across": [1, 318, 450], "repres": [1, 4, 114, 117, 153, 400, 404, 454], "virtual": 1, "vmap": [1, 106, 451, 453, 455], "print": [1, 3, 4, 5, 7, 288, 289, 290, 291, 293, 303, 446, 449, 450, 451, 452, 453, 454, 455], "ostream": 1, "o": [1, 7, 135, 323], "is_equival": 1, "privat": 1, "fall": [1, 106], "eval": [1, 2, 3, 4, 5, 303, 422, 424, 449, 450, 451, 453, 455], "deriv": [1, 451, 453], "pass": [1, 4, 5, 64, 77, 214, 215, 278, 287, 289, 290, 291, 303, 335, 347, 348, 349, 360, 449, 450, 453], "reimplement": 1, "now": [1, 4, 7, 353, 449, 450, 454], "promot": 1, "promoted_dtyp": 1, "promote_typ": 1, "out_dtyp": 1, "is_floating_point": 1, "cast": [1, 36, 145, 146, 147, 178, 330, 342, 454], "up": [1, 4, 106, 449], "x_cast": 1, "y_cast": 1, "broadcasted_input": 1, "out_shap": 1, "unique_ptr": 1, "make_shar": 1, "to_stream": 1, "handl": [1, 303, 449], "resolv": 1, "No": [1, 4], "happen": [1, 4, 132, 370, 424, 449, 453], "call": [1, 2, 4, 5, 30, 150, 193, 197, 303, 314, 335, 347, 352, 360, 422, 424, 433, 449, 450, 451, 453], "alon": [1, 454], "onli": [1, 4, 6, 7, 80, 88, 97, 98, 173, 219, 227, 280, 303, 334, 335, 337, 342, 344, 347, 348, 349, 422, 449, 450, 451, 456, 457], "execut": [1, 7, 82, 83, 84, 197, 454, 457], "devic": [1, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 119, 120, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 283, 284, 285, 294, 457, 458], "user": [1, 4, 303], "naiv": [1, 451], "version": [1, 7, 110, 183, 187, 219, 252, 282, 446, 451, 452], "declar": 1, "member": [1, 303, 340, 345], "earlier": 1, "find": [1, 3, 7, 450], "captur": [1, 2, 92, 202, 203, 303, 449], "axpby_impl": 1, "readi": 1, "malloc_or_wait": 1, "synchron": [1, 449], "avail": [1, 3, 4, 5, 7, 9, 118, 198, 298, 457], "There": [1, 303, 371, 449], "wait": [1, 4, 201], "here": [1, 4, 424, 449, 451, 453, 456, 457], "request": 1, "under": [1, 173], "pressur": 1, "set_data": 1, "nbyte": 1, "collect": [1, 290, 291, 448], "pointer": 1, "x_ptr": 1, "y_ptr": 1, "out_ptr": 1, "relev": 1, "static_cast": 1, "out_idx": 1, "map": [1, 5, 37, 178, 290, 314, 330], "x_offset": 1, "elem_to_loc": 1, "y_offset": 1, "contigu": [1, 81], "regularli": 1, "default": [1, 7, 13, 14, 15, 16, 17, 25, 26, 27, 28, 80, 81, 88, 92, 93, 96, 97, 98, 106, 107, 108, 110, 111, 112, 115, 116, 117, 131, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 157, 158, 160, 170, 171, 172, 173, 174, 175, 176, 177, 178, 187, 189, 191, 192, 200, 201, 204, 208, 212, 215, 216, 218, 219, 220, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 236, 237, 239, 246, 247, 253, 254, 257, 258, 259, 261, 263, 265, 270, 272, 273, 274, 275, 276, 277, 278, 279, 282, 284, 286, 296, 305, 306, 307, 308, 309, 310, 316, 317, 319, 322, 323, 325, 326, 327, 328, 330, 335, 337, 342, 344, 347, 350, 351, 352, 353, 355, 358, 362, 366, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 422, 425, 426, 427, 428, 429, 430, 431, 436, 437, 438, 446, 448, 449, 451, 454, 456, 458], "doesn": [1, 303], "should": [1, 3, 4, 5, 7, 81, 112, 115, 132, 133, 135, 166, 193, 202, 219, 267, 273, 278, 281, 286, 289, 303, 308, 309, 310, 312, 313, 344, 350, 360, 393, 395, 400, 422, 448, 449, 450, 451, 453, 454, 458], "work": [1, 2, 4, 201, 449, 450, 451, 452, 453], "incom": 1, "accordingli": 1, "dispatch": 1, "float16": [1, 10, 157, 178, 296, 330, 453, 454], "bfloat16": [1, 10, 157, 296, 454], "complex64": [1, 10, 296], "throw": [1, 92, 117], "encount": [1, 451], "unexpect": [1, 17], "correct": [1, 7, 428, 429, 430, 452, 453], "float16_t": 1, "bfloat16_t": 1, "complex64_t": 1, "runtime_error": 1, "support": [1, 4, 6, 7, 15, 88, 135, 148, 157, 160, 170, 171, 172, 174, 175, 176, 178, 188, 219, 227, 450, 451, 452, 454, 456], "good": [1, 7, 424, 449, 450, 457], "fallback": 1, "routin": 1, "framework": [1, 6], "certain": [1, 344, 449], "case": [1, 4, 117, 138, 141, 142, 144, 145, 146, 147, 148, 170, 171, 172, 174, 175, 176, 188, 237, 257, 306, 312, 328, 368, 385, 403, 409, 415, 416, 432, 433, 449, 451, 455, 456, 457, 458], "half": [1, 17, 229, 233, 358, 453], "fix": [1, 4, 7, 453], "direct": [1, 4, 332, 431, 457], "column": [1, 131, 158, 219], "place": [1, 4, 37, 239, 286, 450, 453, 454], "expect": [1, 4, 308, 309, 310, 311, 312, 313, 362, 370, 394, 449, 452], "catlas_saxpbi": 1, "axpby_impl_acceler": 1, "special": 1, "copy_inplac": 1, "copytyp": 1, "inplac": [1, 7], "incx": 1, "inci": 1, "fit": [1, 219, 457], "criteria": 1, "With": 1, "mind": [1, 4], "finish": 1, "assert": 1, "singl": [1, 5, 127, 166, 178, 192, 215, 281, 306, 328, 449, 452, 456], "flag": [1, 7, 449, 454], "row_contigu": 1, "col_contigu": 1, "common": [1, 424, 449, 453], "just": [1, 5, 324, 449, 452], "much": [1, 4, 305, 306, 327, 328, 449, 453], "enough": [1, 453], "plan": [1, 449], "enjoi": 1, "speed": 1, "appl": [1, 4, 6, 7, 457], "silicon": [1, 4, 6, 7, 457], "address": 1, "shade": 1, "languag": 1, "kernel": [1, 7, 96, 97, 98, 305, 306, 327, 328, 449, 452], "written": 1, "help": [1, 4, 449, 457], "resourc": 1, "walkthrough": 1, "pipelin": 1, "document": [1, 2, 64, 77, 242, 243, 296, 449, 451, 452], "specif": [1, 7, 450, 451], "cpp": 1, "keep": [1, 14, 16, 25, 26, 187, 189, 191, 204, 218, 259, 263, 279, 303, 334, 451, 453], "launch": [1, 117, 450, 452], "exactli": [1, 4, 337, 451], "mani": [1, 81, 254, 308, 309, 310, 314, 352, 449, 450, 453], "thread": 1, "pick": 1, "axpby_gener": 1, "buffer": [1, 195, 454], "x_stride": 1, "6": [1, 4, 173, 244, 357, 370, 374, 382, 383, 387, 394, 404, 408, 436, 449, 452, 455], "y_stride": 1, "7": [1, 4, 173, 219, 452], "uint": 1, "thread_position_in_grid": 1, "instanti": [1, 5, 453], "give": [1, 4, 5, 27, 449], "uniqu": [1, 446], "host": 1, "name": [1, 153, 178, 219, 220, 242, 243, 244, 245, 303, 318, 334, 337, 339, 450, 452, 456], "so": [1, 4, 7, 154, 157, 278, 311, 371, 424, 449, 450, 453, 457], "identifi": [1, 289, 448], "instantiate_axpbi": 1, "type_nam": 1, "host_nam": 1, "axpby_general_": 1, "set": [1, 4, 5, 7, 92, 106, 113, 115, 116, 117, 123, 132, 134, 194, 200, 201, 246, 247, 261, 315, 324, 326, 333, 335, 342, 343, 344, 347, 348, 353, 358, 368, 392, 404, 416, 422, 424, 426, 433, 446, 451, 453], "grid": [1, 192], "shown": 1, "below": [1, 7, 173, 275, 277, 296, 371, 453], "prepar": [1, 4], "carri": 1, "ostringstream": 1, "kname": 1, "axpby_": 1, "general_": 1, "type_to_nam": 1, "sure": [1, 2, 4, 7, 303, 449], "register_librari": 1, "mlx_ext": 1, "get_kernel": 1, "str": [1, 99, 121, 122, 154, 173, 178, 192, 194, 202, 241, 242, 243, 244, 245, 278, 289, 293, 330, 331, 334, 335, 337, 339, 341, 347, 371, 375, 376, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404], "encod": [1, 134, 358, 362, 370, 393], "compute_encod": 1, "get_command_encod": 1, "setcomputepipelinest": 1, "regist": [1, 5], "those": [1, 4, 303], "nelem": 1, "set_input_arrai": 1, "set_output_arrai": 1, "setbyt": 1, "sizeof": 1, "threadgroup": 1, "higher": [1, 159, 400, 451], "than": [1, 4, 76, 99, 112, 120, 134, 152, 155, 156, 168, 169, 170, 171, 172, 175, 176, 188, 200, 288, 290, 358, 368, 371, 400, 403, 416, 426, 431, 449, 451, 457], "tgp_size": 1, "maxtotalthreadsperthreadgroup": 1, "mtl": 1, "group_dim": 1, "grid_dim": 1, "among": 1, "dispatchthread": 1, "few": [1, 4, 5, 6, 7, 450, 453, 455], "thing": [1, 4, 450], "about": [1, 4, 5, 122, 194, 453, 457], "befor": [1, 4, 7, 27, 216, 334, 370, 433, 450, 452, 453], "track": [1, 303, 307], "activ": [1, 7, 195, 312, 368, 370, 385, 405, 415, 416, 418, 449], "command_buff": 1, "mtlcommandbuff": 1, "associ": [1, 244, 245, 453], "reli": 1, "u": [1, 170, 175, 326, 349, 444, 453], "command": [1, 2, 7, 450], "instead": [1, 7, 106, 303, 349, 362, 450, 451, 453], "end_encod": 1, "until": [1, 453, 455], "hit": 1, "flush": 1, "next": [1, 4, 5, 200], "These": [1, 92, 267, 393, 457], "built": [1, 7, 453], "top": [1, 272, 326, 371], "includ": [1, 102, 103, 104, 105, 195, 196, 201, 324, 331, 343, 353, 394, 424, 449, 451, 452, 455, 456, 458], "forward": [1, 278, 449, 453], "diff": 1, "push": 1, "op": [1, 214, 280, 335, 453], "similarli": [1, 7, 188, 451, 453], "scale_arr": 1, "contribut": 1, "tangent_x": 1, "tangent_i": 1, "cotang": [1, 106, 281], "unus": 1, "arg": [1, 4, 9, 114, 127, 244, 245], "push_back": 1, "fulli": [1, 6, 449, 450, 454, 457], "look": [1, 4, 450], "overal": 1, "directori": [1, 4, 7], "h": [1, 96, 97, 173, 306, 307, 309, 310, 312, 313, 317, 323, 328, 355, 451, 453], "mlx_sample_extens": 1, "__init__": [1, 4, 5, 8, 9, 10, 29, 106, 114, 294, 303, 422], "py": [1, 4, 7, 450], "cmakelist": 1, "txt": 1, "setup": [1, 3, 5, 7, 449], "packag": [1, 3, 5, 7, 298, 419, 450], "hold": [1, 4, 9, 10, 173, 449], "instal": 1, "nanobind": [1, 370], "sinc": [1, 4, 5, 153, 197, 422, 431, 440, 454, 457], "compon": [1, 4], "etc": [1, 219, 303, 371, 450], "alreadi": [1, 2, 4, 450], "nb_modul": 1, "_ext": 1, "doc": [1, 5, 450], "sampl": [1, 3, 4, 177, 222, 223, 224, 226, 227, 229, 232, 233, 373, 374, 375, 376, 378, 379, 394, 400, 404, 446, 449], "_a": 1, "nb": 1, "kw_onli": 1, "none": [1, 4, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 115, 116, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 199, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 289, 290, 291, 292, 294, 305, 306, 315, 327, 328, 330, 334, 335, 342, 347, 350, 355, 362, 370, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 426, 444, 452], "r": [1, 4, 174, 278, 312, 317], "most": [1, 223, 303, 435, 449, 450, 451, 452, 453], "complex": [1, 94, 95, 143, 144, 145, 146, 147, 289, 296, 303, 349, 449, 451], "abov": [1, 4, 219, 276, 303, 371, 429, 450, 451, 452, 453, 457], "come": [1, 4, 450, 451], "bell": 1, "whistl": 1, "liter": [1, 215, 371, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404], "modul": [1, 4, 5, 286, 287, 360, 370, 419, 435, 448, 449, 453], "caster": 1, "requir": [1, 4, 303, 450, 453, 454], "find_packag": 1, "config": [1, 450], "link": [1, 7], "your": [1, 4, 7, 422, 451, 453], "add_librari": 1, "target_sourc": 1, "cmake_current_list_dir": 1, "header": 1, "target_include_directori": 1, "target_link_librari": 1, "attach": 1, "conveni": [1, 5, 165], "mlx_build_metallib": 1, "metallib": [1, 7], "target": [1, 278, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 449], "automat": [1, 6, 178, 450, 455, 456, 457], "what": [1, 4, 290], "practic": [1, 449], "mlx_build_met": [1, 7], "mlx_ext_metallib": 1, "titl": 1, "include_dir": 1, "project_source_dir": 1, "mlx_include_dir": 1, "output_directori": 1, "cmake_library_output_directori": 1, "add_depend": 1, "endif": 1, "final": [1, 3, 4, 5, 157, 438, 441], "nanobind_add_modul": 1, "nb_static": 1, "stable_abi": 1, "lto": 1, "nomins": 1, "nb_domain": 1, "build_shared_lib": [1, 7], "target_link_opt": 1, "wl": 1, "rpath": 1, "loader_path": 1, "onc": [1, 7, 449], "describ": [1, 453], "util": [1, 4, 6, 7, 244, 303, 424, 450], "__name__": [1, 4], "__main__": [1, 4], "descript": [1, 4, 296], "ext_modul": 1, "cmakeextens": 1, "cmdclass": 1, "build_ext": [1, 7], "cmakebuild": 1, "package_data": 1, "dylib": 1, "extras_requir": 1, "dev": [1, 7], "zip_saf": 1, "python_requir": 1, "even": [1, 4, 92, 449, 453, 454], "though": [1, 4, 449, 453, 454], "pip": [1, 7], "develop": [1, 7], "j8": 1, "libmlx_ext": 1, "cpython": 1, "3x": 1, "darwin": 1, "try": [1, 7], "after": [1, 4, 5, 27, 148, 150, 153, 193, 216, 219, 307, 318, 324, 330, 331, 335, 337, 344, 347, 348, 349, 350, 370, 403, 449, 457], "abl": [1, 219], "simpli": [1, 4, 7, 325, 356, 380, 388, 407, 417, 422, 449, 450, 451], "plai": [1, 4], "quick": [1, 6], "benchmark": [1, 449], "see": [1, 4, 5, 7, 9, 10, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 173, 200, 242, 243, 286, 296, 303, 307, 312, 315, 319, 320, 321, 333, 351, 352, 353, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 371, 373, 374, 375, 376, 381, 382, 383, 409, 449, 450, 451, 452, 455, 457], "compar": [1, 80, 449], "time": [1, 4, 7, 201, 271, 303, 305, 306, 317, 323, 327, 328, 355, 449, 451, 453, 457], "set_default_devic": 1, "256": [1, 5], "512": [1, 2, 4, 370, 457], "random": [1, 2, 3, 4, 5, 6, 305, 306, 307, 322, 327, 328, 337, 344, 449, 451, 457, 458], "normal": [1, 3, 4, 132, 133, 227, 232, 303, 305, 306, 307, 318, 322, 324, 327, 328, 354, 370, 373, 375, 454, 457], "bench": 1, "warm": [1, 449], "100": [1, 3, 4, 391, 441, 449, 451, 453, 457], "5000": 1, "e": [1, 5, 7, 106, 125, 152, 153, 166, 248, 307, 308, 309, 310, 312, 313, 318, 322, 324, 335, 354, 389, 390, 412, 413, 418, 424, 427, 449, 453, 458], "simple_tim": 1, "custom_tim": 1, "3f": [1, 5, 449], "114": 1, "109": 1, "modest": 1, "improv": [1, 2, 4, 391, 425, 426, 427, 428, 429, 430, 436, 449, 450], "awai": [1, 4], "nn": [1, 4, 5, 244, 290, 303, 419, 422, 424, 433, 435, 449, 453], "grad": [1, 3, 5, 278, 288, 424, 432, 449, 450, 451, 452, 453, 455], "profil": 2, "kei": [2, 4, 135, 194, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 289, 290, 334, 335, 347, 350, 433, 446, 448, 451], "optim": [2, 3, 5, 6, 348, 449, 450, 451, 453], "build": [2, 4, 6, 375, 422, 449], "mlx": [2, 3, 4, 5, 7, 298, 303, 419, 422, 424, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457], "mlx_metal_debug": [2, 7], "debug": [2, 450], "record": [2, 197, 453], "dure": [2, 92, 311, 312, 313, 371, 454], "later": [2, 7, 424], "inspect": [2, 449, 455], "label": [2, 3, 393, 400], "object": [2, 9, 29, 49, 76, 92, 165, 244, 282, 289, 290, 291, 292, 296, 312, 370, 448], "queue": 2, "readabl": 2, "enabl": [2, 4, 7, 92, 123, 437], "python": [2, 4, 49, 67, 76, 127, 289, 290, 291, 292, 293, 422, 432, 433, 435, 448, 450, 451, 454], "prepend": [2, 188], "cmake_arg": 2, "dmlx_metal_debug": 2, "ON": [2, 7], "start_captur": 2, "initi": [2, 3, 4, 117, 292, 303, 307, 318, 322, 324, 326, 351, 354, 372, 373, 374, 375, 376, 377, 378, 379, 422, 433, 438, 439, 441, 442, 449, 450, 453], "gpu": [2, 6, 7, 194, 449, 452, 457], "applic": [2, 7], "mtl_capture_en": 2, "uniform": [2, 303, 326, 337, 374, 376, 419, 446, 449, 451, 457], "trace_fil": 2, "mlx_trace": 2, "gputrac": [2, 202], "path": [2, 7, 122, 202, 244, 245, 286, 291, 337, 450], "_": [2, 3, 4, 291, 303, 438, 439, 440, 441, 442, 446, 449, 453, 457], "stop_captur": 2, "open": [2, 7, 17, 229, 233], "replai": 2, "great": 2, "overview": 2, "oper": [2, 4, 6, 8, 36, 82, 83, 84, 98, 135, 152, 153, 217, 252, 260, 267, 294, 303, 370, 431, 449, 450, 451, 452, 453, 454, 455, 457, 458], "checkout": [2, 449], "inform": [2, 4, 5, 7, 122, 194, 242, 243, 296, 303, 307, 315, 350, 451, 457], "skip": [2, 81], "save": [2, 4, 6, 178, 202, 219, 242, 243, 244, 245, 341, 453], "project": [2, 4, 350], "cmake": [2, 7], "mkdir": [2, 7], "cd": [2, 7], "g": [2, 7, 106, 173, 219, 323, 418, 436, 437, 453, 458], "xcodeproj": 2, "metal_captur": 2, "schema": 2, "basic": [3, 239, 451], "model": [3, 5, 6, 244, 286, 287, 290, 291, 303, 330, 333, 335, 337, 341, 344, 346, 347, 348, 350, 370, 419, 422, 424, 432, 433, 435, 449, 450, 453], "learn": [3, 5, 6, 307, 318, 322, 324, 351, 354, 424, 425, 426, 427, 428, 429, 430, 431, 436, 437], "problem": [3, 5, 303], "metadata": [3, 178, 242, 243], "num_featur": [3, 307], "num_exampl": 3, "1_000": 3, "num_it": 3, "10_000": 3, "iter": [3, 5, 175, 290, 291, 446, 449, 453], "sgd": [3, 5, 424, 431, 433, 438, 439, 442, 449], "lr": [3, 431], "01": [3, 325, 388, 429], "rate": [3, 424, 425, 426, 427, 428, 429, 430, 431, 436, 437], "ll": [3, 5, 396, 449, 451], "synthet": 3, "dataset": [3, 450, 453], "design": [3, 6, 446, 457], "ground": [3, 4, 393, 403], "truth": [3, 393, 403], "w_star": 3, "gaussian": [3, 315, 381, 382, 383, 394], "nois": 3, "noisi": 3, "ep": [3, 132, 133, 307, 318, 322, 324, 354, 392, 394, 404, 424, 425, 426, 427, 428, 429, 430, 436], "loss": [3, 5, 278, 303, 424, 449, 450, 451, 453], "loss_fn": [3, 5, 424, 449, 451], "grad_fn": [3, 449, 451], "randomli": [3, 4, 311, 312, 313], "Then": [3, 7], "repeatedli": 3, "verifi": [3, 7], "close": [3, 6, 7, 15, 160], "error_norm": 3, "5f": 3, "someth": [3, 4, 452], "00005": 3, "00364": 3, "complet": [3, 4, 7, 201, 348, 349, 451, 457], "github": [3, 5, 7, 449], "repo": [3, 5, 7, 449], "effici": [4, 6, 152, 312, 358, 453, 455], "larg": [4, 303, 350, 399, 449, 450, 453], "ish": 4, "transform": [4, 6, 106, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 157, 287, 303, 307, 318, 324, 326, 334, 335, 347, 353, 358, 452], "without": [4, 6, 260, 350, 418, 448, 449, 450, 453, 454, 457], "compromis": 4, "eas": 4, "llama": 4, "famili": 4, "200": [4, 440], "line": [4, 450, 453, 454], "neural": [4, 6, 314, 373, 374, 405, 419, 422, 436], "network": [4, 6, 307, 312, 314, 373, 374, 419, 422, 436, 450], "concis": 4, "architectur": [4, 7, 194, 303, 349, 457], "notabl": [4, 6], "rope": [4, 303], "cach": [4, 7, 193, 195, 196, 200, 449], "llamaattent": 4, "self": [4, 5, 8, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 106, 294, 303, 405, 422], "dim": [4, 134, 135, 314, 318, 322, 324, 350, 352, 354, 358, 362, 370], "num_head": [4, 350, 370], "super": [4, 5, 303, 422], "tradit": [4, 134, 312, 313, 358], "query_proj": 4, "bia": [4, 110, 132, 153, 219, 220, 290, 303, 308, 309, 310, 317, 323, 324, 326, 335, 337, 347, 350, 353, 355, 428, 429, 430, 433, 451], "key_proj": 4, "value_proj": 4, "out_proj": [4, 422], "__call__": [4, 5, 303, 422], "queri": [4, 135, 350], "l": [4, 5, 170, 171, 303, 305, 307, 308, 317, 323, 327, 355, 403], "combin": [4, 175, 292], "key_cach": 4, "value_cach": 4, "math": [4, 404, 449], "score": [4, 135, 400], "values_hat": 4, "possibli": [4, 13, 88, 152, 188, 288], "rm": [4, 7, 133, 426], "swiglu": 4, "rmsnorm": [4, 303], "llamaencoderlay": 4, "mlp_dim": [4, 370], "norm1": 4, "norm2": 4, "linear1": 4, "linear2": 4, "linear3": 4, "instanc": [4, 37, 106, 219, 293, 303, 322, 330, 331, 332, 335, 337, 338, 339, 344, 347, 348, 349, 360, 422, 454], "embed": [4, 286, 303, 352, 358, 362, 392], "emb": [4, 314, 352, 362], "token": [4, 314, 352], "num_lay": [4, 5, 424], "vocab_s": 4, "norm": [4, 133, 288, 318, 404, 430, 431], "multiheadattent": [4, 303], "create_additive_causal_mask": 4, "list": [4, 9, 14, 16, 29, 70, 76, 81, 82, 83, 84, 89, 92, 93, 98, 122, 127, 137, 138, 140, 141, 143, 144, 146, 147, 151, 154, 166, 173, 187, 189, 191, 192, 204, 212, 215, 218, 222, 223, 224, 226, 227, 228, 229, 232, 233, 242, 252, 254, 258, 259, 263, 270, 271, 274, 278, 279, 281, 284, 289, 292, 293, 303, 335, 337, 338, 339, 340, 345, 347, 348, 349, 422, 424, 428, 429, 430, 431, 440, 448, 449, 450, 451, 453], "still": [4, 7, 173, 449, 453], "consid": [4, 15, 80, 160, 289, 290, 291, 318, 448], "train": [4, 5, 303, 307, 311, 312, 313, 333, 335, 347, 373, 374], "process": [4, 98, 99, 114, 115, 116, 117, 290, 291, 313, 314, 370, 448, 450], "ignor": [4, 37, 91, 92, 127, 426], "whatsoev": 4, "rest": [4, 134, 290, 291, 358], "subsect": 4, "prompt": 4, "autoregress": 4, "yield": [4, 5, 446], "temp": 4, "causal": 4, "append": [4, 188, 449, 453], "store": 4, "per": [4, 5, 110, 153, 219, 220, 286, 307, 318, 322, 324, 354, 444, 449, 450, 453], "care": [4, 453], "logit": [4, 223, 391, 393, 449], "categor": 4, "lazili": [4, 303], "noth": [4, 303, 453], "yet": [4, 173, 303, 422, 433, 451, 452, 453, 455], "forc": [4, 5, 303, 450, 455], "choos": [4, 134, 358], "pars": 4, "feed": 4, "back": [4, 106, 198, 454], "loop": [4, 5, 449, 450, 451, 453], "unsqueez": 4, "sequenc": [4, 14, 16, 32, 33, 55, 56, 57, 58, 62, 70, 73, 74, 78, 81, 89, 98, 129, 137, 138, 140, 141, 143, 144, 146, 147, 151, 187, 189, 191, 204, 212, 218, 222, 223, 224, 226, 227, 228, 229, 232, 233, 237, 252, 254, 257, 259, 263, 270, 271, 274, 279, 284, 307, 308, 317, 323, 355, 370, 446, 457], "length": [4, 257, 307, 308, 317, 323, 355, 440], "len": [4, 138, 141, 144, 147, 157, 440], "overwrit": 4, "discard": [4, 289], "old": 4, "moment": [4, 426, 428, 429, 430], "anymor": 4, "everyth": [4, 450], "small": [4, 130, 132, 133, 307, 318, 324, 354, 394, 399, 404, 449, 450, 457], "12": [4, 157, 440], "8192": [4, 157], "1024": 4, "actual": [4, 17, 337, 422, 453], "materi": [4, 6], "could": [4, 303], "20_000": 4, "machin": [4, 6, 7, 436, 450], "8gb": 4, "ram": 4, "32": [4, 5, 88, 219, 220, 296, 306, 328, 354, 449], "44": 4, "bracket": 4, "becaus": [4, 195, 303, 453], "batch": [4, 13, 88, 152, 153, 188, 227, 307, 308, 309, 310, 312, 313, 317, 323, 350, 355, 371, 453], "zip": [4, 5], "haven": 4, "anyth": [4, 278, 453], "veri": [4, 350, 450, 453, 457], "similar": [4, 153, 165, 290, 348, 349, 350, 392, 454, 456], "runtim": [4, 117, 298, 449, 450], "section": [4, 7, 254, 404, 449, 450, 451], "origin": [4, 112, 288, 307, 343, 373, 374, 375, 376, 425, 426, 427, 428, 430, 431, 454], "sentencepiec": 4, "pytorch": [4, 6, 315, 318, 451], "compat": [4, 223, 227, 315, 456], "npz": [4, 178, 244, 245, 337, 341, 456], "file": [4, 7, 178, 241, 242, 243, 244, 245, 337, 341, 450, 451, 456], "argpars": 4, "itertool": [4, 290], "starmap": [4, 290], "np": [4, 5, 450, 454, 455], "torch": [4, 454], "map_torch_to_mlx": 4, "tok_embed": 4, "elif": 4, "attention_norm": 4, "ffn_norm": 4, "wq": 4, "wk": 4, "wv": 4, "wo": 4, "w1": [4, 288], "w2": [4, 288], "w3": 4, "ffn": 4, "separ": [4, 64, 77, 318, 400], "submodul": [4, 5, 303, 331, 335, 336, 347, 349], "feed_forward": 4, "parser": 4, "argumentpars": 4, "add_argu": 4, "torch_weight": 4, "output_fil": 4, "parse_arg": 4, "state": [4, 5, 303, 317, 323, 355, 424, 433, 446, 449], "savez": [4, 341, 456], "v": [4, 99, 135, 303, 335, 454], "disk": 4, "text": [4, 305, 306, 315, 317, 323, 327, 328, 329, 355, 368, 373, 374, 375, 376, 382, 385, 386, 387, 394, 395, 396, 399, 400, 403, 405, 406, 409, 410, 415, 416, 426, 431], "format": [4, 178, 241, 242, 243, 244, 245, 454], "dictionari": [4, 92, 178, 194, 242, 243, 288, 289, 292, 303, 334, 343, 348, 349, 434, 448, 456], "represent": [4, 219, 280, 289, 293], "tree_unflatten": [4, 424], "helper": [4, 449], "weight_fil": 4, "incur": [4, 7], "sever": [4, 7, 96, 97, 98, 244, 245, 449, 456], "futur": [4, 353, 452, 453], "pth": 4, "current": [4, 6, 7, 81, 88, 194, 196, 219, 292, 303, 426, 450, 453], "around": 4, "m1": [4, 449, 451, 457], "ultra": 4, "7b": 4, "me": 4, "ishmael": 4, "year": 4, "ago": 4, "never": [4, 453], "long": 4, "info": [4, 7], "247": 4, "press": [4, 173], "enter": 4, "littl": 4, "monei": 4, "my": [4, 7], "purs": 4, "consequ": 4, "walk": 4, "down": [4, 288], "gower": 4, "street": 4, "afternoon": 4, "heavi": 4, "rain": 4, "saw": [4, 451], "off": [4, 7, 453], "man": 4, "rag": 4, "who": 4, "sat": 4, "upon": [4, 290, 291], "hi": [4, 323], "bundl": 4, "hard": 4, "wet": 4, "he": [4, 375, 376], "were": [4, 457], "cry": 4, "watch": [4, 449], "him": 4, "observ": 4, "numer": [4, 132, 133, 173, 183, 187, 252, 307, 318, 322, 324, 354, 391, 392, 394, 404, 425, 426, 427, 428, 429, 430, 436, 449, 453], "crowd": 4, "wa": [4, 81, 450, 453], "hurri": 4, "437": 4, "330": 4, "second": [4, 7, 112, 167, 184, 186, 188, 238, 264, 273, 278, 306, 328, 392, 400, 426, 428, 429, 430, 451, 457], "spent": 4, "amount": [4, 197, 305, 327], "39": 4, "By": [4, 286, 342, 391, 451, 454], "bigger": [4, 426], "well": [4, 303, 335, 347, 350, 453], "almost": 4, "nobodi": 4, "took": 4, "least": [4, 82, 83, 84, 91, 170, 171, 172, 174, 175, 176, 219], "notic": [4, 451, 456], "distanc": [4, 404], "had": 4, "doubt": 4, "minut": 4, "straight": 4, "slowli": 4, "speak": [4, 173], "resum": 4, "postur": 4, "stood": 4, "feel": 4, "pain": 4, "heart": 4, "said": 4, "smile": 4, "face": 4, "am": 4, "someon": 4, "three": [4, 84, 371], "quarter": 4, "hour": 4, "made": [4, 298], "immedi": [4, 330], "repli": 4, "again": [4, 7, 303, 449], "hand": [4, 451, 453], "did": 4, "accustom": 4, "thu": [4, 303], "question": [4, 453], "reason": [4, 452], "tell": [4, 449, 454], "understand": [4, 373, 374], "579": 4, "690": 4, "500": [4, 457], "628": 4, "went": 4, "nervou": 4, "trembl": 4, "told": 4, "why": 4, "And": [4, 371], "surpris": 4, "matter": [4, 303], "shall": 4, "anyhow": 4, "friend": 4, "ye": 4, "slight": [4, 453], "kind": 4, "want": [4, 450, 451, 457], "longer": [4, 99, 451], "soon": 4, "unless": [4, 15, 160, 173, 422], "unlik": [4, 15, 160, 312, 313, 343], "strang": 4, "amus": 4, "That": 4, "secret": 4, "disappoint": 4, "mine": 4, "cannot": [4, 91, 452, 454], "happi": 4, "ask": [4, 450], "shop": 4, "bui": 4, "food": 4, "633": 4, "21": [4, 442], "475": 4, "su": 4, "j": [4, 7, 173, 312, 427, 428, 430], "lu": 4, "pan": 4, "murtadha": 4, "wen": 4, "liu": 4, "2021": 4, "roform": [4, 358], "enhanc": [4, 358, 453], "rotari": [4, 134, 358], "arxiv": [4, 318, 322, 324, 329, 354, 383, 405, 425, 431], "preprint": [4, 425, 431], "2104": 4, "09864": 4, "zhang": 4, "sennrich": 4, "2019": [4, 429], "advanc": [4, 449], "system": [4, 7, 194, 195, 196], "shazeer": 4, "2020": 4, "glu": [4, 303], "variant": [4, 403, 430], "2002": 4, "05202": 4, "classifi": 5, "mnist": 5, "As": [5, 37, 266, 303, 449], "mlp": [5, 303, 370, 424], "inherit": [5, 448], "idiom": [5, 449], "input_dim": [5, 303, 326, 353], "hidden_dim": [5, 422, 424], "output_dim": [5, 303, 326, 353], "layer_s": 5, "idim": 5, "odim": 5, "cross": [5, 98, 391, 393], "entropi": [5, 391, 393], "commonli": [5, 348, 419, 449], "cross_entropi": [5, 303], "accuraci": 5, "valid": [5, 99, 148, 282, 289, 335, 347, 448], "eval_fn": 5, "load": [5, 6, 298, 337, 450], "loader": 5, "num_class": [5, 424], "batch_siz": [5, 424], "num_epoch": [5, 424], "learning_r": [5, 424, 425, 426, 427, 428, 429, 430, 431, 433, 436, 437, 438, 439, 440, 441, 442, 449], "train_imag": [5, 424], "train_label": [5, 424], "test_imag": 5, "test_label": 5, "re": [5, 7, 419], "shuffl": 5, "minibatch": 5, "batch_iter": [5, 424], "perm": 5, "id": [5, 7], "put": [5, 449, 450], "trainabl": [5, 287, 303, 422], "loss_and_grad_fn": [5, 424, 449, 451], "value_and_grad": [5, 106, 303, 348, 422, 424, 435, 449, 451, 454, 455], "epoch": 5, "test": [5, 7, 450], "confus": 5, "decent": 5, "95": 5, "flexibl": 6, "brought": 6, "research": 6, "except": [6, 131, 142, 143, 145, 146, 147, 318, 337, 452, 454], "featur": [6, 96, 97, 98, 134, 307, 317, 318, 322, 323, 324, 326, 353, 354, 355, 358, 370, 371, 449, 453], "main": [6, 112, 131, 273, 290, 291, 303, 450], "differ": [6, 165, 262, 280, 403, 451], "compos": [6, 303, 449, 451, 455], "lazi": [6, 422, 455], "multi": [6, 135, 308, 309, 310, 452, 454], "cpu": [6, 7, 174, 449, 457], "inspir": 6, "jax": [6, 446], "arrayfir": 6, "unifi": 6, "live": [6, 457], "share": [6, 110, 153, 219, 220, 280, 450], "convers": 6, "distribut": [6, 7, 222, 223, 224, 226, 227, 228, 232, 233, 326, 373, 374, 375, 376, 378, 379, 394, 397, 402, 404, 419], "commun": [6, 114, 117, 118], "regress": [6, 399], "layer": [6, 132, 286, 303, 305, 306, 312, 313, 317, 318, 323, 324, 326, 327, 328, 344, 349, 352, 353, 355, 360, 370, 418, 422], "perceptron": 6, "llm": 6, "infer": [6, 151, 178, 273, 450], "fast": [6, 315, 383, 450, 457], "fft": 6, "algebra": 6, "tree": [6, 92, 127, 154, 278, 282, 289, 290, 291, 292, 293, 432, 433, 435, 444, 451], "custom": [6, 106, 370], "extens": [6, 178, 202, 341, 456], "debugg": 6, "pypi": 7, "own": [7, 454], "meet": 7, "seri": 7, "chip": 7, "nativ": 7, "maco": 7, "13": 7, "highli": 7, "recommend": [7, 201, 431], "14": 7, "sonoma": 7, "conda": [7, 450], "forg": 7, "match": [7, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 195, 337, 371, 393, 450, 452, 454], "probabl": [7, 229, 311, 312, 313, 353, 391, 393, 397, 457], "platform": 7, "processor": 7, "arm": 7, "i386": 7, "switch": 7, "17": 7, "clang": 7, "24": 7, "xcode": 7, "15": [7, 173, 292, 449], "sdk": 7, "environ": [7, 113, 123, 450], "via": [7, 106, 432, 435, 450, 453, 454], "rosetta": 7, "unam": 7, "p": [7, 222, 303, 311, 312, 313, 404, 428, 430], "clone": 7, "git": 7, "com": [7, 450], "ml": 7, "explor": 7, "cmake_build_parallel_level": 7, "edit": [7, 349], "unittest": 7, "discov": 7, "stub": 7, "generate_stub": 7, "either": [7, 12, 64, 76, 77, 85, 86, 87, 91, 119, 120, 124, 150, 155, 156, 167, 168, 169, 173, 183, 188, 190, 205, 207, 211, 217, 235, 238, 262, 278, 306, 328, 360, 371, 375, 376, 454], "static": 7, "libmlx": 7, "preprocessor": 7, "metal_path": 7, "mlx_build_test": 7, "mlx_build_exampl": 7, "mlx_build_benchmark": 7, "mlx_build_cpu": 7, "mlx_build_python_bind": 7, "mlx_build_safetensor": 7, "mlx_build_gguf": 7, "mlx_metal_jit": 7, "wish": 7, "variabl": [7, 92, 113, 123, 154, 166, 278, 281, 282, 450], "export": 7, "developer_dir": 7, "app": 7, "content": [7, 334, 449], "xcrun": 7, "macosx": 7, "show": [7, 296, 449], "cmake_build_typ": 7, "minsizerel": 7, "don": [7, 449, 457], "backend": [7, 117, 118], "safetensor": [7, 178, 243, 337, 341, 424, 453, 456], "gguf": [7, 178, 242, 456], "dcmake_build_typ": 7, "dbuild_shared_lib": 7, "dmlx_build_cpu": 7, "dmlx_build_safetensor": 7, "dmlx_build_gguf": 7, "dmlx_metal_jit": 7, "THE": 7, "pre": [7, 135, 391], "substanti": 7, "cold": 7, "cost": [7, 426, 450, 453], "anwywher": 7, "hundr": 7, "millisecond": [7, 449, 457], "persist": 7, "accross": 7, "reboot": 7, "unabl": 7, "tool": 7, "sudo": 7, "ouptut": 7, "finder": 7, "iterm": 7, "termin": 7, "click": 7, "uncheck": 7, "window": [7, 305, 306, 327, 328], "restart": 7, "grep": 7, "cmake_host_system_processor": 7, "arm64": 7, "x86_64": 7, "wipe": 7, "cahc": 7, "rf": 7, "devicetyp": 8, "attribut": [8, 9, 10, 29, 294, 343, 422, 444], "kwarg": [9, 114, 244, 245, 458], "categori": [10, 296], "bool_": [10, 296], "unsignedinteg": 10, "uint8": [10, 296], "uint16": [10, 296], "uint32": [10, 25, 26, 27, 28, 223, 296], "uint64": [10, 296], "signedinteg": [10, 165], "int8": [10, 296], "int64": [10, 296], "inexact": [10, 165], "complexflo": 10, "issubdtyp": [10, 296], "semant": [12, 85, 86, 87, 89, 119, 120, 124, 155, 156, 167, 168, 169, 183, 188, 190, 205, 207, 211, 217, 235, 238, 262, 457], "reduct": [14, 16, 116, 187, 189, 204, 218, 292, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 450], "unspecifi": [14, 16, 17, 25, 26, 27, 28, 93, 102, 103, 104, 105, 151, 187, 189, 191, 204, 212, 216, 218, 236, 252, 253, 259, 263, 266, 272, 273, 279, 284, 458], "entir": [14, 16, 25, 26, 187, 189, 191, 204, 218, 259, 263, 279, 312, 313], "05": [15, 160, 307, 318, 322, 324, 354], "08": [15, 160, 392, 427, 428, 429, 430, 436], "approxim": [15, 315, 381, 382, 383], "comparison": [15, 124, 155, 156, 168, 169, 211], "infinit": [15, 160], "rel": [15, 160, 426, 449], "interv": [17, 177, 229, 233], "increment": 17, "otherwis": [17, 98, 117, 201, 286, 289, 290, 291, 292, 335, 337, 347, 368, 370, 371, 385, 391, 396, 403, 415, 416, 453, 454], "convent": [17, 99, 121, 122, 371, 429], "fraction": 17, "integr": [17, 266, 453], "dimension": [29, 132, 133, 136, 137, 138, 139, 140, 141, 145, 146, 147, 305, 306, 307, 308, 309, 310, 314, 326, 327, 328, 352, 353, 362, 452, 454], "ndarrai": [29, 452, 453, 455], "properti": [30, 37, 46, 50, 60, 61, 67, 69, 343, 346, 434, 451], "argument": [30, 64, 77, 92, 127, 154, 278, 290, 291, 292, 303, 371, 446, 450, 451, 456, 457, 458], "union": [31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 82, 83, 84, 88, 121, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 157, 163, 164, 194, 231, 232, 242, 261, 273], "regular": [37, 312, 405, 429, 449, 452], "idx": [37, 452], "correctli": 37, "syntax": [37, 452], "datatyp": 50, "byte": [50, 60, 195, 196, 197, 200, 201, 296], "indices_or_sect": [70, 254], "nest": [76, 92, 292, 303, 422, 448, 451], "alwai": [81, 195, 289, 451], "regardless": [81, 135], "storag": 81, "caution": 81, "chang": [81, 92, 247, 280, 348, 353, 371, 396, 403, 449, 454], "crash": [81, 449], "begin": [81, 171, 197, 219, 306, 317, 323, 328, 368, 385, 396, 403, 409, 415, 416], "ari": [82, 83, 84], "xor": 87, "lhs_mask": 88, "lceil": 88, "rceil": 88, "rhs_mask": 88, "out_mask": 88, "edg": [91, 215, 371, 449], "At": 91, "fun": [92, 154, 166, 278, 281, 282, 449, 452, 453, 457], "callabl": [92, 106, 154, 166, 278, 281, 282, 286, 287, 289, 290, 291, 292, 330, 331, 334, 342, 355, 360, 370, 372, 373, 374, 375, 376, 377, 378, 379, 425, 426, 427, 428, 429, 430, 431, 436, 437, 438, 439, 440, 441, 442], "dict": [92, 127, 178, 194, 242, 243, 244, 288, 340, 345, 348, 349, 422, 424, 432, 433, 435, 448, 451, 456], "arbitrarili": [92, 303, 448, 451, 455], "leaf": [92, 286, 289, 290, 291, 292, 334], "node": [92, 127, 282, 291, 292], "recompil": [92, 449], "Not": [92, 211, 449], "attempt": 92, "elementwis": [94, 95], "alia": [94, 95, 315], "conj": 95, "channel": [96, 97, 98, 307, 308, 309, 310, 312, 313], "c_in": [96, 97, 98], "c_out": [96, 97, 98], "convolv": [96, 97, 98], "spatial": [97, 98, 305, 318, 327, 371], "symmetr": [97, 170, 171], "correl": [98, 312], "discret": [99, 136, 137, 138, 139, 140, 141, 145, 146, 147, 314, 352], "conv": 99, "signal": [99, 371], "th": [102, 103, 104, 105, 111, 131, 440], "definit": [106, 170, 171, 227], "meant": 106, "decor": 106, "behav": 106, "wrap": [106, 303], "behaviour": [106, 170, 171], "usag": [106, 370, 449], "f_vjp": 106, "f_jvp": 106, "dx": 106, "dy": 106, "f_vmap": 106, "ai": 106, "angl": [109, 221, 325], "configur": [110, 450], "formal": [110, 219], "notat": [110, 289, 339], "w_i": [110, 219], "hat": [110, 219], "occupi": [110, 153, 219, 220], "subarrai": [112, 254], "insert": [112, 129, 457], "end": [112, 171, 198, 219, 306, 317, 323, 328, 368, 385, 396, 403, 409, 415, 416, 438, 441], "taken": [112, 266, 273], "global": [113, 115, 116, 117, 123, 230, 288, 446, 449], "disabl": [113, 200, 449], "mlx_disable_compil": [113, 123, 449], "independ": [114, 312, 313], "particip": [115, 116], "strict": [117, 155, 168, 335, 337, 347], "is_avail": 117, "fuction": 120, "subscript": [121, 122], "operand": [121, 122, 152], "einstein": [121, 122], "summat": [121, 122], "equat": [121, 122], "einsum": 122, "chosen": 122, "mathrm": [125, 248, 322], "frac": [125, 219, 248, 305, 306, 307, 311, 312, 313, 318, 322, 324, 326, 327, 328, 354, 373, 374, 375, 376, 392, 394, 396, 399, 410, 412, 413, 425, 427, 428, 429, 430, 436], "pi": [125, 315, 362, 382, 451], "int_0": 125, "dt": 125, "minu": 130, "whose": [131, 286, 287], "translat": [132, 324], "stabil": [132, 133, 307, 318, 322, 324, 354, 391, 392, 394, 425, 426, 427, 428, 429, 430, 436], "rotat": [134, 358], "larger": [134, 358, 431], "unchang": [134, 260, 358], "consecut": [134, 219, 358], "angular": [134, 358], "frequenc": [134, 358, 362], "q": [135, 174], "head": [135, 350, 370], "attent": [135, 335, 350, 362, 370], "One": [136, 139, 145, 215, 240, 449, 451], "fourier": [136, 137, 138, 139, 140, 141, 145, 146, 147], "truncat": [136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 232], "dft": [136, 137, 138, 139, 140, 141, 145, 146, 147], "rfft": 142, "real": [142, 143, 144, 145, 146, 147, 170, 171], "rfft2": 143, "rfftn": 144, "silent": [145, 146, 147], "outsid": 148, "clamp": 148, "explicitli": [152, 303, 446], "flat": [152, 153, 289, 293], "a1": 152, "a2": 152, "AS": 152, "b1": 152, "b2": 152, "pack": [153, 219, 220], "unsign": [153, 219, 220, 296], "whether": [153, 176, 220, 317, 323, 334, 350, 355, 391, 394, 400], "argnam": [154, 278], "neither": [154, 278], "keyword": [154, 244, 245, 278, 290, 303, 446, 456, 458], "walsh": 157, "scipi": 157, "linalg": 157, "20": [157, 173], "28": 157, "16384": 157, "orthonorm": 157, "ordinari": 159, "inifn": 161, "dtypecategori": [165, 296], "subtyp": [165, 296], "subdtyp": 165, "float64": 165, "too": [165, 449, 453], "upper": [170, 171, 176, 219, 229, 232, 233, 379], "decomposit": [170, 171, 175], "semi": [170, 171, 227], "triangular": [170, 171, 176], "lower": [170, 171, 176, 219, 229, 232, 233, 275, 379], "dot": [170, 172, 176, 270, 289, 339, 350], "choleski": 171, "align": [171, 219, 306, 317, 323, 328], "mathbf": 171, "ainv": [172, 176], "ord": 173, "tabl": [173, 296, 314], "frobeniu": 173, "matric": [173, 174, 175], "strictli": 173, "mathemat": 173, "variou": 173, "purpos": 173, "calcul": [173, 391, 394, 400, 426], "fro": 173, "inf": [173, 208, 350], "largest": [173, 208, 272], "sing": 173, "smallest": 173, "singular": [173, 175], "nuclear": 173, "_f": 173, "sum_": [173, 305, 306, 399], "a_": 173, "valueerror": [173, 337, 451], "refer": [173, 322, 329, 343, 373, 374, 375, 376, 383, 405, 452], "golub": 173, "van": 173, "loan": 173, "baltimor": 173, "md": 173, "john": 173, "hopkin": 173, "univers": 173, "1985": 173, "pg": 173, "la": 173, "9": [173, 393, 425, 428, 429, 430, 431, 433, 439, 442, 454], "74597": 173, "84804": 173, "41421": 173, "23607": [173, 174], "74166": 173, "24264": 173, "11": 173, "225": 173, "894427": 174, "447214": 174, "57771": 174, "vt": 175, "return_metadata": 178, "binari": [178, 241, 242, 243, 244, 245, 280, 368, 391, 416, 449], "npy": [178, 241, 456], "matadata": 178, "unsupport": 178, "tensor": [178, 270, 305, 306, 327, 328, 404, 454], "stabl": [183, 187, 252, 399], "multidimension": 192, "dens": [192, 457], "cartesian": 192, "ij": 192, "clear": 193, "get_cache_memori": 193, "max_buffer_s": 194, "max_recommended_working_set_s": 194, "memory_s": 194, "report": [195, 201], "peak": [197, 199], "program": [197, 450], "reset_peak_memori": 197, "reset": 199, "free": 200, "reclaim": 200, "set_memory_limit": 200, "previou": [200, 201], "relax": 201, "task": [201, 399], "exceed": 201, "potenti": 201, "beforehand": 214, "constant_valu": 215, "before_1": 215, "after_1": 215, "before_2": 215, "after_2": 215, "before_n": 215, "after_n": 215, "before_i": 215, "after_i": 215, "side": [215, 305, 306, 327, 328, 449], "everi": [219, 290, 424, 442, 451], "particular": [219, 318], "w_1": 219, "w_g": 219, "max_i": 219, "min_i": 219, "textrm": [219, 315, 316, 381, 384], "1st": 219, "signific": 219, "2nd": 219, "w_q": 219, "prng": [222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 446], "num_sampl": 223, "unnorm": [223, 391, 393], "draw": 223, "cdf": [224, 315, 381], "seed": 225, "loc": [226, 228], "cov": 227, "jointli": 227, "covari": [227, 307], "behavior": [227, 399, 452, 453], "empti": 227, "low": [229, 233, 379, 419], "high": [229, 233, 303, 314, 379, 419], "roadcast": 229, "domain": [232, 450], "uniformli": 233, "repetit": 236, "preserv": [237, 451], "obj": 242, "uncompress": 244, "my_path": 244, "tree_flatten": [244, 290, 293, 303, 424], "transformerencod": 244, "128": [244, 303], "flat_param": 244, "compress": 245, "possibl": [254, 314, 352, 449, 450, 452, 457], "divisor": [259, 279], "being": [260, 303], "prevent": [260, 404, 454], "streamcontext": 261, "context": 261, "manag": [261, 446, 450, 457], "prior": [266, 267], "exclud": 267, "necessarili": 272, "elsewher": [275, 452], "col": 275, "triangl": 275, "mse": 278, "param": [278, 303, 419, 451], "lvalu": 278, "dlvalu": 278, "dparam": 278, "lasso": 278, "l1": [278, 396, 398, 399, 403], "impli": 280, "gaurante": 280, "in_ax": [282, 451], "out_ax": [282, 451], "prefix": [282, 289], "class_pred": 286, "predic": [286, 342], "to_quant": 286, "receiv": [286, 440, 454], "fn": [287, 290, 291, 292, 455], "wrt": 287, "max_norm": 288, "exce": 288, "proportion": 288, "clipped_grad": 288, "total_norm": 288, "rescal": 288, "is_leaf": [289, 290, 291, 292], "arbitrari": [289, 422], "depth": [289, 310, 313, 451], "hello": [289, 293], "charact": 289, "superset": [290, 432], "extra": [290, 291], "closer": 290, "decid": [290, 334], "constitut": 290, "dict_kei": [290, 433], "lambda": [290, 291, 292, 303, 319, 330, 335, 342, 366, 385, 409, 415, 425, 426, 427, 428, 429, 430, 431, 436, 437, 449, 450, 451], "tree_map": [291, 303, 450], "new_tre": 291, "accumul": [292, 354], "acc": 292, "recreat": [293, 424], "world": [293, 450], "42": 293, "16": [296, 305, 322, 327, 330, 422], "int16": 296, "brain": 296, "e8": 296, "m7": 296, "ieee": 296, "e5": 296, "m10": 296, "hierarchi": 296, "mpi": 298, "done": [303, 311, 354, 449, 450, 453, 454], "manual": 303, "solv": 303, "intuit": 303, "freez": [303, 347, 422], "finetun": 303, "in_dim": [303, 422], "out_dim": [303, 422], "enumer": 303, "caus": [303, 449, 453], "local": [303, 312, 450], "scope": 303, "l2_loss": 303, "y_hat": 303, "trainable_paramet": [303, 334, 433], "loss_and_grad": 303, "workhors": 303, "Its": 303, "recurs": [303, 334, 335, 340, 345, 347, 422], "frozen": [303, 335, 345, 347, 353, 422], "individu": [303, 312, 313], "subset": [303, 334], "action": 303, "displai": 303, "count": [303, 440], "num_param": 303, "preclud": 303, "pure": [303, 424], "pattern": [303, 453], "achiev": [303, 450], "other_input": 303, "necessari": 303, "apply_to_modul": [303, 335], "children": 303, "filter_and_map": 303, "leaf_modul": 303, "load_weight": [303, 453], "named_modul": 303, "save_weight": 303, "set_dtyp": 303, "unfreez": [303, 335], "update_modul": 303, "alibi": 303, "avgpool1d": 303, "avgpool2d": 303, "batchnorm": 303, "dropout": [303, 312, 313, 344, 370, 449], "dropout2d": 303, "dropout3d": 303, "gelu": [303, 382, 383, 449], "groupnorm": 303, "gru": 303, "hardshrink": [303, 385], "hardtanh": [303, 386], "hardswish": 303, "instancenorm": 303, "layernorm": 303, "leakyrelu": 303, "lstm": 303, "maxpool1d": 303, "maxpool2d": 303, "mish": 303, "prelu": 303, "quantizedembed": 303, "quantizedlinear": 303, "relu": [303, 351, 370, 406, 419], "relu6": 303, "rnn": [303, 317], "selu": 303, "sequenti": [303, 419], "silu": 303, "sinusoidalpositionalencod": 303, "softmin": 303, "softshrink": 303, "softsign": 303, "softplu": [303, 329, 405], "upsampl": 303, "elu": [303, 409], "gelu_approx": [303, 315, 381], "gelu_fast_approx": [303, 315, 381], "hard_shrink": [303, 319], "hard_tanh": [303, 320], "leaky_relu": 303, "log_sigmoid": 303, "log_softmax": 303, "binary_cross_entropi": [303, 449], "cosine_similarity_loss": 303, "gaussian_nll_loss": 303, "hinge_loss": 303, "huber_loss": 303, "kl_div_loss": 303, "l1_loss": 303, "log_cosh_loss": 303, "margin_ranking_loss": 303, "mse_loss": 303, "nll_loss": 303, "smooth_l1_loss": 303, "triplet_loss": 303, "init": [303, 351, 419, 424, 438, 439, 441, 442, 450], "glorot_norm": 303, "glorot_uniform": 303, "he_norm": 303, "he_uniform": 303, "kernel_s": [305, 306, 308, 309, 310, 327, 328], "averag": [305, 306, 425, 426, 428, 429, 430, 450], "pool": [305, 306, 327, 328, 457], "l_": [305, 327, 396], "n_i": [305, 306, 327, 328], "c_j": [305, 306, 327, 328], "ldot": [305, 306, 327, 328], "lfloor": [305, 306, 327, 328], "_size": [305, 306, 327, 328], "rfloor": [305, 306, 327, 328], "k_h": [306, 328], "k_w": [306, 328], "h_": [306, 317, 323, 328, 355], "w_": [306, 317, 323, 328, 355, 425, 426, 427, 428, 429, 430, 431, 436, 437], "height": [306, 307, 309, 310, 312, 313, 328], "width": [306, 307, 309, 310, 312, 313, 328, 352, 353], "momentum": [307, 431, 433, 437, 449], "affin": [307, 318, 322, 324, 326, 353], "track_running_stat": 307, "epsilon": [307, 318, 322, 324, 354, 392, 394, 425, 427, 428, 429, 430, 436], "gamma": [307, 318, 322, 324, 354, 373, 374, 375, 376], "nc": 307, "nlc": [307, 308], "four": 307, "nhwc": [307, 309], "paper": [307, 362, 425, 426, 427, 428, 430, 431], "deep": [307, 373, 374, 375, 376], "intern": 307, "bn": 307, "in_channel": [308, 309, 310], "out_channel": [308, 309, 310], "learnabl": [308, 309, 310, 360], "imag": [309, 310, 312, 313, 371], "ndhwc": [310, 313], "portion": 311, "nwhc": 312, "whc": 312, "maintain": [312, 313, 431], "benefici": [312, 313, 453], "earli": 312, "adjac": 312, "pixel": 312, "effect": [312, 449, 453], "thompson": 312, "goroshin": 312, "jain": 312, "lecun": 312, "bregler": 312, "2015": [312, 428, 430], "cvpr": 312, "dhwc": 313, "often": 313, "medic": 313, "video": 313, "num_embed": [314, 352], "lookup": 314, "usual": [314, 352, 448, 453], "vocabulari": [314, 352], "approx": 315, "unit": [315, 316, 317, 325, 356, 357, 359, 361, 373, 374, 375, 376, 380, 381, 382, 383, 384, 388, 407, 408, 409, 411], "phi": [315, 381], "geluapprox": 315, "044715": [315, 382], "gelufast": 315, "sigma": [315, 316, 317, 323, 373, 374, 375, 376, 383, 384, 389, 410, 411], "702": [315, 383], "regard": 315, "gate": [316, 317, 384], "halv": [316, 384], "input_s": [317, 323, 355], "hidden_s": [317, 323, 355], "recurr": [317, 323, 355], "nld": [317, 323, 355], "ld": [317, 323, 355], "r_t": 317, "xr": 317, "x_t": [317, 323, 355], "hr": 317, "h_t": [317, 323, 355], "b_": [317, 323], "z_t": 317, "xz": 317, "hz": 317, "n_t": 317, "xn": 317, "odot": [317, 323], "hn": 317, "hidden": [317, 323, 355, 370], "nh": [317, 323, 355], "nlh": [317, 323, 355], "lh": [317, 323, 355], "num_group": 318, "pytorch_compat": 318, "preced": 318, "http": [318, 322, 324, 329, 354, 383, 405], "org": [318, 322, 324, 329, 354, 383, 405], "1803": 318, "08494": 318, "lambd": [319, 366, 385, 415], "denomin": [322, 392, 425, 427, 428, 429, 430, 436], "inorm": 322, "1607": [322, 324], "08022": 322, "i_t": 323, "xi": 323, "f_t": 323, "xf": 323, "hf": 323, "g_t": [323, 425, 427, 428, 429, 430, 431, 436, 437], "xg": 323, "hg": 323, "o_t": 323, "xo": 323, "ho": 323, "c_": [323, 431], "c_t": [323, 431], "cell": 323, "06450": 324, "realli": 324, "negative_slop": [325, 388], "leaki": [325, 388], "rectifi": [325, 356, 357, 375, 376, 388, 407, 408], "slope": 325, "mathcal": 326, "d_i": 326, "max_": [327, 328], "1908": [329, 405], "08681": [329, 405], "map_fn": [330, 334], "filter_fn": [330, 334], "valid_parameter_filt": 330, "apply_fn": 331, "descend": 332, "is_leaf_fn": 334, "found": 334, "drop": 334, "idempot": [335, 347], "endswith": 335, "file_or_weight": 337, "miss": [337, 456], "ok": [337, 451], "save_safetensor": [341, 424, 456], "reflect": [343, 449, 452, 454], "ie": [347, 450], "noop": 347, "unfrozen": 347, "tracer": 348, "partial": [348, 349, 449, 453], "child": 349, "flexibli": 349, "programmat": 349, "query_input_dim": 350, "key_input_dim": 350, "value_input_dim": 350, "value_dim": 350, "value_output_dim": 350, "aggreg": 350, "linearli": 350, "attend": 350, "num_paramet": 351, "25": [351, 371], "parametr": [351, 406], "from_embed": 352, "classmethod": [352, 353], "from_linear": 353, "1910": 354, "07467": 354, "nonlinear": [355, 449], "elman": 355, "ih": 355, "hh": 355, "func": 355, "10000": 358, "slightli": [358, 457], "plain": 360, "known": [361, 411], "swish": [361, 411], "min_freq": 362, "0001": 362, "max_freq": 362, "cos_first": 362, "full_turn": 362, "sinusoid": 362, "threshold": [368, 396, 403, 416], "geq": [368, 416], "num_encoder_lay": 370, "num_decoder_lay": 370, "nb_func": 370, "custom_encod": 370, "custom_decod": 370, "norm_first": 370, "checkpoint": [370, 424], "decod": 370, "interact": 370, "mechan": 370, "chekpoint": 370, "expens": 370, "scale_factor": 371, "nearest": 371, "align_corn": 371, "audio": 371, "4d": 371, "forth": 371, "algorithm": [371, 431], "neighbor": 371, "interpol": 371, "cubic": 371, "bilinear": 371, "trilinear": 371, "bicub": 371, "corner": 371, "bottom": 371, "75": 371, "33333": 371, "66667": 371, "init_fn": [372, 373, 374, 375, 376, 377, 378, 379, 419], "glorot": [373, 374], "fan_in": [373, 374, 375, 376], "fan_out": [373, 374, 375, 376], "fan": [373, 374, 375, 376], "_in": [373, 374], "_out": [373, 374], "difficulti": [373, 374], "feedforward": [373, 374], "191107": 373, "61278": 373, "150594": 373, "363207": 373, "gain": [373, 374, 375, 376], "89613": 373, "53947": 373, "48095": 373, "995016": 373, "223404": 374, "890597": 374, "379159": 374, "776856": 374, "90041": 374, "02264": 374, "912766": 374, "12451": 374, "delv": [375, 376], "surpass": [375, 376], "human": [375, 376], "imagenet": [375, 376], "classif": [375, 376], "25211": 375, "458835": 375, "177208": 375, "0137595": 375, "6967": 375, "02765": 375, "15268": 375, "75787": 375, "kaim": 376, "0300242": 376, "0184009": 376, "793615": 376, "666329": 376, "64331": 376, "16506": 376, "08619": 376, "79854": 376, "982273": 378, "534422": 378, "380709": 378, "0645099": 378, "883935": 379, "863726": 379, "617261": 379, "417497": 379, "exact": [382, 383], "0005": 382, "015": 383, "cdot": [383, 392, 395, 411], "hendryck": 383, "1606": 383, "08415": 383, "min_val": 386, "max_val": 386, "_val": 386, "sum_i": 390, "x_i": [390, 412, 413], "with_logit": 391, "predict": [391, 394, 395, 396, 397, 398, 399, 401, 402, 403], "105361": 391, "223144": 391, "20397": 391, "916291": 391, "539245": 391, "prob": 391, "510826": 391, "x1": 392, "x2": 392, "x_1": [392, 400], "x_2": [392, 400], "label_smooth": 393, "hot": 393, "smooth": [393, 403, 436], "0485873": 393, "348587": 393, "06": [394, 404, 425], "likelihood": [394, 402], "nll": [394, 402], "hing": 395, "y_": [395, 399], "pred": [395, 399], "delta": [396, 425], "huber": 396, "leq": [396, 409], "l2": [396, 399, 437], "kullback": 397, "leibler": 397, "diverg": 397, "logcosh": 399, "sensit": 399, "outlier": 399, "dual": 399, "offer": 399, "balanc": 399, "robust": 399, "approach": [399, 451], "inputs1": 400, "inputs2": 400, "margin": [400, 404], "573409": 400, "765166": 400, "0638": 400, "75596": 400, "225763": 400, "256995": 400, "773433": 400, "formula": 403, "anchor": 404, "triplet": 404, "_p": 404, "pairwis": 404, "instabl": 404, "monoton": 405, "0507": 409, "67326": 409, "sum_j": [412, 413], "x_j": [412, 413], "subclass": 422, "concept": 422, "mymlp": 422, "in_proj": 422, "involv": [424, 449], "subsequ": 424, "far": 424, "serial": 424, "adam": [424, 430, 431, 440, 441], "configu": 424, "thumb": 424, "apply_gradi": 424, "rmsprop": 424, "adagrad": 424, "adafactor": 424, "adadelta": 424, "adamw": [424, 431], "adamax": 424, "lion": 424, "cosine_decai": [424, 440], "exponential_decai": 424, "join_schedul": 424, "linear_schedul": [424, 440], "step_decai": 424, "rho": 425, "zeiler": 425, "2012": [425, 436], "adapt": [425, 426, 427, 450], "1212": 425, "5701": 425, "v_": [425, 427, 428, 429, 430, 436, 437], "v_t": [425, 427, 428, 429, 430, 436, 437], "u_t": 425, "u_": 425, "w_t": [425, 427, 428, 429, 430, 431, 436, 437], "30": 426, "001": 426, "clip_threshold": 426, "decay_r": [426, 439, 442], "beta_1": [426, 428, 429, 430, 431], "weight_decai": [426, 429, 431, 437], "scale_paramet": 426, "relative_step": 426, "warmup_init": 426, "sublinear": 426, "epsilon_1": 426, "epsilon_2": 426, "parameter_scal": 426, "unscal": 426, "decai": [426, 429, 431, 437, 438, 439, 442], "duchi": 427, "hazan": 427, "singer": 427, "2011": 427, "subgradi": 427, "onlin": 427, "stochast": [427, 428, 430, 437, 453], "jmlr": 427, "999": [428, 429, 430], "omit": [428, 430, 450], "estim": [428, 430], "kingma": [428, 430], "ba": [428, 430], "iclr": [428, 429, 430], "m_": [428, 429, 430, 431], "m_t": [428, 429, 430, 431], "beta_2": [428, 429, 430, 431], "contrast": 429, "loshchilov": 429, "hutter": 429, "decoupl": 429, "99": [431, 436], "tend": 431, "10x": 431, "strength": [431, 437], "wd": 431, "chen": 431, "symbol": 431, "discoveri": 431, "2302": 431, "06675": 431, "eta": 431, "opt": [432, 450], "tieleman": 436, "hinton": 436, "lectur": 436, "coursera": 436, "dampen": 437, "nesterov": 437, "descent": [437, 449, 453], "mu": 437, "tau": 437, "penalti": 437, "decay_step": 438, "beyond": [438, 441], "lr_schedul": [438, 439, 440, 442], "1000": [438, 449], "0999961": 438, "06561": 439, "boundari": 440, "join": 440, "transit": 440, "warmup": [440, 441], "0999938": 440, "101": 441, "step_siz": 442, "081": 442, "basi": 444, "implicit": [446, 449, 451], "fine": [446, 453], "grain": 446, "pseudo": 446, "altern": 446, "splittabl": 446, "threefri": 446, "counter": 446, "cycl": 448, "merg": 449, "fuse": 449, "big": 449, "awar": [449, 453], "36788": 449, "compiled_fun": 449, "code": [449, 450, 453], "slow": 449, "rerun": [449, 453], "frequent": [449, 453], "destroi": 449, "anonym": 449, "unari": 449, "overhead": [449, 453, 457], "bandwidth": [449, 450], "fusibl": 449, "consider": 449, "versu": 449, "timeit": [449, 451], "tic": 449, "perf_count": 449, "toc": 449, "tpi": 449, "1e3": 449, "4096": [449, 451, 457], "On": [449, 451, 453], "five": 449, "latest": 449, "won": 449, "placehold": 449, "insid": 449, "disable_compil": 449, "okai": [449, 453], "deal": 449, "pretti": [449, 453], "inconveni": 449, "functool": 449, "particularli": 449, "backward": [449, 451], "compiled_grad_fn": 449, "71828": 449, "opportun": 449, "physic": 450, "lot": [450, 451], "figur": 450, "best": 450, "mac": 450, "abil": 450, "talk": 450, "minim": 450, "all_sum": 450, "mpirun": 450, "mpiexec": 450, "send": 450, "homebrew": 450, "anaconda": 450, "openmpi": 450, "libmpi": 450, "dyld": 450, "dyld_library_path": 450, "lib": 450, "connect": 450, "ssh": 450, "checklist": 450, "issu": [450, 451, 454], "hostnam": 450, "password": 450, "confirm": 450, "foo": 450, "bar": 450, "host1": 450, "host2": 450, "qualifi": 450, "ip": 450, "slot": 450, "hostfil": 450, "parallel": [450, 457], "snippet": 450, "loss_grad_fn": 450, "all_avg": 450, "all_reduce_grad": 450, "latenc": 450, "mca": 450, "btl_tcp_link": 450, "tcp": 450, "idea": [451, 453], "behind": 451, "dfdx": [451, 452], "d2fdx2": 451, "zero_grad": 451, "detach": 451, "requires_grad": 451, "dloss_dw": 451, "dloss_dx": 451, "redund": 451, "continu": 451, "suppos": [451, 457], "nice": [451, 453], "propag": [451, 452], "autom": 451, "contriv": [451, 457], "sake": 451, "clariti": 451, "quit": [451, 454], "difficult": 451, "primit": 451, "priorit": 451, "naive_add": 451, "vmap_add": 451, "total": 451, "390": 451, "wherea": 451, "025": 451, "ten": [451, 453], "Of": 451, "cours": 451, "better": [451, 457], "handi": 451, "ellipsi": 452, "mix": 452, "lack": 452, "extrem": [452, 453], "ineffici": [452, 453], "nonzero": 452, "dynam": 453, "easier": 453, "worri": 453, "fun1": 453, "expensive_fun": 453, "consum": 453, "eager": 453, "thank": 453, "weights_fp16": 453, "trade": 453, "bad": 453, "grow": 453, "computation": 453, "costli": 453, "luckili": 453, "wide": 453, "thousand": 453, "value_and_grad_fn": 453, "implicitli": 453, "anytim": 453, "memoryview": [453, 454], "perfectli": 453, "first_lay": 453, "second_layer_a": 453, "second_layer_b": 453, "protocol": 454, "dlpack": 454, "pep": 454, "3118": 454, "a_view": 454, "owndata": 454, "extern": 454, "demonstr": 454, "x_view": 454, "modifi": 454, "df": 454, "x\u00b2": 454, "2x": 454, "indirectli": 454, "modif": 454, "seen": 454, "occur": 454, "incorpor": 454, "aris": 454, "incorrect": 454, "experiment": 454, "break": 454, "advis": 454, "intermedi": 454, "jnp": 454, "tf": 454, "page": 455, "composit": 455, "archiv": 456, "savez_compress": 456, "save_gguf": 456, "arr_0": 456, "advantag": 457, "race": 457, "interest": 457, "albeit": 457, "d1": 457, "d2": 457, "But": 457, "twice": 457, "measur": 457, "default_stream": 458, "default_devic": 458, "my_devic": 458}, "objects": {"": [[0, 0, 1, "_CPPv43absRK5array14StreamOrDevice", "abs"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::a"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::s"], [0, 0, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::a"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::b"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::s"], [0, 0, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::a"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::alpha"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::b"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::beta"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::c"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::s"], [0, 0, 1, "_CPPv43allRK5array14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::axes"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::axis"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::s"], [0, 0, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::a"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::atol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::b"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::equal_nan"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::rtol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::s"], [0, 0, 1, "_CPPv43anyRK5array14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::axes"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::axis"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::s"], [0, 0, 1, "_CPPv46aranged14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangei14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeii14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeiii14StreamOrDevice", "arange"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::stop"], [0, 0, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::a"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::s"], [0, 0, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::a"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::s"], [0, 0, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::a"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::s"], [0, 0, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::a"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::s"], [0, 0, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan"], [0, 0, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::a"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::b"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::s"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::a"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::s"], [0, 0, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::a"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::s"], [0, 0, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::axis"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::s"], [0, 0, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::axis"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::s"], [0, 0, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition"], [0, 0, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::axis"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::s"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::s"], [0, 0, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort"], [0, 0, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::axis"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::s"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::s"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::equal_nan"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::s"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::s"], [0, 0, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::a"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::offset"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::s"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::shape"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::strides"], [0, 0, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::a"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::dtype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::s"], [0, 0, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d"], [0, 0, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::s"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::s"], [0, 0, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d"], [0, 0, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::s"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::s"], [0, 0, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d"], [0, 0, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::s"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::s"], [0, 0, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::a"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::b"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::s"], [0, 0, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::a"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::b"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::s"], [0, 0, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::a"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::b"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::s"], [0, 0, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::a"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::b"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::block_size"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_lhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_out"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_rhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::s"], [0, 0, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::inputs"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::s"], [0, 0, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::a"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::s"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::shape"], [0, 0, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::a"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::s"], [0, 0, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_max"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_min"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::s"], [0, 0, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate"], [0, 0, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::axis"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::s"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::s"], [0, 0, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::a"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::s"], [0, 0, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::dilation"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::groups"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::input"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::padding"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::s"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::stride"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::weight"], [0, 0, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::dilation"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::groups"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::input"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::padding"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::s"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::stride"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::weight"], [0, 0, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::dilation"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::groups"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::input"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::padding"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::s"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::stride"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::weight"], [0, 0, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 0, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_hi"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_lo"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 0, 1, "_CPPv44copy5array14StreamOrDevice", "copy"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::a"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::s"], [0, 0, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::a"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::s"], [0, 0, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::a"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::s"], [0, 0, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::a"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::axis"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::inclusive"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::reverse"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::s"], [0, 0, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::a"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::axis"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::inclusive"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::reverse"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::s"], [0, 0, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::a"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::axis"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::inclusive"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::reverse"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::s"], [0, 0, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::a"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::axis"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::inclusive"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::reverse"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::s"], [0, 0, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::a"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::s"], [0, 0, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::dependencies"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::inputs"], [0, 0, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::biases"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::bits"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::group_size"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::s"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::scales"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::w"], [0, 0, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::a"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::k"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::s"], [0, 0, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::a"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis1"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis2"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::offset"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::s"], [0, 0, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::a"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::b"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::s"], [0, 0, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::a"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::b"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::s"], [0, 0, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::a"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::b"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::s"], [0, 0, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::a"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::s"], [0, 0, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::a"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::s"], [0, 0, 1, "_CPPv43expRK5array14StreamOrDevice", "exp"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::a"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::s"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::axes"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::axis"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::s"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::s"], [0, 0, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::a"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::s"], [0, 0, 1, "_CPPv43eyei14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::s"], [0, 0, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten"], [0, 0, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::end_axis"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::start_axis"], [0, 0, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::a"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::s"], [0, 0, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::a"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::b"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::s"], [0, 0, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full"], [0, 0, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full"], [0, 2, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::T"], [0, 2, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::T"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::vals"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::vals"], [0, 0, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather"], [0, 0, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::axes"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::axis"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::slice_sizes"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::slice_sizes"], [0, 0, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::a"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::b"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::lhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::rhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::s"], [0, 0, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::biases"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::bits"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::group_size"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::lhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::rhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::s"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::scales"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::transpose"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::w"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::x"], [0, 0, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::a"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::b"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::s"], [0, 0, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::a"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::b"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::s"], [0, 0, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::a"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::s"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::scale"], [0, 0, 1, "_CPPv48identityi14StreamOrDevice", "identity"], [0, 0, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::dtype"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::s"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::s"], [0, 0, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::a"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::b"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::s"], [0, 0, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::a"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::atol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::b"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::equal_nan"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::rtol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::s"], [0, 0, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::a"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::s"], [0, 0, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::a"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::s"], [0, 0, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::a"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::s"], [0, 0, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::a"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::s"], [0, 0, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::a"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::b"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::s"], [0, 0, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::a"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::b"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::s"], [0, 0, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::a"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::b"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::s"], [0, 0, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::dtype"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::num"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::s"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::start"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::stop"], [0, 0, 1, "_CPPv43logRK5array14StreamOrDevice", "log"], [0, 0, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::a"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::s"], [0, 0, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::a"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::s"], [0, 0, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::a"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::s"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::a"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::s"], [0, 0, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::a"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::b"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::s"], [0, 0, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::a"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::b"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::s"], [0, 0, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::a"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::s"], [0, 0, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::a"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::b"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::s"], [0, 0, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::axes"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::axis"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::s"], [0, 0, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::a"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::b"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::s"], [0, 0, 1, "_CPPv43maxRK5array14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::axes"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::axis"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::s"], [0, 0, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::a"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::b"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::s"], [0, 0, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::axes"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::axis"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::s"], [0, 0, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::arrays"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::indexing"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::s"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::sparse"], [0, 0, 1, "_CPPv43minRK5array14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::axes"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::axis"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::s"], [0, 0, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::a"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::b"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::s"], [0, 0, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::a"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::destination"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::s"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::source"], [0, 0, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::a"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::b"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::s"], [0, 0, 1, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", "nan_to_num"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::a"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::nan"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::neginf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::posinf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::s"], [0, 0, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::a"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::s"], [0, 0, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::a"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::b"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::s"], [0, 0, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::a"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::axes"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::dtype"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::inverted"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::s"], [0, 0, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones"], [0, 0, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::dtype"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones::shape"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::shape"], [0, 0, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::a"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::s"], [0, 0, 1, "_CPPv4I0Ene5array1TRK5array", "operator!="], [0, 0, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!="], [0, 0, 1, "_CPPv4neRK5arrayRK5array", "operator!="], [0, 2, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::T"], [0, 2, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::T"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::a"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::b"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::b"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::b"], [0, 0, 1, "_CPPv4I0Erm5array1TRK5array", "operator%"], [0, 0, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%"], [0, 0, 1, "_CPPv4rmRK5arrayRK5array", "operator%"], [0, 2, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::T"], [0, 2, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::T"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::a"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::b"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::b"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::b"], [0, 0, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;"], [0, 0, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::a"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::b"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::a"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::b"], [0, 0, 1, "_CPPv4I0Eml5array1TRK5array", "operator*"], [0, 0, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*"], [0, 0, 1, "_CPPv4mlRK5arrayRK5array", "operator*"], [0, 2, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::T"], [0, 2, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::T"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::a"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::b"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::b"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::b"], [0, 0, 1, "_CPPv4I0Epl5array1TRK5array", "operator+"], [0, 0, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+"], [0, 0, 1, "_CPPv4plRK5arrayRK5array", "operator+"], [0, 2, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::T"], [0, 2, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::T"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::a"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::b"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::b"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::b"], [0, 0, 1, "_CPPv4I0Emi5array1TRK5array", "operator-"], [0, 0, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-"], [0, 0, 1, "_CPPv4miRK5array", "operator-"], [0, 0, 1, "_CPPv4miRK5arrayRK5array", "operator-"], [0, 2, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::T"], [0, 2, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::T"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::a"], [0, 1, 1, "_CPPv4miRK5array", "operator-::a"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::b"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::b"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::b"], [0, 0, 1, "_CPPv4dvRK5arrayRK5array", "operator/"], [0, 0, 1, "_CPPv4dvRK5arrayd", "operator/"], [0, 0, 1, "_CPPv4dvdRK5array", "operator/"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::a"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::b"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::b"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::b"], [0, 0, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;"], [0, 0, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;"], [0, 0, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;"], [0, 2, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::T"], [0, 2, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::T"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::a"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::b"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::b"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::b"], [0, 0, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::a"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::b"], [0, 0, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;="], [0, 0, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;="], [0, 0, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;="], [0, 2, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::T"], [0, 2, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::T"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::a"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::b"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::b"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::b"], [0, 0, 1, "_CPPv4I0Eeq5array1TRK5array", "operator=="], [0, 0, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator=="], [0, 0, 1, "_CPPv4eqRK5arrayRK5array", "operator=="], [0, 2, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::T"], [0, 2, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::T"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::a"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::b"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::b"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::b"], [0, 0, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;"], [0, 0, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;"], [0, 0, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;"], [0, 2, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::T"], [0, 2, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::T"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::a"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::b"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::b"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::b"], [0, 0, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;="], [0, 0, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;="], [0, 0, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;="], [0, 2, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::T"], [0, 2, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::T"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::a"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::b"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::b"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::b"], [0, 0, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::a"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::b"], [0, 0, 1, "_CPPv4eoRK5arrayRK5array", "operator^"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::a"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::b"], [0, 0, 1, "_CPPv4orRK5arrayRK5array", "operator|"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::a"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::b"], [0, 0, 1, "_CPPv4ooRK5arrayRK5array", "operator||"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::a"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::b"], [0, 0, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::a"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::b"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::s"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::axes"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::high_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::low_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 0, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition"], [0, 0, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::axis"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::s"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::s"], [0, 0, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::a"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::b"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::s"], [0, 0, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::axes"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::axis"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::s"], [0, 0, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::bits"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::group_size"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::s"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::w"], [0, 0, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::biases"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::bits"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::group_size"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::s"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::scales"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::transpose"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::w"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::x"], [0, 0, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::a"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::s"], [0, 0, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::a"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::s"], [0, 0, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::a"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::b"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::s"], [0, 0, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat"], [0, 0, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::axis"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::s"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::s"], [0, 0, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::a"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::s"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::shape"], [0, 0, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::a"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::b"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::s"], [0, 0, 1, "_CPPv45roundRK5array14StreamOrDevice", "round"], [0, 0, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::decimals"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::s"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::s"], [0, 0, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::a"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::s"], [0, 0, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter"], [0, 0, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::axes"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::axis"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::updates"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::updates"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::axes"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::axis"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::updates"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::updates"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::axes"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::axis"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::updates"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::updates"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::axes"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::axis"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::updates"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::updates"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::axes"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::axis"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::updates"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::updates"], [0, 0, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::a"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::s"], [0, 0, 1, "_CPPv44signRK5array14StreamOrDevice", "sign"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::a"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::s"], [0, 0, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::a"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::s"], [0, 0, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::a"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::s"], [0, 0, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::strides"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::strides"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 0, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::axes"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::axis"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::s"], [0, 0, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort"], [0, 0, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::axis"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::s"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::s"], [0, 0, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::s"], [0, 0, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::a"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::s"], [0, 0, 1, "_CPPv46squareRK5array14StreamOrDevice", "square"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::a"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::s"], [0, 0, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::axes"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::axis"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::s"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::axis"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::s"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::s"], [0, 0, 1, "_CPPv4StRK5array14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::axes"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::axis"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::s"], [0, 0, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::a"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::s"], [0, 0, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::a"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::b"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::s"], [0, 0, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::axes"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::axis"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::s"], [0, 0, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::a"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis1"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis2"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::s"], [0, 0, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::s"], [0, 0, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::a"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::indices"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::s"], [0, 0, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::a"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::s"], [0, 0, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::a"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::s"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::axis"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::s"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::s"], [0, 0, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::arr"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::reps"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::s"], [0, 0, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk"], [0, 0, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::axis"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::s"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::s"], [0, 0, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::dtype"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::s"], [0, 0, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::s"], [0, 0, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri"], [0, 0, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::k"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::m"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::type"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::type"], [0, 0, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::k"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::s"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::x"], [0, 0, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::k"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::s"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::x"], [0, 0, 1, "_CPPv43varRK5array14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::axes"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::axis"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::s"], [0, 0, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::a"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::dtype"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::s"], [0, 0, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::condition"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::s"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::x"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::y"], [0, 0, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros"], [0, 0, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::dtype"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros::shape"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::shape"], [0, 0, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::a"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::s"]], "mlx.core": [[8, 3, 1, "", "Device"], [9, 3, 1, "", "Dtype"], [10, 3, 1, "", "DtypeCategory"], [294, 3, 1, "", "Stream"], [11, 5, 1, "", "abs"], [12, 5, 1, "", "add"], [13, 5, 1, "", "addmm"], [14, 5, 1, "", "all"], [15, 5, 1, "", "allclose"], [16, 5, 1, "", "any"], [17, 5, 1, "", "arange"], [18, 5, 1, "", "arccos"], [19, 5, 1, "", "arccosh"], [20, 5, 1, "", "arcsin"], [21, 5, 1, "", "arcsinh"], [22, 5, 1, "", "arctan"], [23, 5, 1, "", "arctan2"], [24, 5, 1, "", "arctanh"], [25, 5, 1, "", "argmax"], [26, 5, 1, "", "argmin"], [27, 5, 1, "", "argpartition"], [28, 5, 1, "", "argsort"], [29, 3, 1, "", "array"], [80, 5, 1, "", "array_equal"], [81, 5, 1, "", "as_strided"], [82, 5, 1, "", "atleast_1d"], [83, 5, 1, "", "atleast_2d"], [84, 5, 1, "", "atleast_3d"], [85, 5, 1, "", "bitwise_and"], [86, 5, 1, "", "bitwise_or"], [87, 5, 1, "", "bitwise_xor"], [88, 5, 1, "", "block_masked_mm"], [89, 5, 1, "", "broadcast_to"], [90, 5, 1, "", "ceil"], [91, 5, 1, "", "clip"], [92, 5, 1, "", "compile"], [93, 5, 1, "", "concatenate"], [94, 5, 1, "", "conj"], [95, 5, 1, "", "conjugate"], [96, 5, 1, "", "conv1d"], [97, 5, 1, "", "conv2d"], [98, 5, 1, "", "conv_general"], [99, 5, 1, "", "convolve"], [100, 5, 1, "", "cos"], [101, 5, 1, "", "cosh"], [102, 5, 1, "", "cummax"], [103, 5, 1, "", "cummin"], [104, 5, 1, "", "cumprod"], [105, 5, 1, "", "cumsum"], [106, 3, 1, "", "custom_function"], [107, 5, 1, "", "default_device"], [108, 5, 1, "", "default_stream"], [109, 5, 1, "", "degrees"], [110, 5, 1, "", "dequantize"], [111, 5, 1, "", "diag"], [112, 5, 1, "", "diagonal"], [113, 5, 1, "", "disable_compile"], [119, 5, 1, "", "divide"], [120, 5, 1, "", "divmod"], [121, 5, 1, "", "einsum"], [122, 5, 1, "", "einsum_path"], [123, 5, 1, "", "enable_compile"], [124, 5, 1, "", "equal"], [125, 5, 1, "", "erf"], [126, 5, 1, "", "erfinv"], [127, 5, 1, "", "eval"], [128, 5, 1, "", "exp"], [129, 5, 1, "", "expand_dims"], [130, 5, 1, "", "expm1"], [131, 5, 1, "", "eye"], [148, 5, 1, "", "flatten"], [149, 5, 1, "", "floor"], [150, 5, 1, "", "floor_divide"], [151, 5, 1, "", "full"], [152, 5, 1, "", "gather_mm"], [153, 5, 1, "", "gather_qmm"], [154, 5, 1, "", "grad"], [155, 5, 1, "", "greater"], [156, 5, 1, "", "greater_equal"], [157, 5, 1, "", "hadamard_transform"], [158, 5, 1, "", "identity"], [159, 5, 1, "", "inner"], [160, 5, 1, "", "isclose"], [161, 5, 1, "", "isinf"], [162, 5, 1, "", "isnan"], [163, 5, 1, "", "isneginf"], [164, 5, 1, "", "isposinf"], [165, 5, 1, "", "issubdtype"], [166, 5, 1, "", "jvp"], [167, 5, 1, "", "left_shift"], [168, 5, 1, "", "less"], [169, 5, 1, "", "less_equal"], [177, 5, 1, "", "linspace"], [178, 5, 1, "", "load"], [179, 5, 1, "", "log"], [180, 5, 1, "", "log10"], [181, 5, 1, "", "log1p"], [182, 5, 1, "", "log2"], [183, 5, 1, "", "logaddexp"], [184, 5, 1, "", "logical_and"], [185, 5, 1, "", "logical_not"], [186, 5, 1, "", "logical_or"], [187, 5, 1, "", "logsumexp"], [188, 5, 1, "", "matmul"], [189, 5, 1, "", "max"], [190, 5, 1, "", "maximum"], [191, 5, 1, "", "mean"], [192, 5, 1, "", "meshgrid"], [204, 5, 1, "", "min"], [205, 5, 1, "", "minimum"], [206, 5, 1, "", "moveaxis"], [207, 5, 1, "", "multiply"], [208, 5, 1, "", "nan_to_num"], [209, 5, 1, "", "negative"], [210, 5, 1, "", "new_stream"], [211, 5, 1, "", "not_equal"], [212, 5, 1, "", "ones"], [213, 5, 1, "", "ones_like"], [214, 5, 1, "", "outer"], [215, 5, 1, "", "pad"], [216, 5, 1, "", "partition"], [217, 5, 1, "", "power"], [218, 5, 1, "", "prod"], [219, 5, 1, "", "quantize"], [220, 5, 1, "", "quantized_matmul"], [221, 5, 1, "", "radians"], [234, 5, 1, "", "reciprocal"], [235, 5, 1, "", "remainder"], [236, 5, 1, "", "repeat"], [237, 5, 1, "", "reshape"], [238, 5, 1, "", "right_shift"], [239, 5, 1, "", "round"], [240, 5, 1, "", "rsqrt"], [241, 5, 1, "", "save"], [242, 5, 1, "", "save_gguf"], [243, 5, 1, "", "save_safetensors"], [244, 5, 1, "", "savez"], [245, 5, 1, "", "savez_compressed"], [246, 5, 1, "", "set_default_device"], [247, 5, 1, "", "set_default_stream"], [248, 5, 1, "", "sigmoid"], [249, 5, 1, "", "sign"], [250, 5, 1, "", "sin"], [251, 5, 1, "", "sinh"], [252, 5, 1, "", "softmax"], [253, 5, 1, "", "sort"], [254, 5, 1, "", "split"], [255, 5, 1, "", "sqrt"], [256, 5, 1, "", "square"], [257, 5, 1, "", "squeeze"], [258, 5, 1, "", "stack"], [259, 5, 1, "", "std"], [260, 5, 1, "", "stop_gradient"], [261, 5, 1, "", "stream"], [262, 5, 1, "", "subtract"], [263, 5, 1, "", "sum"], [264, 5, 1, "", "swapaxes"], [265, 5, 1, "", "synchronize"], [266, 5, 1, "", "take"], [267, 5, 1, "", "take_along_axis"], [268, 5, 1, "", "tan"], [269, 5, 1, "", "tanh"], [270, 5, 1, "", "tensordot"], [271, 5, 1, "", "tile"], [272, 5, 1, "", "topk"], [273, 5, 1, "", "trace"], [274, 5, 1, "", "transpose"], [275, 5, 1, "", "tri"], [276, 5, 1, "", "tril"], [277, 5, 1, "", "triu"], [278, 5, 1, "", "value_and_grad"], [279, 5, 1, "", "var"], [280, 5, 1, "", "view"], [281, 5, 1, "", "vjp"], [282, 5, 1, "", "vmap"], [283, 5, 1, "", "where"], [284, 5, 1, "", "zeros"], [285, 5, 1, "", "zeros_like"]], "mlx.core.Device": [[8, 4, 1, "", "__init__"]], "mlx.core.Dtype": [[9, 4, 1, "", "__init__"]], "mlx.core.DtypeCategory": [[10, 4, 1, "", "__init__"]], "mlx.core.Stream": [[294, 4, 1, "", "__init__"]], "mlx.core.array": [[30, 6, 1, "", "T"], [29, 4, 1, "", "__init__"], [31, 4, 1, "", "abs"], [32, 4, 1, "", "all"], [33, 4, 1, "", "any"], [34, 4, 1, "", "argmax"], [35, 4, 1, "", "argmin"], [36, 4, 1, "", "astype"], [37, 6, 1, "", "at"], [38, 4, 1, "", "conj"], [39, 4, 1, "", "cos"], [40, 4, 1, "", "cummax"], [41, 4, 1, "", "cummin"], [42, 4, 1, "", "cumprod"], [43, 4, 1, "", "cumsum"], [44, 4, 1, "", "diag"], [45, 4, 1, "", "diagonal"], [46, 6, 1, "", "dtype"], [47, 4, 1, "", "exp"], [48, 4, 1, "", "flatten"], [49, 4, 1, "", "item"], [50, 6, 1, "", "itemsize"], [51, 4, 1, "", "log"], [52, 4, 1, "", "log10"], [53, 4, 1, "", "log1p"], [54, 4, 1, "", "log2"], [55, 4, 1, "", "logsumexp"], [56, 4, 1, "", "max"], [57, 4, 1, "", "mean"], [58, 4, 1, "", "min"], [59, 4, 1, "", "moveaxis"], [60, 6, 1, "", "nbytes"], [61, 6, 1, "", "ndim"], [62, 4, 1, "", "prod"], [63, 4, 1, "", "reciprocal"], [64, 4, 1, "", "reshape"], [65, 4, 1, "", "round"], [66, 4, 1, "", "rsqrt"], [67, 6, 1, "", "shape"], [68, 4, 1, "", "sin"], [69, 6, 1, "", "size"], [70, 4, 1, "", "split"], [71, 4, 1, "", "sqrt"], [72, 4, 1, "", "square"], [73, 4, 1, "", "squeeze"], [74, 4, 1, "", "sum"], [75, 4, 1, "", "swapaxes"], [76, 4, 1, "", "tolist"], [77, 4, 1, "", "transpose"], [78, 4, 1, "", "var"], [79, 4, 1, "", "view"]], "mlx.core.custom_function": [[106, 4, 1, "", "__init__"]], "mlx.core.distributed": [[114, 3, 1, "", "Group"], [115, 5, 1, "", "all_gather"], [116, 5, 1, "", "all_sum"], [117, 5, 1, "", "init"], [118, 5, 1, "", "is_available"]], "mlx.core.distributed.Group": [[114, 4, 1, "", "__init__"]], "mlx.core.fast": [[132, 5, 1, "", "layer_norm"], [133, 5, 1, "", "rms_norm"], [134, 5, 1, "", "rope"], [135, 5, 1, "", "scaled_dot_product_attention"]], "mlx.core.fft": [[136, 5, 1, "", "fft"], [137, 5, 1, "", "fft2"], [138, 5, 1, "", "fftn"], [139, 5, 1, "", "ifft"], [140, 5, 1, "", "ifft2"], [141, 5, 1, "", "ifftn"], [142, 5, 1, "", "irfft"], [143, 5, 1, "", "irfft2"], [144, 5, 1, "", "irfftn"], [145, 5, 1, "", "rfft"], [146, 5, 1, "", "rfft2"], [147, 5, 1, "", "rfftn"]], "mlx.core.linalg": [[170, 5, 1, "", "cholesky"], [171, 5, 1, "", "cholesky_inv"], [172, 5, 1, "", "inv"], [173, 5, 1, "", "norm"], [174, 5, 1, "", "qr"], [175, 5, 1, "", "svd"], [176, 5, 1, "", "tri_inv"]], "mlx.core.metal": [[193, 5, 1, "", "clear_cache"], [194, 5, 1, "", "device_info"], [195, 5, 1, "", "get_active_memory"], [196, 5, 1, "", "get_cache_memory"], [197, 5, 1, "", "get_peak_memory"], [198, 5, 1, "", "is_available"], [199, 5, 1, "", "reset_peak_memory"], [200, 5, 1, "", "set_cache_limit"], [201, 5, 1, "", "set_memory_limit"], [202, 5, 1, "", "start_capture"], [203, 5, 1, "", "stop_capture"]], "mlx.core.random": [[222, 5, 1, "", "bernoulli"], [223, 5, 1, "", "categorical"], [224, 5, 1, "", "gumbel"], [225, 5, 1, "", "key"], [226, 5, 1, "", "laplace"], [227, 5, 1, "", "multivariate_normal"], [228, 5, 1, "", "normal"], [229, 5, 1, "", "randint"], [230, 5, 1, "", "seed"], [231, 5, 1, "", "split"], [232, 5, 1, "", "truncated_normal"], [233, 5, 1, "", "uniform"]], "mlx.nn": [[304, 3, 1, "", "ALiBi"], [305, 3, 1, "", "AvgPool1d"], [306, 3, 1, "", "AvgPool2d"], [307, 3, 1, "", "BatchNorm"], [308, 3, 1, "", "Conv1d"], [309, 3, 1, "", "Conv2d"], [310, 3, 1, "", "Conv3d"], [311, 3, 1, "", "Dropout"], [312, 3, 1, "", "Dropout2d"], [313, 3, 1, "", "Dropout3d"], [314, 3, 1, "", "Embedding"], [315, 3, 1, "", "GELU"], [316, 3, 1, "", "GLU"], [317, 3, 1, "", "GRU"], [318, 3, 1, "", "GroupNorm"], [319, 3, 1, "", "HardShrink"], [320, 3, 1, "", "HardTanh"], [321, 3, 1, "", "Hardswish"], [322, 3, 1, "", "InstanceNorm"], [323, 3, 1, "", "LSTM"], [324, 3, 1, "", "LayerNorm"], [325, 3, 1, "", "LeakyReLU"], [326, 3, 1, "", "Linear"], [327, 3, 1, "", "MaxPool1d"], [328, 3, 1, "", "MaxPool2d"], [329, 3, 1, "", "Mish"], [422, 3, 1, "", "Module"], [350, 3, 1, "", "MultiHeadAttention"], [351, 3, 1, "", "PReLU"], [352, 3, 1, "", "QuantizedEmbedding"], [353, 3, 1, "", "QuantizedLinear"], [354, 3, 1, "", "RMSNorm"], [355, 3, 1, "", "RNN"], [356, 3, 1, "", "ReLU"], [357, 3, 1, "", "ReLU6"], [358, 3, 1, "", "RoPE"], [359, 3, 1, "", "SELU"], [360, 3, 1, "", "Sequential"], [361, 3, 1, "", "SiLU"], [362, 3, 1, "", "SinusoidalPositionalEncoding"], [363, 3, 1, "", "Softmax"], [364, 3, 1, "", "Softmin"], [365, 3, 1, "", "Softplus"], [366, 3, 1, "", "Softshrink"], [367, 3, 1, "", "Softsign"], [368, 3, 1, "", "Step"], [369, 3, 1, "", "Tanh"], [370, 3, 1, "", "Transformer"], [371, 3, 1, "", "Upsample"], [380, 3, 1, "", "elu"], [381, 3, 1, "", "gelu"], [382, 3, 1, "", "gelu_approx"], [383, 3, 1, "", "gelu_fast_approx"], [384, 3, 1, "", "glu"], [385, 3, 1, "", "hard_shrink"], [386, 3, 1, "", "hard_tanh"], [387, 3, 1, "", "hardswish"], [388, 3, 1, "", "leaky_relu"], [389, 3, 1, "", "log_sigmoid"], [390, 3, 1, "", "log_softmax"], [405, 3, 1, "", "mish"], [406, 3, 1, "", "prelu"], [286, 5, 1, "", "quantize"], [407, 3, 1, "", "relu"], [408, 3, 1, "", "relu6"], [409, 3, 1, "", "selu"], [410, 3, 1, "", "sigmoid"], [411, 3, 1, "", "silu"], [412, 3, 1, "", "softmax"], [413, 3, 1, "", "softmin"], [414, 3, 1, "", "softplus"], [415, 3, 1, "", "softshrink"], [416, 3, 1, "", "step"], [417, 3, 1, "", "tanh"], [287, 5, 1, "", "value_and_grad"]], "mlx.nn.Module": [[330, 4, 1, "", "apply"], [331, 4, 1, "", "apply_to_modules"], [332, 4, 1, "", "children"], [333, 4, 1, "", "eval"], [334, 4, 1, "", "filter_and_map"], [335, 4, 1, "", "freeze"], [336, 4, 1, "", "leaf_modules"], [337, 4, 1, "", "load_weights"], [338, 4, 1, "", "modules"], [339, 4, 1, "", "named_modules"], [340, 4, 1, "", "parameters"], [341, 4, 1, "", "save_weights"], [342, 4, 1, "", "set_dtype"], [343, 6, 1, "", "state"], [344, 4, 1, "", "train"], [345, 4, 1, "", "trainable_parameters"], [346, 6, 1, "", "training"], [347, 4, 1, "", "unfreeze"], [348, 4, 1, "", "update"], [349, 4, 1, "", "update_modules"]], "mlx.nn.init": [[372, 5, 1, "", "constant"], [373, 5, 1, "", "glorot_normal"], [374, 5, 1, "", "glorot_uniform"], [375, 5, 1, "", "he_normal"], [376, 5, 1, "", "he_uniform"], [377, 5, 1, "", "identity"], [378, 5, 1, "", "normal"], [379, 5, 1, "", "uniform"]], "mlx.nn.losses": [[391, 3, 1, "", "binary_cross_entropy"], [392, 3, 1, "", "cosine_similarity_loss"], [393, 3, 1, "", "cross_entropy"], [394, 3, 1, "", "gaussian_nll_loss"], [395, 3, 1, "", "hinge_loss"], [396, 3, 1, "", "huber_loss"], [397, 3, 1, "", "kl_div_loss"], [398, 3, 1, "", "l1_loss"], [399, 3, 1, "", "log_cosh_loss"], [400, 3, 1, "", "margin_ranking_loss"], [401, 3, 1, "", "mse_loss"], [402, 3, 1, "", "nll_loss"], [403, 3, 1, "", "smooth_l1_loss"], [404, 3, 1, "", "triplet_loss"]], "mlx.optimizers": [[425, 3, 1, "", "AdaDelta"], [426, 3, 1, "", "Adafactor"], [427, 3, 1, "", "Adagrad"], [428, 3, 1, "", "Adam"], [429, 3, 1, "", "AdamW"], [430, 3, 1, "", "Adamax"], [431, 3, 1, "", "Lion"], [444, 3, 1, "", "Optimizer"], [436, 3, 1, "", "RMSprop"], [437, 3, 1, "", "SGD"], [288, 5, 1, "", "clip_grad_norm"], [438, 5, 1, "", "cosine_decay"], [439, 5, 1, "", "exponential_decay"], [440, 5, 1, "", "join_schedules"], [441, 5, 1, "", "linear_schedule"], [442, 5, 1, "", "step_decay"]], "mlx.optimizers.Optimizer": [[432, 4, 1, "", "apply_gradients"], [433, 4, 1, "", "init"], [434, 6, 1, "", "state"], [435, 4, 1, "", "update"]], "mlx.utils": [[289, 5, 1, "", "tree_flatten"], [290, 5, 1, "", "tree_map"], [291, 5, 1, "", "tree_map_with_path"], [292, 5, 1, "", "tree_reduce"], [293, 5, 1, "", "tree_unflatten"]]}, "objtypes": {"0": "cpp:function", "1": "cpp:functionParam", "2": "cpp:templateParam", "3": "py:class", "4": "py:method", "5": "py:function", "6": "py:property"}, "objnames": {"0": ["cpp", "function", "C++ function"], "1": ["cpp", "functionParam", "C++ function parameter"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "titleterms": {"oper": [0, 1, 423], "custom": 1, "extens": 1, "mlx": [1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442], "introduc": 1, "exampl": [1, 6, 449, 450, 457], "primit": 1, "us": [1, 453, 458], "implement": [1, 4], "cpu": 1, "back": 1, "end": 1, "gpu": 1, "transform": [1, 370, 447, 449, 451, 453, 455], "build": [1, 7], "bind": 1, "python": [1, 6, 7], "cmake": 1, "setuptool": 1, "usag": [1, 6], "result": 1, "script": [1, 4], "download": [1, 4], "code": [1, 4], "metal": [2, 7, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 302], "debugg": 2, "xcode": 2, "workflow": 2, "linear": [3, 301, 326], "regress": 3, "llm": 4, "infer": 4, "model": 4, "attent": 4, "layer": [4, 5, 420], "encod": 4, "full": [4, 151], "gener": 4, "put": 4, "all": [4, 14, 32, 450], "togeth": 4, "convert": 4, "weight": 4, "load": [4, 178, 424, 456], "benchmark": 4, "multi": 5, "perceptron": 5, "instal": [6, 7, 450], "api": [6, 7], "refer": 6, "c": [6, 7], "further": 6, "read": 6, "troubleshoot": 7, "from": [7, 452], "sourc": 7, "requir": 7, "option": 7, "binari": 7, "size": [7, 69], "minim": 7, "found": 7, "x86": 7, "shell": 7, "core": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 294], "devic": [8, 297], "dtype": [9, 46], "dtypecategori": 10, "ab": [11, 31], "add": 12, "addmm": 13, "allclos": 15, "ani": [16, 33], "arang": 17, "arcco": 18, "arccosh": 19, "arcsin": 20, "arcsinh": 21, "arctan": 22, "arctan2": 23, "arctanh": 24, "argmax": [25, 34], "argmin": [26, 35], "argpartit": 27, "argsort": 28, "arrai": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 295, 452, 456], "t": 30, "astyp": 36, "conj": [38, 94], "co": [39, 100], "cummax": [40, 102], "cummin": [41, 103], "cumprod": [42, 104], "cumsum": [43, 105], "diag": [44, 111], "diagon": [45, 112], "exp": [47, 128], "flatten": [48, 148], "item": 49, "items": 50, "log": [51, 179], "log10": [52, 180], "log1p": [53, 181], "log2": [54, 182], "logsumexp": [55, 187], "max": [56, 189], "mean": [57, 191], "min": [58, 204], "moveaxi": [59, 206], "nbyte": 60, "ndim": 61, "prod": [62, 218], "reciproc": [63, 234], "reshap": [64, 237], "round": [65, 239], "rsqrt": [66, 240], "shape": 67, "sin": [68, 250], "split": [70, 231, 254], "sqrt": [71, 255], "squar": [72, 256], "squeez": [73, 257], "sum": [74, 263], "swapax": [75, 264], "tolist": 76, "transpos": [77, 274], "var": [78, 279], "view": [79, 280], "array_equ": 80, "as_strid": 81, "atleast_1d": 82, "atleast_2d": 83, "atleast_3d": 84, "bitwise_and": 85, "bitwise_or": 86, "bitwise_xor": 87, "block_masked_mm": 88, "broadcast_to": 89, "ceil": 90, "clip": 91, "compil": [92, 449], "concaten": 93, "conjug": 95, "conv1d": [96, 308], "conv2d": [97, 309], "conv_gener": 98, "convolv": 99, "cosh": 101, "custom_funct": 106, "default_devic": 107, "default_stream": 108, "degre": 109, "dequant": 110, "disable_compil": 113, "distribut": [114, 115, 116, 117, 118, 298, 450], "group": 114, "all_gath": 115, "all_sum": 116, "init": [117, 372, 373, 374, 375, 376, 377, 378, 379, 433], "is_avail": [118, 198], "divid": 119, "divmod": 120, "einsum": 121, "einsum_path": 122, "enable_compil": 123, "equal": 124, "erf": 125, "erfinv": 126, "eval": [127, 333], "expand_dim": 129, "expm1": 130, "ey": 131, "fast": [132, 133, 134, 135, 299], "layer_norm": 132, "rms_norm": 133, "rope": [134, 358], "scaled_dot_product_attent": 135, "fft": [136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 300], "fft2": 137, "fftn": 138, "ifft": 139, "ifft2": 140, "ifftn": 141, "irfft": 142, "irfft2": 143, "irfftn": 144, "rfft": 145, "rfft2": 146, "rfftn": 147, "floor": 149, "floor_divid": 150, "gather_mm": 152, "gather_qmm": 153, "grad": [154, 303], "greater": 155, "greater_equ": 156, "hadamard_transform": 157, "ident": [158, 377], "inner": 159, "isclos": 160, "isinf": 161, "isnan": 162, "isneginf": 163, "isposinf": 164, "issubdtyp": 165, "jvp": 166, "left_shift": 167, "less": 168, "less_equ": 169, "linalg": [170, 171, 172, 173, 174, 175, 176], "choleski": 170, "cholesky_inv": 171, "inv": 172, "norm": 173, "qr": 174, "svd": 175, "tri_inv": 176, "linspac": 177, "logaddexp": 183, "logical_and": 184, "logical_not": 185, "logical_or": 186, "matmul": 188, "maximum": 190, "meshgrid": 192, "clear_cach": 193, "device_info": 194, "get_active_memori": 195, "get_cache_memori": 196, "get_peak_memori": 197, "reset_peak_memori": 199, "set_cache_limit": 200, "set_memory_limit": 201, "start_captur": 202, "stop_captur": 203, "minimum": 205, "multipli": 207, "nan_to_num": 208, "neg": 209, "new_stream": 210, "not_equ": 211, "ones": 212, "ones_lik": 213, "outer": 214, "pad": 215, "partit": 216, "power": 217, "quantiz": [219, 286], "quantized_matmul": 220, "radian": 221, "random": [222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 446], "bernoulli": 222, "categor": 223, "gumbel": 224, "kei": 225, "laplac": 226, "multivariate_norm": 227, "normal": [228, 378], "randint": 229, "seed": 230, "truncated_norm": 232, "uniform": [233, 379], "remaind": 235, "repeat": 236, "right_shift": 238, "save": [241, 424, 456], "save_gguf": 242, "save_safetensor": 243, "savez": 244, "savez_compress": 245, "set_default_devic": 246, "set_default_stream": 247, "sigmoid": [248, 410], "sign": 249, "sinh": 251, "softmax": [252, 363, 412], "sort": 253, "stack": 258, "std": 259, "stop_gradi": 260, "stream": [261, 294, 297, 458], "subtract": 262, "synchron": 265, "take": 266, "take_along_axi": 267, "tan": 268, "tanh": [269, 369, 417], "tensordot": 270, "tile": 271, "topk": 272, "trace": 273, "tri": 275, "tril": 276, "triu": 277, "value_and_grad": [278, 287], "vjp": 281, "vmap": 282, "where": 283, "zero": 284, "zeros_lik": 285, "nn": [286, 287, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417], "optim": [288, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444], "clip_grad_norm": 288, "util": [289, 290, 291, 292, 293, 448], "tree_flatten": 289, "tree_map": 290, "tree_map_with_path": 291, "tree_reduc": 292, "tree_unflatten": 293, "data": 296, "type": 296, "support": 296, "commun": [298, 450], "algebra": 301, "neural": 303, "network": 303, "quick": [303, 455], "start": [303, 450, 455], "The": 303, "modul": [303, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 422], "class": 303, "paramet": [303, 340], "updat": [303, 348, 435, 452], "inspect": 303, "valu": 303, "alibi": 304, "avgpool1d": 305, "avgpool2d": 306, "batchnorm": 307, "conv3d": 310, "dropout": 311, "dropout2d": 312, "dropout3d": 313, "embed": 314, "gelu": [315, 381], "glu": [316, 384], "gru": 317, "groupnorm": 318, "hardshrink": 319, "hardtanh": 320, "hardswish": [321, 387], "instancenorm": 322, "lstm": 323, "layernorm": 324, "leakyrelu": 325, "maxpool1d": 327, "maxpool2d": 328, "mish": [329, 405], "appli": 330, "apply_to_modul": 331, "children": 332, "filter_and_map": 334, "freez": 335, "leaf_modul": 336, "load_weight": 337, "named_modul": 339, "save_weight": 341, "set_dtyp": 342, "state": [343, 434], "train": [344, 346, 449, 450], "trainable_paramet": 345, "unfreez": 347, "update_modul": 349, "multiheadattent": 350, "prelu": [351, 406], "quantizedembed": 352, "quantizedlinear": 353, "rmsnorm": 354, "rnn": 355, "relu": [356, 407], "relu6": [357, 408], "selu": [359, 409], "sequenti": 360, "silu": [361, 411], "sinusoidalpositionalencod": 362, "softmin": [364, 413], "softplu": [365, 414], "softshrink": [366, 415], "softsign": 367, "step": [368, 416], "upsampl": 371, "constant": 372, "glorot_norm": 373, "glorot_uniform": 374, "he_norm": 375, "he_uniform": 376, "elu": 380, "gelu_approx": 382, "gelu_fast_approx": 383, "hard_shrink": 385, "hard_tanh": 386, "leaky_relu": 388, "log_sigmoid": 389, "log_softmax": 390, "loss": [391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 421], "binary_cross_entropi": 391, "cosine_similarity_loss": 392, "cross_entropi": 393, "gaussian_nll_loss": 394, "hinge_loss": 395, "huber_loss": 396, "kl_div_loss": 397, "l1_loss": 398, "log_cosh_loss": 399, "margin_ranking_loss": 400, "mse_loss": 401, "nll_loss": 402, "smooth_l1_loss": 403, "triplet_loss": 404, "function": [418, 421, 449, 451, 455], "initi": 419, "adadelta": 425, "adafactor": 426, "adagrad": 427, "adam": 428, "adamw": 429, "adamax": 430, "lion": 431, "apply_gradi": 432, "rmsprop": 436, "sgd": 437, "cosine_decai": 438, "exponential_decai": 439, "join_schedul": 440, "linear_schedul": 441, "step_decai": 442, "common": 443, "schedul": 445, "tree": 448, "basic": [449, 455], "speedup": 449, "debug": 449, "pure": 449, "graph": [449, 453, 455], "get": 450, "mpi": 450, "set": 450, "up": 450, "remot": 450, "host": 450, "tune": 450, "reduc": 450, "automat": 451, "differenti": 451, "vector": 451, "index": 452, "differ": 452, "numpi": [452, 454], "In": 452, "place": 452, "lazi": 453, "evalu": 453, "why": 453, "comput": 453, "onli": 453, "what": 453, "you": 453, "when": 453, "convers": 454, "other": 454, "framework": 454, "pytorch": 454, "jax": 454, "tensorflow": 454, "guid": 455, "serial": 456, "format": 456, "unifi": 457, "memori": 457, "A": 457, "simpl": 457, "specifi": 458}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Operations": [[0, "operations"], [1, "operations"], [423, "operations"]], "Custom Extensions in MLX": [[1, "custom-extensions-in-mlx"]], "Introducing the Example": [[1, "introducing-the-example"]], "Operations and Primitives": [[1, "operations-and-primitives"]], "Primitives": [[1, "primitives"]], "Using the Primitive": [[1, "using-the-primitive"]], "Implementing the Primitive": [[1, "implementing-the-primitive"]], "Implementing the CPU Back-end": [[1, "implementing-the-cpu-back-end"]], "Implementing the GPU Back-end": [[1, "implementing-the-gpu-back-end"]], "Primitive Transforms": [[1, "primitive-transforms"]], "Building and Binding": [[1, "building-and-binding"]], "Binding to Python": [[1, "binding-to-python"]], "Building with CMake": [[1, "building-with-cmake"]], "Building with setuptools": [[1, "building-with-setuptools"]], "Usage": [[1, "usage"], [6, null]], "Results": [[1, "results"]], "Scripts": [[1, "scripts"], [4, "scripts"]], "Download the code": [[1, null], [4, null]], "Metal Debugger": [[2, "metal-debugger"]], "Xcode Workflow": [[2, "xcode-workflow"]], "Linear Regression": [[3, "linear-regression"]], "LLM inference": [[4, "llm-inference"]], "Implementing the model": [[4, "implementing-the-model"]], "Attention layer": [[4, "attention-layer"]], "Encoder layer": [[4, "encoder-layer"]], "Full model": [[4, "full-model"]], "Generation": [[4, "generation"]], "Putting it all together": [[4, "putting-it-all-together"]], "Converting the weights": [[4, "converting-the-weights"]], "Weight loading and benchmarking": [[4, "weight-loading-and-benchmarking"]], "Multi-Layer Perceptron": [[5, "multi-layer-perceptron"]], "MLX": [[6, "mlx"]], "Install": [[6, null]], "Examples": [[6, null]], "Python API Reference": [[6, null]], "C++ API Reference": [[6, null]], "Further Reading": [[6, null]], "Build and Install": [[7, "build-and-install"]], "Python Installation": [[7, "python-installation"]], "Troubleshooting": [[7, "troubleshooting"], [7, "id2"]], "Build from source": [[7, "build-from-source"]], "Build Requirements": [[7, "build-requirements"]], "Python API": [[7, "python-api"]], "C++ API": [[7, "c-api"]], "Build Options": [[7, "id3"]], "Binary Size Minimization": [[7, "binary-size-minimization"]], "Metal not found": [[7, "metal-not-found"]], "x86 Shell": [[7, "x86-shell"]], "mlx.core.Device": [[8, "mlx-core-device"]], "mlx.core.Dtype": [[9, "mlx-core-dtype"]], "mlx.core.DtypeCategory": [[10, "mlx-core-dtypecategory"]], "mlx.core.abs": [[11, "mlx-core-abs"]], "mlx.core.add": [[12, "mlx-core-add"]], "mlx.core.addmm": [[13, "mlx-core-addmm"]], "mlx.core.all": [[14, "mlx-core-all"]], "mlx.core.allclose": [[15, "mlx-core-allclose"]], "mlx.core.any": [[16, "mlx-core-any"]], "mlx.core.arange": [[17, "mlx-core-arange"]], "mlx.core.arccos": [[18, "mlx-core-arccos"]], "mlx.core.arccosh": [[19, "mlx-core-arccosh"]], "mlx.core.arcsin": [[20, "mlx-core-arcsin"]], "mlx.core.arcsinh": [[21, "mlx-core-arcsinh"]], "mlx.core.arctan": [[22, "mlx-core-arctan"]], "mlx.core.arctan2": [[23, "mlx-core-arctan2"]], "mlx.core.arctanh": [[24, "mlx-core-arctanh"]], "mlx.core.argmax": [[25, "mlx-core-argmax"]], "mlx.core.argmin": [[26, "mlx-core-argmin"]], "mlx.core.argpartition": [[27, "mlx-core-argpartition"]], "mlx.core.argsort": [[28, "mlx-core-argsort"]], "mlx.core.array": [[29, "mlx-core-array"]], "mlx.core.array.T": [[30, "mlx-core-array-t"]], "mlx.core.array.abs": [[31, "mlx-core-array-abs"]], "mlx.core.array.all": [[32, "mlx-core-array-all"]], "mlx.core.array.any": [[33, "mlx-core-array-any"]], "mlx.core.array.argmax": [[34, "mlx-core-array-argmax"]], "mlx.core.array.argmin": [[35, "mlx-core-array-argmin"]], "mlx.core.array.astype": [[36, "mlx-core-array-astype"]], "mlx.core.array.at": [[37, "mlx-core-array-at"]], "mlx.core.array.conj": [[38, "mlx-core-array-conj"]], "mlx.core.array.cos": [[39, "mlx-core-array-cos"]], "mlx.core.array.cummax": [[40, "mlx-core-array-cummax"]], "mlx.core.array.cummin": [[41, "mlx-core-array-cummin"]], "mlx.core.array.cumprod": [[42, "mlx-core-array-cumprod"]], "mlx.core.array.cumsum": [[43, "mlx-core-array-cumsum"]], "mlx.core.array.diag": [[44, "mlx-core-array-diag"]], "mlx.core.array.diagonal": [[45, "mlx-core-array-diagonal"]], "mlx.core.array.dtype": [[46, "mlx-core-array-dtype"]], "mlx.core.array.exp": [[47, "mlx-core-array-exp"]], "mlx.core.array.flatten": [[48, "mlx-core-array-flatten"]], "mlx.core.array.item": [[49, "mlx-core-array-item"]], "mlx.core.array.itemsize": [[50, "mlx-core-array-itemsize"]], "mlx.core.array.log": [[51, "mlx-core-array-log"]], "mlx.core.array.log10": [[52, "mlx-core-array-log10"]], "mlx.core.array.log1p": [[53, "mlx-core-array-log1p"]], "mlx.core.array.log2": [[54, "mlx-core-array-log2"]], "mlx.core.array.logsumexp": [[55, "mlx-core-array-logsumexp"]], "mlx.core.array.max": [[56, "mlx-core-array-max"]], "mlx.core.array.mean": [[57, "mlx-core-array-mean"]], "mlx.core.array.min": [[58, "mlx-core-array-min"]], "mlx.core.array.moveaxis": [[59, "mlx-core-array-moveaxis"]], "mlx.core.array.nbytes": [[60, "mlx-core-array-nbytes"]], "mlx.core.array.ndim": [[61, "mlx-core-array-ndim"]], "mlx.core.array.prod": [[62, "mlx-core-array-prod"]], "mlx.core.array.reciprocal": [[63, "mlx-core-array-reciprocal"]], "mlx.core.array.reshape": [[64, "mlx-core-array-reshape"]], "mlx.core.array.round": [[65, "mlx-core-array-round"]], "mlx.core.array.rsqrt": [[66, "mlx-core-array-rsqrt"]], "mlx.core.array.shape": [[67, "mlx-core-array-shape"]], "mlx.core.array.sin": [[68, "mlx-core-array-sin"]], "mlx.core.array.size": [[69, "mlx-core-array-size"]], "mlx.core.array.split": [[70, "mlx-core-array-split"]], "mlx.core.array.sqrt": [[71, "mlx-core-array-sqrt"]], "mlx.core.array.square": [[72, "mlx-core-array-square"]], "mlx.core.array.squeeze": [[73, "mlx-core-array-squeeze"]], "mlx.core.array.sum": [[74, "mlx-core-array-sum"]], "mlx.core.array.swapaxes": [[75, "mlx-core-array-swapaxes"]], "mlx.core.array.tolist": [[76, "mlx-core-array-tolist"]], "mlx.core.array.transpose": [[77, "mlx-core-array-transpose"]], "mlx.core.array.var": [[78, "mlx-core-array-var"]], "mlx.core.array.view": [[79, "mlx-core-array-view"]], "mlx.core.array_equal": [[80, "mlx-core-array-equal"]], "mlx.core.as_strided": [[81, "mlx-core-as-strided"]], "mlx.core.atleast_1d": [[82, "mlx-core-atleast-1d"]], "mlx.core.atleast_2d": [[83, "mlx-core-atleast-2d"]], "mlx.core.atleast_3d": [[84, "mlx-core-atleast-3d"]], "mlx.core.bitwise_and": [[85, "mlx-core-bitwise-and"]], "mlx.core.bitwise_or": [[86, "mlx-core-bitwise-or"]], "mlx.core.bitwise_xor": [[87, "mlx-core-bitwise-xor"]], "mlx.core.block_masked_mm": [[88, "mlx-core-block-masked-mm"]], "mlx.core.broadcast_to": [[89, "mlx-core-broadcast-to"]], "mlx.core.ceil": [[90, "mlx-core-ceil"]], "mlx.core.clip": [[91, "mlx-core-clip"]], "mlx.core.compile": [[92, "mlx-core-compile"]], "mlx.core.concatenate": [[93, "mlx-core-concatenate"]], "mlx.core.conj": [[94, "mlx-core-conj"]], "mlx.core.conjugate": [[95, "mlx-core-conjugate"]], "mlx.core.conv1d": [[96, "mlx-core-conv1d"]], "mlx.core.conv2d": [[97, "mlx-core-conv2d"]], "mlx.core.conv_general": [[98, "mlx-core-conv-general"]], "mlx.core.convolve": [[99, "mlx-core-convolve"]], "mlx.core.cos": [[100, "mlx-core-cos"]], "mlx.core.cosh": [[101, "mlx-core-cosh"]], "mlx.core.cummax": [[102, "mlx-core-cummax"]], "mlx.core.cummin": [[103, "mlx-core-cummin"]], "mlx.core.cumprod": [[104, "mlx-core-cumprod"]], "mlx.core.cumsum": [[105, "mlx-core-cumsum"]], "mlx.core.custom_function": [[106, "mlx-core-custom-function"]], "mlx.core.default_device": [[107, "mlx-core-default-device"]], "mlx.core.default_stream": [[108, "mlx-core-default-stream"]], "mlx.core.degrees": [[109, "mlx-core-degrees"]], "mlx.core.dequantize": [[110, "mlx-core-dequantize"]], "mlx.core.diag": [[111, "mlx-core-diag"]], "mlx.core.diagonal": [[112, "mlx-core-diagonal"]], "mlx.core.disable_compile": [[113, "mlx-core-disable-compile"]], "mlx.core.distributed.Group": [[114, "mlx-core-distributed-group"]], "mlx.core.distributed.all_gather": [[115, "mlx-core-distributed-all-gather"]], "mlx.core.distributed.all_sum": [[116, "mlx-core-distributed-all-sum"]], "mlx.core.distributed.init": [[117, "mlx-core-distributed-init"]], "mlx.core.distributed.is_available": [[118, "mlx-core-distributed-is-available"]], "mlx.core.divide": [[119, "mlx-core-divide"]], "mlx.core.divmod": [[120, "mlx-core-divmod"]], "mlx.core.einsum": [[121, "mlx-core-einsum"]], "mlx.core.einsum_path": [[122, "mlx-core-einsum-path"]], "mlx.core.enable_compile": [[123, "mlx-core-enable-compile"]], "mlx.core.equal": [[124, "mlx-core-equal"]], "mlx.core.erf": [[125, "mlx-core-erf"]], "mlx.core.erfinv": [[126, "mlx-core-erfinv"]], "mlx.core.eval": [[127, "mlx-core-eval"]], "mlx.core.exp": [[128, "mlx-core-exp"]], "mlx.core.expand_dims": [[129, "mlx-core-expand-dims"]], "mlx.core.expm1": [[130, "mlx-core-expm1"]], "mlx.core.eye": [[131, "mlx-core-eye"]], "mlx.core.fast.layer_norm": [[132, "mlx-core-fast-layer-norm"]], "mlx.core.fast.rms_norm": [[133, "mlx-core-fast-rms-norm"]], "mlx.core.fast.rope": [[134, "mlx-core-fast-rope"]], "mlx.core.fast.scaled_dot_product_attention": [[135, "mlx-core-fast-scaled-dot-product-attention"]], "mlx.core.fft.fft": [[136, "mlx-core-fft-fft"]], "mlx.core.fft.fft2": [[137, "mlx-core-fft-fft2"]], "mlx.core.fft.fftn": [[138, "mlx-core-fft-fftn"]], "mlx.core.fft.ifft": [[139, "mlx-core-fft-ifft"]], "mlx.core.fft.ifft2": [[140, "mlx-core-fft-ifft2"]], "mlx.core.fft.ifftn": [[141, "mlx-core-fft-ifftn"]], "mlx.core.fft.irfft": [[142, "mlx-core-fft-irfft"]], "mlx.core.fft.irfft2": [[143, "mlx-core-fft-irfft2"]], "mlx.core.fft.irfftn": [[144, "mlx-core-fft-irfftn"]], "mlx.core.fft.rfft": [[145, "mlx-core-fft-rfft"]], "mlx.core.fft.rfft2": [[146, "mlx-core-fft-rfft2"]], "mlx.core.fft.rfftn": [[147, "mlx-core-fft-rfftn"]], "mlx.core.flatten": [[148, "mlx-core-flatten"]], "mlx.core.floor": [[149, "mlx-core-floor"]], "mlx.core.floor_divide": [[150, "mlx-core-floor-divide"]], "mlx.core.full": [[151, "mlx-core-full"]], "mlx.core.gather_mm": [[152, "mlx-core-gather-mm"]], "mlx.core.gather_qmm": [[153, "mlx-core-gather-qmm"]], "mlx.core.grad": [[154, "mlx-core-grad"]], "mlx.core.greater": [[155, "mlx-core-greater"]], "mlx.core.greater_equal": [[156, "mlx-core-greater-equal"]], "mlx.core.hadamard_transform": [[157, "mlx-core-hadamard-transform"]], "mlx.core.identity": [[158, "mlx-core-identity"]], "mlx.core.inner": [[159, "mlx-core-inner"]], "mlx.core.isclose": [[160, "mlx-core-isclose"]], "mlx.core.isinf": [[161, "mlx-core-isinf"]], "mlx.core.isnan": [[162, "mlx-core-isnan"]], "mlx.core.isneginf": [[163, "mlx-core-isneginf"]], "mlx.core.isposinf": [[164, "mlx-core-isposinf"]], "mlx.core.issubdtype": [[165, "mlx-core-issubdtype"]], "mlx.core.jvp": [[166, "mlx-core-jvp"]], "mlx.core.left_shift": [[167, "mlx-core-left-shift"]], "mlx.core.less": [[168, "mlx-core-less"]], "mlx.core.less_equal": [[169, "mlx-core-less-equal"]], "mlx.core.linalg.cholesky": [[170, "mlx-core-linalg-cholesky"]], "mlx.core.linalg.cholesky_inv": [[171, "mlx-core-linalg-cholesky-inv"]], "mlx.core.linalg.inv": [[172, "mlx-core-linalg-inv"]], "mlx.core.linalg.norm": [[173, "mlx-core-linalg-norm"]], "mlx.core.linalg.qr": [[174, "mlx-core-linalg-qr"]], "mlx.core.linalg.svd": [[175, "mlx-core-linalg-svd"]], "mlx.core.linalg.tri_inv": [[176, "mlx-core-linalg-tri-inv"]], "mlx.core.linspace": [[177, "mlx-core-linspace"]], "mlx.core.load": [[178, "mlx-core-load"]], "mlx.core.log": [[179, "mlx-core-log"]], "mlx.core.log10": [[180, "mlx-core-log10"]], "mlx.core.log1p": [[181, "mlx-core-log1p"]], "mlx.core.log2": [[182, "mlx-core-log2"]], "mlx.core.logaddexp": [[183, "mlx-core-logaddexp"]], "mlx.core.logical_and": [[184, "mlx-core-logical-and"]], "mlx.core.logical_not": [[185, "mlx-core-logical-not"]], "mlx.core.logical_or": [[186, "mlx-core-logical-or"]], "mlx.core.logsumexp": [[187, "mlx-core-logsumexp"]], "mlx.core.matmul": [[188, "mlx-core-matmul"]], "mlx.core.max": [[189, "mlx-core-max"]], "mlx.core.maximum": [[190, "mlx-core-maximum"]], "mlx.core.mean": [[191, "mlx-core-mean"]], "mlx.core.meshgrid": [[192, "mlx-core-meshgrid"]], "mlx.core.metal.clear_cache": [[193, "mlx-core-metal-clear-cache"]], "mlx.core.metal.device_info": [[194, "mlx-core-metal-device-info"]], "mlx.core.metal.get_active_memory": [[195, "mlx-core-metal-get-active-memory"]], "mlx.core.metal.get_cache_memory": [[196, "mlx-core-metal-get-cache-memory"]], "mlx.core.metal.get_peak_memory": [[197, "mlx-core-metal-get-peak-memory"]], "mlx.core.metal.is_available": [[198, "mlx-core-metal-is-available"]], "mlx.core.metal.reset_peak_memory": [[199, "mlx-core-metal-reset-peak-memory"]], "mlx.core.metal.set_cache_limit": [[200, "mlx-core-metal-set-cache-limit"]], "mlx.core.metal.set_memory_limit": [[201, "mlx-core-metal-set-memory-limit"]], "mlx.core.metal.start_capture": [[202, "mlx-core-metal-start-capture"]], "mlx.core.metal.stop_capture": [[203, "mlx-core-metal-stop-capture"]], "mlx.core.min": [[204, "mlx-core-min"]], "mlx.core.minimum": [[205, "mlx-core-minimum"]], "mlx.core.moveaxis": [[206, "mlx-core-moveaxis"]], "mlx.core.multiply": [[207, "mlx-core-multiply"]], "mlx.core.nan_to_num": [[208, "mlx-core-nan-to-num"]], "mlx.core.negative": [[209, "mlx-core-negative"]], "mlx.core.new_stream": [[210, "mlx-core-new-stream"]], "mlx.core.not_equal": [[211, "mlx-core-not-equal"]], "mlx.core.ones": [[212, "mlx-core-ones"]], "mlx.core.ones_like": [[213, "mlx-core-ones-like"]], "mlx.core.outer": [[214, "mlx-core-outer"]], "mlx.core.pad": [[215, "mlx-core-pad"]], "mlx.core.partition": [[216, "mlx-core-partition"]], "mlx.core.power": [[217, "mlx-core-power"]], "mlx.core.prod": [[218, "mlx-core-prod"]], "mlx.core.quantize": [[219, "mlx-core-quantize"]], "mlx.core.quantized_matmul": [[220, "mlx-core-quantized-matmul"]], "mlx.core.radians": [[221, "mlx-core-radians"]], "mlx.core.random.bernoulli": [[222, "mlx-core-random-bernoulli"]], "mlx.core.random.categorical": [[223, "mlx-core-random-categorical"]], "mlx.core.random.gumbel": [[224, "mlx-core-random-gumbel"]], "mlx.core.random.key": [[225, "mlx-core-random-key"]], "mlx.core.random.laplace": [[226, "mlx-core-random-laplace"]], "mlx.core.random.multivariate_normal": [[227, "mlx-core-random-multivariate-normal"]], "mlx.core.random.normal": [[228, "mlx-core-random-normal"]], "mlx.core.random.randint": [[229, "mlx-core-random-randint"]], "mlx.core.random.seed": [[230, "mlx-core-random-seed"]], "mlx.core.random.split": [[231, "mlx-core-random-split"]], "mlx.core.random.truncated_normal": [[232, "mlx-core-random-truncated-normal"]], "mlx.core.random.uniform": [[233, "mlx-core-random-uniform"]], "mlx.core.reciprocal": [[234, "mlx-core-reciprocal"]], "mlx.core.remainder": [[235, "mlx-core-remainder"]], "mlx.core.repeat": [[236, "mlx-core-repeat"]], "mlx.core.reshape": [[237, "mlx-core-reshape"]], "mlx.core.right_shift": [[238, "mlx-core-right-shift"]], "mlx.core.round": [[239, "mlx-core-round"]], "mlx.core.rsqrt": [[240, "mlx-core-rsqrt"]], "mlx.core.save": [[241, "mlx-core-save"]], "mlx.core.save_gguf": [[242, "mlx-core-save-gguf"]], "mlx.core.save_safetensors": [[243, "mlx-core-save-safetensors"]], "mlx.core.savez": [[244, "mlx-core-savez"]], "mlx.core.savez_compressed": [[245, "mlx-core-savez-compressed"]], "mlx.core.set_default_device": [[246, "mlx-core-set-default-device"]], "mlx.core.set_default_stream": [[247, "mlx-core-set-default-stream"]], "mlx.core.sigmoid": [[248, "mlx-core-sigmoid"]], "mlx.core.sign": [[249, "mlx-core-sign"]], "mlx.core.sin": [[250, "mlx-core-sin"]], "mlx.core.sinh": [[251, "mlx-core-sinh"]], "mlx.core.softmax": [[252, "mlx-core-softmax"]], "mlx.core.sort": [[253, "mlx-core-sort"]], "mlx.core.split": [[254, "mlx-core-split"]], "mlx.core.sqrt": [[255, "mlx-core-sqrt"]], "mlx.core.square": [[256, "mlx-core-square"]], "mlx.core.squeeze": [[257, "mlx-core-squeeze"]], "mlx.core.stack": [[258, "mlx-core-stack"]], "mlx.core.std": [[259, "mlx-core-std"]], "mlx.core.stop_gradient": [[260, "mlx-core-stop-gradient"]], "mlx.core.stream": [[261, "mlx-core-stream"]], "mlx.core.subtract": [[262, "mlx-core-subtract"]], "mlx.core.sum": [[263, "mlx-core-sum"]], "mlx.core.swapaxes": [[264, "mlx-core-swapaxes"]], "mlx.core.synchronize": [[265, "mlx-core-synchronize"]], "mlx.core.take": [[266, "mlx-core-take"]], "mlx.core.take_along_axis": [[267, "mlx-core-take-along-axis"]], "mlx.core.tan": [[268, "mlx-core-tan"]], "mlx.core.tanh": [[269, "mlx-core-tanh"]], "mlx.core.tensordot": [[270, "mlx-core-tensordot"]], "mlx.core.tile": [[271, "mlx-core-tile"]], "mlx.core.topk": [[272, "mlx-core-topk"]], "mlx.core.trace": [[273, "mlx-core-trace"]], "mlx.core.transpose": [[274, "mlx-core-transpose"]], "mlx.core.tri": [[275, "mlx-core-tri"]], "mlx.core.tril": [[276, "mlx-core-tril"]], "mlx.core.triu": [[277, "mlx-core-triu"]], "mlx.core.value_and_grad": [[278, "mlx-core-value-and-grad"]], "mlx.core.var": [[279, "mlx-core-var"]], "mlx.core.view": [[280, "mlx-core-view"]], "mlx.core.vjp": [[281, "mlx-core-vjp"]], "mlx.core.vmap": [[282, "mlx-core-vmap"]], "mlx.core.where": [[283, "mlx-core-where"]], "mlx.core.zeros": [[284, "mlx-core-zeros"]], "mlx.core.zeros_like": [[285, "mlx-core-zeros-like"]], "mlx.nn.quantize": [[286, "mlx-nn-quantize"]], "mlx.nn.value_and_grad": [[287, "mlx-nn-value-and-grad"]], "mlx.optimizers.clip_grad_norm": [[288, "mlx-optimizers-clip-grad-norm"]], "mlx.utils.tree_flatten": [[289, "mlx-utils-tree-flatten"]], "mlx.utils.tree_map": [[290, "mlx-utils-tree-map"]], "mlx.utils.tree_map_with_path": [[291, "mlx-utils-tree-map-with-path"]], "mlx.utils.tree_reduce": [[292, "mlx-utils-tree-reduce"]], "mlx.utils.tree_unflatten": [[293, "mlx-utils-tree-unflatten"]], "mlx.core.Stream": [[294, "mlx-core-stream"]], "Array": [[295, "array"]], "Data Types": [[296, "data-types"]], "Supported Data Types": [[296, "id2"]], "Devices and Streams": [[297, "devices-and-streams"]], "Distributed Communication": [[298, "distributed-communication"], [450, "distributed-communication"]], "Fast": [[299, "fast"]], "FFT": [[300, "fft"]], "Linear Algebra": [[301, "linear-algebra"]], "Metal": [[302, "metal"]], "Neural Networks": [[303, "neural-networks"]], "Quick Start with Neural Networks": [[303, "quick-start-with-neural-networks"]], "The Module Class": [[303, "the-module-class"]], "Parameters": [[303, "parameters"]], "Updating the Parameters": [[303, "updating-the-parameters"]], "Inspecting Modules": [[303, "inspecting-modules"]], "Value and Grad": [[303, "value-and-grad"]], "mlx.nn.ALiBi": [[304, "mlx-nn-alibi"]], "mlx.nn.AvgPool1d": [[305, "mlx-nn-avgpool1d"]], "mlx.nn.AvgPool2d": [[306, "mlx-nn-avgpool2d"]], "mlx.nn.BatchNorm": [[307, "mlx-nn-batchnorm"]], "mlx.nn.Conv1d": [[308, "mlx-nn-conv1d"]], "mlx.nn.Conv2d": [[309, "mlx-nn-conv2d"]], "mlx.nn.Conv3d": [[310, "mlx-nn-conv3d"]], "mlx.nn.Dropout": [[311, "mlx-nn-dropout"]], "mlx.nn.Dropout2d": [[312, "mlx-nn-dropout2d"]], "mlx.nn.Dropout3d": [[313, "mlx-nn-dropout3d"]], "mlx.nn.Embedding": [[314, "mlx-nn-embedding"]], "mlx.nn.GELU": [[315, "mlx-nn-gelu"]], "mlx.nn.GLU": [[316, "mlx-nn-glu"]], "mlx.nn.GRU": [[317, "mlx-nn-gru"]], "mlx.nn.GroupNorm": [[318, "mlx-nn-groupnorm"]], "mlx.nn.HardShrink": [[319, "mlx-nn-hardshrink"]], "mlx.nn.HardTanh": [[320, "mlx-nn-hardtanh"]], "mlx.nn.Hardswish": [[321, "mlx-nn-hardswish"]], "mlx.nn.InstanceNorm": [[322, "mlx-nn-instancenorm"]], "mlx.nn.LSTM": [[323, "mlx-nn-lstm"]], "mlx.nn.LayerNorm": [[324, "mlx-nn-layernorm"]], "mlx.nn.LeakyReLU": [[325, "mlx-nn-leakyrelu"]], "mlx.nn.Linear": [[326, "mlx-nn-linear"]], "mlx.nn.MaxPool1d": [[327, "mlx-nn-maxpool1d"]], "mlx.nn.MaxPool2d": [[328, "mlx-nn-maxpool2d"]], "mlx.nn.Mish": [[329, "mlx-nn-mish"]], "mlx.nn.Module.apply": [[330, "mlx-nn-module-apply"]], "mlx.nn.Module.apply_to_modules": [[331, "mlx-nn-module-apply-to-modules"]], "mlx.nn.Module.children": [[332, "mlx-nn-module-children"]], "mlx.nn.Module.eval": [[333, "mlx-nn-module-eval"]], "mlx.nn.Module.filter_and_map": [[334, "mlx-nn-module-filter-and-map"]], "mlx.nn.Module.freeze": [[335, "mlx-nn-module-freeze"]], "mlx.nn.Module.leaf_modules": [[336, "mlx-nn-module-leaf-modules"]], "mlx.nn.Module.load_weights": [[337, "mlx-nn-module-load-weights"]], "mlx.nn.Module.modules": [[338, "mlx-nn-module-modules"]], "mlx.nn.Module.named_modules": [[339, "mlx-nn-module-named-modules"]], "mlx.nn.Module.parameters": [[340, "mlx-nn-module-parameters"]], "mlx.nn.Module.save_weights": [[341, "mlx-nn-module-save-weights"]], "mlx.nn.Module.set_dtype": [[342, "mlx-nn-module-set-dtype"]], "mlx.nn.Module.state": [[343, "mlx-nn-module-state"]], "mlx.nn.Module.train": [[344, "mlx-nn-module-train"]], "mlx.nn.Module.trainable_parameters": [[345, "mlx-nn-module-trainable-parameters"]], "mlx.nn.Module.training": [[346, "mlx-nn-module-training"]], "mlx.nn.Module.unfreeze": [[347, "mlx-nn-module-unfreeze"]], "mlx.nn.Module.update": [[348, "mlx-nn-module-update"]], "mlx.nn.Module.update_modules": [[349, "mlx-nn-module-update-modules"]], "mlx.nn.MultiHeadAttention": [[350, "mlx-nn-multiheadattention"]], "mlx.nn.PReLU": [[351, "mlx-nn-prelu"]], "mlx.nn.QuantizedEmbedding": [[352, "mlx-nn-quantizedembedding"]], "mlx.nn.QuantizedLinear": [[353, "mlx-nn-quantizedlinear"]], "mlx.nn.RMSNorm": [[354, "mlx-nn-rmsnorm"]], "mlx.nn.RNN": [[355, "mlx-nn-rnn"]], "mlx.nn.ReLU": [[356, "mlx-nn-relu"]], "mlx.nn.ReLU6": [[357, "mlx-nn-relu6"]], "mlx.nn.RoPE": [[358, "mlx-nn-rope"]], "mlx.nn.SELU": [[359, "mlx-nn-selu"]], "mlx.nn.Sequential": [[360, "mlx-nn-sequential"]], "mlx.nn.SiLU": [[361, "mlx-nn-silu"]], "mlx.nn.SinusoidalPositionalEncoding": [[362, "mlx-nn-sinusoidalpositionalencoding"]], "mlx.nn.Softmax": [[363, "mlx-nn-softmax"]], "mlx.nn.Softmin": [[364, "mlx-nn-softmin"]], "mlx.nn.Softplus": [[365, "mlx-nn-softplus"]], "mlx.nn.Softshrink": [[366, "mlx-nn-softshrink"]], "mlx.nn.Softsign": [[367, "mlx-nn-softsign"]], "mlx.nn.Step": [[368, "mlx-nn-step"]], "mlx.nn.Tanh": [[369, "mlx-nn-tanh"]], "mlx.nn.Transformer": [[370, "mlx-nn-transformer"]], "mlx.nn.Upsample": [[371, "mlx-nn-upsample"]], "mlx.nn.init.constant": [[372, "mlx-nn-init-constant"]], "mlx.nn.init.glorot_normal": [[373, "mlx-nn-init-glorot-normal"]], "mlx.nn.init.glorot_uniform": [[374, "mlx-nn-init-glorot-uniform"]], "mlx.nn.init.he_normal": [[375, "mlx-nn-init-he-normal"]], "mlx.nn.init.he_uniform": [[376, "mlx-nn-init-he-uniform"]], "mlx.nn.init.identity": [[377, "mlx-nn-init-identity"]], "mlx.nn.init.normal": [[378, "mlx-nn-init-normal"]], "mlx.nn.init.uniform": [[379, "mlx-nn-init-uniform"]], "mlx.nn.elu": [[380, "mlx-nn-elu"]], "mlx.nn.gelu": [[381, "mlx-nn-gelu"]], "mlx.nn.gelu_approx": [[382, "mlx-nn-gelu-approx"]], "mlx.nn.gelu_fast_approx": [[383, "mlx-nn-gelu-fast-approx"]], "mlx.nn.glu": [[384, "mlx-nn-glu"]], "mlx.nn.hard_shrink": [[385, "mlx-nn-hard-shrink"]], "mlx.nn.hard_tanh": [[386, "mlx-nn-hard-tanh"]], "mlx.nn.hardswish": [[387, "mlx-nn-hardswish"]], "mlx.nn.leaky_relu": [[388, "mlx-nn-leaky-relu"]], "mlx.nn.log_sigmoid": [[389, "mlx-nn-log-sigmoid"]], "mlx.nn.log_softmax": [[390, "mlx-nn-log-softmax"]], "mlx.nn.losses.binary_cross_entropy": [[391, "mlx-nn-losses-binary-cross-entropy"]], "mlx.nn.losses.cosine_similarity_loss": [[392, "mlx-nn-losses-cosine-similarity-loss"]], "mlx.nn.losses.cross_entropy": [[393, "mlx-nn-losses-cross-entropy"]], "mlx.nn.losses.gaussian_nll_loss": [[394, "mlx-nn-losses-gaussian-nll-loss"]], "mlx.nn.losses.hinge_loss": [[395, "mlx-nn-losses-hinge-loss"]], "mlx.nn.losses.huber_loss": [[396, "mlx-nn-losses-huber-loss"]], "mlx.nn.losses.kl_div_loss": [[397, "mlx-nn-losses-kl-div-loss"]], "mlx.nn.losses.l1_loss": [[398, "mlx-nn-losses-l1-loss"]], "mlx.nn.losses.log_cosh_loss": [[399, "mlx-nn-losses-log-cosh-loss"]], "mlx.nn.losses.margin_ranking_loss": [[400, "mlx-nn-losses-margin-ranking-loss"]], "mlx.nn.losses.mse_loss": [[401, "mlx-nn-losses-mse-loss"]], "mlx.nn.losses.nll_loss": [[402, "mlx-nn-losses-nll-loss"]], "mlx.nn.losses.smooth_l1_loss": [[403, "mlx-nn-losses-smooth-l1-loss"]], "mlx.nn.losses.triplet_loss": [[404, "mlx-nn-losses-triplet-loss"]], "mlx.nn.mish": [[405, "mlx-nn-mish"]], "mlx.nn.prelu": [[406, "mlx-nn-prelu"]], "mlx.nn.relu": [[407, "mlx-nn-relu"]], "mlx.nn.relu6": [[408, "mlx-nn-relu6"]], "mlx.nn.selu": [[409, "mlx-nn-selu"]], "mlx.nn.sigmoid": [[410, "mlx-nn-sigmoid"]], "mlx.nn.silu": [[411, "mlx-nn-silu"]], "mlx.nn.softmax": [[412, "mlx-nn-softmax"]], "mlx.nn.softmin": [[413, "mlx-nn-softmin"]], "mlx.nn.softplus": [[414, "mlx-nn-softplus"]], "mlx.nn.softshrink": [[415, "mlx-nn-softshrink"]], "mlx.nn.step": [[416, "mlx-nn-step"]], "mlx.nn.tanh": [[417, "mlx-nn-tanh"]], "Functions": [[418, "functions"]], "Initializers": [[419, "initializers"]], "Layers": [[420, "layers"]], "Loss Functions": [[421, "loss-functions"]], "Module": [[422, "module"]], "Optimizers": [[424, "optimizers"]], "Saving and Loading": [[424, "saving-and-loading"]], "mlx.optimizers.AdaDelta": [[425, "mlx-optimizers-adadelta"]], "mlx.optimizers.Adafactor": [[426, "mlx-optimizers-adafactor"]], "mlx.optimizers.Adagrad": [[427, "mlx-optimizers-adagrad"]], "mlx.optimizers.Adam": [[428, "mlx-optimizers-adam"]], "mlx.optimizers.AdamW": [[429, "mlx-optimizers-adamw"]], "mlx.optimizers.Adamax": [[430, "mlx-optimizers-adamax"]], "mlx.optimizers.Lion": [[431, "mlx-optimizers-lion"]], "mlx.optimizers.Optimizer.apply_gradients": [[432, "mlx-optimizers-optimizer-apply-gradients"]], "mlx.optimizers.Optimizer.init": [[433, "mlx-optimizers-optimizer-init"]], "mlx.optimizers.Optimizer.state": [[434, "mlx-optimizers-optimizer-state"]], "mlx.optimizers.Optimizer.update": [[435, "mlx-optimizers-optimizer-update"]], "mlx.optimizers.RMSprop": [[436, "mlx-optimizers-rmsprop"]], "mlx.optimizers.SGD": [[437, "mlx-optimizers-sgd"]], "mlx.optimizers.cosine_decay": [[438, "mlx-optimizers-cosine-decay"]], "mlx.optimizers.exponential_decay": [[439, "mlx-optimizers-exponential-decay"]], "mlx.optimizers.join_schedules": [[440, "mlx-optimizers-join-schedules"]], "mlx.optimizers.linear_schedule": [[441, "mlx-optimizers-linear-schedule"]], "mlx.optimizers.step_decay": [[442, "mlx-optimizers-step-decay"]], "Common Optimizers": [[443, "common-optimizers"]], "Optimizer": [[444, "optimizer"]], "Schedulers": [[445, "schedulers"]], "Random": [[446, "random"]], "Transforms": [[447, "transforms"]], "Tree Utils": [[448, "tree-utils"]], "Compilation": [[449, "compilation"]], "Basics of Compile": [[449, "basics-of-compile"]], "Example Speedup": [[449, "example-speedup"]], "Debugging": [[449, "debugging"]], "Pure Functions": [[449, "pure-functions"]], "Compiling Training Graphs": [[449, "compiling-training-graphs"]], "Transformations with Compile": [[449, "transformations-with-compile"]], "Getting Started": [[450, "getting-started"]], "Installing MPI": [[450, "installing-mpi"]], "Setting up Remote Hosts": [[450, "setting-up-remote-hosts"]], "Training Example": [[450, "training-example"]], "Tuning All Reduce": [[450, "tuning-all-reduce"]], "Function Transforms": [[451, "function-transforms"]], "Automatic Differentiation": [[451, "automatic-differentiation"]], "Automatic Vectorization": [[451, "automatic-vectorization"]], "Indexing Arrays": [[452, "indexing-arrays"]], "Differences from NumPy": [[452, "differences-from-numpy"]], "In Place Updates": [[452, "in-place-updates"]], "Lazy Evaluation": [[453, "lazy-evaluation"]], "Why Lazy Evaluation": [[453, "why-lazy-evaluation"]], "Transforming Compute Graphs": [[453, "transforming-compute-graphs"]], "Only Compute What You Use": [[453, "only-compute-what-you-use"]], "When to Evaluate": [[453, "when-to-evaluate"]], "Conversion to NumPy and Other Frameworks": [[454, "conversion-to-numpy-and-other-frameworks"]], "PyTorch": [[454, "pytorch"]], "JAX": [[454, "jax"]], "TensorFlow": [[454, "tensorflow"]], "Quick Start Guide": [[455, "quick-start-guide"]], "Basics": [[455, "basics"]], "Function and Graph Transformations": [[455, "function-and-graph-transformations"]], "Saving and Loading Arrays": [[456, "saving-and-loading-arrays"]], "Serialization Formats": [[456, "id1"]], "Unified Memory": [[457, "unified-memory"]], "A Simple Example": [[457, "a-simple-example"]], "Using Streams": [[458, "using-streams"]], "Specifying the Stream": [[458, "specifying-the-stream"]]}, "indexentries": {"abs (c++ function)": [[0, "_CPPv43absRK5array14StreamOrDevice"]], "add (c++ function)": [[0, "_CPPv43addRK5arrayRK5array14StreamOrDevice"]], "addmm (c++ function)": [[0, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice"]], "all (c++ function)": [[0, "_CPPv43allRK5array14StreamOrDevice"], [0, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43allRK5arrayb14StreamOrDevice"], [0, "_CPPv43allRK5arrayib14StreamOrDevice"]], "allclose (c++ function)": [[0, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice"]], "any (c++ function)": [[0, "_CPPv43anyRK5array14StreamOrDevice"], [0, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43anyRK5arrayb14StreamOrDevice"], [0, "_CPPv43anyRK5arrayib14StreamOrDevice"]], "arange (c++ function)": [[0, "_CPPv46aranged14StreamOrDevice"], [0, "_CPPv46aranged5Dtype14StreamOrDevice"], [0, "_CPPv46arangedd14StreamOrDevice"], [0, "_CPPv46arangedd5Dtype14StreamOrDevice"], [0, "_CPPv46arangeddd14StreamOrDevice"], [0, "_CPPv46arangeddd5Dtype14StreamOrDevice"], [0, "_CPPv46arangei14StreamOrDevice"], [0, "_CPPv46arangeii14StreamOrDevice"], [0, "_CPPv46arangeiii14StreamOrDevice"]], "arccos (c++ function)": [[0, "_CPPv46arccosRK5array14StreamOrDevice"]], "arccosh (c++ function)": [[0, "_CPPv47arccoshRK5array14StreamOrDevice"]], "arcsin (c++ function)": [[0, "_CPPv46arcsinRK5array14StreamOrDevice"]], "arcsinh (c++ function)": [[0, "_CPPv47arcsinhRK5array14StreamOrDevice"]], "arctan (c++ function)": [[0, "_CPPv46arctanRK5array14StreamOrDevice"]], "arctan2 (c++ function)": [[0, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice"]], "arctanh (c++ function)": [[0, "_CPPv47arctanhRK5array14StreamOrDevice"]], "argmax (c++ function)": [[0, "_CPPv46argmaxRK5array14StreamOrDevice"], [0, "_CPPv46argmaxRK5arrayb14StreamOrDevice"], [0, "_CPPv46argmaxRK5arrayib14StreamOrDevice"]], "argmin (c++ function)": [[0, "_CPPv46argminRK5array14StreamOrDevice"], [0, "_CPPv46argminRK5arrayb14StreamOrDevice"], [0, "_CPPv46argminRK5arrayib14StreamOrDevice"]], "argpartition (c++ function)": [[0, "_CPPv412argpartitionRK5arrayi14StreamOrDevice"], [0, "_CPPv412argpartitionRK5arrayii14StreamOrDevice"]], "argsort (c++ function)": [[0, "_CPPv47argsortRK5array14StreamOrDevice"], [0, "_CPPv47argsortRK5arrayi14StreamOrDevice"]], "array_equal (c++ function)": [[0, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice"], [0, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice"]], "as_strided (c++ function)": [[0, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice"]], "astype (c++ function)": [[0, "_CPPv46astype5array5Dtype14StreamOrDevice"]], "atleast_1d (c++ function)": [[0, "_CPPv410atleast_1dRK5array14StreamOrDevice"], [0, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice"]], "atleast_2d (c++ function)": [[0, "_CPPv410atleast_2dRK5array14StreamOrDevice"], [0, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice"]], "atleast_3d (c++ function)": [[0, "_CPPv410atleast_3dRK5array14StreamOrDevice"], [0, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice"]], "bitwise_and (c++ function)": [[0, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice"]], "bitwise_or (c++ function)": [[0, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice"]], "bitwise_xor (c++ function)": [[0, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice"]], "block_masked_mm (c++ function)": [[0, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice"]], "broadcast_arrays (c++ function)": [[0, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice"]], "broadcast_to (c++ function)": [[0, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "ceil (c++ function)": [[0, "_CPPv44ceilRK5array14StreamOrDevice"]], "clip (c++ function)": [[0, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice"]], "concatenate (c++ function)": [[0, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice"], [0, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice"]], "conjugate (c++ function)": [[0, "_CPPv49conjugateRK5array14StreamOrDevice"]], "conv1d (c++ function)": [[0, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice"]], "conv2d (c++ function)": [[0, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice"]], "conv3d (c++ function)": [[0, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice"]], "conv_general (c++ function)": [[0, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice"], [0, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice"]], "copy (c++ function)": [[0, "_CPPv44copy5array14StreamOrDevice"]], "cos (c++ function)": [[0, "_CPPv43cosRK5array14StreamOrDevice"]], "cosh (c++ function)": [[0, "_CPPv44coshRK5array14StreamOrDevice"]], "cummax (c++ function)": [[0, "_CPPv46cummaxRK5arrayibb14StreamOrDevice"]], "cummin (c++ function)": [[0, "_CPPv46cumminRK5arrayibb14StreamOrDevice"]], "cumprod (c++ function)": [[0, "_CPPv47cumprodRK5arrayibb14StreamOrDevice"]], "cumsum (c++ function)": [[0, "_CPPv46cumsumRK5arrayibb14StreamOrDevice"]], "degrees (c++ function)": [[0, "_CPPv47degreesRK5array14StreamOrDevice"]], "depends (c++ function)": [[0, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE"]], "dequantize (c++ function)": [[0, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice"]], "diag (c++ function)": [[0, "_CPPv44diagRK5arrayi14StreamOrDevice"]], "diagonal (c++ function)": [[0, "_CPPv48diagonalRK5arrayiii14StreamOrDevice"]], "divide (c++ function)": [[0, "_CPPv46divideRK5arrayRK5array14StreamOrDevice"]], "divmod (c++ function)": [[0, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice"]], "equal (c++ function)": [[0, "_CPPv45equalRK5arrayRK5array14StreamOrDevice"]], "erf (c++ function)": [[0, "_CPPv43erfRK5array14StreamOrDevice"]], "erfinv (c++ function)": [[0, "_CPPv46erfinvRK5array14StreamOrDevice"]], "exp (c++ function)": [[0, "_CPPv43expRK5array14StreamOrDevice"]], "expand_dims (c++ function)": [[0, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice"]], "expm1 (c++ function)": [[0, "_CPPv45expm1RK5array14StreamOrDevice"]], "eye (c++ function)": [[0, "_CPPv43eyei14StreamOrDevice"], [0, "_CPPv43eyei5Dtype14StreamOrDevice"], [0, "_CPPv43eyeii14StreamOrDevice"], [0, "_CPPv43eyeiii14StreamOrDevice"], [0, "_CPPv43eyeiii5Dtype14StreamOrDevice"]], "flatten (c++ function)": [[0, "_CPPv47flattenRK5array14StreamOrDevice"], [0, "_CPPv47flattenRK5arrayii14StreamOrDevice"]], "floor (c++ function)": [[0, "_CPPv45floorRK5array14StreamOrDevice"]], "floor_divide (c++ function)": [[0, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice"]], "full (c++ function)": [[0, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice"], [0, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice"], [0, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice"], [0, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice"]], "gather (c++ function)": [[0, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice"]], "gather_mm (c++ function)": [[0, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice"]], "gather_qmm (c++ function)": [[0, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice"]], "greater (c++ function)": [[0, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice"]], "greater_equal (c++ function)": [[0, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice"]], "hadamard_transform (c++ function)": [[0, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice"]], "identity (c++ function)": [[0, "_CPPv48identityi14StreamOrDevice"], [0, "_CPPv48identityi5Dtype14StreamOrDevice"]], "inner (c++ function)": [[0, "_CPPv45innerRK5arrayRK5array14StreamOrDevice"]], "isclose (c++ function)": [[0, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice"]], "isinf (c++ function)": [[0, "_CPPv45isinfRK5array14StreamOrDevice"]], "isnan (c++ function)": [[0, "_CPPv45isnanRK5array14StreamOrDevice"]], "isneginf (c++ function)": [[0, "_CPPv48isneginfRK5array14StreamOrDevice"]], "isposinf (c++ function)": [[0, "_CPPv48isposinfRK5array14StreamOrDevice"]], "left_shift (c++ function)": [[0, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice"]], "less (c++ function)": [[0, "_CPPv44lessRK5arrayRK5array14StreamOrDevice"]], "less_equal (c++ function)": [[0, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice"]], "linspace (c++ function)": [[0, "_CPPv48linspaceddi5Dtype14StreamOrDevice"]], "log (c++ function)": [[0, "_CPPv43logRK5array14StreamOrDevice"]], "log10 (c++ function)": [[0, "_CPPv45log10RK5array14StreamOrDevice"]], "log1p (c++ function)": [[0, "_CPPv45log1pRK5array14StreamOrDevice"]], "log2 (c++ function)": [[0, "_CPPv44log2RK5array14StreamOrDevice"]], "logaddexp (c++ function)": [[0, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice"]], "logical_and (c++ function)": [[0, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice"]], "logical_not (c++ function)": [[0, "_CPPv411logical_notRK5array14StreamOrDevice"]], "logical_or (c++ function)": [[0, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice"]], "logsumexp (c++ function)": [[0, "_CPPv49logsumexpRK5array14StreamOrDevice"], [0, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv49logsumexpRK5arrayb14StreamOrDevice"], [0, "_CPPv49logsumexpRK5arrayib14StreamOrDevice"]], "matmul (c++ function)": [[0, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice"]], "max (c++ function)": [[0, "_CPPv43maxRK5array14StreamOrDevice"], [0, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43maxRK5arrayb14StreamOrDevice"], [0, "_CPPv43maxRK5arrayib14StreamOrDevice"]], "maximum (c++ function)": [[0, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice"]], "mean (c++ function)": [[0, "_CPPv44meanRK5array14StreamOrDevice"], [0, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv44meanRK5arrayb14StreamOrDevice"], [0, "_CPPv44meanRK5arrayib14StreamOrDevice"]], "meshgrid (c++ function)": [[0, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice"]], "min (c++ function)": [[0, "_CPPv43minRK5array14StreamOrDevice"], [0, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43minRK5arrayb14StreamOrDevice"], [0, "_CPPv43minRK5arrayib14StreamOrDevice"]], "minimum (c++ function)": [[0, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice"]], "moveaxis (c++ function)": [[0, "_CPPv48moveaxisRK5arrayii14StreamOrDevice"]], "multiply (c++ function)": [[0, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice"]], "nan_to_num (c++ function)": [[0, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice"]], "negative (c++ function)": [[0, "_CPPv48negativeRK5array14StreamOrDevice"]], "not_equal (c++ function)": [[0, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice"]], "number_of_elements (c++ function)": [[0, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice"]], "ones (c++ function)": [[0, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice"]], "ones_like (c++ function)": [[0, "_CPPv49ones_likeRK5array14StreamOrDevice"]], "operator!= (c++ function)": [[0, "_CPPv4I0Ene5array1TRK5array"], [0, "_CPPv4I0Ene5arrayRK5array1T"], [0, "_CPPv4neRK5arrayRK5array"]], "operator% (c++ function)": [[0, "_CPPv4I0Erm5array1TRK5array"], [0, "_CPPv4I0Erm5arrayRK5array1T"], [0, "_CPPv4rmRK5arrayRK5array"]], "operator& (c++ function)": [[0, "_CPPv4anRK5arrayRK5array"]], "operator&& (c++ function)": [[0, "_CPPv4aaRK5arrayRK5array"]], "operator* (c++ function)": [[0, "_CPPv4I0Eml5array1TRK5array"], [0, "_CPPv4I0Eml5arrayRK5array1T"], [0, "_CPPv4mlRK5arrayRK5array"]], "operator+ (c++ function)": [[0, "_CPPv4I0Epl5array1TRK5array"], [0, "_CPPv4I0Epl5arrayRK5array1T"], [0, "_CPPv4plRK5arrayRK5array"]], "operator- (c++ function)": [[0, "_CPPv4I0Emi5array1TRK5array"], [0, "_CPPv4I0Emi5arrayRK5array1T"], [0, "_CPPv4miRK5array"], [0, "_CPPv4miRK5arrayRK5array"]], "operator/ (c++ function)": [[0, "_CPPv4dvRK5arrayRK5array"], [0, "_CPPv4dvRK5arrayd"], [0, "_CPPv4dvdRK5array"]], "operator< (c++ function)": [[0, "_CPPv4I0Elt5array1TRK5array"], [0, "_CPPv4I0Elt5arrayRK5array1T"], [0, "_CPPv4ltRK5arrayRK5array"]], "operator<< (c++ function)": [[0, "_CPPv4lsRK5arrayRK5array"]], "operator<= (c++ function)": [[0, "_CPPv4I0Ele5array1TRK5array"], [0, "_CPPv4I0Ele5arrayRK5array1T"], [0, "_CPPv4leRK5arrayRK5array"]], "operator== (c++ function)": [[0, "_CPPv4I0Eeq5array1TRK5array"], [0, "_CPPv4I0Eeq5arrayRK5array1T"], [0, "_CPPv4eqRK5arrayRK5array"]], "operator> (c++ function)": [[0, "_CPPv4I0Egt5array1TRK5array"], [0, "_CPPv4I0Egt5arrayRK5array1T"], [0, "_CPPv4gtRK5arrayRK5array"]], "operator>= (c++ function)": [[0, "_CPPv4I0Ege5array1TRK5array"], [0, "_CPPv4I0Ege5arrayRK5array1T"], [0, "_CPPv4geRK5arrayRK5array"]], "operator>> (c++ function)": [[0, "_CPPv4rsRK5arrayRK5array"]], "operator^ (c++ function)": [[0, "_CPPv4eoRK5arrayRK5array"]], "operator| (c++ function)": [[0, "_CPPv4orRK5arrayRK5array"]], "operator|| (c++ function)": [[0, "_CPPv4ooRK5arrayRK5array"]], "outer (c++ function)": [[0, "_CPPv45outerRK5arrayRK5array14StreamOrDevice"]], "pad (c++ function)": [[0, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice"], [0, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice"], [0, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice"], [0, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice"]], "partition (c++ function)": [[0, "_CPPv49partitionRK5arrayi14StreamOrDevice"], [0, "_CPPv49partitionRK5arrayii14StreamOrDevice"]], "power (c++ function)": [[0, "_CPPv45powerRK5arrayRK5array14StreamOrDevice"]], "prod (c++ function)": [[0, "_CPPv44prodRK5array14StreamOrDevice"], [0, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv44prodRK5arrayb14StreamOrDevice"], [0, "_CPPv44prodRK5arrayib14StreamOrDevice"]], "quantize (c++ function)": [[0, "_CPPv48quantizeRK5arrayii14StreamOrDevice"]], "quantized_matmul (c++ function)": [[0, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice"]], "radians (c++ function)": [[0, "_CPPv47radiansRK5array14StreamOrDevice"]], "reciprocal (c++ function)": [[0, "_CPPv410reciprocalRK5array14StreamOrDevice"]], "remainder (c++ function)": [[0, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice"]], "repeat (c++ function)": [[0, "_CPPv46repeatRK5arrayi14StreamOrDevice"], [0, "_CPPv46repeatRK5arrayii14StreamOrDevice"]], "reshape (c++ function)": [[0, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice"]], "right_shift (c++ function)": [[0, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice"]], "round (c++ function)": [[0, "_CPPv45roundRK5array14StreamOrDevice"], [0, "_CPPv45roundRK5arrayi14StreamOrDevice"]], "rsqrt (c++ function)": [[0, "_CPPv45rsqrtRK5array14StreamOrDevice"]], "scatter (c++ function)": [[0, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_add (c++ function)": [[0, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_max (c++ function)": [[0, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_min (c++ function)": [[0, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "scatter_prod (c++ function)": [[0, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice"], [0, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice"]], "sigmoid (c++ function)": [[0, "_CPPv47sigmoidRK5array14StreamOrDevice"]], "sign (c++ function)": [[0, "_CPPv44signRK5array14StreamOrDevice"]], "sin (c++ function)": [[0, "_CPPv43sinRK5array14StreamOrDevice"]], "sinh (c++ function)": [[0, "_CPPv44sinhRK5array14StreamOrDevice"]], "slice (c++ function)": [[0, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice"]], "slice_update (c++ function)": [[0, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice"]], "softmax (c++ function)": [[0, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv47softmaxRK5arrayb14StreamOrDevice"], [0, "_CPPv47softmaxRK5arrayib14StreamOrDevice"]], "sort (c++ function)": [[0, "_CPPv44sortRK5array14StreamOrDevice"], [0, "_CPPv44sortRK5arrayi14StreamOrDevice"]], "split (c++ function)": [[0, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice"], [0, "_CPPv45splitRK5arrayi14StreamOrDevice"], [0, "_CPPv45splitRK5arrayii14StreamOrDevice"]], "sqrt (c++ function)": [[0, "_CPPv44sqrtRK5array14StreamOrDevice"]], "square (c++ function)": [[0, "_CPPv46squareRK5array14StreamOrDevice"]], "squeeze (c++ function)": [[0, "_CPPv47squeezeRK5array14StreamOrDevice"], [0, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv47squeezeRK5arrayi14StreamOrDevice"]], "stack (c++ function)": [[0, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice"], [0, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice"]], "std (c++ function)": [[0, "_CPPv4StRK5array14StreamOrDevice"], [0, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice"], [0, "_CPPv4StRK5arraybi14StreamOrDevice"], [0, "_CPPv4StRK5arrayibi14StreamOrDevice"]], "stop_gradient (c++ function)": [[0, "_CPPv413stop_gradientRK5array14StreamOrDevice"]], "subtract (c++ function)": [[0, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice"]], "sum (c++ function)": [[0, "_CPPv43sumRK5array14StreamOrDevice"], [0, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice"], [0, "_CPPv43sumRK5arrayb14StreamOrDevice"], [0, "_CPPv43sumRK5arrayib14StreamOrDevice"]], "swapaxes (c++ function)": [[0, "_CPPv48swapaxesRK5arrayii14StreamOrDevice"]], "take (c++ function)": [[0, "_CPPv44takeRK5arrayRK5array14StreamOrDevice"], [0, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice"]], "take_along_axis (c++ function)": [[0, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice"]], "tan (c++ function)": [[0, "_CPPv43tanRK5array14StreamOrDevice"]], "tanh (c++ function)": [[0, "_CPPv44tanhRK5array14StreamOrDevice"]], "tensordot (c++ function)": [[0, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice"], [0, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice"]], "tile (c++ function)": [[0, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice"]], "topk (c++ function)": [[0, "_CPPv44topkRK5arrayi14StreamOrDevice"], [0, "_CPPv44topkRK5arrayii14StreamOrDevice"]], "trace (c++ function)": [[0, "_CPPv45traceRK5array14StreamOrDevice"], [0, "_CPPv45traceRK5arrayiii14StreamOrDevice"], [0, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice"]], "transpose (c++ function)": [[0, "_CPPv49transposeRK5array14StreamOrDevice"], [0, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice"], [0, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice"]], "tri (c++ function)": [[0, "_CPPv43trii5Dtype14StreamOrDevice"], [0, "_CPPv43triiii5Dtype14StreamOrDevice"]], "tril (c++ function)": [[0, "_CPPv44tril5arrayi14StreamOrDevice"]], "triu (c++ function)": [[0, "_CPPv44triu5arrayi14StreamOrDevice"]], "var (c++ function)": [[0, "_CPPv43varRK5array14StreamOrDevice"], [0, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice"], [0, "_CPPv43varRK5arraybi14StreamOrDevice"], [0, "_CPPv43varRK5arrayibi14StreamOrDevice"]], "view (c++ function)": [[0, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice"]], "where (c++ function)": [[0, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice"]], "zeros (c++ function)": [[0, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice"], [0, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice"]], "zeros_like (c++ function)": [[0, "_CPPv410zeros_likeRK5array14StreamOrDevice"]], "device (class in mlx.core)": [[8, "mlx.core.Device"]], "__init__() (device method)": [[8, "mlx.core.Device.__init__"]], "dtype (class in mlx.core)": [[9, "mlx.core.Dtype"]], "__init__() (dtype method)": [[9, "mlx.core.Dtype.__init__"]], "dtypecategory (class in mlx.core)": [[10, "mlx.core.DtypeCategory"]], "__init__() (dtypecategory method)": [[10, "mlx.core.DtypeCategory.__init__"]], "abs() (in module mlx.core)": [[11, "mlx.core.abs"]], "add() (in module mlx.core)": [[12, "mlx.core.add"]], "addmm() (in module mlx.core)": [[13, "mlx.core.addmm"]], "all() (in module mlx.core)": [[14, "mlx.core.all"]], "allclose() (in module mlx.core)": [[15, "mlx.core.allclose"]], "any() (in module mlx.core)": [[16, "mlx.core.any"]], "arange() (in module mlx.core)": [[17, "mlx.core.arange"]], "arccos() (in module mlx.core)": [[18, "mlx.core.arccos"]], "arccosh() (in module mlx.core)": [[19, "mlx.core.arccosh"]], "arcsin() (in module mlx.core)": [[20, "mlx.core.arcsin"]], "arcsinh() (in module mlx.core)": [[21, "mlx.core.arcsinh"]], "arctan() (in module mlx.core)": [[22, "mlx.core.arctan"]], "arctan2() (in module mlx.core)": [[23, "mlx.core.arctan2"]], "arctanh() (in module mlx.core)": [[24, "mlx.core.arctanh"]], "argmax() (in module mlx.core)": [[25, "mlx.core.argmax"]], "argmin() (in module mlx.core)": [[26, "mlx.core.argmin"]], "argpartition() (in module mlx.core)": [[27, "mlx.core.argpartition"]], "argsort() (in module mlx.core)": [[28, "mlx.core.argsort"]], "__init__() (array method)": [[29, "mlx.core.array.__init__"]], "array (class in mlx.core)": [[29, "mlx.core.array"]], "t (array property)": [[30, "mlx.core.array.T"]], "abs() (array method)": [[31, "mlx.core.array.abs"]], "all() (array method)": [[32, "mlx.core.array.all"]], "any() (array method)": [[33, "mlx.core.array.any"]], "argmax() (array method)": [[34, "mlx.core.array.argmax"]], "argmin() (array method)": [[35, "mlx.core.array.argmin"]], "astype() (array method)": [[36, "mlx.core.array.astype"]], "at (array property)": [[37, "mlx.core.array.at"]], "conj() (array method)": [[38, "mlx.core.array.conj"]], "cos() (array method)": [[39, "mlx.core.array.cos"]], "cummax() (array method)": [[40, "mlx.core.array.cummax"]], "cummin() (array method)": [[41, "mlx.core.array.cummin"]], "cumprod() (array method)": [[42, "mlx.core.array.cumprod"]], "cumsum() (array method)": [[43, "mlx.core.array.cumsum"]], "diag() (array method)": [[44, "mlx.core.array.diag"]], "diagonal() (array method)": [[45, "mlx.core.array.diagonal"]], "dtype (array property)": [[46, "mlx.core.array.dtype"]], "exp() (array method)": [[47, "mlx.core.array.exp"]], "flatten() (array method)": [[48, "mlx.core.array.flatten"]], "item() (array method)": [[49, "mlx.core.array.item"]], "itemsize (array property)": [[50, "mlx.core.array.itemsize"]], "log() (array method)": [[51, "mlx.core.array.log"]], "log10() (array method)": [[52, "mlx.core.array.log10"]], "log1p() (array method)": [[53, "mlx.core.array.log1p"]], "log2() (array method)": [[54, "mlx.core.array.log2"]], "logsumexp() (array method)": [[55, "mlx.core.array.logsumexp"]], "max() (array method)": [[56, "mlx.core.array.max"]], "mean() (array method)": [[57, "mlx.core.array.mean"]], "min() (array method)": [[58, "mlx.core.array.min"]], "moveaxis() (array method)": [[59, "mlx.core.array.moveaxis"]], "nbytes (array property)": [[60, "mlx.core.array.nbytes"]], "ndim (array property)": [[61, "mlx.core.array.ndim"]], "prod() (array method)": [[62, "mlx.core.array.prod"]], "reciprocal() (array method)": [[63, "mlx.core.array.reciprocal"]], "reshape() (array method)": [[64, "mlx.core.array.reshape"]], "round() (array method)": [[65, "mlx.core.array.round"]], "rsqrt() (array method)": [[66, "mlx.core.array.rsqrt"]], "shape (array property)": [[67, "mlx.core.array.shape"]], "sin() (array method)": [[68, "mlx.core.array.sin"]], "size (array property)": [[69, "mlx.core.array.size"]], "split() (array method)": [[70, "mlx.core.array.split"]], "sqrt() (array method)": [[71, "mlx.core.array.sqrt"]], "square() (array method)": [[72, "mlx.core.array.square"]], "squeeze() (array method)": [[73, "mlx.core.array.squeeze"]], "sum() (array method)": [[74, "mlx.core.array.sum"]], "swapaxes() (array method)": [[75, "mlx.core.array.swapaxes"]], "tolist() (array method)": [[76, "mlx.core.array.tolist"]], "transpose() (array method)": [[77, "mlx.core.array.transpose"]], "var() (array method)": [[78, "mlx.core.array.var"]], "view() (array method)": [[79, "mlx.core.array.view"]], "array_equal() (in module mlx.core)": [[80, "mlx.core.array_equal"]], "as_strided() (in module mlx.core)": [[81, "mlx.core.as_strided"]], "atleast_1d() (in module mlx.core)": [[82, "mlx.core.atleast_1d"]], "atleast_2d() (in module mlx.core)": [[83, "mlx.core.atleast_2d"]], "atleast_3d() (in module mlx.core)": [[84, "mlx.core.atleast_3d"]], "bitwise_and() (in module mlx.core)": [[85, "mlx.core.bitwise_and"]], "bitwise_or() (in module mlx.core)": [[86, "mlx.core.bitwise_or"]], "bitwise_xor() (in module mlx.core)": [[87, "mlx.core.bitwise_xor"]], "block_masked_mm() (in module mlx.core)": [[88, "mlx.core.block_masked_mm"]], "broadcast_to() (in module mlx.core)": [[89, "mlx.core.broadcast_to"]], "ceil() (in module mlx.core)": [[90, "mlx.core.ceil"]], "clip() (in module mlx.core)": [[91, "mlx.core.clip"]], "compile() (in module mlx.core)": [[92, "mlx.core.compile"]], "concatenate() (in module mlx.core)": [[93, "mlx.core.concatenate"]], "conj() (in module mlx.core)": [[94, "mlx.core.conj"]], "conjugate() (in module mlx.core)": [[95, "mlx.core.conjugate"]], "conv1d() (in module mlx.core)": [[96, "mlx.core.conv1d"]], "conv2d() (in module mlx.core)": [[97, "mlx.core.conv2d"]], "conv_general() (in module mlx.core)": [[98, "mlx.core.conv_general"]], "convolve() (in module mlx.core)": [[99, "mlx.core.convolve"]], "cos() (in module mlx.core)": [[100, "mlx.core.cos"]], "cosh() (in module mlx.core)": [[101, "mlx.core.cosh"]], "cummax() (in module mlx.core)": [[102, "mlx.core.cummax"]], "cummin() (in module mlx.core)": [[103, "mlx.core.cummin"]], "cumprod() (in module mlx.core)": [[104, "mlx.core.cumprod"]], "cumsum() (in module mlx.core)": [[105, "mlx.core.cumsum"]], "__init__() (custom_function method)": [[106, "mlx.core.custom_function.__init__"]], "custom_function (class in mlx.core)": [[106, "mlx.core.custom_function"]], "default_device() (in module mlx.core)": [[107, "mlx.core.default_device"]], "default_stream() (in module mlx.core)": [[108, "mlx.core.default_stream"]], "degrees() (in module mlx.core)": [[109, "mlx.core.degrees"]], "dequantize() (in module mlx.core)": [[110, "mlx.core.dequantize"]], "diag() (in module mlx.core)": [[111, "mlx.core.diag"]], "diagonal() (in module mlx.core)": [[112, "mlx.core.diagonal"]], "disable_compile() (in module mlx.core)": [[113, "mlx.core.disable_compile"]], "group (class in mlx.core.distributed)": [[114, "mlx.core.distributed.Group"]], "__init__() (group method)": [[114, "mlx.core.distributed.Group.__init__"]], "all_gather() (in module mlx.core.distributed)": [[115, "mlx.core.distributed.all_gather"]], "all_sum() (in module mlx.core.distributed)": [[116, "mlx.core.distributed.all_sum"]], "init() (in module mlx.core.distributed)": [[117, "mlx.core.distributed.init"]], "is_available() (in module mlx.core.distributed)": [[118, "mlx.core.distributed.is_available"]], "divide() (in module mlx.core)": [[119, "mlx.core.divide"]], "divmod() (in module mlx.core)": [[120, "mlx.core.divmod"]], "einsum() (in module mlx.core)": [[121, "mlx.core.einsum"]], "einsum_path() (in module mlx.core)": [[122, "mlx.core.einsum_path"]], "enable_compile() (in module mlx.core)": [[123, "mlx.core.enable_compile"]], "equal() (in module mlx.core)": [[124, "mlx.core.equal"]], "erf() (in module mlx.core)": [[125, "mlx.core.erf"]], "erfinv() (in module mlx.core)": [[126, "mlx.core.erfinv"]], "eval() (in module mlx.core)": [[127, "mlx.core.eval"]], "exp() (in module mlx.core)": [[128, "mlx.core.exp"]], "expand_dims() (in module mlx.core)": [[129, "mlx.core.expand_dims"]], "expm1() (in module mlx.core)": [[130, "mlx.core.expm1"]], "eye() (in module mlx.core)": [[131, "mlx.core.eye"]], "layer_norm() (in module mlx.core.fast)": [[132, "mlx.core.fast.layer_norm"]], "rms_norm() (in module mlx.core.fast)": [[133, "mlx.core.fast.rms_norm"]], "rope() (in module mlx.core.fast)": [[134, "mlx.core.fast.rope"]], "scaled_dot_product_attention() (in module mlx.core.fast)": [[135, "mlx.core.fast.scaled_dot_product_attention"]], "fft() (in module mlx.core.fft)": [[136, "mlx.core.fft.fft"]], "fft2() (in module mlx.core.fft)": [[137, "mlx.core.fft.fft2"]], "fftn() (in module mlx.core.fft)": [[138, "mlx.core.fft.fftn"]], "ifft() (in module mlx.core.fft)": [[139, "mlx.core.fft.ifft"]], "ifft2() (in module mlx.core.fft)": [[140, "mlx.core.fft.ifft2"]], "ifftn() (in module mlx.core.fft)": [[141, "mlx.core.fft.ifftn"]], "irfft() (in module mlx.core.fft)": [[142, "mlx.core.fft.irfft"]], "irfft2() (in module mlx.core.fft)": [[143, "mlx.core.fft.irfft2"]], "irfftn() (in module mlx.core.fft)": [[144, "mlx.core.fft.irfftn"]], "rfft() (in module mlx.core.fft)": [[145, "mlx.core.fft.rfft"]], "rfft2() (in module mlx.core.fft)": [[146, "mlx.core.fft.rfft2"]], "rfftn() (in module mlx.core.fft)": [[147, "mlx.core.fft.rfftn"]], "flatten() (in module mlx.core)": [[148, "mlx.core.flatten"]], "floor() (in module mlx.core)": [[149, "mlx.core.floor"]], "floor_divide() (in module mlx.core)": [[150, "mlx.core.floor_divide"]], "full() (in module mlx.core)": [[151, "mlx.core.full"]], "gather_mm() (in module mlx.core)": [[152, "mlx.core.gather_mm"]], "gather_qmm() (in module mlx.core)": [[153, "mlx.core.gather_qmm"]], "grad() (in module mlx.core)": [[154, "mlx.core.grad"]], "greater() (in module mlx.core)": [[155, "mlx.core.greater"]], "greater_equal() (in module mlx.core)": [[156, "mlx.core.greater_equal"]], "hadamard_transform() (in module mlx.core)": [[157, "mlx.core.hadamard_transform"]], "identity() (in module mlx.core)": [[158, "mlx.core.identity"]], "inner() (in module mlx.core)": [[159, "mlx.core.inner"]], "isclose() (in module mlx.core)": [[160, "mlx.core.isclose"]], "isinf() (in module mlx.core)": [[161, "mlx.core.isinf"]], "isnan() (in module mlx.core)": [[162, "mlx.core.isnan"]], "isneginf() (in module mlx.core)": [[163, "mlx.core.isneginf"]], "isposinf() (in module mlx.core)": [[164, "mlx.core.isposinf"]], "issubdtype() (in module mlx.core)": [[165, "mlx.core.issubdtype"]], "jvp() (in module mlx.core)": [[166, "mlx.core.jvp"]], "left_shift() (in module mlx.core)": [[167, "mlx.core.left_shift"]], "less() (in module mlx.core)": [[168, "mlx.core.less"]], "less_equal() (in module mlx.core)": [[169, "mlx.core.less_equal"]], "cholesky() (in module mlx.core.linalg)": [[170, "mlx.core.linalg.cholesky"]], "cholesky_inv() (in module mlx.core.linalg)": [[171, "mlx.core.linalg.cholesky_inv"]], "inv() (in module mlx.core.linalg)": [[172, "mlx.core.linalg.inv"]], "norm() (in module mlx.core.linalg)": [[173, "mlx.core.linalg.norm"]], "qr() (in module mlx.core.linalg)": [[174, "mlx.core.linalg.qr"]], "svd() (in module mlx.core.linalg)": [[175, "mlx.core.linalg.svd"]], "tri_inv() (in module mlx.core.linalg)": [[176, "mlx.core.linalg.tri_inv"]], "linspace() (in module mlx.core)": [[177, "mlx.core.linspace"]], "load() (in module mlx.core)": [[178, "mlx.core.load"]], "log() (in module mlx.core)": [[179, "mlx.core.log"]], "log10() (in module mlx.core)": [[180, "mlx.core.log10"]], "log1p() (in module mlx.core)": [[181, "mlx.core.log1p"]], "log2() (in module mlx.core)": [[182, "mlx.core.log2"]], "logaddexp() (in module mlx.core)": [[183, "mlx.core.logaddexp"]], "logical_and() (in module mlx.core)": [[184, "mlx.core.logical_and"]], "logical_not() (in module mlx.core)": [[185, "mlx.core.logical_not"]], "logical_or() (in module mlx.core)": [[186, "mlx.core.logical_or"]], "logsumexp() (in module mlx.core)": [[187, "mlx.core.logsumexp"]], "matmul() (in module mlx.core)": [[188, "mlx.core.matmul"]], "max() (in module mlx.core)": [[189, "mlx.core.max"]], "maximum() (in module mlx.core)": [[190, "mlx.core.maximum"]], "mean() (in module mlx.core)": [[191, "mlx.core.mean"]], "meshgrid() (in module mlx.core)": [[192, "mlx.core.meshgrid"]], "clear_cache() (in module mlx.core.metal)": [[193, "mlx.core.metal.clear_cache"]], "device_info() (in module mlx.core.metal)": [[194, "mlx.core.metal.device_info"]], "get_active_memory() (in module mlx.core.metal)": [[195, "mlx.core.metal.get_active_memory"]], "get_cache_memory() (in module mlx.core.metal)": [[196, "mlx.core.metal.get_cache_memory"]], "get_peak_memory() (in module mlx.core.metal)": [[197, "mlx.core.metal.get_peak_memory"]], "is_available() (in module mlx.core.metal)": [[198, "mlx.core.metal.is_available"]], "reset_peak_memory() (in module mlx.core.metal)": [[199, "mlx.core.metal.reset_peak_memory"]], "set_cache_limit() (in module mlx.core.metal)": [[200, "mlx.core.metal.set_cache_limit"]], "set_memory_limit() (in module mlx.core.metal)": [[201, "mlx.core.metal.set_memory_limit"]], "start_capture() (in module mlx.core.metal)": [[202, "mlx.core.metal.start_capture"]], "stop_capture() (in module mlx.core.metal)": [[203, "mlx.core.metal.stop_capture"]], "min() (in module mlx.core)": [[204, "mlx.core.min"]], "minimum() (in module mlx.core)": [[205, "mlx.core.minimum"]], "moveaxis() (in module mlx.core)": [[206, "mlx.core.moveaxis"]], "multiply() (in module mlx.core)": [[207, "mlx.core.multiply"]], "nan_to_num() (in module mlx.core)": [[208, "mlx.core.nan_to_num"]], "negative() (in module mlx.core)": [[209, "mlx.core.negative"]], "new_stream() (in module mlx.core)": [[210, "mlx.core.new_stream"]], "not_equal() (in module mlx.core)": [[211, "mlx.core.not_equal"]], "ones() (in module mlx.core)": [[212, "mlx.core.ones"]], "ones_like() (in module mlx.core)": [[213, "mlx.core.ones_like"]], "outer() (in module mlx.core)": [[214, "mlx.core.outer"]], "pad() (in module mlx.core)": [[215, "mlx.core.pad"]], "partition() (in module mlx.core)": [[216, "mlx.core.partition"]], "power() (in module mlx.core)": [[217, "mlx.core.power"]], "prod() (in module mlx.core)": [[218, "mlx.core.prod"]], "quantize() (in module mlx.core)": [[219, "mlx.core.quantize"]], "quantized_matmul() (in module mlx.core)": [[220, "mlx.core.quantized_matmul"]], "radians() (in module mlx.core)": [[221, "mlx.core.radians"]], "bernoulli() (in module mlx.core.random)": [[222, "mlx.core.random.bernoulli"]], "categorical() (in module mlx.core.random)": [[223, "mlx.core.random.categorical"]], "gumbel() (in module mlx.core.random)": [[224, "mlx.core.random.gumbel"]], "key() (in module mlx.core.random)": [[225, "mlx.core.random.key"]], "laplace() (in module mlx.core.random)": [[226, "mlx.core.random.laplace"]], "multivariate_normal() (in module mlx.core.random)": [[227, "mlx.core.random.multivariate_normal"]], "normal() (in module mlx.core.random)": [[228, "mlx.core.random.normal"]], "randint() (in module mlx.core.random)": [[229, "mlx.core.random.randint"]], "seed() (in module mlx.core.random)": [[230, "mlx.core.random.seed"]], "split() (in module mlx.core.random)": [[231, "mlx.core.random.split"]], "truncated_normal() (in module mlx.core.random)": [[232, "mlx.core.random.truncated_normal"]], "uniform() (in module mlx.core.random)": [[233, "mlx.core.random.uniform"]], "reciprocal() (in module mlx.core)": [[234, "mlx.core.reciprocal"]], "remainder() (in module mlx.core)": [[235, "mlx.core.remainder"]], "repeat() (in module mlx.core)": [[236, "mlx.core.repeat"]], "reshape() (in module mlx.core)": [[237, "mlx.core.reshape"]], "right_shift() (in module mlx.core)": [[238, "mlx.core.right_shift"]], "round() (in module mlx.core)": [[239, "mlx.core.round"]], "rsqrt() (in module mlx.core)": [[240, "mlx.core.rsqrt"]], "save() (in module mlx.core)": [[241, "mlx.core.save"]], "save_gguf() (in module mlx.core)": [[242, "mlx.core.save_gguf"]], "save_safetensors() (in module mlx.core)": [[243, "mlx.core.save_safetensors"]], "savez() (in module mlx.core)": [[244, "mlx.core.savez"]], "savez_compressed() (in module mlx.core)": [[245, "mlx.core.savez_compressed"]], "set_default_device() (in module mlx.core)": [[246, "mlx.core.set_default_device"]], "set_default_stream() (in module mlx.core)": [[247, "mlx.core.set_default_stream"]], "sigmoid() (in module mlx.core)": [[248, "mlx.core.sigmoid"]], "sign() (in module mlx.core)": [[249, "mlx.core.sign"]], "sin() (in module mlx.core)": [[250, "mlx.core.sin"]], "sinh() (in module mlx.core)": [[251, "mlx.core.sinh"]], "softmax() (in module mlx.core)": [[252, "mlx.core.softmax"]], "sort() (in module mlx.core)": [[253, "mlx.core.sort"]], "split() (in module mlx.core)": [[254, "mlx.core.split"]], "sqrt() (in module mlx.core)": [[255, "mlx.core.sqrt"]], "square() (in module mlx.core)": [[256, "mlx.core.square"]], "squeeze() (in module mlx.core)": [[257, "mlx.core.squeeze"]], "stack() (in module mlx.core)": [[258, "mlx.core.stack"]], "std() (in module mlx.core)": [[259, "mlx.core.std"]], "stop_gradient() (in module mlx.core)": [[260, "mlx.core.stop_gradient"]], "stream() (in module mlx.core)": [[261, "mlx.core.stream"]], "subtract() (in module mlx.core)": [[262, "mlx.core.subtract"]], "sum() (in module mlx.core)": [[263, "mlx.core.sum"]], "swapaxes() (in module mlx.core)": [[264, "mlx.core.swapaxes"]], "synchronize() (in module mlx.core)": [[265, "mlx.core.synchronize"]], "take() (in module mlx.core)": [[266, "mlx.core.take"]], "take_along_axis() (in module mlx.core)": [[267, "mlx.core.take_along_axis"]], "tan() (in module mlx.core)": [[268, "mlx.core.tan"]], "tanh() (in module mlx.core)": [[269, "mlx.core.tanh"]], "tensordot() (in module mlx.core)": [[270, "mlx.core.tensordot"]], "tile() (in module mlx.core)": [[271, "mlx.core.tile"]], "topk() (in module mlx.core)": [[272, "mlx.core.topk"]], "trace() (in module mlx.core)": [[273, "mlx.core.trace"]], "transpose() (in module mlx.core)": [[274, "mlx.core.transpose"]], "tri() (in module mlx.core)": [[275, "mlx.core.tri"]], "tril() (in module mlx.core)": [[276, "mlx.core.tril"]], "triu() (in module mlx.core)": [[277, "mlx.core.triu"]], "value_and_grad() (in module mlx.core)": [[278, "mlx.core.value_and_grad"]], "var() (in module mlx.core)": [[279, "mlx.core.var"]], "view() (in module mlx.core)": [[280, "mlx.core.view"]], "vjp() (in module mlx.core)": [[281, "mlx.core.vjp"]], "vmap() (in module mlx.core)": [[282, "mlx.core.vmap"]], "where() (in module mlx.core)": [[283, "mlx.core.where"]], "zeros() (in module mlx.core)": [[284, "mlx.core.zeros"]], "zeros_like() (in module mlx.core)": [[285, "mlx.core.zeros_like"]], "quantize() (in module mlx.nn)": [[286, "mlx.nn.quantize"]], "value_and_grad() (in module mlx.nn)": [[287, "mlx.nn.value_and_grad"]], "clip_grad_norm() (in module mlx.optimizers)": [[288, "mlx.optimizers.clip_grad_norm"]], "tree_flatten() (in module mlx.utils)": [[289, "mlx.utils.tree_flatten"]], "tree_map() (in module mlx.utils)": [[290, "mlx.utils.tree_map"]], "tree_map_with_path() (in module mlx.utils)": [[291, "mlx.utils.tree_map_with_path"]], "tree_reduce() (in module mlx.utils)": [[292, "mlx.utils.tree_reduce"]], "tree_unflatten() (in module mlx.utils)": [[293, "mlx.utils.tree_unflatten"]], "stream (class in mlx.core)": [[294, "mlx.core.Stream"]], "__init__() (stream method)": [[294, "mlx.core.Stream.__init__"]], "alibi (class in mlx.nn)": [[304, "mlx.nn.ALiBi"]], "avgpool1d (class in mlx.nn)": [[305, "mlx.nn.AvgPool1d"]], "avgpool2d (class in mlx.nn)": [[306, "mlx.nn.AvgPool2d"]], "batchnorm (class in mlx.nn)": [[307, "mlx.nn.BatchNorm"]], "conv1d (class in mlx.nn)": [[308, "mlx.nn.Conv1d"]], "conv2d (class in mlx.nn)": [[309, "mlx.nn.Conv2d"]], "conv3d (class in mlx.nn)": [[310, "mlx.nn.Conv3d"]], "dropout (class in mlx.nn)": [[311, "mlx.nn.Dropout"]], "dropout2d (class in mlx.nn)": [[312, "mlx.nn.Dropout2d"]], "dropout3d (class in mlx.nn)": [[313, "mlx.nn.Dropout3d"]], "embedding (class in mlx.nn)": [[314, "mlx.nn.Embedding"]], "gelu (class in mlx.nn)": [[315, "mlx.nn.GELU"], [381, "mlx.nn.gelu"]], "glu (class in mlx.nn)": [[316, "mlx.nn.GLU"], [384, "mlx.nn.glu"]], "gru (class in mlx.nn)": [[317, "mlx.nn.GRU"]], "groupnorm (class in mlx.nn)": [[318, "mlx.nn.GroupNorm"]], "hardshrink (class in mlx.nn)": [[319, "mlx.nn.HardShrink"]], "hardtanh (class in mlx.nn)": [[320, "mlx.nn.HardTanh"]], "hardswish (class in mlx.nn)": [[321, "mlx.nn.Hardswish"], [387, "mlx.nn.hardswish"]], "instancenorm (class in mlx.nn)": [[322, "mlx.nn.InstanceNorm"]], "lstm (class in mlx.nn)": [[323, "mlx.nn.LSTM"]], "layernorm (class in mlx.nn)": [[324, "mlx.nn.LayerNorm"]], "leakyrelu (class in mlx.nn)": [[325, "mlx.nn.LeakyReLU"]], "linear (class in mlx.nn)": [[326, "mlx.nn.Linear"]], "maxpool1d (class in mlx.nn)": [[327, "mlx.nn.MaxPool1d"]], "maxpool2d (class in mlx.nn)": [[328, "mlx.nn.MaxPool2d"]], "mish (class in mlx.nn)": [[329, "mlx.nn.Mish"], [405, "mlx.nn.mish"]], "apply() (module method)": [[330, "mlx.nn.Module.apply"]], "apply_to_modules() (module method)": [[331, "mlx.nn.Module.apply_to_modules"]], "children() (module method)": [[332, "mlx.nn.Module.children"]], "eval() (module method)": [[333, "mlx.nn.Module.eval"]], "filter_and_map() (module method)": [[334, "mlx.nn.Module.filter_and_map"]], "freeze() (module method)": [[335, "mlx.nn.Module.freeze"]], "leaf_modules() (module method)": [[336, "mlx.nn.Module.leaf_modules"]], "load_weights() (module method)": [[337, "mlx.nn.Module.load_weights"]], "modules() (module method)": [[338, "mlx.nn.Module.modules"]], "named_modules() (module method)": [[339, "mlx.nn.Module.named_modules"]], "parameters() (module method)": [[340, "mlx.nn.Module.parameters"]], "save_weights() (module method)": [[341, "mlx.nn.Module.save_weights"]], "set_dtype() (module method)": [[342, "mlx.nn.Module.set_dtype"]], "state (module property)": [[343, "mlx.nn.Module.state"]], "train() (module method)": [[344, "mlx.nn.Module.train"]], "trainable_parameters() (module method)": [[345, "mlx.nn.Module.trainable_parameters"]], "training (module property)": [[346, "mlx.nn.Module.training"]], "unfreeze() (module method)": [[347, "mlx.nn.Module.unfreeze"]], "update() (module method)": [[348, "mlx.nn.Module.update"]], "update_modules() (module method)": [[349, "mlx.nn.Module.update_modules"]], "multiheadattention (class in mlx.nn)": [[350, "mlx.nn.MultiHeadAttention"]], "prelu (class in mlx.nn)": [[351, "mlx.nn.PReLU"], [406, "mlx.nn.prelu"]], "quantizedembedding (class in mlx.nn)": [[352, "mlx.nn.QuantizedEmbedding"]], "quantizedlinear (class in mlx.nn)": [[353, "mlx.nn.QuantizedLinear"]], "rmsnorm (class in mlx.nn)": [[354, "mlx.nn.RMSNorm"]], "rnn (class in mlx.nn)": [[355, "mlx.nn.RNN"]], "relu (class in mlx.nn)": [[356, "mlx.nn.ReLU"], [407, "mlx.nn.relu"]], "relu6 (class in mlx.nn)": [[357, "mlx.nn.ReLU6"], [408, "mlx.nn.relu6"]], "rope (class in mlx.nn)": [[358, "mlx.nn.RoPE"]], "selu (class in mlx.nn)": [[359, "mlx.nn.SELU"], [409, "mlx.nn.selu"]], "sequential (class in mlx.nn)": [[360, "mlx.nn.Sequential"]], "silu (class in mlx.nn)": [[361, "mlx.nn.SiLU"], [411, "mlx.nn.silu"]], "sinusoidalpositionalencoding (class in mlx.nn)": [[362, "mlx.nn.SinusoidalPositionalEncoding"]], "softmax (class in mlx.nn)": [[363, "mlx.nn.Softmax"], [412, "mlx.nn.softmax"]], "softmin (class in mlx.nn)": [[364, "mlx.nn.Softmin"], [413, "mlx.nn.softmin"]], "softplus (class in mlx.nn)": [[365, "mlx.nn.Softplus"], [414, "mlx.nn.softplus"]], "softshrink (class in mlx.nn)": [[366, "mlx.nn.Softshrink"], [415, "mlx.nn.softshrink"]], "softsign (class in mlx.nn)": [[367, "mlx.nn.Softsign"]], "step (class in mlx.nn)": [[368, "mlx.nn.Step"], [416, "mlx.nn.step"]], "tanh (class in mlx.nn)": [[369, "mlx.nn.Tanh"], [417, "mlx.nn.tanh"]], "transformer (class in mlx.nn)": [[370, "mlx.nn.Transformer"]], "upsample (class in mlx.nn)": [[371, "mlx.nn.Upsample"]], "constant() (in module mlx.nn.init)": [[372, "mlx.nn.init.constant"]], "glorot_normal() (in module mlx.nn.init)": [[373, "mlx.nn.init.glorot_normal"]], "glorot_uniform() (in module mlx.nn.init)": [[374, "mlx.nn.init.glorot_uniform"]], "he_normal() (in module mlx.nn.init)": [[375, "mlx.nn.init.he_normal"]], "he_uniform() (in module mlx.nn.init)": [[376, "mlx.nn.init.he_uniform"]], "identity() (in module mlx.nn.init)": [[377, "mlx.nn.init.identity"]], "normal() (in module mlx.nn.init)": [[378, "mlx.nn.init.normal"]], "uniform() (in module mlx.nn.init)": [[379, "mlx.nn.init.uniform"]], "elu (class in mlx.nn)": [[380, "mlx.nn.elu"]], "gelu_approx (class in mlx.nn)": [[382, "mlx.nn.gelu_approx"]], "gelu_fast_approx (class in mlx.nn)": [[383, "mlx.nn.gelu_fast_approx"]], "hard_shrink (class in mlx.nn)": [[385, "mlx.nn.hard_shrink"]], "hard_tanh (class in mlx.nn)": [[386, "mlx.nn.hard_tanh"]], "leaky_relu (class in mlx.nn)": [[388, "mlx.nn.leaky_relu"]], "log_sigmoid (class in mlx.nn)": [[389, "mlx.nn.log_sigmoid"]], "log_softmax (class in mlx.nn)": [[390, "mlx.nn.log_softmax"]], "binary_cross_entropy (class in mlx.nn.losses)": [[391, "mlx.nn.losses.binary_cross_entropy"]], "cosine_similarity_loss (class in mlx.nn.losses)": [[392, "mlx.nn.losses.cosine_similarity_loss"]], "cross_entropy (class in mlx.nn.losses)": [[393, "mlx.nn.losses.cross_entropy"]], "gaussian_nll_loss (class in mlx.nn.losses)": [[394, "mlx.nn.losses.gaussian_nll_loss"]], "hinge_loss (class in mlx.nn.losses)": [[395, "mlx.nn.losses.hinge_loss"]], "huber_loss (class in mlx.nn.losses)": [[396, "mlx.nn.losses.huber_loss"]], "kl_div_loss (class in mlx.nn.losses)": [[397, "mlx.nn.losses.kl_div_loss"]], "l1_loss (class in mlx.nn.losses)": [[398, "mlx.nn.losses.l1_loss"]], "log_cosh_loss (class in mlx.nn.losses)": [[399, "mlx.nn.losses.log_cosh_loss"]], "margin_ranking_loss (class in mlx.nn.losses)": [[400, "mlx.nn.losses.margin_ranking_loss"]], "mse_loss (class in mlx.nn.losses)": [[401, "mlx.nn.losses.mse_loss"]], "nll_loss (class in mlx.nn.losses)": [[402, "mlx.nn.losses.nll_loss"]], "smooth_l1_loss (class in mlx.nn.losses)": [[403, "mlx.nn.losses.smooth_l1_loss"]], "triplet_loss (class in mlx.nn.losses)": [[404, "mlx.nn.losses.triplet_loss"]], "sigmoid (class in mlx.nn)": [[410, "mlx.nn.sigmoid"]], "module (class in mlx.nn)": [[422, "mlx.nn.Module"]], "adadelta (class in mlx.optimizers)": [[425, "mlx.optimizers.AdaDelta"]], "adafactor (class in mlx.optimizers)": [[426, "mlx.optimizers.Adafactor"]], "adagrad (class in mlx.optimizers)": [[427, "mlx.optimizers.Adagrad"]], "adam (class in mlx.optimizers)": [[428, "mlx.optimizers.Adam"]], "adamw (class in mlx.optimizers)": [[429, "mlx.optimizers.AdamW"]], "adamax (class in mlx.optimizers)": [[430, "mlx.optimizers.Adamax"]], "lion (class in mlx.optimizers)": [[431, "mlx.optimizers.Lion"]], "apply_gradients() (optimizer method)": [[432, "mlx.optimizers.Optimizer.apply_gradients"]], "init() (optimizer method)": [[433, "mlx.optimizers.Optimizer.init"]], "state (optimizer property)": [[434, "mlx.optimizers.Optimizer.state"]], "update() (optimizer method)": [[435, "mlx.optimizers.Optimizer.update"]], "rmsprop (class in mlx.optimizers)": [[436, "mlx.optimizers.RMSprop"]], "sgd (class in mlx.optimizers)": [[437, "mlx.optimizers.SGD"]], "cosine_decay() (in module mlx.optimizers)": [[438, "mlx.optimizers.cosine_decay"]], "exponential_decay() (in module mlx.optimizers)": [[439, "mlx.optimizers.exponential_decay"]], "join_schedules() (in module mlx.optimizers)": [[440, "mlx.optimizers.join_schedules"]], "linear_schedule() (in module mlx.optimizers)": [[441, "mlx.optimizers.linear_schedule"]], "step_decay() (in module mlx.optimizers)": [[442, "mlx.optimizers.step_decay"]], "optimizer (class in mlx.optimizers)": [[444, "mlx.optimizers.Optimizer"]]}})