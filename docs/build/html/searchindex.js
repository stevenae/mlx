Search.setIndex({"docnames": ["index", "python/_autosummary/mlx.core.erfinv", "python/_autosummary/mlx.core.eval", "python/_autosummary/mlx.core.exp", "python/_autosummary/mlx.core.expand_dims", "python/_autosummary/mlx.core.expm1", "python/_autosummary/mlx.core.eye", "python/_autosummary/mlx.core.fast.layer_norm", "python/_autosummary/mlx.core.fast.rms_norm", "python/_autosummary/mlx.core.fast.rope", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention", "python/_autosummary/mlx.core.fft.fft", "python/_autosummary/mlx.core.fft.fft2", "python/_autosummary/mlx.core.fft.fftn", "python/_autosummary/mlx.core.fft.ifft", "python/_autosummary/mlx.core.fft.ifft2", "python/_autosummary/mlx.core.fft.ifftn", "python/_autosummary/mlx.core.fft.irfft", "python/_autosummary/mlx.core.fft.irfft2", "python/_autosummary/mlx.core.fft.irfftn", "python/_autosummary/mlx.core.fft.rfft", "python/_autosummary/mlx.core.fft.rfft2", "python/_autosummary/mlx.core.fft.rfftn", "python/_autosummary/mlx.core.flatten", "python/_autosummary/mlx.core.floor", "python/_autosummary/mlx.core.floor_divide", "python/_autosummary/mlx.core.full", "python/_autosummary/mlx.core.gather_mm", "python/_autosummary/mlx.core.gather_qmm", "python/_autosummary/mlx.core.grad", "python/_autosummary/mlx.core.greater", "python/_autosummary/mlx.core.greater_equal", "python/_autosummary/mlx.core.hadamard_transform", "python/_autosummary/mlx.core.identity", "python/_autosummary/mlx.core.inner", "python/_autosummary/mlx.core.isclose", "python/_autosummary/mlx.core.isinf", "python/_autosummary/mlx.core.isnan", "python/_autosummary/mlx.core.isneginf", "python/_autosummary/mlx.core.isposinf", "python/_autosummary/mlx.core.issubdtype", "python/_autosummary/mlx.core.jvp", "python/_autosummary/mlx.core.left_shift", "python/_autosummary/mlx.core.less", "python/_autosummary/mlx.core.less_equal", "python/_autosummary/mlx.core.linalg.cholesky", "python/_autosummary/mlx.core.linalg.inv", "python/_autosummary/mlx.core.linalg.norm", "python/_autosummary/mlx.core.linalg.qr", "python/_autosummary/mlx.core.linalg.svd", "python/_autosummary/mlx.core.linspace", "python/_autosummary/mlx.core.load", "python/_autosummary/mlx.core.log", "python/_autosummary/mlx.core.log10", "python/_autosummary/mlx.core.log1p", "python/_autosummary/mlx.core.log2", "python/_autosummary/mlx.core.logaddexp", "python/_autosummary/mlx.core.logical_and", "python/_autosummary/mlx.core.logical_not", "python/_autosummary/mlx.core.logical_or", "python/_autosummary/mlx.core.logsumexp", "python/_autosummary/mlx.core.matmul", "python/_autosummary/mlx.core.max", "python/_autosummary/mlx.core.maximum", "python/_autosummary/mlx.core.mean", "python/_autosummary/mlx.core.meshgrid", "python/_autosummary/mlx.core.metal.clear_cache", "python/_autosummary/mlx.core.metal.device_info", "python/_autosummary/mlx.core.metal.get_active_memory", "python/_autosummary/mlx.core.metal.get_cache_memory", "python/_autosummary/mlx.core.metal.get_peak_memory", "python/_autosummary/mlx.core.metal.is_available", "python/_autosummary/mlx.core.metal.reset_peak_memory", "python/_autosummary/mlx.core.metal.set_cache_limit", "python/_autosummary/mlx.core.metal.set_memory_limit", "python/_autosummary/mlx.core.metal.start_capture", "python/_autosummary/mlx.core.metal.stop_capture", "python/_autosummary/mlx.core.min", "python/_autosummary/mlx.core.minimum", "python/_autosummary/mlx.core.moveaxis", "python/_autosummary/mlx.core.multiply", "python/_autosummary/mlx.core.negative", "python/_autosummary/mlx.core.new_stream", "python/_autosummary/mlx.core.not_equal", "python/_autosummary/mlx.core.ones", "python/_autosummary/mlx.core.ones_like", "python/_autosummary/mlx.core.outer", "python/_autosummary/mlx.core.pad", "python/_autosummary/mlx.core.partition", "python/_autosummary/mlx.core.power", "python/_autosummary/mlx.core.prod", "python/_autosummary/mlx.core.quantize", "python/_autosummary/mlx.core.quantized_matmul", "python/_autosummary/mlx.core.radians", "python/_autosummary/mlx.core.random.bernoulli", "python/_autosummary/mlx.core.random.categorical", "python/_autosummary/mlx.core.random.gumbel", "python/_autosummary/mlx.core.random.key", "python/_autosummary/mlx.core.random.multivariate_normal", "python/_autosummary/mlx.core.random.normal", "python/_autosummary/mlx.core.random.randint", "python/_autosummary/mlx.core.random.seed", "python/_autosummary/mlx.core.random.split", "python/_autosummary/mlx.core.random.truncated_normal", "python/_autosummary/mlx.core.random.uniform", "python/_autosummary/mlx.core.reciprocal", "python/_autosummary/mlx.core.remainder", "python/_autosummary/mlx.core.repeat", "python/_autosummary/mlx.core.reshape", "python/_autosummary/mlx.core.right_shift", "python/_autosummary/mlx.core.round", "python/_autosummary/mlx.core.rsqrt", "python/_autosummary/mlx.core.save", "python/_autosummary/mlx.core.save_gguf", "python/_autosummary/mlx.core.save_safetensors", "python/_autosummary/mlx.core.savez", "python/_autosummary/mlx.core.savez_compressed", "python/_autosummary/mlx.core.set_default_device", "python/_autosummary/mlx.core.set_default_stream", "python/_autosummary/mlx.core.sigmoid", "python/_autosummary/mlx.core.sign", "python/_autosummary/mlx.core.sin", "python/_autosummary/mlx.core.sinh", "python/_autosummary/mlx.core.softmax", "python/_autosummary/mlx.core.sort", "python/_autosummary/mlx.core.split", "python/_autosummary/mlx.core.sqrt", "python/_autosummary/mlx.core.square", "python/_autosummary/mlx.core.squeeze", "python/_autosummary/mlx.core.stack", "python/_autosummary/mlx.core.std", "python/_autosummary/mlx.core.stop_gradient", "python/_autosummary/mlx.core.stream", "python/_autosummary/mlx.core.subtract", "python/_autosummary/mlx.core.sum", "python/_autosummary/mlx.core.swapaxes", "python/_autosummary/mlx.core.synchronize", "python/_autosummary/mlx.core.take", "python/_autosummary/mlx.core.take_along_axis", "python/_autosummary/mlx.core.tan", "python/_autosummary/mlx.core.tanh", "python/_autosummary/mlx.core.tensordot", "python/_autosummary/mlx.core.tile", "python/_autosummary/mlx.core.topk", "python/_autosummary/mlx.core.trace", "python/_autosummary/mlx.core.transpose", "python/_autosummary/mlx.core.tri", "python/_autosummary/mlx.core.tril", "python/_autosummary/mlx.core.triu", "python/_autosummary/mlx.core.value_and_grad", "python/_autosummary/mlx.core.var", "python/_autosummary/mlx.core.view", "python/_autosummary/mlx.core.vjp", "python/_autosummary/mlx.core.vmap", "python/_autosummary/mlx.core.where", "python/_autosummary/mlx.core.zeros", "python/_autosummary/mlx.core.zeros_like", "python/_autosummary/mlx.nn.quantize", "python/_autosummary/mlx.nn.value_and_grad", "python/_autosummary/mlx.optimizers.clip_grad_norm", "python/_autosummary/mlx.utils.tree_flatten", "python/_autosummary/mlx.utils.tree_map", "python/_autosummary/mlx.utils.tree_map_with_path", "python/_autosummary/mlx.utils.tree_reduce", "python/_autosummary/mlx.utils.tree_unflatten", "python/_autosummary/stream_class", "python/array", "python/data_types", "python/devices_and_streams", "python/distributed", "python/fast", "python/fft", "python/linalg", "python/metal", "python/nn", "python/nn/_autosummary/mlx.nn.ALiBi", "python/nn/_autosummary/mlx.nn.AvgPool1d", "python/nn/_autosummary/mlx.nn.AvgPool2d", "python/nn/_autosummary/mlx.nn.BatchNorm", "python/nn/_autosummary/mlx.nn.Conv1d", "python/nn/_autosummary/mlx.nn.Conv2d", "python/nn/_autosummary/mlx.nn.Conv3d", "python/nn/_autosummary/mlx.nn.Dropout", "python/nn/_autosummary/mlx.nn.Dropout2d", "python/nn/_autosummary/mlx.nn.Dropout3d", "python/nn/_autosummary/mlx.nn.Embedding", "python/nn/_autosummary/mlx.nn.GELU", "python/nn/_autosummary/mlx.nn.GLU", "python/nn/_autosummary/mlx.nn.GRU", "python/nn/_autosummary/mlx.nn.GroupNorm", "python/nn/_autosummary/mlx.nn.HardShrink", "python/nn/_autosummary/mlx.nn.HardTanh", "python/nn/_autosummary/mlx.nn.Hardswish", "python/nn/_autosummary/mlx.nn.InstanceNorm", "python/nn/_autosummary/mlx.nn.LSTM", "python/nn/_autosummary/mlx.nn.LayerNorm", "python/nn/_autosummary/mlx.nn.LeakyReLU", "python/nn/_autosummary/mlx.nn.Linear", "python/nn/_autosummary/mlx.nn.MaxPool1d", "python/nn/_autosummary/mlx.nn.MaxPool2d", "python/nn/_autosummary/mlx.nn.Mish", "python/nn/_autosummary/mlx.nn.Module.apply", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules", "python/nn/_autosummary/mlx.nn.Module.children", "python/nn/_autosummary/mlx.nn.Module.eval", "python/nn/_autosummary/mlx.nn.Module.filter_and_map", "python/nn/_autosummary/mlx.nn.Module.freeze", "python/nn/_autosummary/mlx.nn.Module.leaf_modules", "python/nn/_autosummary/mlx.nn.Module.load_weights", "python/nn/_autosummary/mlx.nn.Module.modules", "python/nn/_autosummary/mlx.nn.Module.named_modules", "python/nn/_autosummary/mlx.nn.Module.parameters", "python/nn/_autosummary/mlx.nn.Module.save_weights", "python/nn/_autosummary/mlx.nn.Module.set_dtype", "python/nn/_autosummary/mlx.nn.Module.state", "python/nn/_autosummary/mlx.nn.Module.train", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters", "python/nn/_autosummary/mlx.nn.Module.training", "python/nn/_autosummary/mlx.nn.Module.unfreeze", "python/nn/_autosummary/mlx.nn.Module.update", "python/nn/_autosummary/mlx.nn.Module.update_modules", "python/nn/_autosummary/mlx.nn.MultiHeadAttention", "python/nn/_autosummary/mlx.nn.PReLU", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding", "python/nn/_autosummary/mlx.nn.QuantizedLinear", "python/nn/_autosummary/mlx.nn.RMSNorm", "python/nn/_autosummary/mlx.nn.RNN", "python/nn/_autosummary/mlx.nn.ReLU", "python/nn/_autosummary/mlx.nn.ReLU6", "python/nn/_autosummary/mlx.nn.RoPE", "python/nn/_autosummary/mlx.nn.SELU", "python/nn/_autosummary/mlx.nn.Sequential", "python/nn/_autosummary/mlx.nn.SiLU", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding", "python/nn/_autosummary/mlx.nn.Softmax", "python/nn/_autosummary/mlx.nn.Softmin", "python/nn/_autosummary/mlx.nn.Softplus", "python/nn/_autosummary/mlx.nn.Softshrink", "python/nn/_autosummary/mlx.nn.Softsign", "python/nn/_autosummary/mlx.nn.Step", "python/nn/_autosummary/mlx.nn.Tanh", "python/nn/_autosummary/mlx.nn.Transformer", "python/nn/_autosummary/mlx.nn.Upsample", "python/nn/_autosummary/mlx.nn.init.constant", "python/nn/_autosummary/mlx.nn.init.glorot_normal", "python/nn/_autosummary/mlx.nn.init.glorot_uniform", "python/nn/_autosummary/mlx.nn.init.he_normal", "python/nn/_autosummary/mlx.nn.init.he_uniform", "python/nn/_autosummary/mlx.nn.init.identity", "python/nn/_autosummary/mlx.nn.init.normal", "python/nn/_autosummary/mlx.nn.init.uniform", "python/nn/_autosummary_functions/mlx.nn.elu", "python/nn/_autosummary_functions/mlx.nn.gelu", "python/nn/_autosummary_functions/mlx.nn.gelu_approx", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx", "python/nn/_autosummary_functions/mlx.nn.glu", "python/nn/_autosummary_functions/mlx.nn.hard_shrink", "python/nn/_autosummary_functions/mlx.nn.hard_tanh", "python/nn/_autosummary_functions/mlx.nn.hardswish", "python/nn/_autosummary_functions/mlx.nn.leaky_relu", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid", "python/nn/_autosummary_functions/mlx.nn.log_softmax", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss", "python/nn/_autosummary_functions/mlx.nn.mish", "python/nn/_autosummary_functions/mlx.nn.prelu", "python/nn/_autosummary_functions/mlx.nn.relu", "python/nn/_autosummary_functions/mlx.nn.relu6", "python/nn/_autosummary_functions/mlx.nn.selu", "python/nn/_autosummary_functions/mlx.nn.sigmoid", "python/nn/_autosummary_functions/mlx.nn.silu", "python/nn/_autosummary_functions/mlx.nn.softmax", "python/nn/_autosummary_functions/mlx.nn.softmin", "python/nn/_autosummary_functions/mlx.nn.softplus", "python/nn/_autosummary_functions/mlx.nn.softshrink", "python/nn/_autosummary_functions/mlx.nn.step", "python/nn/_autosummary_functions/mlx.nn.tanh", "python/nn/functions", "python/nn/init", "python/nn/layers", "python/nn/losses", "python/nn/module", "python/ops", "python/optimizers", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta", "python/optimizers/_autosummary/mlx.optimizers.Adafactor", "python/optimizers/_autosummary/mlx.optimizers.Adagrad", "python/optimizers/_autosummary/mlx.optimizers.Adam", "python/optimizers/_autosummary/mlx.optimizers.AdamW", "python/optimizers/_autosummary/mlx.optimizers.Adamax", "python/optimizers/_autosummary/mlx.optimizers.Lion", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update", "python/optimizers/_autosummary/mlx.optimizers.RMSprop", "python/optimizers/_autosummary/mlx.optimizers.SGD", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay", "python/optimizers/_autosummary/mlx.optimizers.join_schedules", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule", "python/optimizers/_autosummary/mlx.optimizers.step_decay", "python/optimizers/common_optimizers", "python/optimizers/optimizer", "python/optimizers/schedulers", "python/random", "python/transforms", "python/tree_utils", "usage/compile", "usage/distributed", "usage/function_transforms", "usage/indexing", "usage/lazy_evaluation", "usage/numpy", "usage/quick_start", "usage/saving_and_loading", "usage/unified_memory", "usage/using_streams"], "filenames": ["index.rst", "python/_autosummary/mlx.core.erfinv.rst", "python/_autosummary/mlx.core.eval.rst", "python/_autosummary/mlx.core.exp.rst", "python/_autosummary/mlx.core.expand_dims.rst", "python/_autosummary/mlx.core.expm1.rst", "python/_autosummary/mlx.core.eye.rst", "python/_autosummary/mlx.core.fast.layer_norm.rst", "python/_autosummary/mlx.core.fast.rms_norm.rst", "python/_autosummary/mlx.core.fast.rope.rst", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention.rst", "python/_autosummary/mlx.core.fft.fft.rst", "python/_autosummary/mlx.core.fft.fft2.rst", "python/_autosummary/mlx.core.fft.fftn.rst", "python/_autosummary/mlx.core.fft.ifft.rst", "python/_autosummary/mlx.core.fft.ifft2.rst", "python/_autosummary/mlx.core.fft.ifftn.rst", "python/_autosummary/mlx.core.fft.irfft.rst", "python/_autosummary/mlx.core.fft.irfft2.rst", "python/_autosummary/mlx.core.fft.irfftn.rst", "python/_autosummary/mlx.core.fft.rfft.rst", "python/_autosummary/mlx.core.fft.rfft2.rst", "python/_autosummary/mlx.core.fft.rfftn.rst", "python/_autosummary/mlx.core.flatten.rst", "python/_autosummary/mlx.core.floor.rst", "python/_autosummary/mlx.core.floor_divide.rst", "python/_autosummary/mlx.core.full.rst", "python/_autosummary/mlx.core.gather_mm.rst", "python/_autosummary/mlx.core.gather_qmm.rst", "python/_autosummary/mlx.core.grad.rst", "python/_autosummary/mlx.core.greater.rst", "python/_autosummary/mlx.core.greater_equal.rst", "python/_autosummary/mlx.core.hadamard_transform.rst", "python/_autosummary/mlx.core.identity.rst", "python/_autosummary/mlx.core.inner.rst", "python/_autosummary/mlx.core.isclose.rst", "python/_autosummary/mlx.core.isinf.rst", "python/_autosummary/mlx.core.isnan.rst", "python/_autosummary/mlx.core.isneginf.rst", "python/_autosummary/mlx.core.isposinf.rst", "python/_autosummary/mlx.core.issubdtype.rst", "python/_autosummary/mlx.core.jvp.rst", "python/_autosummary/mlx.core.left_shift.rst", "python/_autosummary/mlx.core.less.rst", "python/_autosummary/mlx.core.less_equal.rst", "python/_autosummary/mlx.core.linalg.cholesky.rst", "python/_autosummary/mlx.core.linalg.inv.rst", "python/_autosummary/mlx.core.linalg.norm.rst", "python/_autosummary/mlx.core.linalg.qr.rst", "python/_autosummary/mlx.core.linalg.svd.rst", "python/_autosummary/mlx.core.linspace.rst", "python/_autosummary/mlx.core.load.rst", "python/_autosummary/mlx.core.log.rst", "python/_autosummary/mlx.core.log10.rst", "python/_autosummary/mlx.core.log1p.rst", "python/_autosummary/mlx.core.log2.rst", "python/_autosummary/mlx.core.logaddexp.rst", "python/_autosummary/mlx.core.logical_and.rst", "python/_autosummary/mlx.core.logical_not.rst", "python/_autosummary/mlx.core.logical_or.rst", "python/_autosummary/mlx.core.logsumexp.rst", "python/_autosummary/mlx.core.matmul.rst", "python/_autosummary/mlx.core.max.rst", "python/_autosummary/mlx.core.maximum.rst", "python/_autosummary/mlx.core.mean.rst", "python/_autosummary/mlx.core.meshgrid.rst", "python/_autosummary/mlx.core.metal.clear_cache.rst", "python/_autosummary/mlx.core.metal.device_info.rst", "python/_autosummary/mlx.core.metal.get_active_memory.rst", "python/_autosummary/mlx.core.metal.get_cache_memory.rst", "python/_autosummary/mlx.core.metal.get_peak_memory.rst", "python/_autosummary/mlx.core.metal.is_available.rst", "python/_autosummary/mlx.core.metal.reset_peak_memory.rst", "python/_autosummary/mlx.core.metal.set_cache_limit.rst", "python/_autosummary/mlx.core.metal.set_memory_limit.rst", "python/_autosummary/mlx.core.metal.start_capture.rst", "python/_autosummary/mlx.core.metal.stop_capture.rst", "python/_autosummary/mlx.core.min.rst", "python/_autosummary/mlx.core.minimum.rst", "python/_autosummary/mlx.core.moveaxis.rst", "python/_autosummary/mlx.core.multiply.rst", "python/_autosummary/mlx.core.negative.rst", "python/_autosummary/mlx.core.new_stream.rst", "python/_autosummary/mlx.core.not_equal.rst", "python/_autosummary/mlx.core.ones.rst", "python/_autosummary/mlx.core.ones_like.rst", "python/_autosummary/mlx.core.outer.rst", "python/_autosummary/mlx.core.pad.rst", "python/_autosummary/mlx.core.partition.rst", "python/_autosummary/mlx.core.power.rst", "python/_autosummary/mlx.core.prod.rst", "python/_autosummary/mlx.core.quantize.rst", "python/_autosummary/mlx.core.quantized_matmul.rst", "python/_autosummary/mlx.core.radians.rst", "python/_autosummary/mlx.core.random.bernoulli.rst", "python/_autosummary/mlx.core.random.categorical.rst", "python/_autosummary/mlx.core.random.gumbel.rst", "python/_autosummary/mlx.core.random.key.rst", "python/_autosummary/mlx.core.random.multivariate_normal.rst", "python/_autosummary/mlx.core.random.normal.rst", "python/_autosummary/mlx.core.random.randint.rst", "python/_autosummary/mlx.core.random.seed.rst", "python/_autosummary/mlx.core.random.split.rst", "python/_autosummary/mlx.core.random.truncated_normal.rst", "python/_autosummary/mlx.core.random.uniform.rst", "python/_autosummary/mlx.core.reciprocal.rst", "python/_autosummary/mlx.core.remainder.rst", "python/_autosummary/mlx.core.repeat.rst", "python/_autosummary/mlx.core.reshape.rst", "python/_autosummary/mlx.core.right_shift.rst", "python/_autosummary/mlx.core.round.rst", "python/_autosummary/mlx.core.rsqrt.rst", "python/_autosummary/mlx.core.save.rst", "python/_autosummary/mlx.core.save_gguf.rst", "python/_autosummary/mlx.core.save_safetensors.rst", "python/_autosummary/mlx.core.savez.rst", "python/_autosummary/mlx.core.savez_compressed.rst", "python/_autosummary/mlx.core.set_default_device.rst", "python/_autosummary/mlx.core.set_default_stream.rst", "python/_autosummary/mlx.core.sigmoid.rst", "python/_autosummary/mlx.core.sign.rst", "python/_autosummary/mlx.core.sin.rst", "python/_autosummary/mlx.core.sinh.rst", "python/_autosummary/mlx.core.softmax.rst", "python/_autosummary/mlx.core.sort.rst", "python/_autosummary/mlx.core.split.rst", "python/_autosummary/mlx.core.sqrt.rst", "python/_autosummary/mlx.core.square.rst", "python/_autosummary/mlx.core.squeeze.rst", "python/_autosummary/mlx.core.stack.rst", "python/_autosummary/mlx.core.std.rst", "python/_autosummary/mlx.core.stop_gradient.rst", "python/_autosummary/mlx.core.stream.rst", "python/_autosummary/mlx.core.subtract.rst", "python/_autosummary/mlx.core.sum.rst", "python/_autosummary/mlx.core.swapaxes.rst", "python/_autosummary/mlx.core.synchronize.rst", "python/_autosummary/mlx.core.take.rst", "python/_autosummary/mlx.core.take_along_axis.rst", "python/_autosummary/mlx.core.tan.rst", "python/_autosummary/mlx.core.tanh.rst", "python/_autosummary/mlx.core.tensordot.rst", "python/_autosummary/mlx.core.tile.rst", "python/_autosummary/mlx.core.topk.rst", "python/_autosummary/mlx.core.trace.rst", "python/_autosummary/mlx.core.transpose.rst", "python/_autosummary/mlx.core.tri.rst", "python/_autosummary/mlx.core.tril.rst", "python/_autosummary/mlx.core.triu.rst", "python/_autosummary/mlx.core.value_and_grad.rst", "python/_autosummary/mlx.core.var.rst", "python/_autosummary/mlx.core.view.rst", "python/_autosummary/mlx.core.vjp.rst", "python/_autosummary/mlx.core.vmap.rst", "python/_autosummary/mlx.core.where.rst", "python/_autosummary/mlx.core.zeros.rst", "python/_autosummary/mlx.core.zeros_like.rst", "python/_autosummary/mlx.nn.quantize.rst", "python/_autosummary/mlx.nn.value_and_grad.rst", "python/_autosummary/mlx.optimizers.clip_grad_norm.rst", "python/_autosummary/mlx.utils.tree_flatten.rst", "python/_autosummary/mlx.utils.tree_map.rst", "python/_autosummary/mlx.utils.tree_map_with_path.rst", "python/_autosummary/mlx.utils.tree_reduce.rst", "python/_autosummary/mlx.utils.tree_unflatten.rst", "python/_autosummary/stream_class.rst", "python/array.rst", "python/data_types.rst", "python/devices_and_streams.rst", "python/distributed.rst", "python/fast.rst", "python/fft.rst", "python/linalg.rst", "python/metal.rst", "python/nn.rst", "python/nn/_autosummary/mlx.nn.ALiBi.rst", "python/nn/_autosummary/mlx.nn.AvgPool1d.rst", "python/nn/_autosummary/mlx.nn.AvgPool2d.rst", "python/nn/_autosummary/mlx.nn.BatchNorm.rst", "python/nn/_autosummary/mlx.nn.Conv1d.rst", "python/nn/_autosummary/mlx.nn.Conv2d.rst", "python/nn/_autosummary/mlx.nn.Conv3d.rst", "python/nn/_autosummary/mlx.nn.Dropout.rst", "python/nn/_autosummary/mlx.nn.Dropout2d.rst", "python/nn/_autosummary/mlx.nn.Dropout3d.rst", "python/nn/_autosummary/mlx.nn.Embedding.rst", "python/nn/_autosummary/mlx.nn.GELU.rst", "python/nn/_autosummary/mlx.nn.GLU.rst", "python/nn/_autosummary/mlx.nn.GRU.rst", "python/nn/_autosummary/mlx.nn.GroupNorm.rst", "python/nn/_autosummary/mlx.nn.HardShrink.rst", "python/nn/_autosummary/mlx.nn.HardTanh.rst", "python/nn/_autosummary/mlx.nn.Hardswish.rst", "python/nn/_autosummary/mlx.nn.InstanceNorm.rst", "python/nn/_autosummary/mlx.nn.LSTM.rst", "python/nn/_autosummary/mlx.nn.LayerNorm.rst", "python/nn/_autosummary/mlx.nn.LeakyReLU.rst", "python/nn/_autosummary/mlx.nn.Linear.rst", "python/nn/_autosummary/mlx.nn.MaxPool1d.rst", "python/nn/_autosummary/mlx.nn.MaxPool2d.rst", "python/nn/_autosummary/mlx.nn.Mish.rst", "python/nn/_autosummary/mlx.nn.Module.apply.rst", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules.rst", "python/nn/_autosummary/mlx.nn.Module.children.rst", "python/nn/_autosummary/mlx.nn.Module.eval.rst", "python/nn/_autosummary/mlx.nn.Module.filter_and_map.rst", "python/nn/_autosummary/mlx.nn.Module.freeze.rst", "python/nn/_autosummary/mlx.nn.Module.leaf_modules.rst", "python/nn/_autosummary/mlx.nn.Module.load_weights.rst", "python/nn/_autosummary/mlx.nn.Module.modules.rst", "python/nn/_autosummary/mlx.nn.Module.named_modules.rst", "python/nn/_autosummary/mlx.nn.Module.parameters.rst", "python/nn/_autosummary/mlx.nn.Module.save_weights.rst", "python/nn/_autosummary/mlx.nn.Module.set_dtype.rst", "python/nn/_autosummary/mlx.nn.Module.state.rst", "python/nn/_autosummary/mlx.nn.Module.train.rst", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters.rst", "python/nn/_autosummary/mlx.nn.Module.training.rst", "python/nn/_autosummary/mlx.nn.Module.unfreeze.rst", "python/nn/_autosummary/mlx.nn.Module.update.rst", "python/nn/_autosummary/mlx.nn.Module.update_modules.rst", "python/nn/_autosummary/mlx.nn.MultiHeadAttention.rst", "python/nn/_autosummary/mlx.nn.PReLU.rst", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding.rst", "python/nn/_autosummary/mlx.nn.QuantizedLinear.rst", "python/nn/_autosummary/mlx.nn.RMSNorm.rst", "python/nn/_autosummary/mlx.nn.RNN.rst", "python/nn/_autosummary/mlx.nn.ReLU.rst", "python/nn/_autosummary/mlx.nn.ReLU6.rst", "python/nn/_autosummary/mlx.nn.RoPE.rst", "python/nn/_autosummary/mlx.nn.SELU.rst", "python/nn/_autosummary/mlx.nn.Sequential.rst", "python/nn/_autosummary/mlx.nn.SiLU.rst", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding.rst", "python/nn/_autosummary/mlx.nn.Softmax.rst", "python/nn/_autosummary/mlx.nn.Softmin.rst", "python/nn/_autosummary/mlx.nn.Softplus.rst", "python/nn/_autosummary/mlx.nn.Softshrink.rst", "python/nn/_autosummary/mlx.nn.Softsign.rst", "python/nn/_autosummary/mlx.nn.Step.rst", "python/nn/_autosummary/mlx.nn.Tanh.rst", "python/nn/_autosummary/mlx.nn.Transformer.rst", "python/nn/_autosummary/mlx.nn.Upsample.rst", "python/nn/_autosummary/mlx.nn.init.constant.rst", "python/nn/_autosummary/mlx.nn.init.glorot_normal.rst", "python/nn/_autosummary/mlx.nn.init.glorot_uniform.rst", "python/nn/_autosummary/mlx.nn.init.he_normal.rst", "python/nn/_autosummary/mlx.nn.init.he_uniform.rst", "python/nn/_autosummary/mlx.nn.init.identity.rst", "python/nn/_autosummary/mlx.nn.init.normal.rst", "python/nn/_autosummary/mlx.nn.init.uniform.rst", "python/nn/_autosummary_functions/mlx.nn.elu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_approx.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx.rst", "python/nn/_autosummary_functions/mlx.nn.glu.rst", "python/nn/_autosummary_functions/mlx.nn.hard_shrink.rst", "python/nn/_autosummary_functions/mlx.nn.hard_tanh.rst", "python/nn/_autosummary_functions/mlx.nn.hardswish.rst", "python/nn/_autosummary_functions/mlx.nn.leaky_relu.rst", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.log_softmax.rst", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss.rst", "python/nn/_autosummary_functions/mlx.nn.mish.rst", "python/nn/_autosummary_functions/mlx.nn.prelu.rst", "python/nn/_autosummary_functions/mlx.nn.relu.rst", "python/nn/_autosummary_functions/mlx.nn.relu6.rst", "python/nn/_autosummary_functions/mlx.nn.selu.rst", "python/nn/_autosummary_functions/mlx.nn.sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.silu.rst", "python/nn/_autosummary_functions/mlx.nn.softmax.rst", "python/nn/_autosummary_functions/mlx.nn.softmin.rst", "python/nn/_autosummary_functions/mlx.nn.softplus.rst", "python/nn/_autosummary_functions/mlx.nn.softshrink.rst", "python/nn/_autosummary_functions/mlx.nn.step.rst", "python/nn/_autosummary_functions/mlx.nn.tanh.rst", "python/nn/functions.rst", "python/nn/init.rst", "python/nn/layers.rst", "python/nn/losses.rst", "python/nn/module.rst", "python/ops.rst", "python/optimizers.rst", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta.rst", "python/optimizers/_autosummary/mlx.optimizers.Adafactor.rst", "python/optimizers/_autosummary/mlx.optimizers.Adagrad.rst", "python/optimizers/_autosummary/mlx.optimizers.Adam.rst", "python/optimizers/_autosummary/mlx.optimizers.AdamW.rst", "python/optimizers/_autosummary/mlx.optimizers.Adamax.rst", "python/optimizers/_autosummary/mlx.optimizers.Lion.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update.rst", "python/optimizers/_autosummary/mlx.optimizers.RMSprop.rst", "python/optimizers/_autosummary/mlx.optimizers.SGD.rst", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.join_schedules.rst", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule.rst", "python/optimizers/_autosummary/mlx.optimizers.step_decay.rst", "python/optimizers/common_optimizers.rst", "python/optimizers/optimizer.rst", "python/optimizers/schedulers.rst", "python/random.rst", "python/transforms.rst", "python/tree_utils.rst", "usage/compile.rst", "usage/distributed.rst", "usage/function_transforms.rst", "usage/indexing.rst", "usage/lazy_evaluation.rst", "usage/numpy.rst", "usage/quick_start.rst", "usage/saving_and_loading.rst", "usage/unified_memory.rst", "usage/using_streams.rst"], "titles": ["MLX", "mlx.core.erfinv", "mlx.core.eval", "mlx.core.exp", "mlx.core.expand_dims", "mlx.core.expm1", "mlx.core.eye", "mlx.core.fast.layer_norm", "mlx.core.fast.rms_norm", "mlx.core.fast.rope", "mlx.core.fast.scaled_dot_product_attention", "mlx.core.fft.fft", "mlx.core.fft.fft2", "mlx.core.fft.fftn", "mlx.core.fft.ifft", "mlx.core.fft.ifft2", "mlx.core.fft.ifftn", "mlx.core.fft.irfft", "mlx.core.fft.irfft2", "mlx.core.fft.irfftn", "mlx.core.fft.rfft", "mlx.core.fft.rfft2", "mlx.core.fft.rfftn", "mlx.core.flatten", "mlx.core.floor", "mlx.core.floor_divide", "mlx.core.full", "mlx.core.gather_mm", "mlx.core.gather_qmm", "mlx.core.grad", "mlx.core.greater", "mlx.core.greater_equal", "mlx.core.hadamard_transform", "mlx.core.identity", "mlx.core.inner", "mlx.core.isclose", "mlx.core.isinf", "mlx.core.isnan", "mlx.core.isneginf", "mlx.core.isposinf", "mlx.core.issubdtype", "mlx.core.jvp", "mlx.core.left_shift", "mlx.core.less", "mlx.core.less_equal", "mlx.core.linalg.cholesky", "mlx.core.linalg.inv", "mlx.core.linalg.norm", "mlx.core.linalg.qr", "mlx.core.linalg.svd", "mlx.core.linspace", "mlx.core.load", "mlx.core.log", "mlx.core.log10", "mlx.core.log1p", "mlx.core.log2", "mlx.core.logaddexp", "mlx.core.logical_and", "mlx.core.logical_not", "mlx.core.logical_or", "mlx.core.logsumexp", "mlx.core.matmul", "mlx.core.max", "mlx.core.maximum", "mlx.core.mean", "mlx.core.meshgrid", "mlx.core.metal.clear_cache", "mlx.core.metal.device_info", "mlx.core.metal.get_active_memory", "mlx.core.metal.get_cache_memory", "mlx.core.metal.get_peak_memory", "mlx.core.metal.is_available", "mlx.core.metal.reset_peak_memory", "mlx.core.metal.set_cache_limit", "mlx.core.metal.set_memory_limit", "mlx.core.metal.start_capture", "mlx.core.metal.stop_capture", "mlx.core.min", "mlx.core.minimum", "mlx.core.moveaxis", "mlx.core.multiply", "mlx.core.negative", "mlx.core.new_stream", "mlx.core.not_equal", "mlx.core.ones", "mlx.core.ones_like", "mlx.core.outer", "mlx.core.pad", "mlx.core.partition", "mlx.core.power", "mlx.core.prod", "mlx.core.quantize", "mlx.core.quantized_matmul", "mlx.core.radians", "mlx.core.random.bernoulli", "mlx.core.random.categorical", "mlx.core.random.gumbel", "mlx.core.random.key", "mlx.core.random.multivariate_normal", "mlx.core.random.normal", "mlx.core.random.randint", "mlx.core.random.seed", "mlx.core.random.split", "mlx.core.random.truncated_normal", "mlx.core.random.uniform", "mlx.core.reciprocal", "mlx.core.remainder", "mlx.core.repeat", "mlx.core.reshape", "mlx.core.right_shift", "mlx.core.round", "mlx.core.rsqrt", "mlx.core.save", "mlx.core.save_gguf", "mlx.core.save_safetensors", "mlx.core.savez", "mlx.core.savez_compressed", "mlx.core.set_default_device", "mlx.core.set_default_stream", "mlx.core.sigmoid", "mlx.core.sign", "mlx.core.sin", "mlx.core.sinh", "mlx.core.softmax", "mlx.core.sort", "mlx.core.split", "mlx.core.sqrt", "mlx.core.square", "mlx.core.squeeze", "mlx.core.stack", "mlx.core.std", "mlx.core.stop_gradient", "mlx.core.stream", "mlx.core.subtract", "mlx.core.sum", "mlx.core.swapaxes", "mlx.core.synchronize", "mlx.core.take", "mlx.core.take_along_axis", "mlx.core.tan", "mlx.core.tanh", "mlx.core.tensordot", "mlx.core.tile", "mlx.core.topk", "mlx.core.trace", "mlx.core.transpose", "mlx.core.tri", "mlx.core.tril", "mlx.core.triu", "mlx.core.value_and_grad", "mlx.core.var", "mlx.core.view", "mlx.core.vjp", "mlx.core.vmap", "mlx.core.where", "mlx.core.zeros", "mlx.core.zeros_like", "mlx.nn.quantize", "mlx.nn.value_and_grad", "mlx.optimizers.clip_grad_norm", "mlx.utils.tree_flatten", "mlx.utils.tree_map", "mlx.utils.tree_map_with_path", "mlx.utils.tree_reduce", "mlx.utils.tree_unflatten", "mlx.core.Stream", "Array", "Data Types", "Devices and Streams", "Distributed Communication", "Fast", "FFT", "Linear Algebra", "Metal", "Neural Networks", "mlx.nn.ALiBi", "mlx.nn.AvgPool1d", "mlx.nn.AvgPool2d", "mlx.nn.BatchNorm", "mlx.nn.Conv1d", "mlx.nn.Conv2d", "mlx.nn.Conv3d", "mlx.nn.Dropout", "mlx.nn.Dropout2d", "mlx.nn.Dropout3d", "mlx.nn.Embedding", "mlx.nn.GELU", "mlx.nn.GLU", "mlx.nn.GRU", "mlx.nn.GroupNorm", "mlx.nn.HardShrink", "mlx.nn.HardTanh", "mlx.nn.Hardswish", "mlx.nn.InstanceNorm", "mlx.nn.LSTM", "mlx.nn.LayerNorm", "mlx.nn.LeakyReLU", "mlx.nn.Linear", "mlx.nn.MaxPool1d", "mlx.nn.MaxPool2d", "mlx.nn.Mish", "mlx.nn.Module.apply", "mlx.nn.Module.apply_to_modules", "mlx.nn.Module.children", "mlx.nn.Module.eval", "mlx.nn.Module.filter_and_map", "mlx.nn.Module.freeze", "mlx.nn.Module.leaf_modules", "mlx.nn.Module.load_weights", "mlx.nn.Module.modules", "mlx.nn.Module.named_modules", "mlx.nn.Module.parameters", "mlx.nn.Module.save_weights", "mlx.nn.Module.set_dtype", "mlx.nn.Module.state", "mlx.nn.Module.train", "mlx.nn.Module.trainable_parameters", "mlx.nn.Module.training", "mlx.nn.Module.unfreeze", "mlx.nn.Module.update", "mlx.nn.Module.update_modules", "mlx.nn.MultiHeadAttention", "mlx.nn.PReLU", "mlx.nn.QuantizedEmbedding", "mlx.nn.QuantizedLinear", "mlx.nn.RMSNorm", "mlx.nn.RNN", "mlx.nn.ReLU", "mlx.nn.ReLU6", "mlx.nn.RoPE", "mlx.nn.SELU", "mlx.nn.Sequential", "mlx.nn.SiLU", "mlx.nn.SinusoidalPositionalEncoding", "mlx.nn.Softmax", "mlx.nn.Softmin", "mlx.nn.Softplus", "mlx.nn.Softshrink", "mlx.nn.Softsign", "mlx.nn.Step", "mlx.nn.Tanh", "mlx.nn.Transformer", "mlx.nn.Upsample", "mlx.nn.init.constant", "mlx.nn.init.glorot_normal", "mlx.nn.init.glorot_uniform", "mlx.nn.init.he_normal", "mlx.nn.init.he_uniform", "mlx.nn.init.identity", "mlx.nn.init.normal", "mlx.nn.init.uniform", "mlx.nn.elu", "mlx.nn.gelu", "mlx.nn.gelu_approx", "mlx.nn.gelu_fast_approx", "mlx.nn.glu", "mlx.nn.hard_shrink", "mlx.nn.hard_tanh", "mlx.nn.hardswish", "mlx.nn.leaky_relu", "mlx.nn.log_sigmoid", "mlx.nn.log_softmax", "mlx.nn.losses.binary_cross_entropy", "mlx.nn.losses.cosine_similarity_loss", "mlx.nn.losses.cross_entropy", "mlx.nn.losses.gaussian_nll_loss", "mlx.nn.losses.hinge_loss", "mlx.nn.losses.huber_loss", "mlx.nn.losses.kl_div_loss", "mlx.nn.losses.l1_loss", "mlx.nn.losses.log_cosh_loss", "mlx.nn.losses.margin_ranking_loss", "mlx.nn.losses.mse_loss", "mlx.nn.losses.nll_loss", "mlx.nn.losses.smooth_l1_loss", "mlx.nn.losses.triplet_loss", "mlx.nn.mish", "mlx.nn.prelu", "mlx.nn.relu", "mlx.nn.relu6", "mlx.nn.selu", "mlx.nn.sigmoid", "mlx.nn.silu", "mlx.nn.softmax", "mlx.nn.softmin", "mlx.nn.softplus", "mlx.nn.softshrink", "mlx.nn.step", "mlx.nn.tanh", "Functions", "Initializers", "Layers", "Loss Functions", "Module", "Operations", "Optimizers", "mlx.optimizers.AdaDelta", "mlx.optimizers.Adafactor", "mlx.optimizers.Adagrad", "mlx.optimizers.Adam", "mlx.optimizers.AdamW", "mlx.optimizers.Adamax", "mlx.optimizers.Lion", "mlx.optimizers.Optimizer.apply_gradients", "mlx.optimizers.Optimizer.init", "mlx.optimizers.Optimizer.state", "mlx.optimizers.Optimizer.update", "mlx.optimizers.RMSprop", "mlx.optimizers.SGD", "mlx.optimizers.cosine_decay", "mlx.optimizers.exponential_decay", "mlx.optimizers.join_schedules", "mlx.optimizers.linear_schedule", "mlx.optimizers.step_decay", "Common Optimizers", "Optimizer", "Schedulers", "Random", "Transforms", "Tree Utils", "Compilation", "Distributed Communication", "Function Transforms", "Indexing Arrays", "Lazy Evaluation", "Conversion to NumPy and Other Frameworks", "Quick Start Guide", "Saving and Loading Arrays", "Unified Memory", "Using Streams"], "terms": {"i": [0, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 35, 40, 41, 45, 46, 47, 48, 49, 51, 56, 60, 61, 65, 71, 74, 87, 88, 91, 92, 94, 95, 98, 99, 102, 103, 104, 108, 112, 113, 114, 119, 123, 125, 130, 131, 136, 137, 138, 141, 144, 145, 149, 150, 151, 152, 153, 154, 157, 159, 160, 161, 162, 163, 167, 169, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 193, 194, 195, 197, 198, 199, 205, 206, 212, 214, 215, 217, 218, 220, 221, 222, 224, 225, 226, 229, 233, 239, 241, 242, 246, 247, 252, 254, 262, 263, 265, 270, 271, 274, 275, 277, 282, 287, 293, 297, 300, 302, 303, 304, 309, 311, 312, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329], "numpi": [0, 30, 31, 35, 42, 43, 44, 56, 61, 63, 78, 80, 83, 89, 106, 109, 133, 324, 326, 327], "like": [0, 40, 85, 156, 184, 270, 304, 306, 320, 321, 322, 324, 325, 326, 328], "arrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 174, 178, 194, 201, 208, 211, 216, 222, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 287, 290, 293, 296, 297, 298, 299, 300, 301, 302, 307, 308, 309, 310, 311, 312, 313, 320, 321, 322, 324, 325, 326, 328], "framework": 0, "design": [0, 317, 328], "effici": [0, 27, 183, 229, 324, 326], "flexibl": 0, "machin": [0, 307, 321], "learn": [0, 178, 189, 193, 195, 222, 225, 296, 297, 298, 299, 300, 301, 302, 307, 308], "appl": [0, 328], "silicon": [0, 328], "brought": 0, "you": [0, 174, 233, 241, 290, 317, 320, 321, 322, 323, 325, 327, 328], "research": 0, "The": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 70, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 193, 194, 195, 197, 198, 199, 201, 202, 206, 208, 212, 213, 214, 215, 218, 219, 220, 221, 223, 224, 225, 226, 229, 231, 233, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 287, 290, 293, 295, 296, 297, 298, 299, 300, 301, 302, 305, 307, 308, 309, 312, 315, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329], "close": [0, 35], "follow": [0, 27, 47, 91, 162, 174, 253, 254, 268, 296, 297, 298, 299, 300, 301, 302, 308, 317, 320, 321, 322, 328], "few": [0, 321, 324, 326], "except": [0, 6, 17, 18, 20, 21, 22, 189, 208, 323, 325], "also": [0, 13, 16, 19, 22, 30, 31, 42, 43, 44, 56, 63, 78, 80, 83, 89, 91, 106, 109, 133, 157, 158, 169, 174, 205, 219, 221, 223, 224, 232, 252, 280, 282, 289, 295, 320, 321, 322, 323, 324, 325, 326, 329], "ha": [0, 17, 18, 20, 21, 22, 29, 45, 46, 49, 65, 69, 95, 178, 188, 194, 197, 226, 293, 295, 320, 323, 324, 326, 328], "fulli": [0, 320, 321, 325, 328], "featur": [0, 9, 178, 188, 189, 193, 194, 195, 197, 224, 225, 226, 229, 241, 242, 320, 324], "which": [0, 2, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 36, 37, 38, 39, 41, 45, 46, 47, 48, 49, 51, 65, 75, 91, 95, 96, 107, 108, 112, 113, 114, 115, 116, 128, 129, 137, 144, 149, 152, 153, 157, 177, 183, 184, 186, 199, 201, 205, 229, 264, 267, 271, 274, 290, 303, 304, 317, 320, 321, 322, 323, 324, 328, 329], "main": [0, 6, 144, 161, 162, 174, 321], "differ": [0, 40, 133, 151, 274, 322], "between": [0, 23, 241, 263, 266, 267, 270, 311, 321, 324, 325, 328], "ar": [0, 2, 6, 12, 13, 15, 16, 18, 19, 21, 22, 23, 28, 29, 35, 36, 37, 38, 39, 40, 41, 47, 48, 51, 61, 74, 86, 87, 88, 91, 92, 94, 95, 96, 100, 103, 104, 115, 116, 128, 129, 137, 149, 152, 153, 157, 160, 161, 167, 178, 179, 180, 181, 182, 183, 184, 189, 193, 195, 197, 208, 221, 224, 242, 262, 264, 265, 289, 293, 302, 304, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328], "compos": [0, 174, 320, 322, 326], "function": [0, 1, 29, 35, 41, 45, 46, 47, 48, 49, 61, 119, 149, 152, 153, 158, 159, 161, 162, 163, 174, 186, 187, 190, 191, 192, 200, 202, 206, 213, 218, 222, 226, 227, 228, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 252, 253, 254, 255, 256, 257, 258, 260, 261, 276, 281, 283, 284, 285, 286, 287, 288, 290, 295, 304, 317, 319, 321, 323, 324, 325, 327], "transform": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 32, 158, 174, 178, 189, 195, 197, 205, 206, 218, 224, 229, 323], "automat": [0, 51, 321, 326, 327, 328], "differenti": 0, "vector": [0, 34, 41, 47, 137, 152, 153, 185, 264, 326], "comput": [0, 5, 9, 29, 41, 45, 46, 47, 56, 64, 86, 91, 106, 123, 130, 131, 141, 149, 150, 152, 158, 174, 178, 188, 189, 193, 194, 195, 206, 219, 224, 225, 229, 241, 244, 245, 246, 247, 253, 254, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 295, 296, 297, 299, 300, 301, 302, 306, 320, 321, 322, 326, 328], "graph": [0, 322], "optim": [0, 219, 320, 321, 322, 324], "lazi": [0, 293, 326], "onli": [0, 47, 91, 98, 151, 174, 205, 206, 208, 213, 215, 218, 219, 220, 293, 320, 321, 322, 327, 328], "materi": 0, "when": [0, 45, 46, 47, 49, 51, 179, 180, 181, 242, 246, 247, 268, 274, 293, 311, 317, 320, 321, 328], "need": [0, 91, 174, 219, 220, 233, 241, 317, 321, 322, 324, 325, 326, 328], "multi": [0, 10, 179, 180, 181, 323, 325], "devic": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 154, 155, 156, 165, 328, 329], "oper": [0, 10, 27, 28, 89, 123, 131, 138, 165, 174, 241, 302, 320, 321, 322, 323, 324, 325, 326, 328, 329], "can": [0, 2, 30, 31, 42, 43, 44, 47, 56, 63, 78, 80, 83, 89, 94, 95, 100, 103, 104, 106, 109, 113, 133, 144, 149, 163, 174, 177, 185, 199, 205, 218, 223, 231, 242, 264, 290, 293, 295, 303, 304, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329], "run": [0, 86, 165, 178, 201, 296, 297, 299, 300, 301, 320, 321, 324, 328, 329], "ani": [0, 160, 161, 162, 163, 164, 174, 186, 201, 202, 205, 214, 224, 241, 242, 290, 312, 319, 320, 322, 324, 326, 327, 328], "support": [0, 10, 23, 32, 35, 45, 46, 48, 49, 51, 61, 91, 98, 321, 322, 323, 325, 327], "cpu": [0, 48, 320, 328], "gpu": [0, 67, 320, 323, 328], "inspir": 0, "pytorch": [0, 189, 322], "jax": [0, 317], "arrayfir": 0, "A": [0, 7, 8, 10, 29, 41, 47, 48, 49, 51, 60, 61, 62, 67, 77, 91, 94, 95, 96, 98, 99, 100, 103, 104, 125, 129, 132, 149, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 174, 178, 183, 188, 189, 193, 195, 205, 209, 210, 213, 219, 220, 225, 231, 233, 241, 244, 245, 247, 254, 275, 276, 293, 295, 299, 301, 303, 304, 306, 311, 320, 321, 322, 324, 325], "notabl": 0, "from": [0, 18, 19, 21, 22, 26, 27, 32, 47, 51, 61, 65, 70, 73, 85, 91, 93, 94, 95, 96, 97, 100, 103, 115, 128, 131, 133, 137, 138, 143, 144, 154, 156, 160, 161, 162, 163, 164, 174, 197, 206, 208, 221, 244, 245, 246, 247, 249, 250, 265, 274, 290, 319, 320, 321, 322, 324, 325, 326, 327, 328], "unifi": 0, "memori": [0, 66, 68, 69, 70, 72, 73, 74, 241, 293, 297, 320, 324, 325], "model": [0, 115, 157, 158, 161, 162, 174, 201, 204, 206, 208, 212, 215, 217, 218, 219, 221, 241, 290, 293, 295, 303, 304, 306, 320, 321, 324], "live": [0, 328], "share": [0, 28, 91, 92, 151, 321], "perform": [0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 28, 32, 61, 92, 110, 123, 137, 174, 189, 241, 246, 247, 320, 321, 323, 324, 328], "type": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 73, 74, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 163, 174, 213, 241, 243, 244, 245, 246, 247, 248, 249, 250, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 320, 323], "without": [0, 131, 221, 289, 319, 320, 321, 324, 325, 328], "data": [0, 6, 20, 21, 26, 33, 50, 84, 103, 144, 146, 151, 155, 184, 243, 244, 245, 246, 247, 248, 249, 250, 320, 321, 323, 325], "copi": [0, 88, 124, 325], "current": [0, 67, 69, 91, 163, 174, 297, 321, 324], "build": [0, 246, 293, 320], "quick": 0, "start": [0, 9, 50, 75, 125, 163, 320, 323, 328], "guid": 0, "evalu": [0, 2, 41, 152, 174, 204, 215, 293, 295, 320, 326], "index": [0, 4, 6, 29, 65, 88, 137, 138, 149, 165], "save": [0, 51, 75, 91, 113, 114, 115, 116, 212, 324], "load": [0, 169, 208, 321], "compil": [0, 321, 322, 324], "convers": 0, "other": [0, 40, 47, 174, 207, 293, 302, 320, 321, 323, 324, 326], "distribut": [0, 94, 95, 96, 98, 99, 103, 104, 197, 244, 245, 246, 247, 249, 250, 265, 268, 273, 275, 290], "commun": 0, "us": [0, 9, 23, 28, 42, 45, 46, 47, 48, 49, 61, 68, 69, 70, 73, 91, 92, 107, 108, 109, 136, 160, 163, 167, 169, 174, 177, 183, 185, 186, 188, 194, 197, 199, 201, 205, 212, 219, 221, 223, 224, 226, 229, 233, 241, 242, 246, 247, 253, 254, 263, 290, 293, 295, 296, 297, 299, 300, 301, 302, 303, 304, 317, 319, 320, 321, 322, 323, 326, 328], "stream": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 154, 155, 156, 321, 328], "linear": [0, 157, 161, 174, 186, 187, 196, 208, 224, 226, 227, 228, 230, 232, 242, 251, 252, 253, 254, 255, 259, 278, 279, 280, 282, 290, 293, 304, 312, 320], "regress": [0, 270], "layer": [0, 7, 157, 174, 176, 177, 183, 184, 188, 189, 194, 195, 197, 198, 199, 215, 220, 223, 224, 226, 231, 241, 289, 293], "perceptron": 0, "llm": 0, "infer": [0, 26, 51, 144, 321], "random": [0, 176, 177, 178, 193, 198, 199, 208, 215, 320, 322, 328, 329], "fast": [0, 186, 254, 321, 328], "fft": 0, "algebra": 0, "metal": 0, "neural": [0, 185, 244, 245, 276, 290, 293, 307], "network": [0, 178, 183, 185, 244, 245, 290, 293, 307, 321], "tree": [0, 2, 29, 149, 153, 160, 161, 162, 163, 164, 303, 304, 306, 315, 322], "util": [0, 115, 174, 321], "custom": [0, 241], "extens": [0, 51, 75, 212, 327], "debugg": 0, "none": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 176, 177, 186, 198, 199, 201, 205, 206, 213, 218, 221, 226, 233, 241, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 297, 315, 323], "element": [1, 3, 5, 6, 24, 25, 28, 30, 31, 35, 36, 37, 38, 39, 42, 43, 44, 52, 53, 54, 55, 56, 57, 58, 59, 63, 65, 78, 80, 81, 83, 88, 89, 91, 92, 105, 106, 107, 109, 111, 119, 120, 121, 122, 126, 127, 133, 137, 139, 140, 143, 149, 151, 154, 182, 183, 184, 188, 192, 194, 200, 222, 226, 229, 257, 258, 260, 261, 276, 277, 279, 282, 283, 284, 285, 320, 322], "wise": [1, 3, 5, 24, 25, 30, 31, 35, 42, 43, 44, 52, 53, 54, 55, 56, 57, 58, 59, 63, 78, 80, 81, 83, 89, 105, 106, 109, 111, 119, 120, 121, 122, 126, 127, 133, 139, 140, 183, 184, 192, 200, 222, 257, 258, 260, 261, 276, 277, 279, 282, 283, 284, 285, 320], "invers": [1, 14, 15, 16, 17, 18, 19, 46], "erf": [1, 320], "paramet": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 201, 202, 205, 206, 208, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 231, 233, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 287, 289, 290, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 315, 320, 321, 322, 324], "input": [1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 77, 78, 79, 80, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102, 105, 106, 107, 108, 109, 110, 111, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 156, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 193, 194, 195, 197, 198, 199, 221, 224, 225, 226, 229, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 262, 263, 265, 266, 267, 268, 270, 271, 273, 275, 287, 290, 320, 322, 323, 326, 327], "return": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 174, 188, 194, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 215, 216, 218, 219, 220, 226, 243, 244, 245, 246, 247, 248, 249, 250, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 290, 293, 303, 319, 320, 321, 322, 323, 324, 325, 327, 328], "error": [1, 74, 125, 186, 252, 253, 254, 270, 272, 322, 325], "arg": [2, 115, 116], "an": [2, 6, 7, 10, 23, 26, 33, 45, 47, 51, 74, 79, 84, 85, 87, 90, 91, 92, 107, 108, 110, 125, 128, 135, 137, 138, 141, 142, 146, 153, 155, 156, 160, 161, 162, 163, 174, 176, 177, 182, 189, 194, 195, 197, 198, 199, 201, 221, 222, 224, 226, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 277, 290, 296, 306, 310, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329], "each": [2, 9, 28, 40, 45, 46, 49, 61, 65, 87, 91, 92, 95, 107, 115, 116, 125, 142, 145, 151, 153, 154, 183, 184, 185, 188, 189, 194, 226, 229, 241, 262, 264, 317, 320, 321, 324], "argument": [2, 29, 149, 161, 162, 163, 174, 242, 317, 321, 322, 327, 328, 329], "singl": [2, 41, 51, 65, 87, 152, 177, 199, 320, 323, 327], "If": [2, 7, 9, 20, 21, 22, 25, 26, 29, 35, 45, 47, 51, 60, 61, 62, 64, 65, 73, 74, 77, 84, 87, 88, 90, 95, 98, 107, 123, 124, 125, 130, 134, 136, 137, 138, 141, 143, 144, 149, 150, 153, 155, 157, 161, 163, 178, 179, 180, 181, 189, 195, 197, 206, 208, 218, 224, 226, 229, 231, 233, 242, 262, 264, 275, 297, 320, 321, 322, 324, 327, 328, 329], "given": [2, 4, 11, 12, 13, 14, 15, 16, 20, 21, 22, 26, 27, 47, 60, 62, 64, 73, 77, 82, 90, 98, 100, 110, 118, 123, 125, 130, 134, 136, 142, 143, 144, 146, 147, 148, 150, 165, 176, 177, 182, 198, 199, 205, 221, 263, 265, 271], "node": [2, 153, 162, 163], "python": [2, 160, 161, 162, 163, 164, 293, 303, 304, 306, 319, 321, 322, 325], "list": [2, 12, 13, 15, 16, 18, 19, 21, 22, 26, 29, 41, 47, 60, 62, 64, 65, 77, 84, 87, 90, 94, 95, 96, 98, 99, 100, 103, 104, 113, 123, 125, 129, 130, 134, 141, 142, 145, 149, 150, 152, 155, 160, 163, 164, 174, 206, 208, 209, 210, 211, 216, 218, 219, 220, 293, 299, 300, 301, 302, 311, 319, 320, 321, 322, 324], "tupl": [2, 4, 41, 47, 48, 49, 87, 91, 108, 128, 149, 152, 160, 161, 162, 163, 164, 176, 177, 180, 181, 198, 199, 208, 210, 231, 242, 297, 299, 300, 301, 302, 319, 322], "dict": [2, 51, 67, 113, 114, 115, 159, 211, 216, 219, 220, 293, 303, 304, 306, 319, 322, 327], "leav": [2, 161, 162, 163], "ignor": [2, 297], "exponenti": [3, 5, 230, 251, 280, 310], "axi": [4, 7, 8, 11, 14, 17, 18, 19, 20, 21, 22, 23, 32, 47, 60, 62, 64, 77, 79, 87, 88, 90, 95, 107, 123, 124, 125, 128, 129, 130, 134, 135, 137, 138, 142, 143, 144, 145, 150, 151, 153, 176, 177, 187, 198, 199, 226, 255, 261, 263, 264, 268, 273, 275, 283, 284, 323], "int": [4, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 28, 29, 33, 40, 47, 50, 60, 62, 64, 67, 68, 69, 70, 73, 74, 77, 79, 84, 87, 88, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 110, 123, 124, 125, 128, 129, 130, 134, 135, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 157, 165, 174, 176, 177, 178, 179, 180, 181, 185, 187, 188, 189, 193, 194, 195, 197, 198, 199, 221, 223, 224, 225, 226, 229, 233, 241, 255, 263, 264, 268, 273, 275, 293, 309, 311, 312, 313], "sequenc": [4, 12, 13, 15, 16, 18, 19, 21, 22, 26, 60, 62, 64, 77, 84, 90, 94, 95, 96, 98, 99, 100, 103, 104, 108, 123, 125, 128, 130, 134, 141, 142, 145, 150, 155, 178, 179, 188, 194, 226, 241, 317, 328], "add": [4, 56, 87, 91, 179, 180, 181, 322, 328], "size": [4, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 28, 32, 33, 40, 47, 69, 74, 91, 92, 95, 108, 125, 128, 151, 157, 174, 176, 177, 179, 180, 181, 185, 193, 198, 199, 223, 224, 242, 297, 321, 324, 325], "one": [4, 6, 7, 8, 47, 54, 61, 92, 95, 128, 133, 167, 218, 242, 264, 321, 328], "dimens": [4, 9, 18, 19, 21, 22, 23, 27, 28, 34, 45, 46, 47, 48, 49, 60, 61, 62, 64, 77, 90, 91, 95, 102, 130, 134, 138, 141, 145, 150, 178, 179, 180, 181, 183, 184, 187, 188, 189, 193, 194, 195, 221, 225, 226, 229, 241, 242, 255, 264, 320, 322], "ax": [4, 12, 13, 15, 16, 18, 19, 21, 22, 23, 34, 47, 60, 62, 64, 77, 87, 90, 123, 128, 130, 134, 135, 141, 145, 150, 322], "insert": [4, 328], "minu": 5, "1": [5, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 32, 34, 40, 47, 48, 61, 65, 74, 86, 88, 91, 95, 98, 99, 104, 119, 124, 137, 143, 144, 149, 159, 162, 163, 167, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 193, 194, 195, 197, 198, 199, 222, 225, 226, 229, 233, 239, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 280, 281, 283, 284, 285, 287, 290, 293, 295, 296, 297, 298, 299, 300, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 320, 321, 322, 323, 325, 326, 327, 328], "exp": [5, 56, 60, 96, 123, 251, 268, 280, 281, 285, 320, 328], "x": [5, 7, 8, 28, 32, 33, 47, 92, 96, 110, 115, 119, 147, 148, 154, 161, 163, 174, 176, 177, 178, 186, 187, 189, 193, 195, 196, 197, 198, 199, 200, 201, 222, 225, 227, 233, 239, 242, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 293, 295, 302, 320, 321, 322, 323, 324, 325, 326, 328], "greater": [5, 31, 88, 159, 239, 287], "precis": [5, 10, 174, 186, 225, 303, 320], "small": [5, 7, 8, 178, 189, 195, 225, 265, 270, 275, 320, 321, 328], "n": [6, 11, 13, 14, 16, 17, 20, 22, 32, 33, 98, 130, 146, 150, 176, 177, 178, 179, 180, 181, 183, 184, 188, 194, 198, 199, 226, 242, 270, 275, 321], "m": [6, 27, 32, 47, 146, 176, 177, 198, 199, 296, 320], "k": [6, 10, 27, 32, 143, 146, 147, 148, 176, 197, 198, 206], "0": [6, 10, 23, 27, 29, 32, 46, 47, 48, 66, 73, 87, 94, 99, 104, 107, 110, 125, 129, 130, 144, 146, 147, 148, 149, 150, 153, 159, 160, 162, 163, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 189, 190, 193, 195, 196, 198, 199, 222, 227, 229, 233, 237, 239, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 262, 264, 266, 267, 271, 274, 275, 277, 278, 279, 280, 286, 287, 290, 293, 296, 297, 299, 300, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 317, 320, 321, 322, 323, 324, 325, 326, 327], "dtype": [6, 23, 26, 33, 40, 47, 48, 50, 84, 96, 98, 99, 100, 103, 104, 144, 146, 151, 155, 167, 213, 242, 243, 244, 245, 246, 247, 248, 249, 250, 262, 264, 271, 309, 310, 311, 312, 313, 320, 321, 322, 323, 325, 326, 327], "float32": [6, 10, 32, 33, 40, 47, 48, 50, 84, 96, 98, 99, 103, 104, 146, 155, 167, 242, 243, 244, 245, 246, 247, 248, 249, 250, 262, 264, 271, 309, 310, 311, 312, 313, 320, 321, 322, 323, 324, 325, 326, 327], "creat": [6, 33, 132, 174, 293, 295, 311, 320, 323, 325], "ident": [6, 131, 174, 215], "matrix": [6, 27, 28, 33, 45, 46, 47, 48, 49, 61, 65, 91, 92, 98, 223, 224, 248, 290], "gener": [6, 18, 19, 50, 65, 94, 98, 99, 100, 103, 104, 241, 317, 320, 323, 324, 329], "diagon": [6, 144, 146, 147, 148], "number": [6, 28, 29, 33, 41, 50, 87, 91, 92, 95, 99, 102, 104, 107, 110, 141, 142, 146, 149, 152, 153, 157, 174, 178, 179, 180, 181, 183, 184, 189, 193, 221, 222, 241, 242, 244, 245, 246, 247, 309, 311, 312, 317, 320, 322, 329], "row": [6, 33, 91, 146], "output": [6, 7, 8, 9, 10, 17, 20, 21, 22, 26, 29, 32, 33, 35, 47, 50, 60, 62, 64, 65, 77, 84, 85, 88, 90, 94, 95, 96, 98, 99, 100, 103, 104, 115, 116, 123, 128, 130, 134, 138, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 176, 177, 178, 179, 180, 181, 193, 197, 198, 199, 221, 224, 239, 241, 242, 244, 245, 246, 247, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 287, 290, 320, 321, 322, 323, 324, 325, 326, 327, 328], "option": [6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 33, 38, 39, 45, 46, 47, 48, 49, 50, 51, 60, 62, 64, 65, 74, 77, 84, 87, 88, 90, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103, 104, 107, 108, 123, 124, 125, 128, 129, 130, 134, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 157, 160, 161, 162, 163, 176, 177, 178, 179, 180, 181, 188, 194, 197, 198, 199, 201, 205, 206, 208, 213, 218, 221, 223, 224, 226, 229, 233, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 296, 297, 298, 299, 300, 301, 302, 304, 307, 308, 309, 317, 320, 327, 329], "column": [6, 33, 91], "default": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 33, 35, 45, 46, 47, 48, 49, 50, 51, 60, 62, 64, 65, 73, 74, 77, 84, 88, 90, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103, 104, 107, 108, 110, 117, 118, 124, 125, 128, 129, 130, 132, 134, 136, 141, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 157, 167, 176, 177, 178, 179, 180, 181, 187, 188, 190, 193, 194, 196, 197, 198, 199, 201, 206, 208, 213, 215, 218, 221, 222, 223, 224, 226, 229, 233, 237, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 293, 296, 297, 298, 299, 300, 301, 302, 307, 308, 309, 317, 319, 320, 322, 325, 327, 329], "where": [6, 35, 91, 149, 153, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 193, 194, 195, 197, 198, 199, 205, 222, 225, 226, 239, 246, 247, 251, 252, 254, 265, 271, 277, 280, 282, 287, 304, 321, 322, 323], "all": [6, 13, 16, 19, 22, 27, 28, 49, 61, 87, 88, 128, 157, 174, 201, 202, 206, 209, 210, 211, 216, 218, 221, 233, 241, 242, 290, 293, 315, 317, 320, 323, 324, 326, 329], "equal": [6, 31, 35, 44, 83, 88, 100, 125, 193, 197], "zero": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 65, 72, 146, 147, 148, 156, 174, 176, 177, 182, 183, 184, 208, 243, 244, 245, 246, 247, 248, 249, 250, 290, 297, 323], "th": [6, 311], "whose": [6, 157, 158], "valu": [6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 35, 47, 49, 50, 67, 87, 94, 95, 96, 98, 99, 100, 103, 104, 113, 137, 138, 149, 153, 158, 160, 161, 162, 163, 167, 177, 182, 183, 184, 190, 193, 197, 199, 205, 221, 222, 237, 239, 241, 243, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 287, 293, 297, 300, 309, 310, 312, 313, 322], "weight": [7, 8, 161, 174, 208, 212, 223, 224, 262, 264, 293, 297, 300, 302, 304, 308, 322, 324], "bia": [7, 28, 91, 92, 161, 174, 179, 180, 181, 188, 194, 195, 197, 206, 208, 218, 221, 224, 226, 299, 300, 301, 304, 322], "ep": [7, 8, 178, 189, 193, 195, 225, 263, 265, 275, 296, 297, 298, 299, 300, 301, 307], "float": [7, 8, 9, 10, 25, 26, 32, 35, 40, 47, 92, 94, 99, 159, 167, 178, 182, 183, 184, 189, 193, 195, 201, 213, 225, 229, 233, 239, 241, 242, 243, 244, 245, 246, 247, 249, 250, 263, 264, 265, 267, 271, 274, 275, 286, 287, 296, 297, 298, 299, 300, 301, 302, 307, 308, 309, 310, 312, 313], "normal": [7, 8, 98, 103, 174, 176, 177, 178, 189, 193, 195, 198, 199, 225, 241, 244, 246, 325, 328], "respect": [7, 8, 27, 28, 29, 91, 149, 161, 174, 178, 186, 189, 193, 195, 293, 322, 326], "last": [7, 8, 13, 16, 18, 19, 21, 22, 23, 27, 28, 34, 45, 46, 48, 49, 61, 70, 95, 124, 141, 151, 179, 180, 181, 183, 184, 189, 242, 325], "multipl": [7, 8, 27, 28, 61, 80, 91, 92, 221, 233, 310, 311, 313, 320, 324, 327], "scale": [7, 8, 9, 10, 28, 32, 91, 92, 99, 159, 183, 184, 195, 221, 229, 230, 233, 242, 280, 297], "result": [7, 8, 28, 47, 61, 92, 98, 107, 129, 161, 162, 163, 233, 320, 322, 325], "should": [7, 8, 10, 41, 66, 75, 91, 138, 144, 149, 152, 157, 160, 174, 179, 180, 181, 183, 184, 215, 221, 231, 264, 266, 271, 293, 319, 320, 321, 322, 324, 325, 329], "dimension": [7, 8, 11, 12, 13, 14, 15, 16, 20, 21, 22, 176, 177, 178, 179, 180, 181, 185, 197, 198, 199, 223, 224, 233, 323, 325], "same": [7, 8, 17, 20, 21, 22, 28, 29, 35, 41, 87, 95, 110, 151, 152, 154, 162, 174, 177, 178, 182, 189, 193, 199, 223, 243, 244, 245, 246, 247, 248, 249, 250, 264, 275, 293, 303, 317, 320, 321, 323, 328], "set": [7, 9, 67, 73, 74, 117, 118, 132, 186, 195, 197, 204, 206, 213, 214, 215, 218, 219, 224, 229, 239, 263, 275, 287, 293, 297, 304, 317, 322, 324], "happen": [7, 241, 295, 320, 324], "addit": [7, 8, 10, 51, 178, 189, 195, 221, 225, 293, 322], "offset": [7, 9, 144], "ad": [7, 193, 293, 296, 297, 298, 299, 300, 301, 307, 321, 324, 327], "translat": [7, 195], "constant": [7, 8, 87, 174, 178, 189, 195, 225, 265, 275, 307, 309, 320, 325], "numer": [7, 8, 47, 56, 60, 123, 178, 189, 193, 195, 225, 263, 265, 275, 296, 297, 298, 299, 300, 301, 307, 320, 324], "stabil": [7, 8, 178, 189, 193, 195, 225, 263, 265, 296, 297, 298, 299, 300, 301, 307], "root": [8, 111, 126, 225], "mean": [8, 98, 99, 149, 174, 178, 189, 206, 225, 249, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 320, 322, 325], "squar": [8, 33, 46, 111, 126, 149, 161, 174, 225, 272, 274, 296, 297, 299, 300, 301, 322, 325], "rm": [8, 297], "norm": [8, 159, 189, 275, 301, 302], "dim": [9, 10, 185, 189, 193, 195, 221, 223, 225, 229, 233, 241], "tradit": [9, 183, 184, 229], "bool": [9, 28, 35, 40, 45, 47, 51, 60, 62, 64, 65, 71, 74, 77, 90, 92, 130, 134, 150, 178, 179, 180, 181, 188, 189, 193, 194, 195, 197, 201, 205, 206, 208, 213, 215, 218, 221, 224, 226, 229, 233, 241, 242, 262, 265, 297, 308], "base": [9, 47, 53, 55, 89, 229, 241, 293, 295, 301, 315, 317, 320, 323], "appli": [9, 10, 27, 49, 161, 162, 163, 174, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 202, 215, 222, 224, 225, 226, 227, 228, 230, 232, 234, 235, 236, 237, 238, 239, 240, 242, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 303, 306, 312, 315, 320, 321], "rotari": [9, 229], "posit": [9, 23, 29, 39, 45, 79, 88, 98, 144, 149, 161, 174, 179, 180, 181, 221, 229, 233, 265, 275], "encod": [9, 229, 233, 241, 264], "rotat": [9, 229], "larger": [9, 229, 302], "than": [9, 27, 30, 31, 43, 44, 45, 46, 49, 61, 73, 159, 161, 229, 239, 242, 271, 274, 287, 297, 302, 320, 322, 328], "rest": [9, 161, 162, 229], "left": [9, 42, 47, 91, 176, 177, 186, 198, 199, 229, 242, 253, 254, 265, 267, 275], "unchang": [9, 131, 229], "true": [9, 28, 35, 40, 45, 47, 51, 65, 74, 92, 123, 154, 157, 160, 161, 162, 163, 167, 174, 178, 179, 180, 181, 188, 189, 193, 194, 195, 197, 205, 206, 208, 215, 218, 224, 226, 229, 233, 241, 242, 262, 270, 297], "choos": [9, 229], "implement": [9, 10, 47, 185, 205, 221, 229, 231, 233, 239, 241, 242, 287, 296, 297, 298, 299, 301, 302, 303, 315, 320, 322], "consecut": [9, 91, 229], "angular": [9, 229], "frequenc": [9, 229, 233], "q": [10, 48], "v": [10, 174, 206, 325], "mask": [10, 215, 221, 323], "head": [10, 221, 241], "attent": [10, 206, 221, 233, 241], "o": [10, 194], "softmax": [10, 174, 261, 264], "t": [10, 28, 45, 92, 149, 174, 176, 188, 194, 198, 226, 296, 297, 298, 299, 300, 301, 302, 307, 308, 320, 322, 328], "group": [10, 28, 91, 92, 151, 157, 189, 223, 224, 321], "queri": [10, 221], "note": [10, 18, 19, 28, 35, 47, 68, 91, 95, 151, 157, 174, 225, 242, 325, 327], "regardless": 10, "For": [10, 27, 40, 47, 91, 164, 174, 178, 183, 201, 206, 215, 218, 224, 229, 233, 242, 244, 245, 246, 247, 290, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328], "pre": 10, "tile": 10, "match": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 68, 208, 242, 264, 321, 323, 325], "kei": [10, 67, 94, 95, 96, 98, 99, 100, 102, 103, 104, 160, 161, 205, 206, 218, 221, 304, 317, 319, 322], "typic": [10, 185, 295, 320, 324], "sqrt": [10, 178, 186, 189, 193, 195, 197, 225, 233, 244, 245, 246, 247, 253, 296, 298, 299, 300, 307, 320], "shape": [10, 11, 14, 17, 20, 21, 22, 26, 27, 41, 46, 61, 84, 85, 94, 95, 96, 98, 99, 100, 103, 104, 108, 138, 151, 152, 154, 155, 156, 174, 176, 177, 178, 179, 180, 181, 183, 184, 188, 193, 194, 197, 198, 199, 208, 226, 243, 244, 245, 246, 247, 248, 249, 250, 264, 275, 295, 320, 322, 323, 326, 328], "score": [10, 271], "union": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 32, 38, 39, 67, 102, 103, 132, 144], "One": [11, 14, 20, 111, 320, 322], "discret": [11, 12, 13, 14, 15, 16, 20, 21, 22, 185, 223], "fourier": [11, 12, 13, 14, 15, 16, 20, 21, 22], "correspond": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 60, 62, 77, 90, 134, 141, 153, 161, 322], "truncat": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 103], "pad": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 176, 177, 179, 180, 181, 198, 199], "along": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 28, 32, 47, 107, 123, 125, 129, 137, 138, 141, 142, 143, 144, 151, 174, 187, 226, 255], "dft": [11, 12, 13, 14, 15, 16, 20, 21, 22], "": [12, 13, 15, 16, 18, 19, 21, 22, 29, 47, 49, 51, 64, 86, 91, 95, 110, 113, 114, 130, 132, 149, 150, 151, 153, 158, 174, 177, 188, 194, 199, 205, 206, 208, 212, 213, 214, 218, 226, 295, 304, 305, 317, 320, 322, 324, 325, 326, 327, 328], "2": [12, 15, 17, 18, 19, 20, 21, 22, 23, 32, 40, 45, 46, 47, 48, 49, 55, 61, 91, 98, 102, 141, 144, 146, 147, 148, 159, 163, 167, 174, 176, 177, 180, 186, 196, 198, 199, 225, 233, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 264, 265, 267, 274, 275, 290, 293, 296, 298, 299, 300, 304, 307, 320, 321, 322, 323, 324, 325, 326, 327, 328], "two": [12, 15, 21, 27, 28, 30, 31, 35, 43, 44, 45, 46, 48, 49, 56, 61, 63, 78, 80, 83, 86, 135, 163, 177, 187, 194, 199, 255, 263, 320, 321, 322, 323, 328], "case": [13, 16, 17, 19, 20, 21, 22, 23, 45, 46, 48, 49, 61, 108, 128, 177, 183, 199, 239, 256, 274, 280, 286, 287, 303, 304, 320, 322, 326, 327, 328, 329], "over": [13, 16, 19, 22, 34, 47, 49, 50, 60, 62, 64, 77, 88, 90, 111, 123, 124, 130, 134, 141, 143, 150, 178, 179, 180, 181, 189, 195, 225, 264, 309, 312, 321, 322], "len": [13, 16, 19, 22, 32, 311], "rfft": 17, "real": [17, 18, 19, 20, 21, 22, 45], "contain": [17, 18, 19, 27, 28, 47, 57, 58, 59, 91, 125, 154, 159, 174, 205, 207, 208, 214, 241, 271, 290, 293, 320, 321, 322], "rfft2": 18, "complex": [18, 19, 20, 21, 22, 160, 167, 174, 220, 320, 322], "specifi": [18, 19, 26, 29, 47, 50, 79, 84, 95, 107, 135, 137, 138, 141, 144, 145, 149, 153, 155, 178, 239, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 287, 321, 322, 328], "treat": [18, 19, 21, 22, 137, 242, 320], "have": [18, 19, 21, 22, 28, 35, 61, 75, 95, 151, 160, 194, 221, 231, 302, 304, 319, 320, 321, 323, 324, 328], "rfftn": 19, "silent": [20, 21, 22], "cast": [20, 21, 22, 51, 201, 213, 325], "start_axi": 23, "end_axi": 23, "inclus": 23, "neg": [23, 38, 144, 196, 198, 199, 221, 265, 273, 275, 323], "after": [23, 25, 28, 66, 88, 91, 178, 189, 195, 201, 202, 206, 208, 215, 218, 219, 220, 221, 241, 274, 320, 328], "convert": [23, 93, 223, 224, 324, 325, 326], "outsid": 23, "valid": [23, 153, 160, 206, 218, 319], "rang": [23, 27, 50, 245, 247, 253, 254, 295, 309, 310, 311, 312, 313, 317, 320, 322, 324, 328], "clamp": 23, "ndim": [23, 47, 49, 242], "first": [23, 29, 42, 49, 57, 59, 61, 88, 102, 109, 135, 141, 144, 149, 160, 162, 163, 174, 177, 189, 199, 242, 263, 271, 297, 299, 300, 301, 304, 320, 322, 325, 328], "exampl": [23, 47, 48, 132, 137, 159, 162, 163, 174, 176, 177, 178, 193, 198, 199, 206, 208, 215, 218, 242, 243, 244, 245, 246, 247, 248, 249, 250, 262, 264, 271, 290, 295, 304, 309, 310, 311, 312, 313, 317, 322, 323, 324, 325, 326, 327], "mx": [23, 40, 47, 48, 51, 115, 149, 159, 174, 176, 177, 178, 193, 196, 198, 199, 201, 208, 212, 227, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 259, 262, 263, 264, 268, 271, 278, 288, 290, 293, 295, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329], "3": [23, 40, 47, 48, 159, 163, 181, 186, 242, 245, 247, 253, 258, 297, 302, 317, 320, 323, 325, 326], "4": [23, 28, 47, 91, 92, 115, 157, 163, 167, 176, 177, 178, 193, 198, 199, 223, 224, 241, 242, 244, 245, 246, 262, 320, 321, 323, 326, 328], "int32": [23, 40, 47, 100, 167, 242, 323, 326], "scalar": [25, 26, 29, 30, 31, 32, 35, 42, 43, 44, 47, 50, 56, 57, 58, 59, 61, 63, 78, 80, 83, 87, 89, 94, 100, 103, 104, 106, 109, 113, 133, 149, 151, 154, 158, 275, 322, 324, 326], "b": [25, 27, 30, 31, 34, 35, 42, 43, 44, 47, 56, 57, 59, 61, 63, 78, 80, 83, 86, 89, 91, 106, 109, 133, 141, 149, 162, 163, 187, 197, 226, 242, 255, 322, 323, 324, 325, 326, 327, 328], "integ": [25, 27, 28, 40, 47, 67, 87, 91, 92, 94, 100, 125, 141, 153, 167, 185, 213, 311, 323], "divis": [25, 91, 106], "either": [25, 30, 31, 42, 43, 44, 47, 56, 61, 63, 78, 80, 83, 89, 106, 109, 133, 149, 177, 199, 231, 242, 246, 247, 325], "point": [25, 92, 167], "equival": [25, 28, 32, 137, 186, 190, 191, 192, 220, 222, 224, 227, 228, 230, 232, 234, 235, 236, 237, 238, 240], "call": [25, 66, 70, 174, 185, 206, 218, 223, 231, 293, 295, 304, 320, 321, 322, 324], "floor": 25, "divid": [25, 91, 106, 321], "quotient": 25, "val": 26, "construct": [26, 84, 142, 155], "fill": [26, 85, 146, 156, 243, 244, 245, 246, 247, 249, 250], "must": [26, 28, 47, 94, 95, 98, 100, 103, 104, 154, 242, 325], "broadcast": [26, 30, 31, 35, 42, 43, 44, 56, 61, 63, 78, 80, 83, 89, 94, 95, 98, 103, 104, 106, 109, 133, 138, 154, 221], "unspecifi": [26, 60, 62, 64, 77, 84, 88, 90, 107, 123, 124, 130, 134, 137, 143, 144, 150, 155, 329], "lhs_indic": [27, 28], "rhs_indic": [27, 28], "level": [27, 28, 246, 247], "gather": [27, 28], "operand": 27, "indic": [27, 28, 29, 35, 36, 37, 38, 39, 49, 125, 137, 138, 149, 215, 217, 264, 271, 311, 323], "possibli": [27, 61, 159], "batch": [27, 28, 61, 98, 178, 179, 180, 181, 183, 184, 188, 194, 221, 226, 242, 324], "thi": [27, 28, 32, 35, 41, 45, 46, 47, 48, 49, 56, 60, 61, 62, 64, 66, 68, 77, 88, 90, 95, 118, 123, 124, 125, 130, 134, 137, 143, 150, 159, 162, 163, 174, 182, 183, 184, 187, 188, 194, 202, 203, 205, 206, 209, 210, 211, 216, 218, 219, 220, 221, 224, 226, 239, 244, 245, 246, 247, 253, 254, 255, 270, 287, 293, 304, 319, 320, 321, 322, 324, 325, 327], "more": [27, 45, 46, 49, 61, 73, 74, 113, 114, 167, 174, 178, 183, 229, 233, 241, 242, 244, 245, 246, 247, 317, 320, 321, 322, 323, 326, 328], "explicitli": [27, 174, 317], "take": [27, 29, 41, 63, 78, 85, 92, 138, 149, 152, 153, 156, 162, 163, 221, 317, 321, 322, 323, 327, 328, 329], "matmul": [27, 328], "flat": [27, 28, 160, 164], "e": [27, 28, 41, 119, 178, 179, 180, 181, 183, 184, 189, 193, 195, 206, 225, 260, 261, 283, 284, 289, 295, 298, 320, 324, 329], "a1": 27, "a2": 27, "AS": 27, "b1": 27, "b2": 27, "w": [28, 91, 92, 149, 162, 177, 178, 180, 181, 183, 184, 197, 199, 308, 322], "bias": [28, 91, 92, 188, 194, 206, 218, 221], "transpos": [28, 92], "group_siz": [28, 91, 92, 157, 223, 224], "64": [28, 91, 92, 157, 167, 223, 224], "bit": [28, 42, 91, 92, 109, 157, 167, 201, 223, 224, 225], "quantiz": [28, 51, 92, 223, 224], "gather_mm": 28, "similar": [28, 40, 161, 219, 220, 221, 263, 325, 327], "sinc": [28, 70, 293, 302, 311, 325, 328], "thei": [28, 35, 231, 266, 293, 302, 319, 320, 321, 324, 326, 327, 328], "repres": [28, 271, 275, 325], "pack": [28, 91, 92], "unsign": [28, 91, 92, 167], "per": [28, 91, 92, 157, 178, 189, 193, 195, 225, 315, 320, 321, 324], "defin": [28, 47, 92, 157, 160, 325], "whether": [28, 92, 188, 194, 205, 221, 226, 262, 265, 271], "multipli": [28, 91, 92, 182, 233, 242], "name": [28, 51, 91, 92, 113, 114, 115, 116, 174, 189, 205, 208, 210, 321, 323, 327], "we": [28, 91, 92, 174, 185, 223, 231, 300, 302, 317, 319, 320, 321, 322, 324, 328], "occupi": [28, 91, 92], "fun": [29, 41, 149, 152, 153, 320, 323, 324, 328], "callabl": [29, 41, 149, 152, 153, 157, 158, 160, 161, 162, 163, 201, 202, 205, 213, 226, 231, 241, 243, 244, 245, 246, 247, 248, 249, 250, 296, 297, 298, 299, 300, 301, 302, 307, 308, 309, 310, 311, 312, 313], "argnum": [29, 149, 322], "argnam": [29, 149], "str": [29, 47, 51, 65, 67, 75, 112, 113, 114, 115, 116, 149, 160, 164, 201, 202, 205, 206, 208, 210, 212, 218, 242, 246, 247, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "gradient": [29, 131, 149, 158, 159, 174, 206, 219, 224, 241, 270, 293, 295, 296, 297, 299, 300, 301, 302, 303, 306, 308, 320, 321, 322, 323, 324, 325, 326], "variabl": [29, 41, 149, 152, 153, 321], "neither": [29, 149], "nor": [29, 149], "provid": [29, 141, 149, 161, 163, 169, 174, 201, 206, 208, 218, 219, 220, 223, 224, 241, 242, 289, 293, 321, 327, 329], "keyword": [29, 115, 116, 149, 161, 174, 317, 327, 329], "It": [29, 118, 149, 159, 163, 174, 220, 224, 303, 315, 325, 327], "so": [29, 149, 182, 242, 295, 320, 321, 324, 328], "strict": [30, 43, 206, 208, 218], "style": [30, 31, 35, 42, 43, 44, 56, 61, 63, 78, 80, 83, 89, 106, 109, 133], "semant": [30, 31, 42, 43, 44, 56, 61, 63, 78, 80, 83, 89, 106, 109, 133, 328], "both": [30, 31, 40, 42, 43, 44, 47, 56, 63, 78, 80, 83, 89, 95, 106, 109, 133, 157, 176, 177, 193, 194, 198, 199, 295, 320, 321, 322, 326, 328], "comparison": [30, 31, 43, 44, 83], "walsh": 32, "hadamard": 32, "final": [32, 309, 312], "scipi": 32, "linalg": 32, "import": [32, 47, 115, 149, 160, 161, 162, 163, 164, 174, 176, 177, 178, 193, 198, 199, 208, 242, 262, 264, 271, 290, 293, 320, 321, 322, 323, 324, 325, 326], "y": [32, 154, 174, 178, 183, 189, 193, 195, 197, 225, 266, 271, 274, 295, 298, 320, 321, 322, 324, 325], "12": [32, 311], "20": [32, 47], "28": 32, "8192": 32, "16384": 32, "float16": [32, 51, 167, 201, 324, 325], "bfloat16": [32, 167, 325], "factor": [32, 45, 48, 242, 264, 310, 313], "ordinari": 34, "product": [34, 41, 61, 86, 90, 141, 152, 221, 326], "d": [34, 47, 61, 65, 86, 137, 144, 146, 147, 148, 164, 181, 184, 188, 194, 226, 296, 299, 301, 328], "higher": [34, 271, 322], "sum": [34, 47, 60, 123, 141, 144, 174, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 321, 323, 325], "rtol": 35, "1e": [35, 178, 189, 193, 195, 196, 225, 263, 265, 275, 296, 297, 298, 299, 300, 301, 304, 307, 309, 310, 311, 312, 313], "05": [35, 178, 189, 193, 195, 225], "atol": 35, "08": [35, 263, 298, 299, 300, 301, 307], "equal_nan": 35, "fals": [35, 40, 45, 47, 51, 60, 62, 64, 65, 74, 77, 90, 130, 134, 150, 154, 157, 160, 161, 162, 163, 167, 189, 193, 195, 197, 206, 208, 218, 221, 224, 229, 233, 241, 242, 262, 265, 297, 308, 325], "boolean": [35, 36, 37, 38, 39, 57, 58, 59, 167, 217, 323], "within": 35, "toler": 35, "infinit": 35, "consid": [35, 160, 161, 162, 189, 319], "sign": [35, 167, 302], "nan": [35, 37], "unless": [35, 47, 293], "ab": [35, 47, 149, 189, 193, 195, 200, 225, 254, 276, 320], "unlik": [35, 183, 184, 214], "array_equ": 35, "rel": [35, 297, 320], "absolut": [35, 253, 254, 274], "inifn": 36, "infin": [36, 38, 39, 198, 199, 301], "dtypecategori": [40, 167], "check": [40, 71, 208, 322, 323], "subtyp": [40, 167], "anoth": [40, 61, 133, 154, 167, 174, 201, 320, 322, 323, 328], "subdtyp": 40, "float64": 40, "conveni": 40, "object": [40, 115, 153, 160, 161, 162, 163, 167, 183, 241, 319], "allow": [40, 159, 174, 220, 293, 315, 321, 323, 326], "too": [40, 320, 324], "inexact": 40, "signedinteg": 40, "primal": [41, 152], "tangent": [41, 139, 140, 240, 288], "jacobian": [41, 152, 326], "shift": [42, 109, 178], "second": [42, 57, 59, 61, 109, 135, 144, 149, 177, 199, 263, 271, 297, 299, 300, 301, 322, 328], "bitwis": [42, 109], "less": [44, 88, 229, 274], "upper": [45, 91, 100, 103, 104, 250], "decomposit": [45, 49], "symmetr": 45, "semi": [45, 98], "definit": [45, 98], "least": [45, 46, 48, 49, 91], "behaviour": 45, "undefin": [45, 88, 98, 323], "triangular": 45, "lower": [45, 91, 100, 103, 104, 146, 250], "trinagular": 45, "l": [45, 174, 176, 178, 179, 188, 194, 198, 226, 274], "dot": [45, 46, 141, 160, 210, 221], "u": [45, 49, 197, 220, 315, 324], "ainv": 46, "ey": 46, "ord": 47, "keepdim": [47, 60, 62, 64, 77, 90, 123, 130, 134, 150], "depend": [47, 188, 194, 226, 321, 323, 327, 328], "flatten": [47, 86, 88, 107, 124, 137, 138, 143, 160], "order": [47, 88, 91, 143, 174, 189, 219, 231, 304, 320, 322], "see": [47, 73, 113, 114, 157, 167, 174, 178, 183, 186, 190, 191, 192, 204, 222, 223, 224, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 240, 242, 244, 245, 246, 247, 252, 253, 254, 280, 320, 321, 322, 323, 326, 328], "tabl": [47, 167, 185], "under": 47, "frobeniu": 47, "matric": [47, 48, 49], "hold": [47, 320], "strictli": 47, "speak": 47, "mathemat": 47, "mai": [47, 157, 183, 321, 322, 323], "still": [47, 320, 324], "variou": 47, "purpos": 47, "calcul": [47, 265, 271, 297], "fro": 47, "inf": [47, 221], "max": [47, 63, 198, 199, 222, 257, 258, 263, 265, 266, 271, 275, 277, 279, 297, 301, 320, 322, 328], "min": [47, 78, 222, 257, 258, 277, 279], "below": [47, 146, 148, 167, 242, 324], "largest": [47, 143], "sing": 47, "smallest": 47, "singular": [47, 49], "nuclear": 47, "yet": [47, 174, 293, 304, 322, 323, 324, 326], "_f": 47, "sum_": [47, 176, 177, 270], "j": [47, 183, 298, 299, 301], "a_": 47, "rais": [47, 74, 89, 125, 208], "valueerror": [47, 208, 322], "refer": [47, 193, 200, 214, 244, 245, 246, 247, 254, 276, 323], "g": [47, 91, 194, 289, 307, 308, 324, 329], "h": [47, 177, 178, 180, 181, 183, 184, 188, 194, 199, 226, 322, 324], "golub": 47, "c": [47, 176, 177, 178, 179, 180, 181, 183, 184, 193, 194, 198, 199, 325, 326, 328], "f": [47, 174, 194, 300, 320, 325], "van": 47, "loan": 47, "baltimor": 47, "md": 47, "john": 47, "hopkin": 47, "univers": 47, "press": 47, "1985": 47, "pg": 47, "15": [47, 163, 320], "la": 47, "arang": [47, 167, 242, 323, 325], "9": [47, 264, 296, 299, 300, 301, 302, 304, 310, 313, 325], "reshap": [47, 242, 323], "7": [47, 91, 323], "74597": 47, "6": [47, 115, 228, 241, 245, 253, 254, 258, 265, 275, 279, 307, 320, 323, 326], "5": [47, 74, 94, 163, 176, 178, 182, 183, 184, 186, 190, 193, 198, 237, 242, 243, 246, 247, 253, 256, 274, 286, 290, 307, 309, 310, 320, 322, 323], "84804": 47, "41421": 47, "23607": [47, 48], "74166": 47, "24264": 47, "8": [47, 91, 167, 177, 193, 199, 241, 263, 296, 297, 298, 299, 300, 301, 307, 320, 323, 326, 328], "11": 47, "225": 47, "assum": [48, 161, 174, 176, 177, 189, 198, 199], "r": [48, 149, 183, 188], "894427": 48, "447214": 48, "57771": 48, "iter": [49, 161, 162, 317, 320, 324], "combin": [49, 163], "vt": 49, "diag": 49, "stop": [50, 76, 131, 322, 323], "num": [50, 102], "50": 50, "evenli": 50, "space": [50, 273], "interv": [50, 100, 104], "sampl": [50, 94, 95, 96, 98, 100, 103, 104, 244, 245, 246, 247, 249, 250, 265, 271, 275, 317, 320], "file": [51, 112, 113, 114, 115, 116, 208, 212, 321, 322, 327], "format": [51, 112, 113, 114, 115, 116, 325], "return_metadata": 51, "binari": [51, 112, 113, 114, 115, 116, 151, 239, 262, 287, 320], "npy": [51, 112, 327], "npz": [51, 115, 116, 208, 212, 327], "safetensor": [51, 114, 208, 212, 324, 327], "gguf": [51, 113, 327], "metadata": [51, 113, 114], "matadata": 51, "dictionari": [51, 67, 113, 114, 159, 160, 163, 174, 205, 214, 219, 220, 305, 319, 327], "map": [51, 161, 185, 201], "unsupport": 51, "tensor": [51, 141, 176, 177, 198, 199, 275, 325], "natur": [52, 54, 324], "logarithm": [52, 53, 54, 55], "10": [53, 110, 115, 161, 174, 208, 290, 311, 313, 320, 321, 323], "log": [54, 56, 60, 260, 261, 265, 268, 270, 273, 285], "plu": 54, "stabl": [56, 60, 123, 270], "version": [56, 60, 91, 123, 153, 317, 322, 323], "logic": [57, 58, 59], "reduct": [60, 62, 77, 90, 163, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 321], "reduc": [60, 62, 64, 77, 90, 130, 134, 150, 163, 178, 241, 270], "entir": [60, 62, 64, 77, 90, 130, 134, 150, 183, 184], "keep": [60, 62, 64, 77, 90, 130, 134, 150, 174, 205, 322, 324], "singleton": [60, 61, 62, 64, 77, 90, 130, 134, 150], "prepend": 61, "its": [61, 88, 102, 146, 158, 164, 174, 224, 299, 300, 301, 321, 325, 328], "make": [61, 82, 118, 174, 309, 310, 312, 313, 320, 324, 326, 328], "similarli": [61, 322, 324], "append": [61, 320, 324], "In": [61, 91, 161, 174, 183, 189, 293, 296, 298, 299, 301, 302, 303, 319, 320, 321, 322, 324, 327, 328], "remov": [61, 95, 128, 264], "standard": [61, 96, 99, 130, 241, 244, 246, 249, 321, 326], "spars": 65, "xy": 65, "multidimension": 65, "coordin": 65, "grid": 65, "non": [65, 216, 226, 276, 293], "dens": [65, 328], "cartesian": 65, "ij": 65, "clear": 66, "cach": [66, 68, 69, 73, 320], "get_cache_memori": 66, "get": [67, 68, 69, 70, 97, 174, 320, 322, 324, 328], "inform": [67, 113, 114, 167, 174, 178, 186, 221, 322, 328], "about": [67, 324, 328], "system": [67, 68, 69], "architectur": [67, 174, 220, 328], "max_buffer_s": 67, "max_recommended_working_set_s": 67, "memory_s": 67, "string": [67, 325, 327], "activ": [68, 183, 239, 241, 256, 276, 286, 287, 289, 320], "byte": [68, 69, 70, 73, 74, 167], "alwai": [68, 160, 322], "report": [68, 74], "becaus": [68, 174, 324], "doe": [68, 151, 159, 174, 320, 323, 324, 325], "includ": [68, 69, 74, 195, 202, 214, 224, 265, 320, 322, 323, 326, 327, 329], "buffer": [68, 325], "been": [69, 324], "alloc": [69, 73, 74, 293], "peak": [70, 72], "amount": [70, 176, 198], "maximum": [70, 74, 159, 174, 196, 227, 233, 253, 254, 259, 278, 293, 324], "record": [70, 324], "begin": [70, 91, 177, 188, 194, 199, 239, 256, 267, 274, 280, 286, 287], "program": [70, 321], "execut": [70, 325, 328], "reset_peak_memori": 70, "back": [71, 325], "end": [71, 91, 177, 188, 194, 199, 239, 256, 267, 274, 280, 286, 287, 309, 312], "avail": [71, 169, 328], "reset": 72, "limit": [73, 74, 323], "free": 73, "reclaim": 73, "next": 73, "To": [73, 174, 290, 320, 321, 322, 326], "disabl": [73, 320], "set_memory_limit": 73, "detail": [73, 174, 183, 229, 233, 242, 244, 245, 246, 247, 296, 298, 299, 301, 302, 323, 326], "previou": [73, 74], "relax": 74, "wait": 74, "schedul": [74, 295, 309, 310, 311, 312, 313, 315, 328], "task": [74, 270], "complet": [74, 219, 220, 322, 328], "exceed": 74, "otherwis": [74, 157, 160, 161, 162, 163, 206, 208, 218, 239, 241, 242, 256, 262, 267, 274, 286, 287, 324, 325], "potenti": 74, "swap": [74, 135, 220], "time": [74, 142, 174, 176, 177, 188, 194, 198, 199, 226, 320, 322, 324, 328], "recommend": [74, 302], "work": [74, 320, 321, 322, 323, 324], "path": [75, 115, 116, 157, 162, 208, 321], "captur": [75, 76, 174, 320], "gputrac": 75, "sourc": [79, 145, 321], "destin": 79, "move": [79, 328], "new": [79, 82, 108, 129, 145, 151, 161, 162, 213, 221, 293, 295, 306, 311, 320, 323, 324, 325], "negat": 81, "Not": [83, 320], "ones": [85, 115, 146, 219, 220, 321, 323], "pass": [86, 87, 149, 158, 160, 161, 162, 174, 206, 218, 219, 220, 231, 320, 321, 324], "op": [86, 151, 206, 324], "beforehand": 86, "pad_with": 87, "constant_valu": 87, "pad_width": 87, "edg": [87, 242, 320], "before_1": 87, "after_1": 87, "before_2": 87, "after_2": 87, "before_n": 87, "after_n": 87, "pair": [87, 208, 229], "before_i": 87, "after_i": 87, "extend": 87, "side": [87, 176, 177, 198, 199, 320], "kth": 88, "smaller": [88, 302, 320], "sort": [88, 143], "befor": [88, 205, 241, 304, 321, 323, 324], "everi": [91, 161, 313, 322], "togeth": [91, 161, 162, 321], "henc": [91, 320], "particular": [91, 189], "2d": [91, 178, 183], "32": [91, 92, 167, 177, 199, 225, 320], "formal": 91, "w_1": 91, "w_g": 91, "represent": [91, 151, 160, 164], "hat": 91, "w_i": 91, "align": [91, 177, 188, 194, 199], "alpha": [91, 251, 275, 277, 280, 300, 307], "max_i": 91, "beta": [91, 178, 189, 193, 195, 274, 299, 300, 301, 302], "min_i": 91, "frac": [91, 119, 176, 177, 178, 182, 183, 184, 189, 193, 195, 197, 198, 199, 225, 244, 245, 246, 247, 263, 265, 267, 270, 281, 283, 284, 296, 298, 299, 300, 301, 307], "textrm": [91, 186, 187, 252, 255], "round": 91, "right": [91, 109, 176, 177, 186, 198, 199, 242, 253, 254, 265, 267, 275], "abov": [91, 147, 174, 242, 300, 321, 322, 323, 324, 328], "fit": [91, 328], "instanc": [91, 164, 174, 193, 201, 202, 203, 206, 208, 209, 210, 215, 218, 219, 220, 231, 293, 325], "1st": 91, "signific": 91, "2nd": 91, "etc": [91, 174, 242, 321], "abl": 91, "dequant": 91, "w_q": 91, "angl": [93, 196], "degre": [93, 275], "p": [94, 174, 182, 183, 184, 275, 299, 301], "prng": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 317], "logit": [95, 262, 264, 320], "num_sampl": 95, "unnorm": [95, 262, 264], "most": [95, 174, 306, 320, 321, 322, 323, 324], "compat": [95, 98, 327], "draw": 95, "uint32": [95, 167], "cdf": [96, 186, 252], "accord": [96, 154, 157, 221, 244, 245, 246, 247], "seed": 97, "cov": 98, "jointli": 98, "covari": [98, 178], "behavior": [98, 270, 323, 324], "empti": 98, "determin": [98, 163, 167, 212, 327], "loc": 99, "deviat": [99, 130, 244, 246, 249], "low": [100, 104, 250, 290], "high": [100, 104, 174, 185, 250, 290], "probabl": [100, 182, 183, 184, 224, 262, 264, 268, 328], "half": [100, 104, 229, 324], "open": [100, 104], "bound": [100, 103, 104, 186, 250, 320, 323, 328], "roadcast": 100, "global": [101, 159, 317, 320], "sub": [102, 144, 157], "domain": [103, 321], "uniformli": 104, "repetit": 107, "while": [108, 229, 324, 325], "preserv": [108, 322], "decim": 110, "basic": [110, 322], "place": [110, 157, 321, 324, 325], "reciproc": 111, "arr": [112, 323], "document": [113, 114, 167, 320, 322, 323], "1d": [113, 138], "obj": 113, "kwarg": [115, 116, 329], "sever": [115, 116, 320, 327], "uncompress": 115, "my_path": 115, "nn": [115, 161, 174, 290, 293, 295, 304, 306, 320, 324], "tree_flatten": [115, 161, 164, 174], "transformerencod": 115, "128": [115, 174], "flat_param": 115, "associ": [115, 116, 324], "compress": 116, "chang": [118, 151, 219, 224, 242, 267, 274, 320, 325], "logist": [119, 254, 282], "mathrm": [119, 193], "sine": [121, 122, 322], "hyperbol": [122, 140, 240, 288], "full": [123, 219, 220, 265, 320, 321, 324], "indices_or_sect": 125, "mani": [125, 179, 180, 181, 185, 223, 320, 321, 324], "section": [125, 275, 320, 321, 322], "possibl": [125, 185, 223, 320, 321, 323, 328], "subarrai": 125, "length": [128, 178, 179, 188, 194, 226, 311], "ddof": [130, 150], "divisor": [130, 150], "varianc": [130, 150, 178, 189, 265], "being": [131, 174], "prevent": [131, 275, 325], "flow": [131, 324], "through": [131, 241, 302, 320, 322, 325], "streamcontext": 132, "context": 132, "manag": [132, 317, 321, 328], "axis1": [135, 144], "axis2": [135, 144], "taken": [137, 144], "prior": [137, 138], "As": [137, 174, 320], "integr": [137, 324], "These": [138, 264, 328], "exclud": 138, "rep": 142, "repeat": 142, "necessarili": 143, "top": [143, 197, 242], "select": [143, 154, 201, 205, 213], "revers": [145, 233], "elsewher": [146, 323], "col": 146, "triangl": 146, "loss": [149, 174, 295, 320, 321, 322, 324], "remain": [149, 162, 182, 183, 184, 321], "anyth": [149, 324], "def": [149, 174, 293, 320, 321, 322, 323, 324, 325, 328], "mse": 149, "param": [149, 174, 290, 322], "target": [149, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 320], "forward": [149, 320, 324], "lvalu": 149, "dlvalu": 149, "dparam": 149, "grad": [149, 159, 295, 303, 320, 321, 322, 323, 324, 326], "lasso": 149, "l1": [149, 267, 269, 270, 274], "do": [151, 174, 207, 218, 290, 293, 300, 320, 321, 322, 324], "impli": 151, "underli": 151, "gaurante": 151, "cotang": 152, "in_ax": [153, 322], "out_ax": [153, 322], "prefix": [153, 160], "condit": [154, 328], "modul": [157, 158, 231, 241, 290, 306, 319, 320, 324], "class_pred": 157, "predic": [157, 213], "By": [157, 213, 322, 325], "to_quant": 157, "method": [157, 165, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 212, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 293, 296, 297, 298, 299, 300, 301, 302, 304, 307, 308, 315], "embed": [157, 174, 223, 229, 233, 263], "updat": [157, 161, 163, 178, 201, 202, 208, 213, 214, 215, 220, 295, 297, 300, 302, 303, 304, 308, 309, 310, 311, 312, 313, 320, 321, 324], "leaf": [157, 160, 161, 162, 163, 205], "core": [157, 174, 176, 177, 178, 193, 198, 199, 208, 211, 213, 216, 242, 243, 244, 245, 246, 247, 248, 249, 250, 262, 264, 271, 290, 293, 295, 320, 321, 325, 326], "receiv": [157, 311, 325], "itself": [157, 304], "fn": [158, 161, 162, 163, 326], "wrt": 158, "trainabl": [158, 174, 293], "max_norm": 159, "clip": [159, 297], "ensur": [159, 270, 321], "exce": 159, "down": 159, "proportion": 159, "w1": 159, "w2": 159, "clipped_grad": 159, "total_norm": 159, "print": [159, 160, 161, 162, 164, 174, 317, 320, 321, 322, 323, 324, 325, 326], "rescal": 159, "origin": [159, 178, 214, 244, 245, 246, 247, 296, 297, 298, 299, 301, 302, 325], "is_leaf": [160, 161, 162, 163], "notat": [160, 210], "arbitrari": [160, 293], "depth": [160, 181, 184, 322], "hello": [160, 164], "identifi": [160, 319], "charact": 160, "discard": 160, "collect": [161, 162, 319], "item": [161, 324, 325, 326], "superset": [161, 303], "extra": [161, 162], "closer": 161, "itertool": 161, "starmap": 161, "decid": [161, 205], "what": 161, "constitut": 161, "dict_kei": [161, 304], "lambda": [161, 162, 163, 174, 190, 201, 206, 213, 237, 256, 280, 286, 296, 297, 298, 299, 300, 301, 302, 307, 308, 320, 321, 322], "process": [161, 162, 184, 185, 241, 319, 321], "upon": [161, 162], "tree_map": [162, 174, 321], "new_tre": 162, "_": [162, 174, 309, 310, 311, 312, 313, 317, 320, 324, 328], "initi": [163, 174, 178, 189, 193, 195, 197, 222, 225, 243, 244, 245, 246, 247, 248, 249, 250, 293, 304, 309, 310, 312, 313, 320, 321, 324], "accumul": [163, 225], "acc": 163, "nest": [163, 174, 293, 319, 322], "recreat": 164, "world": [164, 321], "42": 164, "class": [165, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 293, 296, 297, 298, 299, 300, 301, 302, 307, 308, 315], "__init__": [165, 174, 293], "self": [165, 174, 276, 293], "attribut": [165, 214, 293, 315], "show": [167, 320], "descript": 167, "bool_": 167, "uint8": 167, "uint16": 167, "16": [167, 176, 193, 198, 201, 293], "uint64": 167, "int8": 167, "int16": 167, "int64": 167, "brain": 167, "e8": 167, "m7": 167, "ieee": 167, "e5": 167, "m10": 167, "complex64": 167, "hierarchi": 167, "issubdtyp": 167, "categori": 167, "mlx": [169, 174, 290, 293, 295, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328], "packag": [169, 290, 321], "mpi": 169, "librari": [169, 174], "runtim": [169, 320, 321], "made": 169, "write": [174, 325], "arbitrarili": [174, 319, 322, 326], "done": [174, 182, 225, 320, 321, 324, 325], "value_and_grad": [174, 219, 293, 295, 306, 320, 322, 325, 326], "howev": [174, 186, 189, 304, 317, 320, 321, 324, 325], "requir": [174, 321, 324, 325], "user": 174, "again": [174, 320], "simpl": [174, 185, 289, 320, 321, 322, 324], "well": [174, 206, 218, 221, 324], "handl": [174, 320], "state": [174, 188, 194, 226, 295, 304, 317, 320], "manual": 174, "solv": 174, "problem": 174, "intuit": 174, "wai": [174, 242, 320, 321, 322, 323], "freez": [174, 218, 293], "them": [174, 206, 218, 321, 328], "finetun": 174, "mlp": [174, 241, 295], "in_dim": [174, 293], "out_dim": [174, 293], "super": [174, 293], "__call__": [174, 293], "enumer": 174, "els": [174, 206, 321, 324], "noth": [174, 324], "lazili": 174, "access": [174, 293, 304, 321, 324, 328], "caus": [174, 320, 324], "thu": 174, "forc": [174, 321, 326], "eval": [174, 293, 295, 320, 321, 322, 324, 326], "doesn": 174, "matter": 174, "how": [174, 176, 177, 179, 180, 181, 185, 198, 199, 223, 242, 303, 320, 323, 328], "local": [174, 183, 321], "scope": 174, "could": 174, "l2_loss": 174, "y_hat": 174, "instead": [174, 220, 233, 321, 322, 324], "trainable_paramet": [174, 205, 304], "loss_and_grad": 174, "workhors": 174, "Its": 174, "recurs": [174, 205, 206, 211, 216, 218, 293], "those": 174, "submodul": [174, 202, 206, 207, 218, 220], "public": 174, "member": [174, 211, 216], "extract": [174, 205, 293, 321], "track": [174, 178], "frozen": [174, 206, 216, 218, 224, 293], "individu": [174, 183, 184], "larg": [174, 221, 270, 320, 321, 324], "subset": [174, 205], "action": 174, "simplest": [174, 321], "displai": 174, "input_dim": [174, 197, 224], "output_dim": [174, 197, 224], "count": [174, 311], "num_param": 174, "preclud": 174, "pure": [174, 295], "There": [174, 242, 320], "easi": [174, 321], "pattern": [174, 324], "achiev": [174, 321], "other_input": 174, "necessari": 174, "wrap": 174, "sure": [174, 320], "train": [174, 178, 182, 183, 184, 204, 206, 218, 244, 245], "apply_to_modul": [174, 206], "children": 174, "filter_and_map": 174, "leaf_modul": 174, "load_weight": [174, 324], "named_modul": 174, "save_weight": 174, "set_dtyp": 174, "unfreez": [174, 206], "update_modul": 174, "alibi": 174, "avgpool1d": 174, "avgpool2d": 174, "batchnorm": 174, "conv1d": 174, "conv2d": 174, "conv3d": 174, "dropout": [174, 183, 184, 215, 241, 320], "dropout2d": 174, "dropout3d": 174, "gelu": [174, 253, 254, 320], "glu": 174, "groupnorm": 174, "gru": 174, "hardshrink": [174, 256], "hardtanh": [174, 257], "hardswish": 174, "instancenorm": 174, "layernorm": 174, "leakyrelu": 174, "lstm": 174, "maxpool1d": 174, "maxpool2d": 174, "mish": 174, "multiheadattent": 174, "prelu": 174, "quantizedembed": 174, "quantizedlinear": 174, "rmsnorm": 174, "relu": [174, 222, 241, 277, 290], "relu6": 174, "rnn": [174, 188], "rope": 174, "selu": 174, "sequenti": [174, 290], "silu": 174, "sinusoidalpositionalencod": 174, "softmin": 174, "softshrink": 174, "softsign": 174, "softplu": [174, 200, 276], "step": [174, 188, 194, 226, 297, 304, 309, 311, 312, 313, 320, 321], "tanh": [174, 186, 188, 194, 200, 226, 253, 276], "upsampl": 174, "elu": [174, 280], "gelu_approx": [174, 186, 252], "gelu_fast_approx": [174, 186, 252], "hard_shrink": [174, 190], "hard_tanh": [174, 191], "leaky_relu": 174, "log_sigmoid": 174, "log_softmax": 174, "sigmoid": [174, 232, 254, 260, 282], "binary_cross_entropi": [174, 320], "cosine_similarity_loss": 174, "cross_entropi": 174, "gaussian_nll_loss": 174, "hinge_loss": 174, "huber_loss": 174, "kl_div_loss": 174, "l1_loss": 174, "log_cosh_loss": 174, "margin_ranking_loss": 174, "mse_loss": 174, "nll_loss": 174, "smooth_l1_loss": 174, "triplet_loss": 174, "init": [174, 222, 290, 295, 309, 310, 312, 313, 321], "uniform": [174, 197, 208, 245, 247, 290, 317, 320, 322, 328], "glorot_norm": 174, "glorot_uniform": 174, "he_norm": 174, "he_uniform": 174, "kernel_s": [176, 177, 179, 180, 181, 198, 199], "stride": [176, 177, 179, 180, 181, 198, 199, 229, 323], "averag": [176, 177, 296, 297, 299, 300, 301, 321], "pool": [176, 177, 198, 199, 328], "l_": [176, 198, 267], "out": [176, 177, 183, 184, 198, 199, 215, 320, 321, 322, 323], "text": [176, 177, 186, 188, 194, 198, 199, 200, 226, 239, 244, 245, 246, 247, 253, 256, 257, 258, 265, 266, 267, 270, 271, 274, 276, 277, 280, 281, 286, 287, 297, 302], "n_i": [176, 177, 198, 199], "c_j": [176, 177, 198, 199], "ldot": [176, 177, 198, 199], "lfloor": [176, 177, 198, 199], "kernel": [176, 177, 198, 199, 320, 323], "_size": [176, 177, 198, 199], "rfloor": [176, 177, 198, 199], "window": [176, 177, 198, 199], "much": [176, 177, 198, 199, 320, 324], "spatial": [176, 189, 198, 242], "k_h": [177, 199], "k_w": [177, 199], "h_": [177, 188, 194, 199, 226], "w_": [177, 188, 194, 199, 226, 296, 297, 298, 299, 300, 301, 302, 307, 308], "height": [177, 178, 180, 181, 183, 184, 199], "width": [177, 178, 180, 181, 183, 184, 199, 223, 224], "num_featur": 178, "momentum": [178, 302, 304, 308, 320], "affin": [178, 189, 193, 195, 197, 224], "track_running_stat": 178, "3d": [178, 184, 242], "var": [178, 189, 193, 195, 265], "epsilon": [178, 189, 193, 195, 225, 263, 265, 296, 298, 299, 300, 301, 307], "gamma": [178, 189, 193, 195, 225, 244, 245, 246, 247], "nc": 178, "nlc": [178, 179], "channel": [178, 179, 180, 181, 183, 184], "four": 178, "nhwc": [178, 180], "paper": [178, 233, 296, 297, 298, 299, 301, 302], "acceler": 178, "deep": [178, 244, 245, 246, 247], "intern": 178, "bn": 178, "in_channel": [179, 180, 181], "out_channel": [179, 180, 181], "dilat": [179, 180], "convolut": [179, 180, 181, 183, 184], "expect": [179, 180, 181, 182, 183, 184, 233, 241, 265, 320, 323], "filter": [179, 180, 181, 201, 205], "learnabl": [179, 180, 181, 231], "imag": [180, 181, 183, 184, 242], "ndhwc": [181, 184], "randomli": [182, 183, 184], "portion": 182, "dure": [182, 183, 184, 242, 325], "independ": [183, 184], "nwhc": 183, "whc": 183, "maintain": [183, 184, 302], "entri": [183, 184], "benefici": [183, 184, 324], "earli": 183, "adjac": 183, "pixel": 183, "correl": 183, "effect": [183, 320, 324], "regular": [183, 276, 300, 320, 323], "thompson": 183, "goroshin": 183, "jain": 183, "lecun": 183, "bregler": 183, "2015": [183, 299, 301], "cvpr": 183, "dhwc": 184, "often": 184, "medic": 184, "video": 184, "num_embed": [185, 223], "lookup": 185, "emb": [185, 223, 233], "token": [185, 223], "usual": [185, 223, 319, 324], "vocabulari": [185, 223], "approx": 186, "gaussian": [186, 252, 253, 254, 265], "unit": [186, 187, 188, 196, 227, 228, 230, 232, 244, 245, 246, 247, 251, 252, 253, 254, 255, 259, 278, 279, 280, 282], "phi": [186, 252], "geluapprox": 186, "pi": [186, 233, 253, 322], "044715": [186, 253], "gelufast": 186, "sigma": [186, 187, 188, 194, 244, 245, 246, 247, 254, 255, 260, 281, 282], "773": 186, "regard": 186, "approxim": [186, 252, 253, 254], "gate": [187, 188, 255], "split": [187, 189, 255], "halv": [187, 255], "input_s": [188, 194, 226], "hidden_s": [188, 194, 226], "recurr": [188, 194, 226], "nld": [188, 194, 226], "ld": [188, 194, 226], "concret": [188, 194, 197, 226, 324, 328], "r_t": 188, "xr": 188, "x_t": [188, 194, 226], "hr": 188, "h_t": [188, 194, 226], "b_": [188, 194], "z_t": 188, "xz": 188, "hz": 188, "z": [188, 320, 324], "n_t": 188, "xn": 188, "odot": [188, 194], "hn": 188, "hidden": [188, 194, 226, 241], "nh": [188, 194, 226], "nlh": [188, 194, 226], "lh": [188, 194, 226], "num_group": 189, "pytorch_compat": 189, "across": [189, 321], "preced": 189, "http": [189, 193, 195, 200, 225, 254, 276], "arxiv": [189, 193, 195, 200, 225, 254, 276, 296, 302], "org": [189, 193, 195, 200, 225, 254, 276], "1803": 189, "08494": 189, "separ": [189, 271], "lambd": [190, 237, 256, 286], "denomin": [193, 263, 296, 298, 299, 300, 301, 307], "inorm": 193, "1607": [193, 195], "08022": 193, "i_t": 194, "xi": 194, "hi": 194, "f_t": 194, "xf": 194, "hf": 194, "g_t": [194, 296, 298, 299, 300, 301, 302, 307, 308], "xg": 194, "hg": 194, "o_t": 194, "xo": 194, "ho": 194, "c_": [194, 302], "c_t": [194, 302], "cell": 194, "06450": 195, "realli": 195, "just": [195, 320, 323], "negative_slop": [196, 259], "01": [196, 259, 300], "leaki": [196, 259], "rectifi": [196, 227, 228, 246, 247, 259, 278, 279], "simpli": [196, 227, 251, 259, 278, 288, 293, 320, 321, 322], "control": [196, 317, 324], "slope": 196, "mathcal": 197, "d_i": 197, "max_": [198, 199], "1908": [200, 276], "08681": [200, 276], "map_fn": [201, 205], "filter_fn": [201, 205], "immedi": 201, "astyp": [201, 325], "valid_parameter_filt": 201, "apply_fn": 202, "direct": [203, 302, 328], "descend": 203, "mode": [204, 215, 217, 242, 246, 247, 321], "is_leaf_fn": 205, "content": [205, 320], "found": 205, "drop": 205, "some": [206, 218, 304, 320, 322, 324], "idempot": [206, 218], "endswith": 206, "exist": [206, 218], "file_or_weight": 208, "exactli": [208, 322], "actual": [208, 293, 324], "miss": [208, 327], "ok": [208, 322], "savez": [212, 327], "save_safetensor": [212, 327], "avoid": [213, 320], "properti": [214, 217, 305, 322], "reflect": [214, 320, 323, 325], "certain": [215, 320], "ie": [218, 321], "noop": 218, "unfrozen": 218, "replac": [219, 220, 241, 274], "commonli": [219, 290, 320], "tracer": 219, "locat": [219, 220, 321, 328], "partial": [219, 220, 320, 324], "child": 220, "flexibli": 220, "edit": 220, "programmat": 220, "num_head": [221, 241], "query_input_dim": 221, "key_input_dim": 221, "value_input_dim": 221, "value_dim": 221, "value_output_dim": 221, "produc": [221, 290], "aggreg": 221, "linearli": 221, "project": 221, "veri": [221, 321, 324, 328], "attend": 221, "num_paramet": 222, "25": [222, 242], "parametr": [222, 277], "from_embed": 223, "classmethod": [223, 224], "now": [224, 320, 321, 325], "futur": [224, 323, 324], "from_linear": 224, "1910": 225, "07467": 225, "nonlinear": [226, 320], "elman": 226, "ih": 226, "hh": 226, "func": 226, "10000": 229, "roform": 229, "enhanc": [229, 324], "slightli": [229, 328], "plain": 231, "our": [231, 296, 297, 298, 299, 301, 302, 321], "known": [232, 282], "swish": [232, 282], "min_freq": 233, "0001": 233, "max_freq": 233, "cos_first": 233, "full_turn": 233, "sinusoid": 233, "minimum": [233, 263], "co": [233, 322], "sin": [233, 322, 326], "threshold": [239, 267, 274, 287], "geq": [239, 287], "512": [241, 328], "num_encoder_lay": 241, "num_decoder_lay": 241, "mlp_dim": 241, "nanobind": 241, "nb_func": 241, "custom_encod": 241, "custom_decod": 241, "norm_first": 241, "checkpoint": 241, "decod": 241, "interact": 241, "mechan": 241, "block": 241, "chekpoint": 241, "usag": [241, 320], "expens": 241, "scale_factor": 242, "liter": [242, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "nearest": 242, "align_corn": 242, "signal": 242, "convent": [242, 300], "audio": 242, "would": [242, 321, 323, 324, 325, 328], "4d": 242, "forth": 242, "three": 242, "algorithm": [242, 302], "neighbor": 242, "interpol": 242, "cubic": 242, "bilinear": 242, "trilinear": 242, "And": 242, "bicub": 242, "corner": 242, "bottom": 242, "squeez": [242, 320], "75": 242, "33333": 242, "66667": 242, "init_fn": [243, 244, 245, 246, 247, 248, 249, 250, 290], "glorot": [244, 245], "fan_in": [244, 245, 246, 247], "fan_out": [244, 245, 246, 247], "fan": [244, 245, 246, 247], "_in": [244, 245], "_out": [244, 245], "understand": [244, 245], "difficulti": [244, 245], "feedforward": [244, 245], "191107": 244, "61278": 244, "150594": 244, "363207": 244, "gain": [244, 245, 246, 247], "89613": 244, "53947": 244, "48095": 244, "995016": 244, "223404": 245, "890597": 245, "379159": 245, "776856": 245, "90041": 245, "02264": 245, "912766": 245, "12451": 245, "he": [246, 247], "delv": [246, 247], "surpass": [246, 247], "human": [246, 247], "imagenet": [246, 247], "classif": [246, 247], "25211": 246, "458835": 246, "177208": 246, "0137595": 246, "6967": 246, "02765": 246, "15268": 246, "75787": 246, "kaim": 247, "0300242": 247, "0184009": 247, "793615": 247, "666329": 247, "64331": 247, "16506": 247, "08619": 247, "79854": 247, "std": 249, "982273": 249, "534422": 249, "380709": 249, "0645099": 249, "883935": 250, "863726": 250, "617261": 250, "417497": 250, "faster": [252, 320, 322], "exact": [253, 254], "0005": 253, "015": 254, "702": 254, "cdot": [254, 263, 266, 282], "hendryck": 254, "1606": 254, "08415": 254, "min_val": 257, "max_val": 257, "_val": 257, "sum_i": 261, "x_i": [261, 283, 284], "with_logit": 262, "cross": [262, 264], "entropi": [262, 264], "predict": [262, 265, 266, 267, 268, 269, 270, 272, 273, 274], "105361": 262, "223144": 262, "20397": 262, "916291": 262, "539245": 262, "prob": 262, "510826": 262, "x1": 263, "x2": 263, "cosin": [263, 309, 311, 322], "x_1": [263, 271], "x_2": [263, 271], "label_smooth": 264, "ground": [264, 274], "truth": [264, 274], "hot": 264, "label": [264, 271], "smooth": [264, 274, 307], "0485873": 264, "348587": 264, "06": [265, 275, 296], "likelihood": [265, 273], "const": 265, "term": [265, 296, 297, 298, 299, 300, 301, 307], "nll": [265, 273], "hing": 266, "y_": [266, 270], "pred": [266, 270], "delta": [267, 296], "huber": 267, "ll": [267, 320, 322], "leq": [267, 280], "l2": [267, 270, 308], "kullback": 268, "leibler": 268, "diverg": 268, "cosh": 270, "logcosh": 270, "act": 270, "sensit": 270, "outlier": 270, "dual": 270, "offer": 270, "balanc": 270, "robust": 270, "approach": [270, 322], "inputs1": 271, "inputs2": 271, "margin": [271, 275], "rank": [271, 321], "573409": 271, "765166": 271, "0638": 271, "75596": 271, "225763": 271, "256995": 271, "773433": 271, "variant": [274, 301], "formula": 274, "anchor": 275, "triplet": 275, "math": [275, 320], "_p": 275, "pairwis": 275, "distanc": 275, "instabl": 275, "monoton": 276, "0507": 280, "67326": 280, "sum_j": [283, 284], "x_j": [283, 284], "re": 290, "sai": [290, 324], "subclass": 293, "your": [293, 322, 324], "concept": 293, "mymlp": 293, "hidden_dim": [293, 295], "in_proj": 293, "out_proj": 293, "assign": 293, "involv": [295, 320], "subsequ": 295, "num_lay": 295, "train_imag": 295, "num_class": 295, "loss_and_grad_fn": [295, 320, 322], "loss_fn": [295, 320, 322], "sgd": [295, 302, 304, 309, 310, 313, 320], "learning_r": [295, 296, 297, 298, 299, 300, 301, 302, 304, 307, 308, 309, 310, 311, 312, 313, 320], "num_epoch": 295, "batch_iter": 295, "batch_siz": 295, "train_label": 295, "far": 295, "apply_gradi": 295, "common": [295, 320, 324], "rmsprop": 295, "adagrad": 295, "adafactor": 295, "adadelta": 295, "adam": [295, 301, 302, 311, 312], "adamw": [295, 302], "adamax": 295, "lion": 295, "cosine_decai": [295, 311], "exponential_decai": 295, "join_schedul": 295, "linear_schedul": [295, 311], "step_decai": 295, "rho": 296, "rate": [296, 297, 298, 299, 300, 301, 302, 307, 308], "zeiler": 296, "2012": [296, 307], "adapt": [296, 297, 298, 321], "preprint": [296, 302], "1212": 296, "5701": 296, "v_": [296, 298, 299, 300, 301, 307, 308], "v_t": [296, 298, 299, 300, 301, 307, 308], "u_t": 296, "u_": 296, "w_t": [296, 298, 299, 300, 301, 302, 307, 308], "coeffici": [296, 297, 299, 300, 301, 302], "improv": [296, 297, 298, 299, 300, 301, 307, 320, 321], "30": 297, "001": 297, "clip_threshold": 297, "decay_r": [297, 310, 313], "beta_1": [297, 299, 300, 301, 302], "weight_decai": [297, 300, 302, 308], "scale_paramet": 297, "relative_step": 297, "warmup_init": 297, "sublinear": 297, "cost": [297, 321, 324], "epsilon_1": 297, "epsilon_2": 297, "parameter_scal": 297, "unscal": 297, "bigger": 297, "moment": [297, 299, 300, 301], "decai": [297, 300, 302, 308, 309, 310, 313], "duchi": 298, "hazan": 298, "singer": 298, "2011": 298, "subgradi": 298, "onlin": 298, "stochast": [298, 299, 301, 308, 324], "jmlr": 298, "999": [299, 300, 301], "omit": [299, 301, 321], "correct": [299, 300, 301, 323, 324], "estim": [299, 301], "kingma": [299, 301], "ba": [299, 301], "iclr": [299, 300, 301], "m_": [299, 300, 301, 302], "m_t": [299, 300, 301, 302], "beta_2": [299, 300, 301, 302], "contrast": 300, "loshchilov": 300, "hutter": 300, "2019": 300, "decoupl": 300, "99": [302, 307], "tend": 302, "10x": 302, "strength": [302, 308], "lr": 302, "wd": 302, "chen": 302, "symbol": 302, "discoveri": 302, "2302": 302, "06675": 302, "eta": 302, "via": [303, 306, 321, 324, 325], "opt": [303, 321], "structur": [303, 322], "explicit": [304, 317, 325], "tieleman": 307, "hinton": 307, "lectur": 307, "coursera": 307, "dampen": 308, "nesterov": 308, "descent": [308, 320, 324], "mu": 308, "tau": 308, "penalti": 308, "enabl": 308, "decay_step": 309, "beyond": [309, 312], "lr_schedul": [309, 310, 311, 313], "1000": [309, 320], "0999961": 309, "06561": 310, "boundari": 311, "join": 311, "transit": 311, "warmup": [311, 312], "200": 311, "0999938": 311, "100": [312, 320, 322, 324, 328], "101": 312, "step_siz": 313, "21": 313, "081": 313, "basi": 315, "implicit": [317, 320, 322], "fine": [317, 324], "grain": 317, "uniqu": 317, "pseudo": 317, "altern": 317, "yield": 317, "splittabl": 317, "threefri": 317, "counter": 317, "cycl": 319, "inherit": 319, "merg": 320, "fuse": 320, "lead": 320, "big": 320, "good": [320, 321, 328], "awar": [320, 324], "advanc": 320, "let": [320, 322, 324, 325], "36788": 320, "compiled_fun": 320, "up": 320, "code": [320, 321, 324], "slow": 320, "plan": 320, "onc": 320, "here": [320, 322, 324, 327, 328], "recompil": 320, "stack": 320, "rerun": [320, 324], "frequent": [320, 324], "idiom": 320, "watch": 320, "destroi": 320, "anonym": 320, "loop": [320, 321, 322, 324], "don": [320, 328], "unari": 320, "overhead": [320, 324, 328], "bandwidth": [320, 321], "fusibl": 320, "consider": 320, "compar": 320, "versu": 320, "helper": 320, "warm": 320, "synchron": 320, "timeit": [320, 322], "tic": 320, "perf_count": 320, "toc": 320, "tpi": 320, "1e3": 320, "3f": 320, "benchmark": 320, "4096": [320, 322, 328], "On": [320, 322, 324], "m1": [320, 322, 328], "millisecond": [320, 328], "five": 320, "latest": 320, "help": [320, 328], "won": 320, "trace": 320, "placehold": 320, "insid": 320, "crash": 320, "inspect": [320, 326], "disable_compil": 320, "mlx_disable_compil": 320, "flag": [320, 325], "okai": [320, 324], "even": [320, 324, 325], "though": [320, 324, 325], "intend": 320, "deal": 320, "pretti": [320, 324], "inconveni": 320, "functool": 320, "tell": [320, 325], "particularli": 320, "setup": 320, "backward": [320, 322], "put": [320, 321], "appropri": 320, "checkout": 320, "github": 320, "repo": 320, "grad_fn": [320, 322], "compiled_grad_fn": 320, "71828": 320, "themselv": 320, "practic": 320, "outer": [320, 324], "give": 320, "opportun": 320, "inner": 320, "physic": 321, "api": [321, 322], "doc": 321, "lot": [321, 322], "figur": 321, "best": 321, "mac": 321, "alreadi": 321, "come": [321, 322], "abil": 321, "talk": 321, "minim": 321, "all_sum": 321, "launch": [321, 323], "mpirun": 321, "mpiexec": 321, "np": [321, 325, 326], "test": 321, "py": 321, "send": 321, "homebrew": 321, "anaconda": 321, "openmpi": 321, "conda": 321, "libmpi": 321, "dyld": 321, "find": 321, "dyld_library_path": 321, "environ": 321, "lib": 321, "connect": 321, "ssh": 321, "checklist": 321, "debug": 321, "issu": [321, 322, 325], "hostnam": 321, "ask": 321, "password": 321, "confirm": 321, "specif": [321, 322], "configur": 321, "config": 321, "foo": 321, "bar": 321, "com": 321, "look": 321, "host1": 321, "host2": 321, "qualifi": 321, "ip": 321, "slot": 321, "want": [321, 322, 328], "hostfil": 321, "command": 321, "line": [321, 324, 325], "parallel": [321, 328], "snippet": 321, "dataset": [321, 324], "loss_grad_fn": 321, "all_avg": 321, "everyth": 321, "all_reduce_grad": 321, "wa": [321, 324], "thing": 321, "latenc": 321, "mca": 321, "btl_tcp_link": 321, "tcp": 321, "idea": [322, 324], "behind": 322, "further": 322, "dfdx": [322, 323], "deriv": [322, 324], "d2fdx2": 322, "rather": [322, 328], "longer": 322, "zero_grad": 322, "detach": 322, "requires_grad": 322, "saw": 322, "dloss_dw": 322, "dloss_dx": 322, "redund": 322, "continu": 322, "suppos": [322, 328], "nice": [322, 324], "notic": [322, 327], "propag": [322, 323], "part": [322, 323], "stop_gradi": 322, "vmap": [322, 324, 326], "autom": 322, "go": 322, "contriv": [322, 328], "sake": 322, "clariti": 322, "quit": [322, 325], "power": [322, 325], "difficult": 322, "hand": [322, 324], "encount": 322, "primit": 322, "priorit": 322, "naiv": 322, "naive_add": 322, "vmap_add": 322, "total": 322, "390": 322, "wherea": 322, "025": 322, "ten": [322, 324], "Of": 322, "cours": 322, "better": [322, 328], "handi": 322, "ndarrai": [323, 324, 326], "slice": 323, "ellipsi": 323, "syntax": 323, "idx": 323, "mix": 323, "take_along_axi": 323, "reason": 323, "lack": 323, "cannot": [323, 325], "extrem": [323, 324], "ineffici": [323, 324], "someth": 323, "nonzero": 323, "describ": 324, "dynam": 324, "easier": 324, "worri": 324, "never": 324, "fun1": 324, "expensive_fun": 324, "care": 324, "built": 324, "instanti": 324, "until": [324, 326], "consum": 324, "eager": 324, "thank": 324, "weights_fp16": 324, "question": 324, "trade": 324, "off": 324, "enough": 324, "bad": 324, "fix": 324, "slight": 324, "grow": 324, "computation": 324, "costli": 324, "luckili": 324, "wide": 324, "thousand": 324, "value_and_grad_fn": 324, "implicitli": 324, "anytim": 324, "memoryview": [324, 325], "perfectli": 324, "first_lay": 324, "second_layer_a": 324, "second_layer_b": 324, "protocol": 325, "dlpack": 325, "pep": 325, "3118": 325, "view": 325, "a_view": 325, "owndata": 325, "own": 325, "extern": 325, "demonstr": 325, "x_view": 325, "modifi": 325, "df": 325, "x\u00b2": 325, "2x": 325, "indirectli": 325, "modif": 325, "seen": 325, "alon": 325, "occur": 325, "incorpor": 325, "aris": 325, "incorrect": 325, "experiment": 325, "break": 325, "advis": 325, "torch": 325, "intermedi": 325, "jnp": 325, "tf": 325, "page": 326, "composit": 326, "vjp": 326, "jvp": 326, "archiv": 327, "savez_compress": 327, "save_gguf": 327, "arr_0": 327, "advantag": 328, "race": 328, "interest": 328, "albeit": 328, "d1": 328, "d2": 328, "500": 328, "But": 328, "twice": 328, "were": 328, "measur": 328, "default_stream": 329, "default_devic": 329, "my_devic": 329}, "objects": {"mlx.core": [[165, 0, 1, "", "Stream"], [1, 2, 1, "", "erfinv"], [2, 2, 1, "", "eval"], [3, 2, 1, "", "exp"], [4, 2, 1, "", "expand_dims"], [5, 2, 1, "", "expm1"], [6, 2, 1, "", "eye"], [23, 2, 1, "", "flatten"], [24, 2, 1, "", "floor"], [25, 2, 1, "", "floor_divide"], [26, 2, 1, "", "full"], [27, 2, 1, "", "gather_mm"], [28, 2, 1, "", "gather_qmm"], [29, 2, 1, "", "grad"], [30, 2, 1, "", "greater"], [31, 2, 1, "", "greater_equal"], [32, 2, 1, "", "hadamard_transform"], [33, 2, 1, "", "identity"], [34, 2, 1, "", "inner"], [35, 2, 1, "", "isclose"], [36, 2, 1, "", "isinf"], [37, 2, 1, "", "isnan"], [38, 2, 1, "", "isneginf"], [39, 2, 1, "", "isposinf"], [40, 2, 1, "", "issubdtype"], [41, 2, 1, "", "jvp"], [42, 2, 1, "", "left_shift"], [43, 2, 1, "", "less"], [44, 2, 1, "", "less_equal"], [50, 2, 1, "", "linspace"], [51, 2, 1, "", "load"], [52, 2, 1, "", "log"], [53, 2, 1, "", "log10"], [54, 2, 1, "", "log1p"], [55, 2, 1, "", "log2"], [56, 2, 1, "", "logaddexp"], [57, 2, 1, "", "logical_and"], [58, 2, 1, "", "logical_not"], [59, 2, 1, "", "logical_or"], [60, 2, 1, "", "logsumexp"], [61, 2, 1, "", "matmul"], [62, 2, 1, "", "max"], [63, 2, 1, "", "maximum"], [64, 2, 1, "", "mean"], [65, 2, 1, "", "meshgrid"], [77, 2, 1, "", "min"], [78, 2, 1, "", "minimum"], [79, 2, 1, "", "moveaxis"], [80, 2, 1, "", "multiply"], [81, 2, 1, "", "negative"], [82, 2, 1, "", "new_stream"], [83, 2, 1, "", "not_equal"], [84, 2, 1, "", "ones"], [85, 2, 1, "", "ones_like"], [86, 2, 1, "", "outer"], [87, 2, 1, "", "pad"], [88, 2, 1, "", "partition"], [89, 2, 1, "", "power"], [90, 2, 1, "", "prod"], [91, 2, 1, "", "quantize"], [92, 2, 1, "", "quantized_matmul"], [93, 2, 1, "", "radians"], [105, 2, 1, "", "reciprocal"], [106, 2, 1, "", "remainder"], [107, 2, 1, "", "repeat"], [108, 2, 1, "", "reshape"], [109, 2, 1, "", "right_shift"], [110, 2, 1, "", "round"], [111, 2, 1, "", "rsqrt"], [112, 2, 1, "", "save"], [113, 2, 1, "", "save_gguf"], [114, 2, 1, "", "save_safetensors"], [115, 2, 1, "", "savez"], [116, 2, 1, "", "savez_compressed"], [117, 2, 1, "", "set_default_device"], [118, 2, 1, "", "set_default_stream"], [119, 2, 1, "", "sigmoid"], [120, 2, 1, "", "sign"], [121, 2, 1, "", "sin"], [122, 2, 1, "", "sinh"], [123, 2, 1, "", "softmax"], [124, 2, 1, "", "sort"], [125, 2, 1, "", "split"], [126, 2, 1, "", "sqrt"], [127, 2, 1, "", "square"], [128, 2, 1, "", "squeeze"], [129, 2, 1, "", "stack"], [130, 2, 1, "", "std"], [131, 2, 1, "", "stop_gradient"], [132, 2, 1, "", "stream"], [133, 2, 1, "", "subtract"], [134, 2, 1, "", "sum"], [135, 2, 1, "", "swapaxes"], [136, 2, 1, "", "synchronize"], [137, 2, 1, "", "take"], [138, 2, 1, "", "take_along_axis"], [139, 2, 1, "", "tan"], [140, 2, 1, "", "tanh"], [141, 2, 1, "", "tensordot"], [142, 2, 1, "", "tile"], [143, 2, 1, "", "topk"], [144, 2, 1, "", "trace"], [145, 2, 1, "", "transpose"], [146, 2, 1, "", "tri"], [147, 2, 1, "", "tril"], [148, 2, 1, "", "triu"], [149, 2, 1, "", "value_and_grad"], [150, 2, 1, "", "var"], [151, 2, 1, "", "view"], [152, 2, 1, "", "vjp"], [153, 2, 1, "", "vmap"], [154, 2, 1, "", "where"], [155, 2, 1, "", "zeros"], [156, 2, 1, "", "zeros_like"]], "mlx.core.Stream": [[165, 1, 1, "", "__init__"]], "mlx.core.fast": [[7, 2, 1, "", "layer_norm"], [8, 2, 1, "", "rms_norm"], [9, 2, 1, "", "rope"], [10, 2, 1, "", "scaled_dot_product_attention"]], "mlx.core.fft": [[11, 2, 1, "", "fft"], [12, 2, 1, "", "fft2"], [13, 2, 1, "", "fftn"], [14, 2, 1, "", "ifft"], [15, 2, 1, "", "ifft2"], [16, 2, 1, "", "ifftn"], [17, 2, 1, "", "irfft"], [18, 2, 1, "", "irfft2"], [19, 2, 1, "", "irfftn"], [20, 2, 1, "", "rfft"], [21, 2, 1, "", "rfft2"], [22, 2, 1, "", "rfftn"]], "mlx.core.linalg": [[45, 2, 1, "", "cholesky"], [46, 2, 1, "", "inv"], [47, 2, 1, "", "norm"], [48, 2, 1, "", "qr"], [49, 2, 1, "", "svd"]], "mlx.core.metal": [[66, 2, 1, "", "clear_cache"], [67, 2, 1, "", "device_info"], [68, 2, 1, "", "get_active_memory"], [69, 2, 1, "", "get_cache_memory"], [70, 2, 1, "", "get_peak_memory"], [71, 2, 1, "", "is_available"], [72, 2, 1, "", "reset_peak_memory"], [73, 2, 1, "", "set_cache_limit"], [74, 2, 1, "", "set_memory_limit"], [75, 2, 1, "", "start_capture"], [76, 2, 1, "", "stop_capture"]], "mlx.core.random": [[94, 2, 1, "", "bernoulli"], [95, 2, 1, "", "categorical"], [96, 2, 1, "", "gumbel"], [97, 2, 1, "", "key"], [98, 2, 1, "", "multivariate_normal"], [99, 2, 1, "", "normal"], [100, 2, 1, "", "randint"], [101, 2, 1, "", "seed"], [102, 2, 1, "", "split"], [103, 2, 1, "", "truncated_normal"], [104, 2, 1, "", "uniform"]], "mlx.nn": [[175, 0, 1, "", "ALiBi"], [176, 0, 1, "", "AvgPool1d"], [177, 0, 1, "", "AvgPool2d"], [178, 0, 1, "", "BatchNorm"], [179, 0, 1, "", "Conv1d"], [180, 0, 1, "", "Conv2d"], [181, 0, 1, "", "Conv3d"], [182, 0, 1, "", "Dropout"], [183, 0, 1, "", "Dropout2d"], [184, 0, 1, "", "Dropout3d"], [185, 0, 1, "", "Embedding"], [186, 0, 1, "", "GELU"], [187, 0, 1, "", "GLU"], [188, 0, 1, "", "GRU"], [189, 0, 1, "", "GroupNorm"], [190, 0, 1, "", "HardShrink"], [191, 0, 1, "", "HardTanh"], [192, 0, 1, "", "Hardswish"], [193, 0, 1, "", "InstanceNorm"], [194, 0, 1, "", "LSTM"], [195, 0, 1, "", "LayerNorm"], [196, 0, 1, "", "LeakyReLU"], [197, 0, 1, "", "Linear"], [198, 0, 1, "", "MaxPool1d"], [199, 0, 1, "", "MaxPool2d"], [200, 0, 1, "", "Mish"], [293, 0, 1, "", "Module"], [221, 0, 1, "", "MultiHeadAttention"], [222, 0, 1, "", "PReLU"], [223, 0, 1, "", "QuantizedEmbedding"], [224, 0, 1, "", "QuantizedLinear"], [225, 0, 1, "", "RMSNorm"], [226, 0, 1, "", "RNN"], [227, 0, 1, "", "ReLU"], [228, 0, 1, "", "ReLU6"], [229, 0, 1, "", "RoPE"], [230, 0, 1, "", "SELU"], [231, 0, 1, "", "Sequential"], [232, 0, 1, "", "SiLU"], [233, 0, 1, "", "SinusoidalPositionalEncoding"], [234, 0, 1, "", "Softmax"], [235, 0, 1, "", "Softmin"], [236, 0, 1, "", "Softplus"], [237, 0, 1, "", "Softshrink"], [238, 0, 1, "", "Softsign"], [239, 0, 1, "", "Step"], [240, 0, 1, "", "Tanh"], [241, 0, 1, "", "Transformer"], [242, 0, 1, "", "Upsample"], [251, 0, 1, "", "elu"], [252, 0, 1, "", "gelu"], [253, 0, 1, "", "gelu_approx"], [254, 0, 1, "", "gelu_fast_approx"], [255, 0, 1, "", "glu"], [256, 0, 1, "", "hard_shrink"], [257, 0, 1, "", "hard_tanh"], [258, 0, 1, "", "hardswish"], [259, 0, 1, "", "leaky_relu"], [260, 0, 1, "", "log_sigmoid"], [261, 0, 1, "", "log_softmax"], [276, 0, 1, "", "mish"], [277, 0, 1, "", "prelu"], [157, 2, 1, "", "quantize"], [278, 0, 1, "", "relu"], [279, 0, 1, "", "relu6"], [280, 0, 1, "", "selu"], [281, 0, 1, "", "sigmoid"], [282, 0, 1, "", "silu"], [283, 0, 1, "", "softmax"], [284, 0, 1, "", "softmin"], [285, 0, 1, "", "softplus"], [286, 0, 1, "", "softshrink"], [287, 0, 1, "", "step"], [288, 0, 1, "", "tanh"], [158, 2, 1, "", "value_and_grad"]], "mlx.nn.Module": [[201, 1, 1, "", "apply"], [202, 1, 1, "", "apply_to_modules"], [203, 1, 1, "", "children"], [204, 1, 1, "", "eval"], [205, 1, 1, "", "filter_and_map"], [206, 1, 1, "", "freeze"], [207, 1, 1, "", "leaf_modules"], [208, 1, 1, "", "load_weights"], [209, 1, 1, "", "modules"], [210, 1, 1, "", "named_modules"], [211, 1, 1, "", "parameters"], [212, 1, 1, "", "save_weights"], [213, 1, 1, "", "set_dtype"], [214, 3, 1, "", "state"], [215, 1, 1, "", "train"], [216, 1, 1, "", "trainable_parameters"], [217, 3, 1, "", "training"], [218, 1, 1, "", "unfreeze"], [219, 1, 1, "", "update"], [220, 1, 1, "", "update_modules"]], "mlx.nn.init": [[243, 2, 1, "", "constant"], [244, 2, 1, "", "glorot_normal"], [245, 2, 1, "", "glorot_uniform"], [246, 2, 1, "", "he_normal"], [247, 2, 1, "", "he_uniform"], [248, 2, 1, "", "identity"], [249, 2, 1, "", "normal"], [250, 2, 1, "", "uniform"]], "mlx.nn.losses": [[262, 0, 1, "", "binary_cross_entropy"], [263, 0, 1, "", "cosine_similarity_loss"], [264, 0, 1, "", "cross_entropy"], [265, 0, 1, "", "gaussian_nll_loss"], [266, 0, 1, "", "hinge_loss"], [267, 0, 1, "", "huber_loss"], [268, 0, 1, "", "kl_div_loss"], [269, 0, 1, "", "l1_loss"], [270, 0, 1, "", "log_cosh_loss"], [271, 0, 1, "", "margin_ranking_loss"], [272, 0, 1, "", "mse_loss"], [273, 0, 1, "", "nll_loss"], [274, 0, 1, "", "smooth_l1_loss"], [275, 0, 1, "", "triplet_loss"]], "mlx.optimizers": [[296, 0, 1, "", "AdaDelta"], [297, 0, 1, "", "Adafactor"], [298, 0, 1, "", "Adagrad"], [299, 0, 1, "", "Adam"], [300, 0, 1, "", "AdamW"], [301, 0, 1, "", "Adamax"], [302, 0, 1, "", "Lion"], [315, 0, 1, "", "Optimizer"], [307, 0, 1, "", "RMSprop"], [308, 0, 1, "", "SGD"], [159, 2, 1, "", "clip_grad_norm"], [309, 2, 1, "", "cosine_decay"], [310, 2, 1, "", "exponential_decay"], [311, 2, 1, "", "join_schedules"], [312, 2, 1, "", "linear_schedule"], [313, 2, 1, "", "step_decay"]], "mlx.optimizers.Optimizer": [[303, 1, 1, "", "apply_gradients"], [304, 1, 1, "", "init"], [305, 3, 1, "", "state"], [306, 1, 1, "", "update"]], "mlx.utils": [[160, 2, 1, "", "tree_flatten"], [161, 2, 1, "", "tree_map"], [162, 2, 1, "", "tree_map_with_path"], [163, 2, 1, "", "tree_reduce"], [164, 2, 1, "", "tree_unflatten"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:property"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "property", "Python property"]}, "titleterms": {"mlx": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313], "instal": [0, 321], "usag": 0, "exampl": [0, 320, 321, 328], "python": 0, "api": 0, "refer": 0, "c": 0, "further": 0, "read": 0, "core": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 165], "erfinv": 1, "eval": [2, 204], "exp": 3, "expand_dim": 4, "expm1": 5, "ey": 6, "fast": [7, 8, 9, 10, 170], "layer_norm": 7, "rms_norm": 8, "rope": [9, 229], "scaled_dot_product_attent": 10, "fft": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 171], "fft2": 12, "fftn": 13, "ifft": 14, "ifft2": 15, "ifftn": 16, "irfft": 17, "irfft2": 18, "irfftn": 19, "rfft": 20, "rfft2": 21, "rfftn": 22, "flatten": 23, "floor": 24, "floor_divid": 25, "full": 26, "gather_mm": 27, "gather_qmm": 28, "grad": [29, 174], "greater": 30, "greater_equ": 31, "hadamard_transform": 32, "ident": [33, 248], "inner": 34, "isclos": 35, "isinf": 36, "isnan": 37, "isneginf": 38, "isposinf": 39, "issubdtyp": 40, "jvp": 41, "left_shift": 42, "less": 43, "less_equ": 44, "linalg": [45, 46, 47, 48, 49], "choleski": 45, "inv": 46, "norm": 47, "qr": 48, "svd": 49, "linspac": 50, "load": [51, 327], "log": 52, "log10": 53, "log1p": 54, "log2": 55, "logaddexp": 56, "logical_and": 57, "logical_not": 58, "logical_or": 59, "logsumexp": 60, "matmul": 61, "max": 62, "maximum": 63, "mean": 64, "meshgrid": 65, "metal": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 173], "clear_cach": 66, "device_info": 67, "get_active_memori": 68, "get_cache_memori": 69, "get_peak_memori": 70, "is_avail": 71, "reset_peak_memori": 72, "set_cache_limit": 73, "set_memory_limit": 74, "start_captur": 75, "stop_captur": 76, "min": 77, "minimum": 78, "moveaxi": 79, "multipli": 80, "neg": 81, "new_stream": 82, "not_equ": 83, "ones": 84, "ones_lik": 85, "outer": 86, "pad": 87, "partit": 88, "power": 89, "prod": 90, "quantiz": [91, 157], "quantized_matmul": 92, "radian": 93, "random": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 317], "bernoulli": 94, "categor": 95, "gumbel": 96, "kei": 97, "multivariate_norm": 98, "normal": [99, 249], "randint": 100, "seed": 101, "split": [102, 125], "truncated_norm": 103, "uniform": [104, 250], "reciproc": 105, "remaind": 106, "repeat": 107, "reshap": 108, "right_shift": 109, "round": 110, "rsqrt": 111, "save": [112, 327], "save_gguf": 113, "save_safetensor": 114, "savez": 115, "savez_compress": 116, "set_default_devic": 117, "set_default_stream": 118, "sigmoid": [119, 281], "sign": 120, "sin": 121, "sinh": 122, "softmax": [123, 234, 283], "sort": 124, "sqrt": 126, "squar": 127, "squeez": 128, "stack": 129, "std": 130, "stop_gradi": 131, "stream": [132, 165, 168, 329], "subtract": 133, "sum": 134, "swapax": 135, "synchron": 136, "take": 137, "take_along_axi": 138, "tan": 139, "tanh": [140, 240, 288], "tensordot": 141, "tile": 142, "topk": 143, "trace": 144, "transpos": 145, "tri": 146, "tril": 147, "triu": 148, "value_and_grad": [149, 158], "var": 150, "view": 151, "vjp": 152, "vmap": 153, "where": 154, "zero": 155, "zeros_lik": 156, "nn": [157, 158, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], "optim": [159, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315], "clip_grad_norm": 159, "util": [160, 161, 162, 163, 164, 319], "tree_flatten": 160, "tree_map": 161, "tree_map_with_path": 162, "tree_reduc": 163, "tree_unflatten": 164, "arrai": [166, 323, 327], "data": 167, "type": 167, "support": 167, "devic": 168, "distribut": [169, 321], "commun": [169, 321], "linear": [172, 197], "algebra": 172, "neural": 174, "network": 174, "quick": [174, 326], "start": [174, 321, 326], "The": 174, "modul": [174, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 293], "class": 174, "paramet": [174, 211], "updat": [174, 219, 306, 323], "inspect": 174, "valu": 174, "alibi": 175, "avgpool1d": 176, "avgpool2d": 177, "batchnorm": 178, "conv1d": 179, "conv2d": 180, "conv3d": 181, "dropout": 182, "dropout2d": 183, "dropout3d": 184, "embed": 185, "gelu": [186, 252], "glu": [187, 255], "gru": 188, "groupnorm": 189, "hardshrink": 190, "hardtanh": 191, "hardswish": [192, 258], "instancenorm": 193, "lstm": 194, "layernorm": 195, "leakyrelu": 196, "maxpool1d": 198, "maxpool2d": 199, "mish": [200, 276], "appli": 201, "apply_to_modul": 202, "children": 203, "filter_and_map": 205, "freez": 206, "leaf_modul": 207, "load_weight": 208, "named_modul": 210, "save_weight": 212, "set_dtyp": 213, "state": [214, 305], "train": [215, 217, 320, 321], "trainable_paramet": 216, "unfreez": 218, "update_modul": 220, "multiheadattent": 221, "prelu": [222, 277], "quantizedembed": 223, "quantizedlinear": 224, "rmsnorm": 225, "rnn": 226, "relu": [227, 278], "relu6": [228, 279], "selu": [230, 280], "sequenti": 231, "silu": [232, 282], "sinusoidalpositionalencod": 233, "softmin": [235, 284], "softplu": [236, 285], "softshrink": [237, 286], "softsign": 238, "step": [239, 287], "transform": [241, 318, 320, 322, 324, 326], "upsampl": 242, "init": [243, 244, 245, 246, 247, 248, 249, 250, 304], "constant": 243, "glorot_norm": 244, "glorot_uniform": 245, "he_norm": 246, "he_uniform": 247, "elu": 251, "gelu_approx": 253, "gelu_fast_approx": 254, "hard_shrink": 256, "hard_tanh": 257, "leaky_relu": 259, "log_sigmoid": 260, "log_softmax": 261, "loss": [262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 292], "binary_cross_entropi": 262, "cosine_similarity_loss": 263, "cross_entropi": 264, "gaussian_nll_loss": 265, "hinge_loss": 266, "huber_loss": 267, "kl_div_loss": 268, "l1_loss": 269, "log_cosh_loss": 270, "margin_ranking_loss": 271, "mse_loss": 272, "nll_loss": 273, "smooth_l1_loss": 274, "triplet_loss": 275, "function": [289, 292, 320, 322, 326], "initi": 290, "layer": 291, "oper": 294, "adadelta": 296, "adafactor": 297, "adagrad": 298, "adam": 299, "adamw": 300, "adamax": 301, "lion": 302, "apply_gradi": 303, "rmsprop": 307, "sgd": 308, "cosine_decai": 309, "exponential_decai": 310, "join_schedul": 311, "linear_schedul": 312, "step_decai": 313, "common": 314, "schedul": 316, "tree": 319, "compil": 320, "basic": [320, 326], "speedup": 320, "debug": 320, "pure": 320, "graph": [320, 324, 326], "get": 321, "mpi": 321, "set": 321, "up": 321, "remot": 321, "host": 321, "tune": 321, "all": 321, "reduc": 321, "automat": 322, "differenti": 322, "vector": 322, "index": 323, "differ": 323, "from": 323, "numpi": [323, 325], "In": 323, "place": 323, "lazi": 324, "evalu": 324, "why": 324, "comput": 324, "onli": 324, "what": 324, "you": 324, "us": [324, 329], "when": 324, "convers": 325, "other": 325, "framework": 325, "pytorch": 325, "jax": 325, "tensorflow": 325, "guid": 326, "serial": 327, "format": 327, "unifi": 328, "memori": 328, "A": 328, "simpl": 328, "specifi": 329}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"MLX": [[0, "mlx"]], "Install": [[0, null]], "Usage": [[0, null]], "Examples": [[0, null]], "Python API Reference": [[0, null]], "C++ API Reference": [[0, null]], "Further Reading": [[0, null]], "mlx.core.erfinv": [[1, "mlx-core-erfinv"]], "mlx.core.eval": [[2, "mlx-core-eval"]], "mlx.core.exp": [[3, "mlx-core-exp"]], "mlx.core.expand_dims": [[4, "mlx-core-expand-dims"]], "mlx.core.expm1": [[5, "mlx-core-expm1"]], "mlx.core.eye": [[6, "mlx-core-eye"]], "mlx.core.fast.layer_norm": [[7, "mlx-core-fast-layer-norm"]], "mlx.core.fast.rms_norm": [[8, "mlx-core-fast-rms-norm"]], "mlx.core.fast.rope": [[9, "mlx-core-fast-rope"]], "mlx.core.fast.scaled_dot_product_attention": [[10, "mlx-core-fast-scaled-dot-product-attention"]], "mlx.core.fft.fft": [[11, "mlx-core-fft-fft"]], "mlx.core.fft.fft2": [[12, "mlx-core-fft-fft2"]], "mlx.core.fft.fftn": [[13, "mlx-core-fft-fftn"]], "mlx.core.fft.ifft": [[14, "mlx-core-fft-ifft"]], "mlx.core.fft.ifft2": [[15, "mlx-core-fft-ifft2"]], "mlx.core.fft.ifftn": [[16, "mlx-core-fft-ifftn"]], "mlx.core.fft.irfft": [[17, "mlx-core-fft-irfft"]], "mlx.core.fft.irfft2": [[18, "mlx-core-fft-irfft2"]], "mlx.core.fft.irfftn": [[19, "mlx-core-fft-irfftn"]], "mlx.core.fft.rfft": [[20, "mlx-core-fft-rfft"]], "mlx.core.fft.rfft2": [[21, "mlx-core-fft-rfft2"]], "mlx.core.fft.rfftn": [[22, "mlx-core-fft-rfftn"]], "mlx.core.flatten": [[23, "mlx-core-flatten"]], "mlx.core.floor": [[24, "mlx-core-floor"]], "mlx.core.floor_divide": [[25, "mlx-core-floor-divide"]], "mlx.core.full": [[26, "mlx-core-full"]], "mlx.core.gather_mm": [[27, "mlx-core-gather-mm"]], "mlx.core.gather_qmm": [[28, "mlx-core-gather-qmm"]], "mlx.core.grad": [[29, "mlx-core-grad"]], "mlx.core.greater": [[30, "mlx-core-greater"]], "mlx.core.greater_equal": [[31, "mlx-core-greater-equal"]], "mlx.core.hadamard_transform": [[32, "mlx-core-hadamard-transform"]], "mlx.core.identity": [[33, "mlx-core-identity"]], "mlx.core.inner": [[34, "mlx-core-inner"]], "mlx.core.isclose": [[35, "mlx-core-isclose"]], "mlx.core.isinf": [[36, "mlx-core-isinf"]], "mlx.core.isnan": [[37, "mlx-core-isnan"]], "mlx.core.isneginf": [[38, "mlx-core-isneginf"]], "mlx.core.isposinf": [[39, "mlx-core-isposinf"]], "mlx.core.issubdtype": [[40, "mlx-core-issubdtype"]], "mlx.core.jvp": [[41, "mlx-core-jvp"]], "mlx.core.left_shift": [[42, "mlx-core-left-shift"]], "mlx.core.less": [[43, "mlx-core-less"]], "mlx.core.less_equal": [[44, "mlx-core-less-equal"]], "mlx.core.linalg.cholesky": [[45, "mlx-core-linalg-cholesky"]], "mlx.core.linalg.inv": [[46, "mlx-core-linalg-inv"]], "mlx.core.linalg.norm": [[47, "mlx-core-linalg-norm"]], "mlx.core.linalg.qr": [[48, "mlx-core-linalg-qr"]], "mlx.core.linalg.svd": [[49, "mlx-core-linalg-svd"]], "mlx.core.linspace": [[50, "mlx-core-linspace"]], "mlx.core.load": [[51, "mlx-core-load"]], "mlx.core.log": [[52, "mlx-core-log"]], "mlx.core.log10": [[53, "mlx-core-log10"]], "mlx.core.log1p": [[54, "mlx-core-log1p"]], "mlx.core.log2": [[55, "mlx-core-log2"]], "mlx.core.logaddexp": [[56, "mlx-core-logaddexp"]], "mlx.core.logical_and": [[57, "mlx-core-logical-and"]], "mlx.core.logical_not": [[58, "mlx-core-logical-not"]], "mlx.core.logical_or": [[59, "mlx-core-logical-or"]], "mlx.core.logsumexp": [[60, "mlx-core-logsumexp"]], "mlx.core.matmul": [[61, "mlx-core-matmul"]], "mlx.core.max": [[62, "mlx-core-max"]], "mlx.core.maximum": [[63, "mlx-core-maximum"]], "mlx.core.mean": [[64, "mlx-core-mean"]], "mlx.core.meshgrid": [[65, "mlx-core-meshgrid"]], "mlx.core.metal.clear_cache": [[66, "mlx-core-metal-clear-cache"]], "mlx.core.metal.device_info": [[67, "mlx-core-metal-device-info"]], "mlx.core.metal.get_active_memory": [[68, "mlx-core-metal-get-active-memory"]], "mlx.core.metal.get_cache_memory": [[69, "mlx-core-metal-get-cache-memory"]], "mlx.core.metal.get_peak_memory": [[70, "mlx-core-metal-get-peak-memory"]], "mlx.core.metal.is_available": [[71, "mlx-core-metal-is-available"]], "mlx.core.metal.reset_peak_memory": [[72, "mlx-core-metal-reset-peak-memory"]], "mlx.core.metal.set_cache_limit": [[73, "mlx-core-metal-set-cache-limit"]], "mlx.core.metal.set_memory_limit": [[74, "mlx-core-metal-set-memory-limit"]], "mlx.core.metal.start_capture": [[75, "mlx-core-metal-start-capture"]], "mlx.core.metal.stop_capture": [[76, "mlx-core-metal-stop-capture"]], "mlx.core.min": [[77, "mlx-core-min"]], "mlx.core.minimum": [[78, "mlx-core-minimum"]], "mlx.core.moveaxis": [[79, "mlx-core-moveaxis"]], "mlx.core.multiply": [[80, "mlx-core-multiply"]], "mlx.core.negative": [[81, "mlx-core-negative"]], "mlx.core.new_stream": [[82, "mlx-core-new-stream"]], "mlx.core.not_equal": [[83, "mlx-core-not-equal"]], "mlx.core.ones": [[84, "mlx-core-ones"]], "mlx.core.ones_like": [[85, "mlx-core-ones-like"]], "mlx.core.outer": [[86, "mlx-core-outer"]], "mlx.core.pad": [[87, "mlx-core-pad"]], "mlx.core.partition": [[88, "mlx-core-partition"]], "mlx.core.power": [[89, "mlx-core-power"]], "mlx.core.prod": [[90, "mlx-core-prod"]], "mlx.core.quantize": [[91, "mlx-core-quantize"]], "mlx.core.quantized_matmul": [[92, "mlx-core-quantized-matmul"]], "mlx.core.radians": [[93, "mlx-core-radians"]], "mlx.core.random.bernoulli": [[94, "mlx-core-random-bernoulli"]], "mlx.core.random.categorical": [[95, "mlx-core-random-categorical"]], "mlx.core.random.gumbel": [[96, "mlx-core-random-gumbel"]], "mlx.core.random.key": [[97, "mlx-core-random-key"]], "mlx.core.random.multivariate_normal": [[98, "mlx-core-random-multivariate-normal"]], "mlx.core.random.normal": [[99, "mlx-core-random-normal"]], "mlx.core.random.randint": [[100, "mlx-core-random-randint"]], "mlx.core.random.seed": [[101, "mlx-core-random-seed"]], "mlx.core.random.split": [[102, "mlx-core-random-split"]], "mlx.core.random.truncated_normal": [[103, "mlx-core-random-truncated-normal"]], "mlx.core.random.uniform": [[104, "mlx-core-random-uniform"]], "mlx.core.reciprocal": [[105, "mlx-core-reciprocal"]], "mlx.core.remainder": [[106, "mlx-core-remainder"]], "mlx.core.repeat": [[107, "mlx-core-repeat"]], "mlx.core.reshape": [[108, "mlx-core-reshape"]], "mlx.core.right_shift": [[109, "mlx-core-right-shift"]], "mlx.core.round": [[110, "mlx-core-round"]], "mlx.core.rsqrt": [[111, "mlx-core-rsqrt"]], "mlx.core.save": [[112, "mlx-core-save"]], "mlx.core.save_gguf": [[113, "mlx-core-save-gguf"]], "mlx.core.save_safetensors": [[114, "mlx-core-save-safetensors"]], "mlx.core.savez": [[115, "mlx-core-savez"]], "mlx.core.savez_compressed": [[116, "mlx-core-savez-compressed"]], "mlx.core.set_default_device": [[117, "mlx-core-set-default-device"]], "mlx.core.set_default_stream": [[118, "mlx-core-set-default-stream"]], "mlx.core.sigmoid": [[119, "mlx-core-sigmoid"]], "mlx.core.sign": [[120, "mlx-core-sign"]], "mlx.core.sin": [[121, "mlx-core-sin"]], "mlx.core.sinh": [[122, "mlx-core-sinh"]], "mlx.core.softmax": [[123, "mlx-core-softmax"]], "mlx.core.sort": [[124, "mlx-core-sort"]], "mlx.core.split": [[125, "mlx-core-split"]], "mlx.core.sqrt": [[126, "mlx-core-sqrt"]], "mlx.core.square": [[127, "mlx-core-square"]], "mlx.core.squeeze": [[128, "mlx-core-squeeze"]], "mlx.core.stack": [[129, "mlx-core-stack"]], "mlx.core.std": [[130, "mlx-core-std"]], "mlx.core.stop_gradient": [[131, "mlx-core-stop-gradient"]], "mlx.core.stream": [[132, "mlx-core-stream"]], "mlx.core.subtract": [[133, "mlx-core-subtract"]], "mlx.core.sum": [[134, "mlx-core-sum"]], "mlx.core.swapaxes": [[135, "mlx-core-swapaxes"]], "mlx.core.synchronize": [[136, "mlx-core-synchronize"]], "mlx.core.take": [[137, "mlx-core-take"]], "mlx.core.take_along_axis": [[138, "mlx-core-take-along-axis"]], "mlx.core.tan": [[139, "mlx-core-tan"]], "mlx.core.tanh": [[140, "mlx-core-tanh"]], "mlx.core.tensordot": [[141, "mlx-core-tensordot"]], "mlx.core.tile": [[142, "mlx-core-tile"]], "mlx.core.topk": [[143, "mlx-core-topk"]], "mlx.core.trace": [[144, "mlx-core-trace"]], "mlx.core.transpose": [[145, "mlx-core-transpose"]], "mlx.core.tri": [[146, "mlx-core-tri"]], "mlx.core.tril": [[147, "mlx-core-tril"]], "mlx.core.triu": [[148, "mlx-core-triu"]], "mlx.core.value_and_grad": [[149, "mlx-core-value-and-grad"]], "mlx.core.var": [[150, "mlx-core-var"]], "mlx.core.view": [[151, "mlx-core-view"]], "mlx.core.vjp": [[152, "mlx-core-vjp"]], "mlx.core.vmap": [[153, "mlx-core-vmap"]], "mlx.core.where": [[154, "mlx-core-where"]], "mlx.core.zeros": [[155, "mlx-core-zeros"]], "mlx.core.zeros_like": [[156, "mlx-core-zeros-like"]], "mlx.nn.quantize": [[157, "mlx-nn-quantize"]], "mlx.nn.value_and_grad": [[158, "mlx-nn-value-and-grad"]], "mlx.optimizers.clip_grad_norm": [[159, "mlx-optimizers-clip-grad-norm"]], "mlx.utils.tree_flatten": [[160, "mlx-utils-tree-flatten"]], "mlx.utils.tree_map": [[161, "mlx-utils-tree-map"]], "mlx.utils.tree_map_with_path": [[162, "mlx-utils-tree-map-with-path"]], "mlx.utils.tree_reduce": [[163, "mlx-utils-tree-reduce"]], "mlx.utils.tree_unflatten": [[164, "mlx-utils-tree-unflatten"]], "mlx.core.Stream": [[165, "mlx-core-stream"]], "Array": [[166, "array"]], "Data Types": [[167, "data-types"]], "Supported Data Types": [[167, "id2"]], "Devices and Streams": [[168, "devices-and-streams"]], "Distributed Communication": [[169, "distributed-communication"], [321, "distributed-communication"]], "Fast": [[170, "fast"]], "FFT": [[171, "fft"]], "Linear Algebra": [[172, "linear-algebra"]], "Metal": [[173, "metal"]], "Neural Networks": [[174, "neural-networks"]], "Quick Start with Neural Networks": [[174, "quick-start-with-neural-networks"]], "The Module Class": [[174, "the-module-class"]], "Parameters": [[174, "parameters"]], "Updating the Parameters": [[174, "updating-the-parameters"]], "Inspecting Modules": [[174, "inspecting-modules"]], "Value and Grad": [[174, "value-and-grad"]], "mlx.nn.ALiBi": [[175, "mlx-nn-alibi"]], "mlx.nn.AvgPool1d": [[176, "mlx-nn-avgpool1d"]], "mlx.nn.AvgPool2d": [[177, "mlx-nn-avgpool2d"]], "mlx.nn.BatchNorm": [[178, "mlx-nn-batchnorm"]], "mlx.nn.Conv1d": [[179, "mlx-nn-conv1d"]], "mlx.nn.Conv2d": [[180, "mlx-nn-conv2d"]], "mlx.nn.Conv3d": [[181, "mlx-nn-conv3d"]], "mlx.nn.Dropout": [[182, "mlx-nn-dropout"]], "mlx.nn.Dropout2d": [[183, "mlx-nn-dropout2d"]], "mlx.nn.Dropout3d": [[184, "mlx-nn-dropout3d"]], "mlx.nn.Embedding": [[185, "mlx-nn-embedding"]], "mlx.nn.GELU": [[186, "mlx-nn-gelu"]], "mlx.nn.GLU": [[187, "mlx-nn-glu"]], "mlx.nn.GRU": [[188, "mlx-nn-gru"]], "mlx.nn.GroupNorm": [[189, "mlx-nn-groupnorm"]], "mlx.nn.HardShrink": [[190, "mlx-nn-hardshrink"]], "mlx.nn.HardTanh": [[191, "mlx-nn-hardtanh"]], "mlx.nn.Hardswish": [[192, "mlx-nn-hardswish"]], "mlx.nn.InstanceNorm": [[193, "mlx-nn-instancenorm"]], "mlx.nn.LSTM": [[194, "mlx-nn-lstm"]], "mlx.nn.LayerNorm": [[195, "mlx-nn-layernorm"]], "mlx.nn.LeakyReLU": [[196, "mlx-nn-leakyrelu"]], "mlx.nn.Linear": [[197, "mlx-nn-linear"]], "mlx.nn.MaxPool1d": [[198, "mlx-nn-maxpool1d"]], "mlx.nn.MaxPool2d": [[199, "mlx-nn-maxpool2d"]], "mlx.nn.Mish": [[200, "mlx-nn-mish"]], "mlx.nn.Module.apply": [[201, "mlx-nn-module-apply"]], "mlx.nn.Module.apply_to_modules": [[202, "mlx-nn-module-apply-to-modules"]], "mlx.nn.Module.children": [[203, "mlx-nn-module-children"]], "mlx.nn.Module.eval": [[204, "mlx-nn-module-eval"]], "mlx.nn.Module.filter_and_map": [[205, "mlx-nn-module-filter-and-map"]], "mlx.nn.Module.freeze": [[206, "mlx-nn-module-freeze"]], "mlx.nn.Module.leaf_modules": [[207, "mlx-nn-module-leaf-modules"]], "mlx.nn.Module.load_weights": [[208, "mlx-nn-module-load-weights"]], "mlx.nn.Module.modules": [[209, "mlx-nn-module-modules"]], "mlx.nn.Module.named_modules": [[210, "mlx-nn-module-named-modules"]], "mlx.nn.Module.parameters": [[211, "mlx-nn-module-parameters"]], "mlx.nn.Module.save_weights": [[212, "mlx-nn-module-save-weights"]], "mlx.nn.Module.set_dtype": [[213, "mlx-nn-module-set-dtype"]], "mlx.nn.Module.state": [[214, "mlx-nn-module-state"]], "mlx.nn.Module.train": [[215, "mlx-nn-module-train"]], "mlx.nn.Module.trainable_parameters": [[216, "mlx-nn-module-trainable-parameters"]], "mlx.nn.Module.training": [[217, "mlx-nn-module-training"]], "mlx.nn.Module.unfreeze": [[218, "mlx-nn-module-unfreeze"]], "mlx.nn.Module.update": [[219, "mlx-nn-module-update"]], "mlx.nn.Module.update_modules": [[220, "mlx-nn-module-update-modules"]], "mlx.nn.MultiHeadAttention": [[221, "mlx-nn-multiheadattention"]], "mlx.nn.PReLU": [[222, "mlx-nn-prelu"]], "mlx.nn.QuantizedEmbedding": [[223, "mlx-nn-quantizedembedding"]], "mlx.nn.QuantizedLinear": [[224, "mlx-nn-quantizedlinear"]], "mlx.nn.RMSNorm": [[225, "mlx-nn-rmsnorm"]], "mlx.nn.RNN": [[226, "mlx-nn-rnn"]], "mlx.nn.ReLU": [[227, "mlx-nn-relu"]], "mlx.nn.ReLU6": [[228, "mlx-nn-relu6"]], "mlx.nn.RoPE": [[229, "mlx-nn-rope"]], "mlx.nn.SELU": [[230, "mlx-nn-selu"]], "mlx.nn.Sequential": [[231, "mlx-nn-sequential"]], "mlx.nn.SiLU": [[232, "mlx-nn-silu"]], "mlx.nn.SinusoidalPositionalEncoding": [[233, "mlx-nn-sinusoidalpositionalencoding"]], "mlx.nn.Softmax": [[234, "mlx-nn-softmax"]], "mlx.nn.Softmin": [[235, "mlx-nn-softmin"]], "mlx.nn.Softplus": [[236, "mlx-nn-softplus"]], "mlx.nn.Softshrink": [[237, "mlx-nn-softshrink"]], "mlx.nn.Softsign": [[238, "mlx-nn-softsign"]], "mlx.nn.Step": [[239, "mlx-nn-step"]], "mlx.nn.Tanh": [[240, "mlx-nn-tanh"]], "mlx.nn.Transformer": [[241, "mlx-nn-transformer"]], "mlx.nn.Upsample": [[242, "mlx-nn-upsample"]], "mlx.nn.init.constant": [[243, "mlx-nn-init-constant"]], "mlx.nn.init.glorot_normal": [[244, "mlx-nn-init-glorot-normal"]], "mlx.nn.init.glorot_uniform": [[245, "mlx-nn-init-glorot-uniform"]], "mlx.nn.init.he_normal": [[246, "mlx-nn-init-he-normal"]], "mlx.nn.init.he_uniform": [[247, "mlx-nn-init-he-uniform"]], "mlx.nn.init.identity": [[248, "mlx-nn-init-identity"]], "mlx.nn.init.normal": [[249, "mlx-nn-init-normal"]], "mlx.nn.init.uniform": [[250, "mlx-nn-init-uniform"]], "mlx.nn.elu": [[251, "mlx-nn-elu"]], "mlx.nn.gelu": [[252, "mlx-nn-gelu"]], "mlx.nn.gelu_approx": [[253, "mlx-nn-gelu-approx"]], "mlx.nn.gelu_fast_approx": [[254, "mlx-nn-gelu-fast-approx"]], "mlx.nn.glu": [[255, "mlx-nn-glu"]], "mlx.nn.hard_shrink": [[256, "mlx-nn-hard-shrink"]], "mlx.nn.hard_tanh": [[257, "mlx-nn-hard-tanh"]], "mlx.nn.hardswish": [[258, "mlx-nn-hardswish"]], "mlx.nn.leaky_relu": [[259, "mlx-nn-leaky-relu"]], "mlx.nn.log_sigmoid": [[260, "mlx-nn-log-sigmoid"]], "mlx.nn.log_softmax": [[261, "mlx-nn-log-softmax"]], "mlx.nn.losses.binary_cross_entropy": [[262, "mlx-nn-losses-binary-cross-entropy"]], "mlx.nn.losses.cosine_similarity_loss": [[263, "mlx-nn-losses-cosine-similarity-loss"]], "mlx.nn.losses.cross_entropy": [[264, "mlx-nn-losses-cross-entropy"]], "mlx.nn.losses.gaussian_nll_loss": [[265, "mlx-nn-losses-gaussian-nll-loss"]], "mlx.nn.losses.hinge_loss": [[266, "mlx-nn-losses-hinge-loss"]], "mlx.nn.losses.huber_loss": [[267, "mlx-nn-losses-huber-loss"]], "mlx.nn.losses.kl_div_loss": [[268, "mlx-nn-losses-kl-div-loss"]], "mlx.nn.losses.l1_loss": [[269, "mlx-nn-losses-l1-loss"]], "mlx.nn.losses.log_cosh_loss": [[270, "mlx-nn-losses-log-cosh-loss"]], "mlx.nn.losses.margin_ranking_loss": [[271, "mlx-nn-losses-margin-ranking-loss"]], "mlx.nn.losses.mse_loss": [[272, "mlx-nn-losses-mse-loss"]], "mlx.nn.losses.nll_loss": [[273, "mlx-nn-losses-nll-loss"]], "mlx.nn.losses.smooth_l1_loss": [[274, "mlx-nn-losses-smooth-l1-loss"]], "mlx.nn.losses.triplet_loss": [[275, "mlx-nn-losses-triplet-loss"]], "mlx.nn.mish": [[276, "mlx-nn-mish"]], "mlx.nn.prelu": [[277, "mlx-nn-prelu"]], "mlx.nn.relu": [[278, "mlx-nn-relu"]], "mlx.nn.relu6": [[279, "mlx-nn-relu6"]], "mlx.nn.selu": [[280, "mlx-nn-selu"]], "mlx.nn.sigmoid": [[281, "mlx-nn-sigmoid"]], "mlx.nn.silu": [[282, "mlx-nn-silu"]], "mlx.nn.softmax": [[283, "mlx-nn-softmax"]], "mlx.nn.softmin": [[284, "mlx-nn-softmin"]], "mlx.nn.softplus": [[285, "mlx-nn-softplus"]], "mlx.nn.softshrink": [[286, "mlx-nn-softshrink"]], "mlx.nn.step": [[287, "mlx-nn-step"]], "mlx.nn.tanh": [[288, "mlx-nn-tanh"]], "Functions": [[289, "functions"]], "Initializers": [[290, "initializers"]], "Layers": [[291, "layers"]], "Loss Functions": [[292, "loss-functions"]], "Module": [[293, "module"]], "Operations": [[294, "operations"]], "Optimizers": [[295, "optimizers"]], "mlx.optimizers.AdaDelta": [[296, "mlx-optimizers-adadelta"]], "mlx.optimizers.Adafactor": [[297, "mlx-optimizers-adafactor"]], "mlx.optimizers.Adagrad": [[298, "mlx-optimizers-adagrad"]], "mlx.optimizers.Adam": [[299, "mlx-optimizers-adam"]], "mlx.optimizers.AdamW": [[300, "mlx-optimizers-adamw"]], "mlx.optimizers.Adamax": [[301, "mlx-optimizers-adamax"]], "mlx.optimizers.Lion": [[302, "mlx-optimizers-lion"]], "mlx.optimizers.Optimizer.apply_gradients": [[303, "mlx-optimizers-optimizer-apply-gradients"]], "mlx.optimizers.Optimizer.init": [[304, "mlx-optimizers-optimizer-init"]], "mlx.optimizers.Optimizer.state": [[305, "mlx-optimizers-optimizer-state"]], "mlx.optimizers.Optimizer.update": [[306, "mlx-optimizers-optimizer-update"]], "mlx.optimizers.RMSprop": [[307, "mlx-optimizers-rmsprop"]], "mlx.optimizers.SGD": [[308, "mlx-optimizers-sgd"]], "mlx.optimizers.cosine_decay": [[309, "mlx-optimizers-cosine-decay"]], "mlx.optimizers.exponential_decay": [[310, "mlx-optimizers-exponential-decay"]], "mlx.optimizers.join_schedules": [[311, "mlx-optimizers-join-schedules"]], "mlx.optimizers.linear_schedule": [[312, "mlx-optimizers-linear-schedule"]], "mlx.optimizers.step_decay": [[313, "mlx-optimizers-step-decay"]], "Common Optimizers": [[314, "common-optimizers"]], "Optimizer": [[315, "optimizer"]], "Schedulers": [[316, "schedulers"]], "Random": [[317, "random"]], "Transforms": [[318, "transforms"]], "Tree Utils": [[319, "tree-utils"]], "Compilation": [[320, "compilation"]], "Basics of Compile": [[320, "basics-of-compile"]], "Example Speedup": [[320, "example-speedup"]], "Debugging": [[320, "debugging"]], "Pure Functions": [[320, "pure-functions"]], "Compiling Training Graphs": [[320, "compiling-training-graphs"]], "Transformations with Compile": [[320, "transformations-with-compile"]], "Getting Started": [[321, "getting-started"]], "Installing MPI": [[321, "installing-mpi"]], "Setting up Remote Hosts": [[321, "setting-up-remote-hosts"]], "Training Example": [[321, "training-example"]], "Tuning All Reduce": [[321, "tuning-all-reduce"]], "Function Transforms": [[322, "function-transforms"]], "Automatic Differentiation": [[322, "automatic-differentiation"]], "Automatic Vectorization": [[322, "automatic-vectorization"]], "Indexing Arrays": [[323, "indexing-arrays"]], "Differences from NumPy": [[323, "differences-from-numpy"]], "In Place Updates": [[323, "in-place-updates"]], "Lazy Evaluation": [[324, "lazy-evaluation"]], "Why Lazy Evaluation": [[324, "why-lazy-evaluation"]], "Transforming Compute Graphs": [[324, "transforming-compute-graphs"]], "Only Compute What You Use": [[324, "only-compute-what-you-use"]], "When to Evaluate": [[324, "when-to-evaluate"]], "Conversion to NumPy and Other Frameworks": [[325, "conversion-to-numpy-and-other-frameworks"]], "PyTorch": [[325, "pytorch"]], "JAX": [[325, "jax"]], "TensorFlow": [[325, "tensorflow"]], "Quick Start Guide": [[326, "quick-start-guide"]], "Basics": [[326, "basics"]], "Function and Graph Transformations": [[326, "function-and-graph-transformations"]], "Saving and Loading Arrays": [[327, "saving-and-loading-arrays"]], "Serialization Formats": [[327, "id1"]], "Unified Memory": [[328, "unified-memory"]], "A Simple Example": [[328, "a-simple-example"]], "Using Streams": [[329, "using-streams"]], "Specifying the Stream": [[329, "specifying-the-stream"]]}, "indexentries": {"erfinv() (in module mlx.core)": [[1, "mlx.core.erfinv"]], "eval() (in module mlx.core)": [[2, "mlx.core.eval"]], "exp() (in module mlx.core)": [[3, "mlx.core.exp"]], "expand_dims() (in module mlx.core)": [[4, "mlx.core.expand_dims"]], "expm1() (in module mlx.core)": [[5, "mlx.core.expm1"]], "eye() (in module mlx.core)": [[6, "mlx.core.eye"]], "layer_norm() (in module mlx.core.fast)": [[7, "mlx.core.fast.layer_norm"]], "rms_norm() (in module mlx.core.fast)": [[8, "mlx.core.fast.rms_norm"]], "rope() (in module mlx.core.fast)": [[9, "mlx.core.fast.rope"]], "scaled_dot_product_attention() (in module mlx.core.fast)": [[10, "mlx.core.fast.scaled_dot_product_attention"]], "fft() (in module mlx.core.fft)": [[11, "mlx.core.fft.fft"]], "fft2() (in module mlx.core.fft)": [[12, "mlx.core.fft.fft2"]], "fftn() (in module mlx.core.fft)": [[13, "mlx.core.fft.fftn"]], "ifft() (in module mlx.core.fft)": [[14, "mlx.core.fft.ifft"]], "ifft2() (in module mlx.core.fft)": [[15, "mlx.core.fft.ifft2"]], "ifftn() (in module mlx.core.fft)": [[16, "mlx.core.fft.ifftn"]], "irfft() (in module mlx.core.fft)": [[17, "mlx.core.fft.irfft"]], "irfft2() (in module mlx.core.fft)": [[18, "mlx.core.fft.irfft2"]], "irfftn() (in module mlx.core.fft)": [[19, "mlx.core.fft.irfftn"]], "rfft() (in module mlx.core.fft)": [[20, "mlx.core.fft.rfft"]], "rfft2() (in module mlx.core.fft)": [[21, "mlx.core.fft.rfft2"]], "rfftn() (in module mlx.core.fft)": [[22, "mlx.core.fft.rfftn"]], "flatten() (in module mlx.core)": [[23, "mlx.core.flatten"]], "floor() (in module mlx.core)": [[24, "mlx.core.floor"]], "floor_divide() (in module mlx.core)": [[25, "mlx.core.floor_divide"]], "full() (in module mlx.core)": [[26, "mlx.core.full"]], "gather_mm() (in module mlx.core)": [[27, "mlx.core.gather_mm"]], "gather_qmm() (in module mlx.core)": [[28, "mlx.core.gather_qmm"]], "grad() (in module mlx.core)": [[29, "mlx.core.grad"]], "greater() (in module mlx.core)": [[30, "mlx.core.greater"]], "greater_equal() (in module mlx.core)": [[31, "mlx.core.greater_equal"]], "hadamard_transform() (in module mlx.core)": [[32, "mlx.core.hadamard_transform"]], "identity() (in module mlx.core)": [[33, "mlx.core.identity"]], "inner() (in module mlx.core)": [[34, "mlx.core.inner"]], "isclose() (in module mlx.core)": [[35, "mlx.core.isclose"]], "isinf() (in module mlx.core)": [[36, "mlx.core.isinf"]], "isnan() (in module mlx.core)": [[37, "mlx.core.isnan"]], "isneginf() (in module mlx.core)": [[38, "mlx.core.isneginf"]], "isposinf() (in module mlx.core)": [[39, "mlx.core.isposinf"]], "issubdtype() (in module mlx.core)": [[40, "mlx.core.issubdtype"]], "jvp() (in module mlx.core)": [[41, "mlx.core.jvp"]], "left_shift() (in module mlx.core)": [[42, "mlx.core.left_shift"]], "less() (in module mlx.core)": [[43, "mlx.core.less"]], "less_equal() (in module mlx.core)": [[44, "mlx.core.less_equal"]], "cholesky() (in module mlx.core.linalg)": [[45, "mlx.core.linalg.cholesky"]], "inv() (in module mlx.core.linalg)": [[46, "mlx.core.linalg.inv"]], "norm() (in module mlx.core.linalg)": [[47, "mlx.core.linalg.norm"]], "qr() (in module mlx.core.linalg)": [[48, "mlx.core.linalg.qr"]], "svd() (in module mlx.core.linalg)": [[49, "mlx.core.linalg.svd"]], "linspace() (in module mlx.core)": [[50, "mlx.core.linspace"]], "load() (in module mlx.core)": [[51, "mlx.core.load"]], "log() (in module mlx.core)": [[52, "mlx.core.log"]], "log10() (in module mlx.core)": [[53, "mlx.core.log10"]], "log1p() (in module mlx.core)": [[54, "mlx.core.log1p"]], "log2() (in module mlx.core)": [[55, "mlx.core.log2"]], "logaddexp() (in module mlx.core)": [[56, "mlx.core.logaddexp"]], "logical_and() (in module mlx.core)": [[57, "mlx.core.logical_and"]], "logical_not() (in module mlx.core)": [[58, "mlx.core.logical_not"]], "logical_or() (in module mlx.core)": [[59, "mlx.core.logical_or"]], "logsumexp() (in module mlx.core)": [[60, "mlx.core.logsumexp"]], "matmul() (in module mlx.core)": [[61, "mlx.core.matmul"]], "max() (in module mlx.core)": [[62, "mlx.core.max"]], "maximum() (in module mlx.core)": [[63, "mlx.core.maximum"]], "mean() (in module mlx.core)": [[64, "mlx.core.mean"]], "meshgrid() (in module mlx.core)": [[65, "mlx.core.meshgrid"]], "clear_cache() (in module mlx.core.metal)": [[66, "mlx.core.metal.clear_cache"]], "device_info() (in module mlx.core.metal)": [[67, "mlx.core.metal.device_info"]], "get_active_memory() (in module mlx.core.metal)": [[68, "mlx.core.metal.get_active_memory"]], "get_cache_memory() (in module mlx.core.metal)": [[69, "mlx.core.metal.get_cache_memory"]], "get_peak_memory() (in module mlx.core.metal)": [[70, "mlx.core.metal.get_peak_memory"]], "is_available() (in module mlx.core.metal)": [[71, "mlx.core.metal.is_available"]], "reset_peak_memory() (in module mlx.core.metal)": [[72, "mlx.core.metal.reset_peak_memory"]], "set_cache_limit() (in module mlx.core.metal)": [[73, "mlx.core.metal.set_cache_limit"]], "set_memory_limit() (in module mlx.core.metal)": [[74, "mlx.core.metal.set_memory_limit"]], "start_capture() (in module mlx.core.metal)": [[75, "mlx.core.metal.start_capture"]], "stop_capture() (in module mlx.core.metal)": [[76, "mlx.core.metal.stop_capture"]], "min() (in module mlx.core)": [[77, "mlx.core.min"]], "minimum() (in module mlx.core)": [[78, "mlx.core.minimum"]], "moveaxis() (in module mlx.core)": [[79, "mlx.core.moveaxis"]], "multiply() (in module mlx.core)": [[80, "mlx.core.multiply"]], "negative() (in module mlx.core)": [[81, "mlx.core.negative"]], "new_stream() (in module mlx.core)": [[82, "mlx.core.new_stream"]], "not_equal() (in module mlx.core)": [[83, "mlx.core.not_equal"]], "ones() (in module mlx.core)": [[84, "mlx.core.ones"]], "ones_like() (in module mlx.core)": [[85, "mlx.core.ones_like"]], "outer() (in module mlx.core)": [[86, "mlx.core.outer"]], "pad() (in module mlx.core)": [[87, "mlx.core.pad"]], "partition() (in module mlx.core)": [[88, "mlx.core.partition"]], "power() (in module mlx.core)": [[89, "mlx.core.power"]], "prod() (in module mlx.core)": [[90, "mlx.core.prod"]], "quantize() (in module mlx.core)": [[91, "mlx.core.quantize"]], "quantized_matmul() (in module mlx.core)": [[92, "mlx.core.quantized_matmul"]], "radians() (in module mlx.core)": [[93, "mlx.core.radians"]], "bernoulli() (in module mlx.core.random)": [[94, "mlx.core.random.bernoulli"]], "categorical() (in module mlx.core.random)": [[95, "mlx.core.random.categorical"]], "gumbel() (in module mlx.core.random)": [[96, "mlx.core.random.gumbel"]], "key() (in module mlx.core.random)": [[97, "mlx.core.random.key"]], "multivariate_normal() (in module mlx.core.random)": [[98, "mlx.core.random.multivariate_normal"]], "normal() (in module mlx.core.random)": [[99, "mlx.core.random.normal"]], "randint() (in module mlx.core.random)": [[100, "mlx.core.random.randint"]], "seed() (in module mlx.core.random)": [[101, "mlx.core.random.seed"]], "split() (in module mlx.core.random)": [[102, "mlx.core.random.split"]], "truncated_normal() (in module mlx.core.random)": [[103, "mlx.core.random.truncated_normal"]], "uniform() (in module mlx.core.random)": [[104, "mlx.core.random.uniform"]], "reciprocal() (in module mlx.core)": [[105, "mlx.core.reciprocal"]], "remainder() (in module mlx.core)": [[106, "mlx.core.remainder"]], "repeat() (in module mlx.core)": [[107, "mlx.core.repeat"]], "reshape() (in module mlx.core)": [[108, "mlx.core.reshape"]], "right_shift() (in module mlx.core)": [[109, "mlx.core.right_shift"]], "round() (in module mlx.core)": [[110, "mlx.core.round"]], "rsqrt() (in module mlx.core)": [[111, "mlx.core.rsqrt"]], "save() (in module mlx.core)": [[112, "mlx.core.save"]], "save_gguf() (in module mlx.core)": [[113, "mlx.core.save_gguf"]], "save_safetensors() (in module mlx.core)": [[114, "mlx.core.save_safetensors"]], "savez() (in module mlx.core)": [[115, "mlx.core.savez"]], "savez_compressed() (in module mlx.core)": [[116, "mlx.core.savez_compressed"]], "set_default_device() (in module mlx.core)": [[117, "mlx.core.set_default_device"]], "set_default_stream() (in module mlx.core)": [[118, "mlx.core.set_default_stream"]], "sigmoid() (in module mlx.core)": [[119, "mlx.core.sigmoid"]], "sign() (in module mlx.core)": [[120, "mlx.core.sign"]], "sin() (in module mlx.core)": [[121, "mlx.core.sin"]], "sinh() (in module mlx.core)": [[122, "mlx.core.sinh"]], "softmax() (in module mlx.core)": [[123, "mlx.core.softmax"]], "sort() (in module mlx.core)": [[124, "mlx.core.sort"]], "split() (in module mlx.core)": [[125, "mlx.core.split"]], "sqrt() (in module mlx.core)": [[126, "mlx.core.sqrt"]], "square() (in module mlx.core)": [[127, "mlx.core.square"]], "squeeze() (in module mlx.core)": [[128, "mlx.core.squeeze"]], "stack() (in module mlx.core)": [[129, "mlx.core.stack"]], "std() (in module mlx.core)": [[130, "mlx.core.std"]], "stop_gradient() (in module mlx.core)": [[131, "mlx.core.stop_gradient"]], "stream() (in module mlx.core)": [[132, "mlx.core.stream"]], "subtract() (in module mlx.core)": [[133, "mlx.core.subtract"]], "sum() (in module mlx.core)": [[134, "mlx.core.sum"]], "swapaxes() (in module mlx.core)": [[135, "mlx.core.swapaxes"]], "synchronize() (in module mlx.core)": [[136, "mlx.core.synchronize"]], "take() (in module mlx.core)": [[137, "mlx.core.take"]], "take_along_axis() (in module mlx.core)": [[138, "mlx.core.take_along_axis"]], "tan() (in module mlx.core)": [[139, "mlx.core.tan"]], "tanh() (in module mlx.core)": [[140, "mlx.core.tanh"]], "tensordot() (in module mlx.core)": [[141, "mlx.core.tensordot"]], "tile() (in module mlx.core)": [[142, "mlx.core.tile"]], "topk() (in module mlx.core)": [[143, "mlx.core.topk"]], "trace() (in module mlx.core)": [[144, "mlx.core.trace"]], "transpose() (in module mlx.core)": [[145, "mlx.core.transpose"]], "tri() (in module mlx.core)": [[146, "mlx.core.tri"]], "tril() (in module mlx.core)": [[147, "mlx.core.tril"]], "triu() (in module mlx.core)": [[148, "mlx.core.triu"]], "value_and_grad() (in module mlx.core)": [[149, "mlx.core.value_and_grad"]], "var() (in module mlx.core)": [[150, "mlx.core.var"]], "view() (in module mlx.core)": [[151, "mlx.core.view"]], "vjp() (in module mlx.core)": [[152, "mlx.core.vjp"]], "vmap() (in module mlx.core)": [[153, "mlx.core.vmap"]], "where() (in module mlx.core)": [[154, "mlx.core.where"]], "zeros() (in module mlx.core)": [[155, "mlx.core.zeros"]], "zeros_like() (in module mlx.core)": [[156, "mlx.core.zeros_like"]], "quantize() (in module mlx.nn)": [[157, "mlx.nn.quantize"]], "value_and_grad() (in module mlx.nn)": [[158, "mlx.nn.value_and_grad"]], "clip_grad_norm() (in module mlx.optimizers)": [[159, "mlx.optimizers.clip_grad_norm"]], "tree_flatten() (in module mlx.utils)": [[160, "mlx.utils.tree_flatten"]], "tree_map() (in module mlx.utils)": [[161, "mlx.utils.tree_map"]], "tree_map_with_path() (in module mlx.utils)": [[162, "mlx.utils.tree_map_with_path"]], "tree_reduce() (in module mlx.utils)": [[163, "mlx.utils.tree_reduce"]], "tree_unflatten() (in module mlx.utils)": [[164, "mlx.utils.tree_unflatten"]], "stream (class in mlx.core)": [[165, "mlx.core.Stream"]], "__init__() (stream method)": [[165, "mlx.core.Stream.__init__"]], "alibi (class in mlx.nn)": [[175, "mlx.nn.ALiBi"]], "avgpool1d (class in mlx.nn)": [[176, "mlx.nn.AvgPool1d"]], "avgpool2d (class in mlx.nn)": [[177, "mlx.nn.AvgPool2d"]], "batchnorm (class in mlx.nn)": [[178, "mlx.nn.BatchNorm"]], "conv1d (class in mlx.nn)": [[179, "mlx.nn.Conv1d"]], "conv2d (class in mlx.nn)": [[180, "mlx.nn.Conv2d"]], "conv3d (class in mlx.nn)": [[181, "mlx.nn.Conv3d"]], "dropout (class in mlx.nn)": [[182, "mlx.nn.Dropout"]], "dropout2d (class in mlx.nn)": [[183, "mlx.nn.Dropout2d"]], "dropout3d (class in mlx.nn)": [[184, "mlx.nn.Dropout3d"]], "embedding (class in mlx.nn)": [[185, "mlx.nn.Embedding"]], "gelu (class in mlx.nn)": [[186, "mlx.nn.GELU"], [252, "mlx.nn.gelu"]], "glu (class in mlx.nn)": [[187, "mlx.nn.GLU"], [255, "mlx.nn.glu"]], "gru (class in mlx.nn)": [[188, "mlx.nn.GRU"]], "groupnorm (class in mlx.nn)": [[189, "mlx.nn.GroupNorm"]], "hardshrink (class in mlx.nn)": [[190, "mlx.nn.HardShrink"]], "hardtanh (class in mlx.nn)": [[191, "mlx.nn.HardTanh"]], "hardswish (class in mlx.nn)": [[192, "mlx.nn.Hardswish"], [258, "mlx.nn.hardswish"]], "instancenorm (class in mlx.nn)": [[193, "mlx.nn.InstanceNorm"]], "lstm (class in mlx.nn)": [[194, "mlx.nn.LSTM"]], "layernorm (class in mlx.nn)": [[195, "mlx.nn.LayerNorm"]], "leakyrelu (class in mlx.nn)": [[196, "mlx.nn.LeakyReLU"]], "linear (class in mlx.nn)": [[197, "mlx.nn.Linear"]], "maxpool1d (class in mlx.nn)": [[198, "mlx.nn.MaxPool1d"]], "maxpool2d (class in mlx.nn)": [[199, "mlx.nn.MaxPool2d"]], "mish (class in mlx.nn)": [[200, "mlx.nn.Mish"], [276, "mlx.nn.mish"]], "apply() (module method)": [[201, "mlx.nn.Module.apply"]], "apply_to_modules() (module method)": [[202, "mlx.nn.Module.apply_to_modules"]], "children() (module method)": [[203, "mlx.nn.Module.children"]], "eval() (module method)": [[204, "mlx.nn.Module.eval"]], "filter_and_map() (module method)": [[205, "mlx.nn.Module.filter_and_map"]], "freeze() (module method)": [[206, "mlx.nn.Module.freeze"]], "leaf_modules() (module method)": [[207, "mlx.nn.Module.leaf_modules"]], "load_weights() (module method)": [[208, "mlx.nn.Module.load_weights"]], "modules() (module method)": [[209, "mlx.nn.Module.modules"]], "named_modules() (module method)": [[210, "mlx.nn.Module.named_modules"]], "parameters() (module method)": [[211, "mlx.nn.Module.parameters"]], "save_weights() (module method)": [[212, "mlx.nn.Module.save_weights"]], "set_dtype() (module method)": [[213, "mlx.nn.Module.set_dtype"]], "state (module property)": [[214, "mlx.nn.Module.state"]], "train() (module method)": [[215, "mlx.nn.Module.train"]], "trainable_parameters() (module method)": [[216, "mlx.nn.Module.trainable_parameters"]], "training (module property)": [[217, "mlx.nn.Module.training"]], "unfreeze() (module method)": [[218, "mlx.nn.Module.unfreeze"]], "update() (module method)": [[219, "mlx.nn.Module.update"]], "update_modules() (module method)": [[220, "mlx.nn.Module.update_modules"]], "multiheadattention (class in mlx.nn)": [[221, "mlx.nn.MultiHeadAttention"]], "prelu (class in mlx.nn)": [[222, "mlx.nn.PReLU"], [277, "mlx.nn.prelu"]], "quantizedembedding (class in mlx.nn)": [[223, "mlx.nn.QuantizedEmbedding"]], "quantizedlinear (class in mlx.nn)": [[224, "mlx.nn.QuantizedLinear"]], "rmsnorm (class in mlx.nn)": [[225, "mlx.nn.RMSNorm"]], "rnn (class in mlx.nn)": [[226, "mlx.nn.RNN"]], "relu (class in mlx.nn)": [[227, "mlx.nn.ReLU"], [278, "mlx.nn.relu"]], "relu6 (class in mlx.nn)": [[228, "mlx.nn.ReLU6"], [279, "mlx.nn.relu6"]], "rope (class in mlx.nn)": [[229, "mlx.nn.RoPE"]], "selu (class in mlx.nn)": [[230, "mlx.nn.SELU"], [280, "mlx.nn.selu"]], "sequential (class in mlx.nn)": [[231, "mlx.nn.Sequential"]], "silu (class in mlx.nn)": [[232, "mlx.nn.SiLU"], [282, "mlx.nn.silu"]], "sinusoidalpositionalencoding (class in mlx.nn)": [[233, "mlx.nn.SinusoidalPositionalEncoding"]], "softmax (class in mlx.nn)": [[234, "mlx.nn.Softmax"], [283, "mlx.nn.softmax"]], "softmin (class in mlx.nn)": [[235, "mlx.nn.Softmin"], [284, "mlx.nn.softmin"]], "softplus (class in mlx.nn)": [[236, "mlx.nn.Softplus"], [285, "mlx.nn.softplus"]], "softshrink (class in mlx.nn)": [[237, "mlx.nn.Softshrink"], [286, "mlx.nn.softshrink"]], "softsign (class in mlx.nn)": [[238, "mlx.nn.Softsign"]], "step (class in mlx.nn)": [[239, "mlx.nn.Step"], [287, "mlx.nn.step"]], "tanh (class in mlx.nn)": [[240, "mlx.nn.Tanh"], [288, "mlx.nn.tanh"]], "transformer (class in mlx.nn)": [[241, "mlx.nn.Transformer"]], "upsample (class in mlx.nn)": [[242, "mlx.nn.Upsample"]], "constant() (in module mlx.nn.init)": [[243, "mlx.nn.init.constant"]], "glorot_normal() (in module mlx.nn.init)": [[244, "mlx.nn.init.glorot_normal"]], "glorot_uniform() (in module mlx.nn.init)": [[245, "mlx.nn.init.glorot_uniform"]], "he_normal() (in module mlx.nn.init)": [[246, "mlx.nn.init.he_normal"]], "he_uniform() (in module mlx.nn.init)": [[247, "mlx.nn.init.he_uniform"]], "identity() (in module mlx.nn.init)": [[248, "mlx.nn.init.identity"]], "normal() (in module mlx.nn.init)": [[249, "mlx.nn.init.normal"]], "uniform() (in module mlx.nn.init)": [[250, "mlx.nn.init.uniform"]], "elu (class in mlx.nn)": [[251, "mlx.nn.elu"]], "gelu_approx (class in mlx.nn)": [[253, "mlx.nn.gelu_approx"]], "gelu_fast_approx (class in mlx.nn)": [[254, "mlx.nn.gelu_fast_approx"]], "hard_shrink (class in mlx.nn)": [[256, "mlx.nn.hard_shrink"]], "hard_tanh (class in mlx.nn)": [[257, "mlx.nn.hard_tanh"]], "leaky_relu (class in mlx.nn)": [[259, "mlx.nn.leaky_relu"]], "log_sigmoid (class in mlx.nn)": [[260, "mlx.nn.log_sigmoid"]], "log_softmax (class in mlx.nn)": [[261, "mlx.nn.log_softmax"]], "binary_cross_entropy (class in mlx.nn.losses)": [[262, "mlx.nn.losses.binary_cross_entropy"]], "cosine_similarity_loss (class in mlx.nn.losses)": [[263, "mlx.nn.losses.cosine_similarity_loss"]], "cross_entropy (class in mlx.nn.losses)": [[264, "mlx.nn.losses.cross_entropy"]], "gaussian_nll_loss (class in mlx.nn.losses)": [[265, "mlx.nn.losses.gaussian_nll_loss"]], "hinge_loss (class in mlx.nn.losses)": [[266, "mlx.nn.losses.hinge_loss"]], "huber_loss (class in mlx.nn.losses)": [[267, "mlx.nn.losses.huber_loss"]], "kl_div_loss (class in mlx.nn.losses)": [[268, "mlx.nn.losses.kl_div_loss"]], "l1_loss (class in mlx.nn.losses)": [[269, "mlx.nn.losses.l1_loss"]], "log_cosh_loss (class in mlx.nn.losses)": [[270, "mlx.nn.losses.log_cosh_loss"]], "margin_ranking_loss (class in mlx.nn.losses)": [[271, "mlx.nn.losses.margin_ranking_loss"]], "mse_loss (class in mlx.nn.losses)": [[272, "mlx.nn.losses.mse_loss"]], "nll_loss (class in mlx.nn.losses)": [[273, "mlx.nn.losses.nll_loss"]], "smooth_l1_loss (class in mlx.nn.losses)": [[274, "mlx.nn.losses.smooth_l1_loss"]], "triplet_loss (class in mlx.nn.losses)": [[275, "mlx.nn.losses.triplet_loss"]], "sigmoid (class in mlx.nn)": [[281, "mlx.nn.sigmoid"]], "module (class in mlx.nn)": [[293, "mlx.nn.Module"]], "adadelta (class in mlx.optimizers)": [[296, "mlx.optimizers.AdaDelta"]], "adafactor (class in mlx.optimizers)": [[297, "mlx.optimizers.Adafactor"]], "adagrad (class in mlx.optimizers)": [[298, "mlx.optimizers.Adagrad"]], "adam (class in mlx.optimizers)": [[299, "mlx.optimizers.Adam"]], "adamw (class in mlx.optimizers)": [[300, "mlx.optimizers.AdamW"]], "adamax (class in mlx.optimizers)": [[301, "mlx.optimizers.Adamax"]], "lion (class in mlx.optimizers)": [[302, "mlx.optimizers.Lion"]], "apply_gradients() (optimizer method)": [[303, "mlx.optimizers.Optimizer.apply_gradients"]], "init() (optimizer method)": [[304, "mlx.optimizers.Optimizer.init"]], "state (optimizer property)": [[305, "mlx.optimizers.Optimizer.state"]], "update() (optimizer method)": [[306, "mlx.optimizers.Optimizer.update"]], "rmsprop (class in mlx.optimizers)": [[307, "mlx.optimizers.RMSprop"]], "sgd (class in mlx.optimizers)": [[308, "mlx.optimizers.SGD"]], "cosine_decay() (in module mlx.optimizers)": [[309, "mlx.optimizers.cosine_decay"]], "exponential_decay() (in module mlx.optimizers)": [[310, "mlx.optimizers.exponential_decay"]], "join_schedules() (in module mlx.optimizers)": [[311, "mlx.optimizers.join_schedules"]], "linear_schedule() (in module mlx.optimizers)": [[312, "mlx.optimizers.linear_schedule"]], "step_decay() (in module mlx.optimizers)": [[313, "mlx.optimizers.step_decay"]], "optimizer (class in mlx.optimizers)": [[315, "mlx.optimizers.Optimizer"]]}})